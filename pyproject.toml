[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "prompt-decorators"
description = "A framework for defining, managing, and applying prompt decorators to enhance interactions with LLMs"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Daniel Bentes", email = "your.email@example.com"},
]
maintainers = [
    {name = "Daniel Bentes", email = "your.email@example.com"},
]
keywords = ["llm", "prompt engineering", "nlp", "ai", "language models", "decorators"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dynamic = ["version"]

dependencies = [
    "pydantic>=2.0.0",
    "typing_extensions>=4.0.0",
    "jsonschema>=4.0.0",
    "importlib-metadata>=4.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "isort>=5.0.0",
    "mypy>=1.0.0",
    "ruff>=0.0.267",
]
docs = [
    "mkdocs>=1.4.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings>=0.22.0",
    "mkdocstrings-python>=1.0.0",
]
langchain = [
    "langchain>=0.0.200",
]
openai = [
    "openai>=1.0.0",
]
anthropic = [
    "anthropic>=0.5.0",
]
all = [
    "prompt-decorators[dev,docs,langchain,openai,anthropic]",
]

[project.urls]
"Documentation" = "https://yourusername.github.io/prompt-decorators/"
"Source" = "https://github.com/yourusername/prompt-decorators"
"Issue Tracker" = "https://github.com/yourusername/prompt-decorators/issues"

[tool.setuptools]
packages = ["prompt_decorators"]

[tool.setuptools.package-data]
"prompt_decorators" = ["py.typed"]
"prompt_decorators.registry" = ["*.json"]

[tool.setuptools_scm]
write_to = "prompt_decorators/_version.py"

[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

[tool.ruff]
line-length = 88
target-version = "py38"
select = ["E", "F", "B", "W", "I", "N", "D", "UP", "ANN", "C4", "SIM", "ARG"]
ignore = ["B905", "ANN101", "ANN102"]

[tool.ruff.per-file-ignores]
"tests/*" = ["ANN", "D"]

[tool.ruff.pydocstyle]
convention = "google"