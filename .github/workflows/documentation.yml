name: Documentation Verification

on:
  push:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'prompt_decorators/**'
      - 'registry/**'
      - 'mkdocs.yml'
      - '.github/workflows/documentation.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'prompt_decorators/**'
      - 'registry/**'
      - 'mkdocs.yml'
      - '.github/workflows/documentation.yml'
  workflow_dispatch:

jobs:
  verify-documentation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for git-revision-date-localized-plugin

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install
          # Install all requirements explicitly to ensure they're properly installed
          pip install mkdocs>=1.5.0
          pip install mkdocs-material>=9.0.0
          pip install mkdocs-awesome-pages-plugin==2.10.1
          pip install mkdocs-autolinks-plugin>=0.7.0
          pip install mkdocs-git-revision-date-localized-plugin>=1.2.0
          pip install mkdocs-minify-plugin>=0.7.0
          pip install mkdocstrings>=0.24.0
          pip install mkdocstrings-python>=1.7.0
          # Install the rest of the requirements
          pip install -r docs/requirements.txt
          pip install pytest mypy  # Ensure pytest and mypy are available

      - name: Ensure awesome-pages plugin is installed
        run: |
          echo "Ensuring awesome-pages plugin is installed"
          pip install --force-reinstall mkdocs-awesome-pages-plugin==2.10.1
          pip show mkdocs-awesome-pages-plugin
          # Run our verification script
          python scripts/verify_awesome_pages.py
          # Make sure the plugin is in the Python path
          export PYTHONPATH=$PYTHONPATH:$(pip show mkdocs-awesome-pages-plugin | grep Location | awk '{print $2}')
          echo "PYTHONPATH=$PYTHONPATH" >> $GITHUB_ENV
          # Verify the plugin can be imported
          python -c "import mkdocs_awesome_pages_plugin; print(f'Plugin version: {mkdocs_awesome_pages_plugin.__version__}')"

      - name: Debug installed plugins
        run: |
          echo "Checking if awesome-pages plugin is installed:"
          pip show mkdocs-awesome-pages-plugin
          echo "Checking all installed mkdocs plugins:"
          pip list | grep mkdocs
          echo "Running plugin check script:"
          python scripts/check_mkdocs_plugins.py

      - name: Verify documentation
        run: |
          python scripts/verify_documentation.py

      - name: Build documentation
        run: |
          mkdocs build --strict

      - name: Deploy documentation preview
        if: github.event_name == 'pull_request'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
          destination_dir: pr-preview/${{ github.event.pull_request.number }}

      - name: Comment on PR with preview link
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            const repoName = context.repo.repo;
            const ownerName = context.repo.owner;

            const previewUrl = `https://${ownerName}.github.io/${repoName}/pr-preview/${prNumber}/`;

            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: ownerName,
              repo: repoName,
              body: `ðŸ“š Documentation preview is available at: [${previewUrl}](${previewUrl})`
            });
