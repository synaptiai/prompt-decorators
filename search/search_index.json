{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Prompt Decorators","text":"<p>Welcome to the Prompt Decorators documentation! This framework provides a structured way to enhance prompts for Large Language Models (LLMs) through the application of modular, reusable \"decorators.\"</p>"},{"location":"#what-is-prompt-decorators","title":"What is Prompt Decorators?","text":"<p>Prompt Decorators is a Python framework that allows you to apply various \"decorators\" to your prompts, each adding specific functionality or behavior. This approach makes prompt engineering more modular, reusable, and maintainable.</p> <p>Key features include:</p> <ul> <li>Modular Prompt Engineering: Apply specific prompt techniques independently</li> <li>Decorator Registry: Discover and use decorators dynamically</li> <li>Compatibility Checking: Ensure decorators work well together</li> <li>Dynamic Implementation: Runtime loading of decorators from definitions</li> <li>API Integration: Work with multiple LLM providers</li> <li>MCP Integration: Integration with the Model Context Protocol</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<pre><code>pip install prompt-decorators\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code>from prompt_decorators import apply_dynamic_decorators, create_decorator_instance\n\n# Using inline decorator syntax\nprompt = \"\"\"\n+++Reasoning(depth=\"comprehensive\")\n+++OutputFormat(format=\"markdown\")\nExplain quantum entanglement.\n\"\"\"\ndecorated_prompt = apply_dynamic_decorators(prompt)\n\n# Or using programmatic approach\nreasoning = create_decorator_instance(\"Reasoning\", depth=\"comprehensive\")\noutput_format = create_decorator_instance(\"OutputFormat\", format=\"markdown\")\n\nprompt = \"Explain quantum entanglement.\"\ndecorated_prompt = output_format(reasoning(prompt))\n\n# Use the decorated prompt with your favorite LLM API\n# ...\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":""},{"location":"#guides","title":"Guides","text":"<ul> <li>Installation - How to install the framework</li> <li>Quickstart - Get up and running quickly</li> <li>Core Concepts - Core concepts and design philosophy</li> <li>Creating Decorators - Create your own decorators</li> <li>Compatibility - Compatibility with different LLM providers</li> </ul>"},{"location":"#project-information","title":"Project Information","text":"<ul> <li>Contributing - How to contribute to the project</li> <li>Development - Setting up the development environment</li> <li>FAQ - Frequently asked questions</li> <li>Glossary - Definitions of key terms</li> <li>Roadmap - Future development plans</li> </ul>"},{"location":"#why-use-prompt-decorators","title":"Why Use Prompt Decorators?","text":""},{"location":"#modularity","title":"Modularity","text":"<p>Each decorator focuses on a specific prompt engineering technique, allowing you to mix and match them as needed.</p>"},{"location":"#reusability","title":"Reusability","text":"<p>Create a library of prompt techniques that can be reused across different projects and applications.</p>"},{"location":"#standardization","title":"Standardization","text":"<p>Establish consistent prompt patterns across your organization or project.</p>"},{"location":"#experimentation","title":"Experimentation","text":"<p>Easily test different prompt engineering approaches by swapping decorators.</p>"},{"location":"#compatibility","title":"Compatibility","text":"<p>Work with multiple LLM providers using the same decorator patterns.</p>"},{"location":"#getting-help","title":"Getting Help","text":"<p>If you need help with Prompt Decorators, you can:</p> <ul> <li>Check the FAQ for answers to common questions</li> <li>Read the Troubleshooting section in the FAQ</li> <li>Open an issue on our GitHub repository</li> <li>Join our community discussions</li> </ul>"},{"location":"#license","title":"License","text":"<p>Prompt Decorators is released under the Apache 2.0 License. See the LICENSE file for details.</p>"},{"location":"DECORATOR_REGISTRY/","title":"Decorator Registry","text":""},{"location":"DECORATOR_REGISTRY/#overview","title":"Overview","text":"<p>The Decorator Registry is a central component of the Prompt Decorators package that enables runtime discovery and management of decorators. It provides a mechanism to register, discover, and use decorators dynamically, making it easier to extend the system with new decorators and to find decorators by name, category, or other criteria.</p>"},{"location":"DECORATOR_REGISTRY/#features","title":"Features","text":"<ul> <li>Dynamic Registration: Register decorators at runtime from code or JSON definitions</li> <li>Decorator Discovery: Find decorators by name, category, or other criteria</li> <li>Version Management: Support for multiple versions of the same decorator</li> <li>Compatibility Checking: Verify compatibility between decorators</li> <li>Category Organization: Group decorators by category for easier discovery</li> </ul>"},{"location":"DECORATOR_REGISTRY/#implementation","title":"Implementation","text":"<p>The Decorator Registry is implemented in the <code>prompt_decorators.utils.discovery</code> module. The main class is <code>DecoratorRegistry</code>, which provides methods for registering and discovering decorators.</p>"},{"location":"DECORATOR_REGISTRY/#key-components","title":"Key Components","text":"<ol> <li>DecoratorRegistry: The main class that manages the registry of decorators</li> <li>register_decorator: Method to register a decorator class or instance</li> <li>get_decorator: Method to retrieve a decorator by name</li> <li>get_all_decorators: Method to retrieve all registered decorators</li> <li>find_decorators_by_category: Method to find decorators by category</li> </ol>"},{"location":"DECORATOR_REGISTRY/#usage","title":"Usage","text":""},{"location":"DECORATOR_REGISTRY/#registering-decorators","title":"Registering Decorators","text":"<p>Decorators can be registered in several ways:</p> <ol> <li>Registering a Decorator Class:</li> </ol> <pre><code>from prompt_decorators.utils.discovery import DecoratorRegistry\nfrom prompt_decorators.decorators.generated.decorators.concise import Concise\n\n# Get the registry instance\nregistry = DecoratorRegistry()\n\n# Register a decorator class\nregistry.register_decorator(Concise)\n</code></pre> <ol> <li>Registering a Decorator Instance:</li> </ol> <pre><code>from prompt_decorators.utils.discovery import DecoratorRegistry\nfrom prompt_decorators.decorators.generated.decorators.concise import Concise\n\n# Get the registry instance\nregistry = DecoratorRegistry()\n\n# Create a decorator instance\nconcise = Concise(maxWords=100, bulletPoints=True, level=2)\n\n# Register the decorator instance\nregistry.register_decorator(concise)\n</code></pre> <ol> <li>Registering All Decorators from a Directory:</li> </ol> <pre><code>import os\nimport importlib\nimport inspect\nfrom pathlib import Path\nfrom prompt_decorators.utils.discovery import DecoratorRegistry\nfrom prompt_decorators.core.base import BaseDecorator\n\ndef register_decorators():\n    registry = DecoratorRegistry()\n    registry.clear()\n\n    # Path to the generated decorators directory\n    decorators_dir = Path(\"prompt_decorators/decorators/generated/decorators\")\n\n    # Iterate through all Python files in the directory\n    for file_path in decorators_dir.glob(\"*.py\"):\n        if file_path.name == \"__init__.py\":\n            continue\n\n        # Import the module\n        module_name = f\"prompt_decorators.decorators.generated.decorators.{file_path.stem}\"\n        try:\n            module = importlib.import_module(module_name)\n\n            # Find all classes in the module that are subclasses of BaseDecorator\n            for name, obj in inspect.getmembers(module):\n                if inspect.isclass(obj) and issubclass(obj, BaseDecorator) and obj != BaseDecorator:\n                    # Register the decorator\n                    decorator_name = getattr(obj, \"name\", name)\n                    registry.register_decorator(obj)\n                    print(f\"  - Registered: {decorator_name}\")\n        except Exception as e:\n            print(f\"Error registering decorators from {module_name}: {e}\")\n\n    # Print summary\n    decorators = registry.get_all_decorators()\n    print(f\"\\nRegistered {len(decorators)} decorators:\")\n\n    # Print categories\n    categories = set(decorator.category for decorator in decorators)\n    print(f\"\\nDecorator categories ({len(categories)}):\")\n    for category in categories:\n        category_decorators = registry.find_decorators_by_category(category)\n        print(f\"  - {category}: {len(category_decorators)} decorators\")\n</code></pre>"},{"location":"DECORATOR_REGISTRY/#finding-decorators","title":"Finding Decorators","text":"<p>Once decorators are registered, they can be discovered in several ways:</p> <ol> <li>Getting a Decorator by Name:</li> </ol> <pre><code>from prompt_decorators.utils.discovery import DecoratorRegistry\n\nregistry = DecoratorRegistry()\nconcise = registry.get_decorator(\"Concise\")\n</code></pre> <ol> <li>Getting All Decorators:</li> </ol> <pre><code>from prompt_decorators.utils.discovery import DecoratorRegistry\n\nregistry = DecoratorRegistry()\nall_decorators = registry.get_all_decorators()\n</code></pre> <ol> <li>Finding Decorators by Category:</li> </ol> <pre><code>from prompt_decorators.utils.discovery import DecoratorRegistry\n\nregistry = DecoratorRegistry()\ntone_decorators = registry.find_decorators_by_category(\"tone\")\n</code></pre>"},{"location":"DECORATOR_REGISTRY/#using-registered-decorators","title":"Using Registered Decorators","text":"<p>Once a decorator is retrieved from the registry, it can be used like any other decorator:</p> <pre><code>from prompt_decorators.utils.discovery import DecoratorRegistry\n\nregistry = DecoratorRegistry()\nconcise = registry.get_decorator(\"Concise\")\n\n# Create an instance of the decorator\nconcise_instance = concise(maxWords=100, bulletPoints=True, level=2)\n\n# Apply the decorator to a prompt\noriginal_prompt = \"Explain the concept of quantum computing in detail.\"\ndecorated_prompt = concise_instance.apply(original_prompt)\n</code></pre>"},{"location":"DECORATOR_REGISTRY/#examples","title":"Examples","text":"<p>For complete examples of how to use the Decorator Registry, see the following example scripts:</p> <ul> <li><code>examples/register_all_decorators.py</code>: Demonstrates how to register all decorators from the generated directory</li> <li><code>examples/use_registered_decorators.py</code>: Shows how to use registered decorators to modify prompts</li> </ul>"},{"location":"DECORATOR_REGISTRY/#best-practices","title":"Best Practices","text":"<ol> <li>Clear the Registry Before Bulk Registration: If you're registering multiple decorators at once, it's a good practice to clear the registry first to avoid duplicates.</li> <li>Handle Exceptions During Registration: When registering decorators from external sources, make sure to handle exceptions properly to avoid breaking your application.</li> <li>Check Decorator Existence Before Use: Always check if a decorator exists in the registry before trying to use it.</li> <li>Use Categories for Organization: Organize decorators by category to make them easier to discover and use.</li> <li>Consider Version Compatibility: When using multiple decorators together, consider their version compatibility to avoid unexpected behavior.</li> </ol>"},{"location":"DECORATOR_REGISTRY/#future-enhancements","title":"Future Enhancements","text":"<p>The Decorator Registry is designed to be extensible and can be enhanced in several ways:</p> <ol> <li>Plugin System: Add support for loading decorators from external plugins</li> <li>Web API: Create a web API for discovering and using decorators</li> <li>Caching: Implement caching for better performance</li> <li>Analytics: Add analytics to track decorator usage</li> <li>UI Integration: Create a user interface for browsing and selecting decorators</li> </ol>"},{"location":"DOCSTRING_STANDARDS/","title":"Docstring Standards","text":"<p>This document outlines the docstring standards for the <code>prompt-decorators</code> project. All Python code in this project should follow these guidelines to ensure consistency and maintainability.</p>"},{"location":"DOCSTRING_STANDARDS/#google-style-docstrings","title":"Google-Style Docstrings","text":"<p>We use Google-style docstrings throughout the codebase. This style is chosen for its readability and compatibility with documentation generation tools.</p>"},{"location":"DOCSTRING_STANDARDS/#basic-format","title":"Basic Format","text":"<pre><code>def function_name(param1, param2):\n    \"\"\"Short description of the function.\n\n    More detailed description that can span multiple lines and provide\n    additional context about what the function does.\n\n    Args:\n        param1: Description of the first parameter.\n        param2: Description of the second parameter.\n\n    Returns:\n        Description of the return value.\n\n    Raises:\n        ExceptionType: When and why this exception is raised.\n    \"\"\"\n    # Function implementation\n</code></pre>"},{"location":"DOCSTRING_STANDARDS/#required-sections","title":"Required Sections","text":"<ol> <li>Short Description: A concise one-line summary of what the function/class/method does.</li> <li>Detailed Description (optional): A more detailed explanation if needed.</li> <li>Args: Required if the function takes parameters (other than self/cls for methods).</li> <li>Returns: Required if the function returns a value (other than None).</li> <li>Raises (optional): Document exceptions that might be raised.</li> </ol>"},{"location":"DOCSTRING_STANDARDS/#class-docstrings","title":"Class Docstrings","text":"<pre><code>class ClassName:\n    \"\"\"Short description of the class.\n\n    More detailed description of the class and its behavior.\n\n    Attributes:\n        attr1: Description of attr1.\n        attr2: Description of attr2.\n    \"\"\"\n</code></pre>"},{"location":"DOCSTRING_STANDARDS/#method-docstrings","title":"Method Docstrings","text":"<pre><code>def method_name(self, param1):\n    \"\"\"Short description of the method.\n\n    Args:\n        param1: Description of param1.\n\n    Returns:\n        Description of the return value.\n    \"\"\"\n</code></pre>"},{"location":"DOCSTRING_STANDARDS/#type-annotations","title":"Type Annotations","text":"<p>In addition to docstrings, all functions and methods should include type annotations:</p> <pre><code>def function_name(param1: str, param2: int) -&gt; bool:\n    \"\"\"Function description.\n\n    Args:\n        param1: Description of param1.\n        param2: Description of param2.\n\n    Returns:\n        Description of the return value.\n    \"\"\"\n</code></pre>"},{"location":"DOCSTRING_STANDARDS/#examples","title":"Examples","text":""},{"location":"DOCSTRING_STANDARDS/#function-example","title":"Function Example","text":"<pre><code>def calculate_average(numbers: List[float]) -&gt; float:\n    \"\"\"Calculate the average of a list of numbers.\n\n    Args:\n        numbers: A list of numbers to average.\n\n    Returns:\n        The average value.\n\n    Raises:\n        ValueError: If the input list is empty.\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"Cannot calculate average of empty list\")\n    return sum(numbers) / len(numbers)\n</code></pre>"},{"location":"DOCSTRING_STANDARDS/#class-example","title":"Class Example","text":"<pre><code>class DecoratorBase:\n    \"\"\"Base class for all decorators.\n\n    This class provides the foundation for creating decorators with\n    consistent interfaces and behaviors.\n\n    Attributes:\n        name: The name of the decorator.\n        version: The version of the decorator.\n        parameters: Dictionary of parameters for the decorator.\n    \"\"\"\n\n    def __init__(self, name: str, version: str, parameters: Dict[str, Any]):\n        \"\"\"Initialize the decorator.\n\n        Args:\n            name: The name of the decorator.\n            version: The version of the decorator.\n            parameters: Dictionary of parameters for the decorator.\n        \"\"\"\n        self.name = name\n        self.version = version\n        self.parameters = parameters\n\n    def apply(self, text: str) -&gt; str:\n        \"\"\"Apply the decorator to the input text.\n\n        Args:\n            text: The input text to decorate.\n\n        Returns:\n            The decorated text.\n        \"\"\"\n        raise NotImplementedError(\"Subclasses must implement apply()\")\n</code></pre>"},{"location":"DOCSTRING_STANDARDS/#checking-and-fixing-docstrings","title":"Checking and Fixing Docstrings","text":"<p>We have tools to check and fix docstring issues:</p> <ol> <li> <p>Check docstrings:    <pre><code>python scripts/standardize_docstrings.py prompt_decorators --report\n</code></pre></p> </li> <li> <p>Check without fixing (returns error code if issues found):    <pre><code>python scripts/standardize_docstrings.py prompt_decorators --check\n</code></pre></p> </li> <li> <p>Fix docstrings automatically:    <pre><code>python scripts/fix_docstrings.py prompt_decorators\n</code></pre></p> </li> </ol> <p>Our docstring tools can detect several issues: - Missing docstrings - Missing required sections (Args, Returns) - Malformed sections - Inconsistent formatting</p>"},{"location":"DOCSTRING_STANDARDS/#using-the-standardization-script","title":"Using the Standardization Script","text":"<p>The <code>standardize_docstrings.py</code> script offers several options:</p> <pre><code>python scripts/standardize_docstrings.py [path] [options]\n</code></pre> <p>Options: - <code>--exclude [dirs]</code>: Directories to exclude - <code>--report</code>: Generate a detailed report of issues - <code>--check</code>: Only check for issues, don't fix (exits with code 1 if issues found)</p> <p>The docstring standardization script uses Python's AST (Abstract Syntax Tree) to analyze Python files and identify docstring issues. It checks:</p> <ol> <li>Functions with arguments that lack an Args section</li> <li>Functions with return values that lack a Returns section</li> <li>Malformed Args and Returns sections</li> <li>Missing docstrings in functions, classes, and modules</li> </ol>"},{"location":"DOCSTRING_STANDARDS/#integration-with-development-workflow","title":"Integration with Development Workflow","text":"<p>Docstring checking is integrated into our development workflow through various mechanisms:</p>"},{"location":"DOCSTRING_STANDARDS/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>Our pre-commit configuration includes a docstring check that runs before each commit:</p> <pre><code>- id: check-docstrings\n  name: check-docstrings\n  entry: python standardize_docstrings.py\n  language: python\n  types: [python]\n  args: [\"--check\"]\n  description: Check that docstrings follow Google-style format\n</code></pre> <p>This prevents commits that would introduce docstring issues.</p>"},{"location":"DOCSTRING_STANDARDS/#cicd-integration","title":"CI/CD Integration","text":"<p>GitHub Actions runs docstring checks on all pull requests and pushes to main branches:</p> <pre><code>jobs:\n  docstring-check:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: '3.11'\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install poetry\n          poetry install\n      - name: Check docstrings\n        run: python standardize_docstrings.py prompt_decorators --check\n</code></pre> <p>This ensures that all merged code maintains high docstring quality standards.</p>"},{"location":"DOCSTRING_STANDARDS/#current-status-and-known-issues","title":"Current Status and Known Issues","text":"<p>As of the latest update, we've identified and are addressing several docstring issues across the codebase:</p> <ul> <li>75 issues across 16 files for missing Args/Returns sections in function docstrings</li> <li>8 issues for malformed Args sections</li> <li>1 issue for a missing docstring</li> </ul> <p>Our roadmap includes resolving all these issues as part of our code quality improvements before the next major release.</p>"},{"location":"DOCSTRING_STANDARDS/#manual-fixes-in-progress","title":"Manual Fixes in Progress","text":"<p>While our automated tools can identify issues, some complex cases require manual intervention. We're currently working on:</p> <ol> <li>Adding detailed parameter descriptions for complex functions</li> <li>Improving return value descriptions</li> <li>Adding examples to key API functions</li> </ol> <p>Progress on fixing these issues is tracked in our project roadmap.</p>"},{"location":"DOCSTRING_STANDARDS/#additional-resources","title":"Additional Resources","text":"<ul> <li>Google Python Style Guide</li> <li>PEP 257 -- Docstring Conventions</li> <li>PEP 484 -- Type Hints</li> <li>pydocstyle - A tool for checking compliance with Python docstring conventions</li> </ul>"},{"location":"architecture/","title":"Architecture","text":"<p>This document provides an overview of the Prompt Decorators framework architecture, explaining its components, design patterns, and how they interact.</p>"},{"location":"architecture/#system-overview","title":"System Overview","text":"<p>The Prompt Decorators framework is designed around a modular architecture that enables dynamic prompt enhancement through a decorator pattern. The system consists of several key components:</p> <ol> <li>Core Decorator Engine: Handles decorator definition, registration, and application</li> <li>Dynamic Transformation System: Processes JavaScript transform functions at runtime</li> <li>Registry Management: Maintains a catalog of available decorators</li> <li>Integration Layer: Connects with external systems like MCP</li> </ol>"},{"location":"architecture/#architectural-diagram","title":"Architectural Diagram","text":"<p><code>mermaid graph TD     A[User Prompt with Decorators] --&gt; B[Parser]     B --&gt; C[Decorator Registry]     C --&gt; D[Dynamic Decorator]     D --&gt; E[Transform Function Executor]     E --&gt; F[Transformed Prompt]     G[Custom Decorator Definitions] --&gt; C     H[External Integrations] --&gt; C     H --&gt; I[MCP Integration]     I --&gt; J[Claude Desktop]     I --&gt; K[Other MCP Clients]</code></p>"},{"location":"architecture/#key-components","title":"Key Components","text":""},{"location":"architecture/#core-decorator-engine","title":"Core Decorator Engine","text":"<p>The core engine is responsible for the fundamental decorator functionality:</p> <ul> <li>DecoratorBase: Abstract base class that defines the decorator interface</li> <li>DynamicDecorator: Implementation that handles dynamic decorator behavior</li> <li>Parameter Management: Handles parameter validation and processing</li> </ul> <p>The engine follows a decorator pattern, allowing decorators to be stacked and composed:</p> <pre><code># Example of decorator composition\npersona = create_decorator_instance(\"Persona\", role=\"scientist\")\nstep_by_step = create_decorator_instance(\"StepByStep\", numbered=True)\n\n# Apply decorators in sequence\ntransformed_prompt = persona(step_by_step(original_prompt))\n</code></pre>"},{"location":"architecture/#dynamic-transformation-system","title":"Dynamic Transformation System","text":"<p>The transformation system executes JavaScript transform functions:</p> <ul> <li>JavaScript Engine: Uses a JavaScript runtime to execute transform functions</li> <li>Context Management: Provides parameter values to transform functions</li> <li>Error Handling: Manages errors in transform function execution</li> </ul> <p>Transform functions are defined as JavaScript strings that are evaluated at runtime:</p> <pre><code>// Example transform function\nfunction transform(text) {\n  return `Please break down your response into ${numbered ? \"numbered\" : \"clear\"} steps.\\n\\n${text}`;\n}\n</code></pre>"},{"location":"architecture/#registry-management","title":"Registry Management","text":"<p>The registry system maintains a catalog of available decorators:</p> <ul> <li>Decorator Registry: Stores decorator definitions</li> <li>Lookup Mechanism: Retrieves decorators by name</li> <li>Dynamic Loading: Loads decorators from JSON definitions</li> </ul> <p>The registry allows decorators to be registered and retrieved:</p> <pre><code># Register a decorator\nregister_decorator(my_decorator_def)\n\n# Retrieve a decorator\ndecorator = get_decorator(\"MyDecorator\")\n</code></pre>"},{"location":"architecture/#integration-layer","title":"Integration Layer","text":"<p>The integration layer connects the framework with external systems:</p> <ul> <li>MCP Integration: Implements the Model Context Protocol</li> <li>Tool Definitions: Exposes decorator functionality as MCP tools</li> <li>Client Adapters: Adapts to specific client requirements</li> </ul>"},{"location":"architecture/#data-flow","title":"Data Flow","text":"<p>The data flow through the system follows these steps:</p> <ol> <li>Input: User provides a prompt with decorator annotations</li> <li>Parsing: The system extracts decorator annotations and parameters</li> <li>Lookup: The system retrieves decorator definitions from the registry</li> <li>Parameter Processing: Parameters are validated and processed</li> <li>Transformation: Transform functions are executed with parameters</li> <li>Composition: Multiple transformations are composed</li> <li>Output: The transformed prompt is returned</li> </ol>"},{"location":"architecture/#design-patterns","title":"Design Patterns","text":"<p>The framework employs several design patterns:</p>"},{"location":"architecture/#decorator-pattern","title":"Decorator Pattern","text":"<p>The core functionality uses the decorator pattern to allow stacking and composition of transformations:</p> <pre><code># Decorator pattern in action\nresult = decorator1(decorator2(decorator3(text)))\n</code></pre>"},{"location":"architecture/#factory-pattern","title":"Factory Pattern","text":"<p>The framework uses a factory pattern to create decorator instances:</p> <pre><code># Factory pattern for creating decorators\ndecorator = create_decorator_instance(\"DecoratorName\", param1=\"value1\")\n</code></pre>"},{"location":"architecture/#registry-pattern","title":"Registry Pattern","text":"<p>The decorator registry implements the registry pattern:</p> <pre><code># Registry pattern for storing and retrieving decorators\nregister_decorator(decorator_definition)\ndecorator = get_decorator(\"DecoratorName\")\n</code></pre>"},{"location":"architecture/#strategy-pattern","title":"Strategy Pattern","text":"<p>Transform functions implement the strategy pattern, allowing different transformation strategies:</p> <pre><code># Different strategies for transformation\ntransform_function1 = \"return prefix + text;\"\ntransform_function2 = \"return text.split('.').join('.\\n');\"\n</code></pre>"},{"location":"architecture/#extension-points","title":"Extension Points","text":"<p>The framework provides several extension points:</p>"},{"location":"architecture/#custom-decorators","title":"Custom Decorators","text":"<p>Users can create custom decorators by defining new decorator definitions:</p> <pre><code># Define a custom decorator\nmy_decorator_def = DecoratorDefinition(\n    name=\"MyCustomDecorator\",\n    description=\"A custom decorator\",\n    category=\"Custom\",\n    parameters=[...],\n    transform_function=\"...\"\n)\n</code></pre>"},{"location":"architecture/#integration-adapters","title":"Integration Adapters","text":"<p>New integrations can be added by implementing adapter classes:</p> <pre><code># Implement a new integration adapter\nclass MyIntegrationAdapter:\n    def apply_decorators(self, prompt):\n        return apply_dynamic_decorators(prompt)\n</code></pre>"},{"location":"architecture/#transform-function-extensions","title":"Transform Function Extensions","text":"<p>The transform function system can be extended with new capabilities:</p> <pre><code># Extend the transform function system\njs_runtime.add_global(\"myUtility\", my_utility_function)\n</code></pre>"},{"location":"architecture/#performance-considerations","title":"Performance Considerations","text":"<p>The architecture addresses performance in several ways:</p> <ul> <li>Lazy Loading: Decorators are loaded only when needed</li> <li>Caching: Frequently used decorators are cached</li> <li>Efficient Parsing: The parser is optimized for quick extraction</li> <li>Minimal Overhead: The system adds minimal overhead to prompt processing</li> </ul>"},{"location":"architecture/#security-considerations","title":"Security Considerations","text":"<p>The architecture includes security measures:</p> <ul> <li>Input Validation: All inputs are validated before processing</li> <li>Sandboxed Execution: JavaScript is executed in a sandboxed environment</li> <li>Parameter Sanitization: Parameters are sanitized before use</li> <li>Error Containment: Errors are contained and don't affect the system</li> </ul>"},{"location":"architecture/#deployment-architecture","title":"Deployment Architecture","text":"<p>The framework can be deployed in several configurations:</p>"},{"location":"architecture/#standalone-library","title":"Standalone Library","text":"<p>The most common deployment is as a standalone Python library:</p> <pre><code>Application --&gt; Prompt Decorators Library --&gt; LLM Provider\n</code></pre>"},{"location":"architecture/#mcp-server","title":"MCP Server","text":"<p>For Claude Desktop and other MCP clients, the framework can be deployed as an MCP server:</p> <pre><code>Claude Desktop --&gt; MCP Protocol --&gt; Prompt Decorators MCP Server --&gt; LLM Provider\n</code></pre>"},{"location":"architecture/#web-service","title":"Web Service","text":"<p>The framework can be deployed as a web service:</p> <pre><code>Client Applications --&gt; API Gateway --&gt; Prompt Decorators Service --&gt; LLM Providers\n</code></pre>"},{"location":"architecture/#future-architecture-directions","title":"Future Architecture Directions","text":"<p>The architecture is designed to evolve in these directions:</p> <ul> <li>Plugin System: A formal plugin system for extensions</li> <li>Distributed Registry: A distributed registry for sharing decorators</li> <li>Advanced Caching: More sophisticated caching strategies</li> <li>Cross-Language Support: Support for other programming languages</li> </ul>"},{"location":"architecture/#implementation-details","title":"Implementation Details","text":""},{"location":"architecture/#core-module","title":"Core Module","text":"<p>The <code>core</code> module implements the fundamental decorator functionality:</p> <pre><code># Base decorator class\nclass DecoratorBase:\n    def __init__(self, **kwargs):\n        self.params = kwargs\n\n    def __call__(self, text: str) -&gt; str:\n        # Apply the decorator to the text\n        return self.transform(text)\n\n    def transform(self, text: str) -&gt; str:\n        # To be implemented by subclasses\n        raise NotImplementedError\n</code></pre>"},{"location":"architecture/#dynamic-decorator-module","title":"Dynamic Decorator Module","text":"<p>The <code>dynamic_decorator</code> module implements the dynamic decorator functionality:</p> <pre><code># Dynamic decorator class\nclass DynamicDecorator(DecoratorBase):\n    def __init__(self, name, description, category, parameters, transform_function):\n        self.name = name\n        self.description = description\n        self.category = category\n        self.parameters = parameters\n        self.transform_function = transform_function\n        super().__init__()\n\n    def transform(self, text: str) -&gt; str:\n        # Execute the transform function with parameters\n        return execute_js(self.transform_function, text, **self.params)\n</code></pre>"},{"location":"architecture/#registry-module","title":"Registry Module","text":"<p>The <code>registry</code> module implements the decorator registry:</p> <pre><code># Decorator registry\n_registry = {}\n\ndef register_decorator(definition):\n    _registry[definition.name] = definition\n\ndef get_decorator(name):\n    if name not in _registry:\n        raise DecoratorNotFoundError(f\"Decorator '{name}' not found\")\n    return _registry[name]\n</code></pre>"},{"location":"architecture/#parser-module","title":"Parser Module","text":"<p>The <code>parser</code> module implements the decorator parsing:</p> <pre><code># Decorator parser\ndef parse_decorators(text):\n    # Extract decorator annotations\n    pattern = r'\\+\\+\\+([A-Za-z]+)(?:\\(([^)]+)\\))?'\n    matches = re.findall(pattern, text)\n\n    decorators = []\n    for name, params_str in matches:\n        params = parse_params(params_str)\n        decorators.append((name, params))\n\n    # Remove decorator annotations\n    clean_text = re.sub(pattern, '', text)\n\n    return decorators, clean_text\n</code></pre>"},{"location":"architecture/#conclusion","title":"Conclusion","text":"<p>The Prompt Decorators architecture provides a flexible, extensible framework for enhancing prompts sent to LLMs. Its modular design allows for easy customization and integration with various systems, while its dynamic implementation enables runtime modification without code generation.</p> <p>The architecture balances simplicity, performance, and security, making it suitable for a wide range of applications from simple script usage to complex enterprise integrations.</p>"},{"location":"code_quality_integration/","title":"Code Quality Integration","text":"<p>This document outlines the code quality tools, processes, and integrations used in the Prompt Decorators project to maintain high standards of code quality.</p>"},{"location":"code_quality_integration/#overview","title":"Overview","text":"<p>The Prompt Decorators project employs a comprehensive set of code quality tools and processes to ensure:</p> <ul> <li>Consistent code style and formatting</li> <li>Static type checking</li> <li>Comprehensive test coverage</li> <li>Documentation quality</li> <li>Security scanning</li> <li>Continuous integration</li> </ul>"},{"location":"code_quality_integration/#code-quality-tools","title":"Code Quality Tools","text":""},{"location":"code_quality_integration/#linting-and-formatting","title":"Linting and Formatting","text":""},{"location":"code_quality_integration/#ruff","title":"Ruff","text":"<p>Ruff is the primary tool for linting and formatting Python code in the project. It replaces multiple tools (black, isort, flake8) with a single, fast tool.</p> <p>Configuration is in <code>pyproject.toml</code>:</p> <pre><code>[tool.ruff]\nline-length = 100\ntarget-version = \"py311\"\nselect = [\"E\", \"F\", \"I\", \"N\", \"B\", \"C4\", \"SIM\", \"ERA\", \"PL\"]\nignore = [\"E203\", \"E501\"]\n\n[tool.ruff.isort]\nknown-first-party = [\"prompt_decorators\"]\n\n[tool.ruff.format]\nquote-style = \"double\"\nindent-style = \"space\"\n</code></pre> <p>Usage:</p> <pre><code># Check code\nruff check .\n\n# Format code\nruff format .\n</code></pre>"},{"location":"code_quality_integration/#type-checking","title":"Type Checking","text":""},{"location":"code_quality_integration/#mypy","title":"Mypy","text":"<p>Mypy is used for static type checking to catch type-related errors before runtime.</p> <p>Configuration is in <code>mypy.ini</code>:</p> <pre><code>[mypy]\npython_version = 3.11\nwarn_return_any = True\nwarn_unused_configs = True\ndisallow_untyped_defs = True\ndisallow_incomplete_defs = True\n\n[mypy.plugins.numpy.*]\nfollow_imports = skip\n\n[mypy-pytest.*]\nignore_missing_imports = True\n</code></pre> <p>Usage:</p> <pre><code>mypy prompt_decorators\n</code></pre>"},{"location":"code_quality_integration/#testing","title":"Testing","text":""},{"location":"code_quality_integration/#pytest","title":"Pytest","text":"<p>Pytest is used for unit and integration testing.</p> <p>Configuration is in <code>pyproject.toml</code>:</p> <pre><code>[tool.pytest.ini_options]\ntestpaths = [\"tests\"]\npython_files = \"test_*.py\"\npython_functions = \"test_*\"\npython_classes = \"Test*\"\naddopts = \"--cov=prompt_decorators --cov-report=term --cov-report=xml\"\n</code></pre> <p>Usage:</p> <pre><code># Run all tests\npytest\n\n# Run with coverage\npytest --cov=prompt_decorators\n</code></pre>"},{"location":"code_quality_integration/#coverage","title":"Coverage","text":"<p>Coverage.py is used to measure test coverage.</p> <p>Configuration is in <code>.coveragerc</code>:</p> <pre><code>[run]\nsource = prompt_decorators\nomit = tests/*\n\n[report]\nexclude_lines =\n    pragma: no cover\n    def __repr__\n    raise NotImplementedError\n</code></pre>"},{"location":"code_quality_integration/#documentation-quality","title":"Documentation Quality","text":""},{"location":"code_quality_integration/#doc8","title":"Doc8","text":"<p>Doc8 is used to check documentation quality.</p> <p>Configuration is in <code>pyproject.toml</code>:</p> <pre><code>[tool.doc8]\nmax-line-length = 100\nignore = [\"D001\"]\n</code></pre> <p>Usage:</p> <pre><code>doc8 docs/\n</code></pre>"},{"location":"code_quality_integration/#security-scanning","title":"Security Scanning","text":""},{"location":"code_quality_integration/#bandit","title":"Bandit","text":"<p>Bandit is used for security vulnerability scanning.</p> <p>Configuration is in <code>.bandit</code>:</p> <pre><code>[bandit]\nexclude = tests\n</code></pre> <p>Usage:</p> <pre><code>bandit -r prompt_decorators\n</code></pre>"},{"location":"code_quality_integration/#pre-commit-integration","title":"Pre-commit Integration","text":"<p>The project uses pre-commit to run quality checks before each commit.</p> <p>Configuration is in <code>.pre-commit-config.yaml</code>:</p> <pre><code>repos:\n-   repo: https://github.com/charliermarsh/ruff-pre-commit\n    rev: v0.0.262\n    hooks:\n    -   id: ruff\n        args: [--fix]\n    -   id: ruff-format\n\n-   repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v1.3.0\n    hooks:\n    -   id: mypy\n        additional_dependencies: [types-requests, types-PyYAML]\n\n-   repo: https://github.com/PyCQA/bandit\n    rev: 1.7.5\n    hooks:\n    -   id: bandit\n        args: [-c, .bandit]\n        exclude: tests/\n\n-   repo: https://github.com/pycqa/doc8\n    rev: v1.1.1\n    hooks:\n    -   id: doc8\n        args: [--max-line-length=100]\n</code></pre> <p>Installation:</p> <pre><code>pip install pre-commit\npre-commit install\n</code></pre> <p>Usage:</p> <pre><code># Run on all files\npre-commit run --all-files\n\n# Run automatically on commit\ngit commit -m \"Your commit message\"\n</code></pre>"},{"location":"code_quality_integration/#continuous-integration","title":"Continuous Integration","text":""},{"location":"code_quality_integration/#github-actions","title":"GitHub Actions","text":"<p>The project uses GitHub Actions for continuous integration.</p>"},{"location":"code_quality_integration/#test-workflow","title":"Test Workflow","text":"<p>The test workflow runs tests on Python 3.11:</p> <pre><code>name: Tests\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: ['3.11']\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.python-version }}\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n</code></pre>"},{"location":"code_quality_integration/#lint-workflow","title":"Lint Workflow","text":"<p>The lint workflow checks code style and typing:</p> <pre><code>name: Lint\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.11'\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install ruff mypy\n        pip install -e \".[dev]\"\n    - name: Lint with ruff\n      run: |\n        ruff check .\n    - name: Check formatting with ruff\n      run: |\n        ruff format --check .\n    - name: Type check with mypy\n      run: |\n        mypy prompt_decorators\n</code></pre>"},{"location":"code_quality_integration/#docs-workflow","title":"Docs Workflow","text":"<p>The docs workflow builds and validates documentation:</p> <pre><code>name: Docs\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  docs:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.11'\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -e \".[docs]\"\n    - name: Build docs\n      run: |\n        cd docs\n        mkdocs build --strict\n    - name: Check documentation quality\n      run: |\n        doc8 docs/\n</code></pre>"},{"location":"code_quality_integration/#code-quality-metrics","title":"Code Quality Metrics","text":""},{"location":"code_quality_integration/#coverage-reporting","title":"Coverage Reporting","text":"<p>The project uses Codecov for coverage reporting.</p> <p>Integration is through GitHub Actions:</p> <pre><code>- name: Upload coverage to Codecov\n  uses: codecov/codecov-action@v3\n  with:\n    file: ./coverage.xml\n</code></pre>"},{"location":"code_quality_integration/#code-quality-badges","title":"Code Quality Badges","text":"<p>The project includes badges in the README.md to show code quality metrics:</p> <pre><code>[![Tests](https://github.com/synaptiai/prompt-decorators/actions/workflows/tests.yml/badge.svg)](https://github.com/synaptiai/prompt-decorators/actions/workflows/tests.yml)\n[![Codecov](https://codecov.io/gh/synaptiai/prompt-decorators/branch/main/graph/badge.svg)](https://codecov.io/gh/synaptiai/prompt-decorators)\n[![Documentation Status](https://github.com/synaptiai/prompt-decorators/actions/workflows/docs.yml/badge.svg)](https://github.com/synaptiai/prompt-decorators/actions/workflows/docs.yml)\n</code></pre>"},{"location":"code_quality_integration/#pull-request-quality-checks","title":"Pull Request Quality Checks","text":"<p>Pull requests must pass all quality checks before merging:</p> <ol> <li>All tests must pass</li> <li>Code must be properly formatted</li> <li>Type checking must pass</li> <li>Documentation must build successfully</li> <li>Test coverage must not decrease</li> </ol> <p>GitHub branch protection rules enforce these requirements.</p>"},{"location":"code_quality_integration/#developer-workflow","title":"Developer Workflow","text":""},{"location":"code_quality_integration/#local-quality-checks","title":"Local Quality Checks","text":"<p>Developers should run quality checks locally before pushing:</p> <pre><code># Format code\nruff format .\n\n# Check code\nruff check .\n\n# Run type checking\nmypy prompt_decorators\n\n# Run tests\npytest\n\n# Build docs\ncd docs &amp;&amp; mkdocs build\n</code></pre>"},{"location":"code_quality_integration/#cicd-pipeline","title":"CI/CD Pipeline","text":"<p>The CI/CD pipeline follows these steps:</p> <ol> <li>Lint: Check code style and formatting</li> <li>Type Check: Verify type annotations</li> <li>Test: Run unit and integration tests</li> <li>Coverage: Generate coverage reports</li> <li>Docs: Build and validate documentation</li> <li>Security: Scan for security vulnerabilities</li> <li>Release: (On main branch) Build and publish package</li> </ol>"},{"location":"code_quality_integration/#setting-up-quality-tools","title":"Setting Up Quality Tools","text":""},{"location":"code_quality_integration/#for-new-contributors","title":"For New Contributors","text":"<p>New contributors should set up the quality tools:</p> <pre><code># Clone the repository\ngit clone https://github.com/synaptiai/prompt-decorators.git\ncd prompt-decorators\n\n# Install dependencies\npip install -e \".[dev,test,docs]\"\n\n# Install pre-commit hooks\npre-commit install\n</code></pre>"},{"location":"code_quality_integration/#for-cicd-systems","title":"For CI/CD Systems","text":"<p>CI/CD systems should install the necessary dependencies:</p> <pre><code># Install dependencies\npython -m pip install --upgrade pip\npip install -e \".[dev,test,docs]\"\n</code></pre>"},{"location":"code_quality_integration/#best-practices","title":"Best Practices","text":""},{"location":"code_quality_integration/#code-style","title":"Code Style","text":"<ul> <li>Follow PEP 8 style guidelines</li> <li>Use consistent naming conventions</li> <li>Keep functions and methods focused and small</li> <li>Use descriptive variable names</li> </ul>"},{"location":"code_quality_integration/#type-annotations","title":"Type Annotations","text":"<ul> <li>Use type annotations for all functions and methods</li> <li>Use <code>Optional[T]</code> for parameters that could be <code>None</code></li> <li>Use <code>Union[T1, T2]</code> for parameters that could be multiple types</li> <li>Use <code>Any</code> only when absolutely necessary</li> </ul>"},{"location":"code_quality_integration/#testing_1","title":"Testing","text":"<ul> <li>Write tests for all new features and bug fixes</li> <li>Include both positive and negative test cases</li> <li>Test edge cases and error conditions</li> <li>Aim for high test coverage (&gt;90%)</li> </ul>"},{"location":"code_quality_integration/#documentation","title":"Documentation","text":"<ul> <li>Document all public APIs</li> <li>Keep documentation up to date with code changes</li> <li>Include examples in documentation</li> <li>Use clear, concise language</li> </ul>"},{"location":"code_quality_integration/#conclusion","title":"Conclusion","text":"<p>The Prompt Decorators project maintains high code quality through a combination of automated tools, continuous integration, and developer best practices. By following these guidelines, contributors can help ensure the project remains maintainable, reliable, and secure.</p>"},{"location":"compatibility/","title":"Compatibility","text":"<p>This guide explains compatibility considerations for the Prompt Decorators framework, including LLM provider compatibility, decorator conflicts, and integration options.</p>"},{"location":"compatibility/#llm-provider-compatibility","title":"LLM Provider Compatibility","text":"<p>The Prompt Decorators framework is designed to work with any LLM provider, as it transforms decorators into natural language instructions that any model can understand. However, there are important considerations for each provider.</p>"},{"location":"compatibility/#openai","title":"OpenAI","text":"<p>OpenAI models (GPT-3.5, GPT-4, etc.) work well with Prompt Decorators.</p> <pre><code>import openai\nfrom prompt_decorators import apply_dynamic_decorators\n\n# Create a decorated prompt\nprompt = \"\"\"\n+++StepByStep(numbered=true)\n+++Audience(level=\"beginner\")\nExplain quantum computing.\n\"\"\"\ntransformed_prompt = apply_dynamic_decorators(prompt)\n\n# Send to OpenAI\nresponse = openai.chat.completions.create(\n    model=\"gpt-4\",\n    messages=[\n        {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n        {\"role\": \"user\", \"content\": transformed_prompt}\n    ]\n)\n</code></pre>"},{"location":"compatibility/#considerations","title":"Considerations","text":"<ul> <li>GPT-4 and newer models have the best understanding of complex instructions</li> <li>Token limits may restrict the use of many decorators simultaneously</li> <li>Add an explicit <code>system</code> message to set baseline behavior</li> </ul>"},{"location":"compatibility/#anthropic-claude","title":"Anthropic Claude","text":"<p>Claude models work well with Prompt Decorators' natural language transformations.</p> <pre><code>import anthropic\nfrom prompt_decorators import apply_dynamic_decorators\n\n# Set up Anthropic client\nclient = anthropic.Anthropic(api_key=\"your-anthropic-api-key\")\n\n# Create a decorated prompt\nprompt = \"\"\"\n+++Reasoning(depth=\"comprehensive\")\n+++OutputFormat(format=\"markdown\")\nWhat are the implications of quantum computing for cryptography?\n\"\"\"\ntransformed_prompt = apply_dynamic_decorators(prompt)\n\n# Send to Anthropic Claude\nmessage = client.messages.create(\n    model=\"claude-3-opus-20240229\",\n    max_tokens=1000,\n    messages=[\n        {\"role\": \"user\", \"content\": transformed_prompt}\n    ]\n)\n</code></pre>"},{"location":"compatibility/#considerations_1","title":"Considerations","text":"<ul> <li>Claude models excel at following structured instructions</li> <li>Claude has larger context windows, allowing for more complex decorations</li> <li>Use the Claude Desktop integration for seamless experience</li> </ul>"},{"location":"compatibility/#other-providers","title":"Other Providers","text":"<p>The framework is compatible with many other LLM providers:</p> <ul> <li>Hugging Face Models: Work well with explicit instructions generated by decorators</li> <li>Google Gemini: Compatible with transformer decorators</li> <li>Mistral AI: Works with instructions generated by the framework</li> <li>Llama/Llama 2/Llama 3: Compatible with properly transformed prompts</li> <li>Local models: Can use decorators with any locally deployed model</li> </ul>"},{"location":"compatibility/#decorator-compatibility-and-conflicts","title":"Decorator Compatibility and Conflicts","text":"<p>Some decorators may have incompatible behaviors. The framework handles conflicts according to these rules:</p> <ol> <li>Precedence Rule: When decorators have fundamentally incompatible requirements, the later decorator in the sequence takes precedence</li> <li>Parameter Conflicts: When facing a parameter conflict between decorators, the parameter in the later decorator takes precedence</li> <li>Graceful Degradation: If a model can't fully implement a decorator's behavior, it degrades gracefully with partial implementation</li> </ol>"},{"location":"compatibility/#known-decorator-conflicts","title":"Known Decorator Conflicts","text":"Decorator Incompatible With Reason Resolution <code>ELI5</code> <code>Technical</code>, <code>Academic</code> Contradictory audience adaptation Last decorator wins <code>Concise</code> <code>Detailed</code> Contradictory verbosity goals Last decorator wins <code>Inductive</code> <code>Deductive</code> Contradictory reasoning methods Last decorator wins <code>Bullet</code> <code>OutputFormat(format=json)</code> Structural conflict Last decorator wins"},{"location":"compatibility/#compatibility-checking","title":"Compatibility Checking","text":"<p>You can programmatically check for known conflicts:</p> <pre><code>from prompt_decorators import (\n    get_available_decorators,\n    create_decorator_instance\n)\n\n# Get decorator definitions\ndecorators = get_available_decorators()\n\n# Check if two decorators are compatible\ndef check_compatibility(decorator1_name, decorator2_name):\n    dec1 = next((d for d in decorators if d.name == decorator1_name), None)\n    dec2 = next((d for d in decorators if d.name == decorator2_name), None)\n\n    if not dec1 or not dec2:\n        return \"One or both decorators not found\"\n\n    # Check for known conflicts\n    known_conflicts = {\n        \"ELI5\": [\"Technical\", \"Academic\"],\n        \"Concise\": [\"Detailed\"],\n        \"Inductive\": [\"Deductive\"],\n        \"Bullet\": []  # Special case for OutputFormat conflicts\n    }\n\n    if dec1.name in known_conflicts and dec2.name in known_conflicts[dec1.name]:\n        return f\"Known conflict: {dec1.name} conflicts with {dec2.name}\"\n\n    if dec2.name in known_conflicts and dec1.name in known_conflicts[dec2.name]:\n        return f\"Known conflict: {dec2.name} conflicts with {dec1.name}\"\n\n    # Special case for OutputFormat with format=json and Bullet\n    if dec1.name == \"OutputFormat\" and dec2.name == \"Bullet\":\n        if hasattr(dec1, \"parameters\") and any(p.get(\"name\") == \"format\" and p.get(\"default\") == \"json\" for p in dec1.parameters):\n            return \"Conflict: OutputFormat(format=json) conflicts with Bullet\"\n\n    return \"No known conflicts\"\n\n# Example usage\nprint(check_compatibility(\"ELI5\", \"Technical\"))  # Known conflict\nprint(check_compatibility(\"StepByStep\", \"Reasoning\"))  # No conflict\n</code></pre>"},{"location":"compatibility/#integration-options","title":"Integration Options","text":""},{"location":"compatibility/#direct-integration","title":"Direct Integration","text":"<p>The simplest integration method is to apply decorators before sending prompts to an LLM:</p> <pre><code>from prompt_decorators import apply_dynamic_decorators\nfrom your_llm_client import LLMClient\n\nclient = LLMClient()\n\ndef enhanced_prompt(prompt_text, decorators=None):\n    decorated_text = prompt_text\n\n    # Apply inline decorators from the text\n    if \"+++\" in prompt_text:\n        decorated_text = apply_dynamic_decorators(prompt_text)\n\n    # Apply additional decorators programmatically\n    if decorators:\n        for decorator_name, params in decorators.items():\n            decorator = create_decorator_instance(decorator_name, **params)\n            decorated_text = decorator(decorated_text)\n\n    # Send to LLM\n    return client.generate(decorated_text)\n</code></pre>"},{"location":"compatibility/#mcp-integration","title":"MCP Integration","text":"<p>For Anthropic Claude and other compatible clients, use the Model Context Protocol (MCP) integration:</p> <pre><code># Run the MCP server (general use)\npython -m prompt_decorators.integrations.mcp\n\n# For Claude Desktop integration\npython -m prompt_decorators.integrations.mcp.claude_desktop\n</code></pre> <p>This exposes decorator functionality through a set of tools that can be used by any MCP-compatible client.</p>"},{"location":"compatibility/#middleware-integration","title":"Middleware Integration","text":"<p>For web applications or API services, you can implement decorators as middleware:</p> <pre><code>from fastapi import FastAPI, Request, Depends\nfrom prompt_decorators import apply_dynamic_decorators\n\napp = FastAPI()\n\nasync def prompt_decorator_middleware(request: Request):\n    # Extract the prompt from the request\n    body = await request.json()\n    if \"prompt\" in body:\n        body[\"prompt\"] = apply_dynamic_decorators(body[\"prompt\"])\n    return body\n\n@app.post(\"/generate\")\nasync def generate(data: dict = Depends(prompt_decorator_middleware)):\n    # The prompt has already been transformed by the middleware\n    return {\"result\": llm_client.generate(data[\"prompt\"])}\n</code></pre>"},{"location":"compatibility/#model-specific-optimization","title":"Model-Specific Optimization","text":"<p>Different models may respond better to slightly different instruction formats. You can optimize for specific models:</p> <pre><code>from prompt_decorators import DecoratorDefinition, register_decorator\n\n# Define model-specific versions of decorators\ngpt4_reasoning_decorator = DecoratorDefinition(\n    name=\"GPT4_Reasoning\",\n    description=\"Reasoning decorator optimized for GPT-4\",\n    category=\"ModelSpecific\",\n    parameters=[\n        {\n            \"name\": \"depth\",\n            \"type\": \"enum\",\n            \"description\": \"Depth of reasoning\",\n            \"enum\": [\"basic\", \"moderate\", \"comprehensive\"],\n            \"default\": \"moderate\"\n        }\n    ],\n    transform_function=\"\"\"\n    let instruction = \"I want you to think through this step by step, showing your full reasoning process. \";\n\n    if (depth === \"basic\") {\n        instruction += \"Focus on the key logical steps.\";\n    } else if (depth === \"moderate\") {\n        instruction += \"Provide a balanced explanation with important details and connections.\";\n    } else if (depth === \"comprehensive\") {\n        instruction += \"Show a detailed, thorough analysis considering multiple angles and perspectives.\";\n    }\n\n    return instruction + \"\\\\n\\\\n\" + text;\n    \"\"\"\n)\n\n# Register the model-specific decorator\nregister_decorator(gpt4_reasoning_decorator)\n\n# Use based on the target model\ndef optimize_for_model(prompt, model_name):\n    if model_name.startswith(\"gpt-4\"):\n        # Use GPT-4 optimized decorators\n        reasoning = create_decorator_instance(\"GPT4_Reasoning\", depth=\"comprehensive\")\n        return reasoning(prompt)\n    elif model_name.startswith(\"claude\"):\n        # Use Claude optimized decorators\n        reasoning = create_decorator_instance(\"Reasoning\", depth=\"comprehensive\")\n        return reasoning(prompt)\n    else:\n        # Use default decorators\n        reasoning = create_decorator_instance(\"Reasoning\", depth=\"comprehensive\")\n        return reasoning(prompt)\n</code></pre>"},{"location":"compatibility/#browser-extension-integration","title":"Browser Extension Integration","text":"<p>For services without direct API access, you can build browser extensions:</p> <pre><code>// JavaScript example for a browser extension\nfunction applyDecorators(text) {\n    // Simple regex-based parser for browser extension\n    const decoratorPattern = /\\+\\+\\+([A-Za-z]+)(?:\\(([^)]+)\\))?/g;\n    let transformed = text;\n\n    // Extract decorators\n    let decorators = [];\n    let match;\n    while ((match = decoratorPattern.exec(text)) !== null) {\n        const name = match[1];\n        const paramsStr = match[2] || \"\";\n\n        // Parse parameters\n        const params = {};\n        if (paramsStr) {\n            paramsStr.split(',').forEach(pair =&gt; {\n                const [key, value] = pair.split('=').map(s =&gt; s.trim());\n                params[key] = value;\n            });\n        }\n\n        decorators.push({ name, params, fullMatch: match[0] });\n    }\n\n    // Apply transformations (simplified)\n    decorators.forEach(dec =&gt; {\n        transformed = transformed.replace(dec.fullMatch, \"\");\n\n        if (dec.name === \"StepByStep\") {\n            const numbered = dec.params.numbered === \"true\";\n            transformed = `Please break down your response into ${numbered ? \"numbered\" : \"clear\"} steps.\\n\\n${transformed}`;\n        } else if (dec.name === \"Reasoning\") {\n            const depth = dec.params.depth || \"moderate\";\n            transformed = `Please provide ${depth} reasoning in your response.\\n\\n${transformed}`;\n        }\n        // Add more decorator implementations as needed\n    });\n\n    return transformed;\n}\n\n// Hook into webpage\ndocument.querySelector('#prompt-textarea').addEventListener('keydown', function(e) {\n    if (e.key === 'Enter' &amp;&amp; !e.shiftKey) {\n        const text = this.value;\n        if (text.includes('+++')) {\n            e.preventDefault();\n            this.value = applyDecorators(text);\n            // Then submit the form programmatically\n            document.querySelector('form').submit();\n        }\n    }\n});\n</code></pre>"},{"location":"compatibility/#next-steps","title":"Next Steps","text":"<ul> <li>Explore MCP integration for Claude and other LLMs</li> <li>Learn about creating custom decorators optimized for specific models</li> <li>Check the tutorials for examples of compatible decorator combinations</li> </ul>"},{"location":"concepts/","title":"Core Concepts","text":"<p>This document explains the core concepts behind the Prompt Decorators framework, including its design philosophy, implementation approach, and key components.</p>"},{"location":"concepts/#what-are-prompt-decorators","title":"What are Prompt Decorators?","text":"<p>Prompt Decorators are a structured framework for enhancing prompts sent to Large Language Models (LLMs). Based on the decorator pattern in software design, they provide a consistent way to modify how AI models process and respond to requests.</p> <p>The framework uses a simple syntax where decorators are prefixed with <code>+++</code> followed by a decorator name and optional parameters, allowing users to consistently control AI behavior across different platforms.</p>"},{"location":"concepts/#key-features","title":"Key Features","text":"<ul> <li>Standardized Syntax: Consistent way to apply modifications across different prompts</li> <li>Composability: Multiple decorators can be combined for complex behaviors</li> <li>Extensibility: The framework supports custom decorator definitions</li> <li>Minimal Token Usage: Concise annotations that reduce token consumption</li> <li>Dynamic Implementation: Runtime modification without code generation</li> </ul>"},{"location":"concepts/#design-philosophy","title":"Design Philosophy","text":"<p>The Prompt Decorators framework is designed around these principles:</p> <ol> <li>Simplicity: Decorators should be easy to learn, remember, and apply</li> <li>Consistency: Behavior should be predictable across different models and contexts</li> <li>Composability: Decorators should work well together without conflicts</li> <li>Extensibility: The framework should allow for new decorators as needs evolve</li> <li>Human Readability: Syntax should be comprehensible to humans, not just machines</li> </ol>"},{"location":"concepts/#core-components","title":"Core Components","text":""},{"location":"concepts/#1-decorator-syntax","title":"1. Decorator Syntax","text":"<p>The canonical syntax for a Prompt Decorator follows this pattern:</p> <pre><code>+++&lt;DecoratorName&gt;[(parameter1=value1[, parameter2=value2, ...])]\n</code></pre> <p>Where: - <code>+++</code> is the decorator prefix that identifies a decorator - <code>&lt;DecoratorName&gt;</code> is the case-sensitive name of the decorator - Parameters are optional and enclosed in parentheses - Multiple parameters are separated by commas - Parameter names and values are separated by equals signs</p> <p>Example: <pre><code>+++StepByStep(numbered=true)\nExplain how nuclear fusion works.\n</code></pre></p>"},{"location":"concepts/#2-dynamic-decorator-implementation","title":"2. Dynamic Decorator Implementation","text":"<p>The framework uses a dynamic implementation that loads decorator definitions at runtime, eliminating the need for code generation. This approach offers several advantages:</p> <ul> <li>Flexibility: Decorators can be created and modified without regenerating code</li> <li>Runtime Loading: Decorators are loaded from definitions when needed</li> <li>Extensibility: Custom decorators can be defined and used immediately</li> </ul>"},{"location":"concepts/#3-decorator-registry","title":"3. Decorator Registry","text":"<p>The framework maintains a registry of available decorators, including their:</p> <ul> <li>Name: Unique identifier for the decorator</li> <li>Description: Purpose and behavior of the decorator</li> <li>Category: Functional grouping (reasoning, format, style, etc.)</li> <li>Parameters: Configurable options with types and default values</li> <li>Transform Function: JavaScript function that defines the transformation logic</li> </ul>"},{"location":"concepts/#4-decorator-categories","title":"4. Decorator Categories","text":"<p>Decorators are organized into functional categories:</p> <ul> <li>Reasoning: Enhance logical thinking and problem-solving (e.g., <code>Reasoning</code>, <code>StepByStep</code>, <code>TreeOfThought</code>)</li> <li>Format: Control output format and structure (e.g., <code>OutputFormat</code>, <code>Bullet</code>, <code>TableFormat</code>)</li> <li>Style: Modify tone, voice, and writing style (e.g., <code>Tone</code>, <code>Academic</code>, <code>Creative</code>)</li> <li>Audience: Target specific audiences (e.g., <code>Audience</code>, <code>ELI5</code>, <code>Technical</code>)</li> <li>Persona: Adopt specific roles or personalities (e.g., <code>Persona</code>, <code>AsExpert</code>, <code>Professional</code>)</li> <li>Domain: Focus on specific knowledge domains (e.g., <code>Scientific</code>, <code>Legal</code>, <code>Medical</code>)</li> <li>Length: Control response length (e.g., <code>Concise</code>, <code>Detailed</code>, <code>Summary</code>)</li> </ul>"},{"location":"concepts/#core-classes-and-functions","title":"Core Classes and Functions","text":""},{"location":"concepts/#decoratorbase","title":"DecoratorBase","text":"<p>The abstract base class for all decorators, providing common functionality:</p> <pre><code>class DecoratorBase:\n    \"\"\"Base class for all decorators.\"\"\"\n\n    def __init__(self, **kwargs):\n        \"\"\"Initialize with parameters as keyword arguments.\"\"\"\n\n    def __call__(self, text: str) -&gt; str:\n        \"\"\"Apply the decorator to the given text.\"\"\"\n\n    def to_string(self) -&gt; str:\n        \"\"\"Convert the decorator to its string representation.\"\"\"\n</code></pre>"},{"location":"concepts/#dynamicdecorator","title":"DynamicDecorator","text":"<p>The implementation class for dynamically defined decorators:</p> <pre><code>class DynamicDecorator(DecoratorBase):\n    \"\"\"Dynamic decorator implementation.\"\"\"\n\n    @classmethod\n    def from_definition(cls, definition: DecoratorDefinition) -&gt; 'DynamicDecorator':\n        \"\"\"Create a decorator class from a definition.\"\"\"\n\n    def __call__(self, text: str) -&gt; str:\n        \"\"\"Apply the decorator to the given text.\"\"\"\n</code></pre>"},{"location":"concepts/#decoratordefinition","title":"DecoratorDefinition","text":"<p>The class that defines a decorator's properties:</p> <pre><code>class DecoratorDefinition:\n    \"\"\"Definition of a decorator.\"\"\"\n\n    def __init__(\n        self,\n        name: str,\n        description: str,\n        category: str,\n        parameters: List[Dict[str, Any]],\n        transform_function: str\n    ):\n        \"\"\"Initialize a decorator definition.\"\"\"\n</code></pre>"},{"location":"concepts/#key-functions","title":"Key Functions","text":"<ul> <li>apply_dynamic_decorators: Parse and apply decorators from a text prompt</li> <li>create_decorator_instance: Create an instance of a decorator by name</li> <li>get_available_decorators: Get a list of all registered decorators</li> <li>register_decorator: Register a new decorator definition</li> </ul>"},{"location":"concepts/#transformation-process","title":"Transformation Process","text":"<p>When decorators are applied to a prompt, the framework follows these steps:</p> <ol> <li>Parsing: Extract decorator names, parameters, and the base prompt text</li> <li>Loading: Load decorator definitions from the registry</li> <li>Parameter Validation: Validate parameter values against definitions</li> <li>Transformation: Apply each decorator's transform function in sequence</li> <li>Composition: Combine the transformed text from multiple decorators</li> </ol> <p>The transformation converts decorator annotations into natural language instructions that the LLM can understand:</p> <pre><code># Original prompt with decorator\n+++Reasoning(depth=comprehensive)\nWhat are the environmental impacts of electric vehicles?\n\n# Transformed prompt\nPlease provide detailed reasoning in your response. Show your thought process step by step before reaching a conclusion. Provide a very thorough and detailed analysis with multiple perspectives.\n\nWhat are the environmental impacts of electric vehicles?\n</code></pre>"},{"location":"concepts/#decorator-compatibility","title":"Decorator Compatibility","text":"<p>The framework includes mechanisms for handling decorator conflicts:</p> <ol> <li>Precedence: When decorators have incompatible requirements, the later decorator takes precedence</li> <li>Parameter Conflicts: For parameter conflicts, the parameter in the later decorator takes precedence</li> <li>Documentation: The framework provides documentation on known decorator conflicts</li> </ol>"},{"location":"concepts/#extension-mechanisms","title":"Extension Mechanisms","text":"<p>The framework supports several extension mechanisms:</p> <ol> <li>Custom Decorators: Users can define and register their own decorators</li> <li>Decorator Packages: Collections of related decorators can be packaged and distributed</li> <li>Integration Adapters: The framework can be integrated with different LLM providers and platforms</li> </ol>"},{"location":"concepts/#next-steps","title":"Next Steps","text":"<ul> <li>Learn how to create custom decorators</li> <li>Explore the MCP integration for using decorators with Claude and other LLMs</li> <li>See the specification for detailed technical information</li> </ul>"},{"location":"contributing/","title":"Contributing to Prompt Decorators","text":"<p>Thank you for your interest in contributing to the Prompt Decorators project! This document provides guidelines and instructions for contributing.</p>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>Please read and follow our Code of Conduct.</p>"},{"location":"contributing/#how-to-contribute","title":"How to Contribute","text":"<p>There are many ways to contribute to the Prompt Decorators project:</p> <ol> <li>Report bugs: If you find a bug, please create an issue on our GitHub repository.</li> <li>Suggest features: If you have an idea for a new feature, please create an issue on our GitHub repository.</li> <li>Improve documentation: Help us improve our documentation by fixing typos, adding examples, or clarifying explanations.</li> <li>Write code: Contribute bug fixes, new features, or improvements to existing features.</li> </ol>"},{"location":"contributing/#development-setup","title":"Development Setup","text":""},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11 or higher</li> <li>Poetry (dependency management)</li> <li>git</li> </ul>"},{"location":"contributing/#setting-up-the-development-environment","title":"Setting Up the Development Environment","text":"<ol> <li>Fork the repository on GitHub.</li> <li>Clone your fork locally:    <pre><code>git clone https://github.com/yourusername/prompt-decorators.git\ncd prompt-decorators\n</code></pre></li> <li>Install Poetry if you don't have it already:    <pre><code>curl -sSL https://install.python-poetry.org | python3 -\n</code></pre></li> <li>Install the package with all dependencies:    <pre><code>poetry install\n</code></pre></li> </ol>"},{"location":"contributing/#running-tests","title":"Running Tests","text":"<p>We use pytest for testing. To run the tests:</p> <pre><code>poetry run pytest\n</code></pre> <p>To run tests with coverage:</p> <pre><code>poetry run pytest --cov=prompt_decorators\n</code></pre>"},{"location":"contributing/#code-style","title":"Code Style","text":"<p>We follow the PEP 8 style guide for Python code. We use the following tools to enforce code style:</p> <ul> <li>black: For code formatting</li> <li>isort: For import sorting</li> <li>ruff: For linting</li> </ul> <p>To format your code:</p> <pre><code>poetry run black prompt_decorators tests\npoetry run isort prompt_decorators tests\n</code></pre> <p>To check your code for style issues:</p> <pre><code>poetry run ruff check prompt_decorators tests\n</code></pre>"},{"location":"contributing/#type-checking","title":"Type Checking","text":"<p>We use mypy for type checking. To run type checking:</p> <pre><code>poetry run mypy prompt_decorators\n</code></pre>"},{"location":"contributing/#docstring-standards","title":"Docstring Standards","text":"<p>We follow Google-style docstrings for all Python code. Please refer to our Docstring Standards for detailed guidelines.</p> <p>To check if your docstrings follow our standards:</p> <pre><code>./standardize_docstrings.py path/to/your/file.py --report\n</code></pre> <p>To automatically fix common docstring issues:</p> <pre><code>./fix_docstrings.py path/to/your/file.py\n</code></pre> <p>We've also set up pre-commit hooks to check docstrings before commits:</p> <pre><code># Install pre-commit hooks\npoetry run pre-commit install\n</code></pre>"},{"location":"contributing/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>We use pre-commit hooks to check code style, types, and docstrings before commits. To install the pre-commit hooks:</p> <pre><code>poetry run pre-commit install\n</code></pre>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Create a new branch for your feature or bug fix:    <pre><code>git checkout -b feature/your-feature-name\n</code></pre></li> <li>Make your changes and commit them with a descriptive commit message.</li> <li>Push your branch to your fork:    <pre><code>git push origin feature/your-feature-name\n</code></pre></li> <li>Create a pull request from your branch to the main repository.</li> <li>Ensure that all tests pass and there are no style issues.</li> <li>Update the documentation if necessary.</li> <li>Wait for a maintainer to review your pull request.</li> </ol>"},{"location":"contributing/#adding-a-new-decorator","title":"Adding a New Decorator","text":"<p>To add a new decorator to the registry:</p> <ol> <li>Create a new JSON file in the appropriate category directory under <code>registry/</code>.</li> <li>Define the decorator's parameters, constraints, and metadata.</li> <li>Run the code generation script:    <pre><code>poetry run python generate_decorators.py\n</code></pre></li> <li>Add tests for your new decorator.</li> <li>Update the documentation if necessary.</li> </ol>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>We use MkDocs with the Material theme for documentation. To build the documentation locally:</p> <pre><code>poetry run mkdocs serve\n</code></pre> <p>This will start a local server at http://localhost:8000 where you can preview the documentation.</p>"},{"location":"contributing/#license","title":"License","text":"<p>By contributing to the Prompt Decorators project, you agree that your contributions will be licensed under the project's MIT License.</p>"},{"location":"creating_decorators/","title":"Creating Decorators","text":"<p>This guide explains how to create your own custom decorators with the Prompt Decorators framework.</p>"},{"location":"creating_decorators/#overview","title":"Overview","text":"<p>Custom decorators allow you to extend the framework with your own specialized behaviors. This is useful for:</p> <ul> <li>Creating domain-specific decorators for your field</li> <li>Building organization-specific prompt enhancements</li> <li>Optimizing decorators for particular LLM providers</li> <li>Implementing novel prompt engineering techniques</li> </ul>"},{"location":"creating_decorators/#decorator-structure","title":"Decorator Structure","text":"<p>Each decorator consists of:</p> <ol> <li>A name that uniquely identifies it</li> <li>A description explaining its purpose</li> <li>A category for organizational purposes</li> <li>A set of parameters that control its behavior</li> <li>A transform function that applies the decoration</li> </ol>"},{"location":"creating_decorators/#creating-a-basic-decorator","title":"Creating a Basic Decorator","text":""},{"location":"creating_decorators/#using-decoratordefinition","title":"Using DecoratorDefinition","text":"<p>The simplest way to create a custom decorator is using the <code>DecoratorDefinition</code> class:</p> <pre><code>from prompt_decorators import (\n    DecoratorDefinition,\n    register_decorator,\n    create_decorator_instance\n)\n\n# Define a custom decorator\nmy_decorator_def = DecoratorDefinition(\n    name=\"CustomPrefix\",\n    description=\"Adds a custom prefix to the prompt\",\n    category=\"Format\",\n    parameters=[\n        {\n            \"name\": \"prefix\",\n            \"type\": \"string\",\n            \"description\": \"Text to add before the prompt\",\n            \"default\": \"IMPORTANT: \"\n        }\n    ],\n    transform_function=\"return prefix + text;\"\n)\n\n# Register the decorator for use\nregister_decorator(my_decorator_def)\n\n# Create and use an instance of your decorator\ncustom_prefix = create_decorator_instance(\"CustomPrefix\", prefix=\"ATTENTION: \")\nresult = custom_prefix(\"Please review this document carefully.\")\nprint(result)  # \"ATTENTION: Please review this document carefully.\"\n</code></pre>"},{"location":"creating_decorators/#transform-function","title":"Transform Function","text":"<p>The <code>transform_function</code> is the heart of your decorator. It's a JavaScript function (as a string) that takes the input text and applies the decoration. The function has access to:</p> <ul> <li>All defined parameters (e.g., <code>prefix</code> in the example above)</li> <li>The input text as <code>text</code></li> <li>Must return the transformed text</li> </ul> <p>Examples of transform functions:</p> <pre><code>// Simple addition of prefix and suffix\n\"return prefix + text + suffix;\"\n\n// Conditional transformation\n\"if (style === 'formal') { return 'Formally: ' + text; } else { return 'Casually: ' + text; }\"\n\n// Text manipulation\n\"return text.split('.').join('.\\n').trim();\"\n</code></pre>"},{"location":"creating_decorators/#parameters","title":"Parameters","text":"<p>Parameters allow your decorator to be customized. Each parameter has these properties:</p> <ul> <li><code>name</code>: The parameter's identifier</li> <li><code>type</code>: Data type (<code>string</code>, <code>boolean</code>, <code>number</code>, <code>enum</code>)</li> <li><code>description</code>: Documentation for the parameter</li> <li><code>default</code>: Default value if not specified</li> <li><code>enum</code> (optional): List of allowed values for enum types</li> </ul> <p>Example of complex parameters:</p> <pre><code>parameters=[\n    {\n        \"name\": \"style\",\n        \"type\": \"enum\",\n        \"description\": \"The style of formatting to apply\",\n        \"enum\": [\"formal\", \"casual\", \"technical\"],\n        \"default\": \"formal\"\n    },\n    {\n        \"name\": \"include_timestamp\",\n        \"type\": \"boolean\",\n        \"description\": \"Whether to include a timestamp\",\n        \"default\": False\n    },\n    {\n        \"name\": \"indent_level\",\n        \"type\": \"number\",\n        \"description\": \"Level of indentation (0-4)\",\n        \"default\": 0\n    }\n]\n</code></pre>"},{"location":"creating_decorators/#advanced-decorator-creation","title":"Advanced Decorator Creation","text":""},{"location":"creating_decorators/#composition-of-decorators","title":"Composition of Decorators","text":"<p>You can create decorators that compose other decorators:</p> <pre><code>composite_decorator_def = DecoratorDefinition(\n    name=\"FormalSteps\",\n    description=\"Combines formal tone with step-by-step instructions\",\n    category=\"Composite\",\n    parameters=[\n        {\n            \"name\": \"numbered\",\n            \"type\": \"boolean\",\n            \"description\": \"Whether to number the steps\",\n            \"default\": True\n        }\n    ],\n    # First apply Tone(style=formal), then StepByStep with the numbered parameter\n    transform_function=\"\"\"\n    const toneDecorator = createDecoratorInstance('Tone', { style: 'formal' });\n    const stepDecorator = createDecoratorInstance('StepByStep', { numbered: numbered });\n    return stepDecorator(toneDecorator(text));\n    \"\"\"\n)\n</code></pre>"},{"location":"creating_decorators/#conditional-logic","title":"Conditional Logic","text":"<p>You can use conditional logic in your transform function:</p> <pre><code>conditional_decorator_def = DecoratorDefinition(\n    name=\"AdaptiveResponse\",\n    description=\"Adapts the response based on complexity\",\n    category=\"Adaptive\",\n    parameters=[\n        {\n            \"name\": \"complexity\",\n            \"type\": \"enum\",\n            \"description\": \"Complexity level of the input\",\n            \"enum\": [\"simple\", \"moderate\", \"complex\"],\n            \"default\": \"moderate\"\n        }\n    ],\n    transform_function=\"\"\"\n    if (complexity === 'simple') {\n        const eli5 = createDecoratorInstance('ELI5');\n        return eli5(text);\n    } else if (complexity === 'moderate') {\n        const audience = createDecoratorInstance('Audience', { level: 'intermediate' });\n        return audience(text);\n    } else {\n        const detailed = createDecoratorInstance('Detailed', { depth: 'comprehensive' });\n        return detailed(text);\n    }\n    \"\"\"\n)\n</code></pre>"},{"location":"creating_decorators/#advanced-text-processing","title":"Advanced Text Processing","text":"<p>For more complex transformations, you can perform detailed text processing:</p> <pre><code>text_processor_def = DecoratorDefinition(\n    name=\"QueryFocus\",\n    description=\"Focuses a query on specific aspects\",\n    category=\"Query\",\n    parameters=[\n        {\n            \"name\": \"aspects\",\n            \"type\": \"string\",\n            \"description\": \"Comma-separated list of aspects to focus on\",\n            \"default\": \"pros,cons\"\n        }\n    ],\n    transform_function=\"\"\"\n    const aspectList = aspects.split(',').map(a =&gt; a.trim());\n    let result = \"Please focus your analysis on the following aspects:\\\\n\";\n\n    for (let i = 0; i &lt; aspectList.length; i++) {\n        result += `${i+1}. ${aspectList[i]}\\\\n`;\n    }\n\n    result += \"\\\\n\" + text;\n    return result;\n    \"\"\"\n)\n</code></pre>"},{"location":"creating_decorators/#best-practices","title":"Best Practices","text":""},{"location":"creating_decorators/#parameter-design","title":"Parameter Design","text":"<ol> <li>Default Values: Always provide sensible default values for parameters</li> <li>Clear Names: Use descriptive, self-explanatory parameter names</li> <li>Limited Options: For enum types, limit options to a manageable set</li> <li>Documentation: Thoroughly document each parameter's purpose and effect</li> </ol>"},{"location":"creating_decorators/#transform-function_1","title":"Transform Function","text":"<ol> <li>Keep It Simple: Prefer simple transforms that do one thing well</li> <li>Error Handling: Include error handling for unexpected inputs</li> <li>Performance: Avoid unnecessary complexity that could impact performance</li> <li>Testability: Create transforms that can be easily tested</li> </ol>"},{"location":"creating_decorators/#documentation","title":"Documentation","text":"<ol> <li>Clear Description: Provide a concise, clear description of what your decorator does</li> <li>Examples: Include examples of how to use your decorator</li> <li>Category: Choose an appropriate category that matches your decorator's purpose</li> <li>Compatibility: Document any known conflicts with other decorators</li> </ol>"},{"location":"creating_decorators/#testing-your-decorators","title":"Testing Your Decorators","text":"<p>To test your custom decorators:</p> <pre><code># Define and register your decorator\nmy_decorator_def = DecoratorDefinition(...)\nregister_decorator(my_decorator_def)\n\n# Test with different inputs\ntest_cases = [\n    \"Simple test case\",\n    \"Another test with different format\",\n    \"Edge case with special characters: @#$%^&amp;*()\"\n]\n\nmy_decorator = create_decorator_instance(\"MyDecorator\", param1=\"value1\")\n\nfor test in test_cases:\n    transformed = my_decorator(test)\n    print(f\"Original: {test}\")\n    print(f\"Transformed: {transformed}\")\n    print(\"-\" * 50)\n</code></pre>"},{"location":"creating_decorators/#loading-decorators-from-files","title":"Loading Decorators from Files","text":"<p>For reusability, you can define decorators in JSON files:</p> <pre><code>{\n  \"name\": \"BulletedSummary\",\n  \"description\": \"Creates a bulleted summary format\",\n  \"category\": \"Format\",\n  \"parameters\": [\n    {\n      \"name\": \"points\",\n      \"type\": \"number\",\n      \"description\": \"Number of bullet points to request\",\n      \"default\": 5\n    },\n    {\n      \"name\": \"style\",\n      \"type\": \"enum\",\n      \"description\": \"Bullet point style\",\n      \"enum\": [\"dash\", \"star\", \"arrow\"],\n      \"default\": \"dash\"\n    }\n  ],\n  \"transform_function\": \"return `Please summarize the following into ${points} key points using ${style === 'dash' ? '-' : style === 'star' ? '*' : '\u2192'} as bullet points:\\\\n\\\\n${text}`;\"\n}\n</code></pre> <p>Load and register this decorator:</p> <pre><code>import json\nfrom prompt_decorators import DecoratorDefinition, register_decorator\n\n# Load from a JSON file\nwith open(\"path/to/my_decorators.json\", \"r\") as f:\n    decorators_data = json.load(f)\n\n# If it's a single decorator\ndecorator_def = DecoratorDefinition(**decorators_data)\nregister_decorator(decorator_def)\n\n# If it's an array of decorators\nfor decorator_data in decorators_data:\n    decorator_def = DecoratorDefinition(**decorator_data)\n    register_decorator(decorator_def)\n</code></pre>"},{"location":"creating_decorators/#decorator-registry-management","title":"Decorator Registry Management","text":""},{"location":"creating_decorators/#listing-decorators","title":"Listing Decorators","text":"<pre><code>from prompt_decorators import get_available_decorators\n\n# Get all decorators\nall_decorators = get_available_decorators()\n\n# Filter by category\nformat_decorators = [d for d in all_decorators if d.category == \"Format\"]\n\n# Find a specific decorator\nreasoning_decorator = next((d for d in all_decorators if d.name == \"Reasoning\"), None)\n</code></pre>"},{"location":"creating_decorators/#decorator-persistence","title":"Decorator Persistence","text":"<p>To persist your custom decorators across sessions, you can:</p> <ol> <li>Save them to JSON files</li> <li>Load and register them at application startup</li> <li>Organize them into decorator packages</li> </ol>"},{"location":"creating_decorators/#domain-specific-examples","title":"Domain-Specific Examples","text":""},{"location":"creating_decorators/#scientific-research-decorator","title":"Scientific Research Decorator","text":"<pre><code>scientific_method_def = DecoratorDefinition(\n    name=\"ScientificMethod\",\n    description=\"Structures response according to scientific method\",\n    category=\"Domain\",\n    parameters=[\n        {\n            \"name\": \"include_abstract\",\n            \"type\": \"boolean\",\n            \"description\": \"Whether to include an abstract section\",\n            \"default\": True\n        }\n    ],\n    transform_function=\"\"\"\n    let result = \"Please structure your response according to the scientific method with the following sections:\\\\n\";\n\n    if (include_abstract) {\n        result += \"1. Abstract: A brief summary of the entire analysis\\\\n\";\n    }\n\n    result += `${include_abstract ? \"2\" : \"1\"}. Question/Problem: Clearly define the research question\\\\n`;\n    result += `${include_abstract ? \"3\" : \"2\"}. Hypothesis: Formulate a testable hypothesis\\\\n`;\n    result += `${include_abstract ? \"4\" : \"3\"}. Methodology: Describe how to test the hypothesis\\\\n`;\n    result += `${include_abstract ? \"5\" : \"4\"}. Results: Present the expected findings\\\\n`;\n    result += `${include_abstract ? \"6\" : \"5\"}. Discussion: Interpret the results and their implications\\\\n`;\n    result += `${include_abstract ? \"7\" : \"6\"}. Conclusion: Summarize the findings and suggest next steps\\\\n\\\\n`;\n\n    result += text;\n    return result;\n    \"\"\"\n)\n</code></pre>"},{"location":"creating_decorators/#business-analysis-decorator","title":"Business Analysis Decorator","text":"<pre><code>business_analysis_def = DecoratorDefinition(\n    name=\"BusinessAnalysis\",\n    description=\"Structures response as a business analysis\",\n    category=\"Domain\",\n    parameters=[\n        {\n            \"name\": \"framework\",\n            \"type\": \"enum\",\n            \"description\": \"Business analysis framework to use\",\n            \"enum\": [\"SWOT\", \"Porter\", \"PESTEL\"],\n            \"default\": \"SWOT\"\n        }\n    ],\n    transform_function=\"\"\"\n    let result = `Please analyze the following using a ${framework} framework:\\\\n\\\\n`;\n\n    if (framework === \"SWOT\") {\n        result += \"Structure your analysis with these sections:\\\\n\";\n        result += \"1. Strengths: Internal positive factors\\\\n\";\n        result += \"2. Weaknesses: Internal negative factors\\\\n\";\n        result += \"3. Opportunities: External positive factors\\\\n\";\n        result += \"4. Threats: External negative factors\\\\n\\\\n\";\n    } else if (framework === \"Porter\") {\n        result += \"Structure your analysis using Porter's Five Forces:\\\\n\";\n        result += \"1. Threat of new entrants\\\\n\";\n        result += \"2. Bargaining power of buyers\\\\n\";\n        result += \"3. Bargaining power of suppliers\\\\n\";\n        result += \"4. Threat of substitute products or services\\\\n\";\n        result += \"5. Intensity of competitive rivalry\\\\n\\\\n\";\n    } else if (framework === \"PESTEL\") {\n        result += \"Structure your analysis using PESTEL framework:\\\\n\";\n        result += \"1. Political factors\\\\n\";\n        result += \"2. Economic factors\\\\n\";\n        result += \"3. Social factors\\\\n\";\n        result += \"4. Technological factors\\\\n\";\n        result += \"5. Environmental factors\\\\n\";\n        result += \"6. Legal factors\\\\n\\\\n\";\n    }\n\n    result += text;\n    return result;\n    \"\"\"\n)\n</code></pre>"},{"location":"creating_decorators/#next-steps","title":"Next Steps","text":"<ul> <li>Explore the Tutorial: Creating a Custom Decorator for step-by-step examples</li> <li>Learn about Tutorial: Combining Decorators for advanced use cases</li> <li>See the specification for technical details of the decorator system</li> </ul>"},{"location":"development/","title":"Development Setup","text":"<p>This guide will help you set up a development environment for contributing to the Prompt Decorators project.</p>"},{"location":"development/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following installed:</p> <ul> <li>Python 3.11 or higher</li> <li>Git</li> <li>Poetry (recommended) or pip</li> </ul>"},{"location":"development/#setting-up-your-development-environment","title":"Setting Up Your Development Environment","text":""},{"location":"development/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/synaptiai/prompt-decorators.git\ncd prompt-decorators\n</code></pre>"},{"location":"development/#2-set-up-a-virtual-environment","title":"2. Set Up a Virtual Environment","text":""},{"location":"development/#using-poetry-recommended","title":"Using Poetry (Recommended)","text":"<p>Poetry automatically creates and manages a virtual environment for you:</p> <pre><code># Install dependencies\npoetry install\n\n# Install development dependencies\npoetry install --with dev,test,docs\n</code></pre>"},{"location":"development/#using-venv-and-pip","title":"Using venv and pip","text":"<pre><code># Create a virtual environment\npython -m venv venv\n\n# Activate the virtual environment\n# On Windows:\nvenv\\Scripts\\activate\n# On macOS/Linux:\nsource venv/bin/activate\n\n# Install dependencies\npip install -e \".[dev,test,docs]\"\n</code></pre>"},{"location":"development/#3-install-pre-commit-hooks","title":"3. Install Pre-commit Hooks","text":"<p>We use pre-commit hooks to ensure code quality:</p> <pre><code># Install pre-commit\npip install pre-commit\n\n# Install the pre-commit hooks\npre-commit install\n</code></pre>"},{"location":"development/#4-run-tests-to-verify-setup","title":"4. Run Tests to Verify Setup","text":"<pre><code># Using Poetry\npoetry run pytest\n\n# Using pip\npytest\n</code></pre> <p>If all tests pass, your environment is set up correctly!</p>"},{"location":"development/#project-structure","title":"Project Structure","text":"<p>The project follows this structure:</p> <pre><code>prompt-decorators/\n\u251c\u2500\u2500 prompt_decorators/          # Main package\n\u2502   \u251c\u2500\u2500 __init__.py             # Package exports\n\u2502   \u251c\u2500\u2500 core/                   # Core decorator functionality\n\u2502   \u251c\u2500\u2500 schemas/                # JSON schemas\n\u2502   \u251c\u2500\u2500 utils/                  # Utility functions\n\u2502   \u2514\u2500\u2500 integrations/           # Integration with other systems\n\u251c\u2500\u2500 registry/                   # Decorator definitions\n\u251c\u2500\u2500 schemas/                    # JSON schema definitions\n\u251c\u2500\u2500 tests/                      # Test suite\n\u251c\u2500\u2500 docs/                       # Documentation\n\u251c\u2500\u2500 examples/                   # Example usage\n\u251c\u2500\u2500 scripts/                    # Development scripts\n\u251c\u2500\u2500 pyproject.toml              # Project metadata and dependencies\n\u2514\u2500\u2500 README.md                   # Project overview\n</code></pre>"},{"location":"development/#development-workflow","title":"Development Workflow","text":""},{"location":"development/#setting-up-your-branch","title":"Setting Up Your Branch","text":"<pre><code># Create a new branch for your feature/bugfix\ngit checkout -b feature/your-feature-name\n</code></pre>"},{"location":"development/#making-changes","title":"Making Changes","text":"<ol> <li>Make your changes to the codebase</li> <li>Write tests for your changes</li> <li>Update documentation if necessary</li> </ol>"},{"location":"development/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\npytest\n\n# Run tests with coverage report\npytest --cov=prompt_decorators\n\n# Run specific tests\npytest tests/test_specific_file.py\n\n# Run tests with verbose output\npytest -v\n</code></pre>"},{"location":"development/#running-linters","title":"Running Linters","text":"<pre><code># Run ruff (linting and formatting)\nruff check .\nruff format .\n\n# Run mypy (type checking)\nmypy prompt_decorators\n</code></pre>"},{"location":"development/#building-documentation","title":"Building Documentation","text":"<pre><code># Build documentation\ncd docs\nmkdocs build\n\n# Serve documentation locally\nmkdocs serve\n</code></pre> <p>Then visit http://localhost:8000 to view the documentation.</p>"},{"location":"development/#working-with-decorators","title":"Working with Decorators","text":""},{"location":"development/#creating-a-new-decorator","title":"Creating a New Decorator","text":"<ol> <li>Define your decorator in the registry directory:</li> </ol> <pre><code>// registry/my_custom_decorator.json\n{\n  \"name\": \"MyCustomDecorator\",\n  \"description\": \"A custom decorator that does X\",\n  \"category\": \"Custom\",\n  \"parameters\": [\n    {\n      \"name\": \"param1\",\n      \"type\": \"string\",\n      \"description\": \"Description of parameter\",\n      \"default\": \"default value\"\n    }\n  ],\n  \"transform_function\": \"return 'Modified: ' + text;\"\n}\n</code></pre> <ol> <li>Test your decorator:</li> </ol> <pre><code>from prompt_decorators import apply_dynamic_decorators, register_decorator, DecoratorDefinition\n\n# Define your decorator in Python\nmy_decorator_def = DecoratorDefinition(\n    name=\"MyCustomDecorator\",\n    description=\"A custom decorator that does X\",\n    category=\"Custom\",\n    parameters=[\n        {\n            \"name\": \"param1\",\n            \"type\": \"string\",\n            \"description\": \"Description of parameter\",\n            \"default\": \"default value\"\n        }\n    ],\n    transform_function=\"return 'Modified: ' + text;\"\n)\n\n# Register it\nregister_decorator(my_decorator_def)\n\n# Test it\nprompt = \"\"\"\n+++MyCustomDecorator(param1=\"test value\")\nThis is a test prompt\n\"\"\"\n\ntransformed = apply_dynamic_decorators(prompt)\nprint(transformed)\n</code></pre>"},{"location":"development/#running-the-validator","title":"Running the Validator","text":"<p>Use the validator to check your decorator:</p> <pre><code>python -m prompt_decorators.tools.validator validate path/to/my_decorator.json\n</code></pre>"},{"location":"development/#code-style-guidelines","title":"Code Style Guidelines","text":""},{"location":"development/#python-code","title":"Python Code","text":"<ul> <li>Follow PEP 8 style guidelines</li> <li>Use ruff for formatting and linting</li> <li>Include type hints for all functions and methods</li> <li>Write docstrings in Google style format</li> </ul>"},{"location":"development/#decorator-definitions","title":"Decorator Definitions","text":"<ul> <li>Use clear, descriptive names for decorators and parameters</li> <li>Provide comprehensive descriptions</li> <li>Include reasonable default values for parameters</li> <li>Write efficient transform functions</li> </ul>"},{"location":"development/#commit-messages","title":"Commit Messages","text":"<p>Follow the Conventional Commits format:</p> <pre><code>&lt;type&gt;(optional scope): &lt;description&gt;\n\n[optional body]\n\n[optional footer(s)]\n</code></pre> <p>Types include: - <code>feat:</code> (new feature) - <code>fix:</code> (bug fix) - <code>docs:</code> (documentation changes) - <code>style:</code> (formatting changes) - <code>refactor:</code> (code restructuring) - <code>test:</code> (adding or refining tests) - <code>chore:</code> (maintenance tasks)</p>"},{"location":"development/#contributing-changes","title":"Contributing Changes","text":""},{"location":"development/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Ensure all tests pass</li> <li>Update documentation if needed</li> <li>Create a pull request with a clear description of changes</li> <li>Reference any related issues</li> <li>Wait for review and address any feedback</li> </ol>"},{"location":"development/#code-review-checklist","title":"Code Review Checklist","text":"<p>Before submitting a PR, check that:</p> <ul> <li> Code follows the project's style guidelines</li> <li> Tests are added/updated and all tests pass</li> <li> Documentation is updated to reflect changes</li> <li> Code is properly typed with type annotations</li> <li> Pre-commit hooks pass with no issues</li> <li> Commit messages follow the project's format</li> </ul>"},{"location":"development/#dependency-management","title":"Dependency Management","text":""},{"location":"development/#adding-a-new-dependency","title":"Adding a New Dependency","text":""},{"location":"development/#using-poetry","title":"Using Poetry","text":"<pre><code># Add a main dependency\npoetry add package-name\n\n# Add a development dependency\npoetry add --group dev package-name\n\n# Add a test dependency\npoetry add --group test package-name\n\n# Add a documentation dependency\npoetry add --group docs package-name\n</code></pre>"},{"location":"development/#using-pip","title":"Using pip","text":"<p>Update <code>setup.py</code> or <code>pyproject.toml</code> with the new dependency, then:</p> <pre><code>pip install -e \".[dev,test,docs]\"\n</code></pre>"},{"location":"development/#testing-guidelines","title":"Testing Guidelines","text":""},{"location":"development/#writing-tests","title":"Writing Tests","text":"<ul> <li>Every feature should have corresponding tests</li> <li>Use pytest fixtures for common test setups</li> <li>Aim for high test coverage (&gt;90%)</li> <li>Include both unit tests and integration tests</li> </ul>"},{"location":"development/#test-structure","title":"Test Structure","text":"<pre><code>import pytest\nfrom prompt_decorators import apply_dynamic_decorators\n\ndef test_decorator_functionality():\n    \"\"\"Test that the decorator transforms the text as expected.\"\"\"\n    # Arrange\n    prompt = \"\"\"\n    +++TestDecorator(param1=\"value\")\n    Test prompt\n    \"\"\"\n\n    # Act\n    result = apply_dynamic_decorators(prompt)\n\n    # Assert\n    assert \"Expected transformation\" in result\n    assert \"Test prompt\" in result\n</code></pre>"},{"location":"development/#release-process","title":"Release Process","text":""},{"location":"development/#preparing-a-release","title":"Preparing a Release","text":"<ol> <li>Update version in <code>pyproject.toml</code></li> <li>Update CHANGELOG.md</li> <li>Ensure all tests pass</li> <li>Build the distribution:</li> </ol> <pre><code># Using Poetry\npoetry build\n\n# Using setuptools\npython -m build\n</code></pre>"},{"location":"development/#publishing-a-release","title":"Publishing a Release","text":"<pre><code># Using Poetry\npoetry publish\n\n# Using Twine\ntwine upload dist/*\n</code></pre>"},{"location":"development/#continuous-integration","title":"Continuous Integration","text":"<p>We use GitHub Actions for CI. Workflows are defined in <code>.github/workflows/</code>:</p> <ul> <li><code>tests.yml</code>: Runs tests on multiple Python versions</li> <li><code>lint.yml</code>: Runs linters and style checks</li> <li><code>docs.yml</code>: Builds and validates documentation</li> <li><code>release.yml</code>: Handles package publishing</li> </ul>"},{"location":"development/#getting-help","title":"Getting Help","text":"<p>If you need help during development:</p> <ul> <li>Check the documentation</li> <li>Open an issue on GitHub</li> <li>Contact the maintainers</li> </ul>"},{"location":"development/#next-steps","title":"Next Steps","text":"<ul> <li>Read the development guide for more detailed workflow information</li> <li>Check the core concepts to understand the framework's architecture</li> <li>Explore the tutorials for practical examples</li> </ul>"},{"location":"development_guide/","title":"Development Guide","text":"<p>This guide provides comprehensive information for developers working on the Prompt Decorators project. It covers best practices, workflows, and coding standards to ensure consistent, high-quality contributions.</p>"},{"location":"development_guide/#development-philosophy","title":"Development Philosophy","text":"<p>The Prompt Decorators project follows these core principles:</p> <ol> <li>Simplicity: Keep the API and implementation as simple as possible</li> <li>Extensibility: Design for future extensions and customizations</li> <li>Quality: Maintain high-quality code through testing and review</li> <li>Documentation: Provide thorough documentation for all components</li> <li>User Focus: Prioritize developer experience and ease of use</li> </ol>"},{"location":"development_guide/#development-workflow","title":"Development Workflow","text":""},{"location":"development_guide/#feature-development-lifecycle","title":"Feature Development Lifecycle","text":"<ol> <li>Planning:</li> <li>Create an issue describing the feature</li> <li>Discuss design and implementation approaches</li> <li> <p>Define acceptance criteria</p> </li> <li> <p>Implementation:</p> </li> <li>Create a new branch (<code>feature/&lt;feature-name&gt;</code>)</li> <li>Implement the feature with tests</li> <li> <p>Update documentation</p> </li> <li> <p>Review:</p> </li> <li>Submit a pull request</li> <li>Address feedback</li> <li> <p>Update implementation as needed</p> </li> <li> <p>Merge:</p> </li> <li>Ensure all checks pass</li> <li>Merge into main branch</li> <li>Delete feature branch</li> </ol>"},{"location":"development_guide/#bug-fix-workflow","title":"Bug Fix Workflow","text":"<ol> <li>Reporting:</li> <li>Create an issue with steps to reproduce</li> <li>Include expected vs. actual behavior</li> <li> <p>Add relevant logs or screenshots</p> </li> <li> <p>Analysis:</p> </li> <li>Verify the bug</li> <li>Identify the root cause</li> <li> <p>Determine the best approach to fix</p> </li> <li> <p>Implementation:</p> </li> <li>Create a new branch (<code>bugfix/&lt;bug-description&gt;</code>)</li> <li>Fix the bug and add tests to prevent regression</li> <li> <p>Update documentation if needed</p> </li> <li> <p>Review and Merge:</p> </li> <li>Submit a pull request</li> <li>Ensure all checks pass</li> <li>Merge after approval</li> </ol>"},{"location":"development_guide/#working-with-issues","title":"Working with Issues","text":"<ul> <li>Use descriptive titles and detailed descriptions</li> <li>Apply appropriate labels (bug, enhancement, documentation, etc.)</li> <li>Link related issues and pull requests</li> <li>Use task lists for tracking progress</li> </ul>"},{"location":"development_guide/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<ul> <li>Reference the related issue(s) in the PR description</li> <li>Provide a clear summary of changes</li> <li>Include screenshots or examples for UI changes</li> <li>Add reviewers who are familiar with the affected code</li> <li>Respond to feedback promptly</li> </ul>"},{"location":"development_guide/#code-organization","title":"Code Organization","text":""},{"location":"development_guide/#package-structure","title":"Package Structure","text":"<pre><code>prompt_decorators/\n\u251c\u2500\u2500 core/                   # Core decorator functionality\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 base.py             # Base decorator classes\n\u2502   \u251c\u2500\u2500 dynamic_decorator.py # Dynamic decorator implementation\n\u2502   \u2514\u2500\u2500 registry.py         # Decorator registry\n\u251c\u2500\u2500 schemas/                # JSON schemas\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 decorator_schema.py # Decorator schema definitions\n\u2502   \u2514\u2500\u2500 validation.py       # Schema validation utilities\n\u251c\u2500\u2500 utils/                  # Utility functions\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 string_utils.py     # String manipulation utilities\n\u2502   \u2514\u2500\u2500 js_utils.py         # JavaScript-related utilities\n\u251c\u2500\u2500 integrations/           # Integration with other systems\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 mcp/                # Model Context Protocol integration\n\u251c\u2500\u2500 __init__.py             # Public API\n\u251c\u2500\u2500 config.py               # Configuration\n\u2514\u2500\u2500 dynamic_decorators_module.py # Dynamic decorator implementation\n</code></pre>"},{"location":"development_guide/#key-modules-and-components","title":"Key Modules and Components","text":""},{"location":"development_guide/#core-module","title":"Core Module","text":"<p>The <code>core</code> module contains the fundamental decorator classes and functionality:</p> <ul> <li><code>base.py</code>: Contains the <code>DecoratorBase</code> abstract base class that all decorators inherit from</li> <li><code>dynamic_decorator.py</code>: Contains the <code>DynamicDecorator</code> implementation</li> <li><code>registry.py</code>: Manages the decorator registry</li> </ul>"},{"location":"development_guide/#schema-module","title":"Schema Module","text":"<p>The <code>schemas</code> module handles schema definition and validation:</p> <ul> <li><code>decorator_schema.py</code>: Contains the <code>DecoratorSchema</code> and <code>ParameterSchema</code> classes</li> <li><code>validation.py</code>: Provides schema validation utilities</li> </ul>"},{"location":"development_guide/#utils-module","title":"Utils Module","text":"<p>The <code>utils</code> module contains utility functions:</p> <ul> <li><code>string_utils.py</code>: String manipulation, including decoration extraction</li> <li><code>js_utils.py</code>: JavaScript-related utilities, including transform function evaluation</li> </ul>"},{"location":"development_guide/#integrations-module","title":"Integrations Module","text":"<p>The <code>integrations</code> module contains integrations with external systems:</p> <ul> <li><code>mcp/</code>: Model Context Protocol integration</li> </ul>"},{"location":"development_guide/#module-responsibilities","title":"Module Responsibilities","text":"<ol> <li>Core: Responsible for decorator definition, registration, and application</li> <li>Schemas: Responsible for defining and validating decorator schemas</li> <li>Utils: Provides utility functions for string manipulation and JavaScript execution</li> <li>Integrations: Connects with external systems and tools</li> </ol>"},{"location":"development_guide/#coding-standards","title":"Coding Standards","text":""},{"location":"development_guide/#python-style-guidelines","title":"Python Style Guidelines","text":"<ul> <li>Follow PEP 8 style guidelines</li> <li>Use <code>ruff</code> for formatting and linting</li> <li>Maximum line length of 100 characters</li> <li>Use 4 spaces for indentation (not tabs)</li> <li>Use snake_case for function and variable names</li> <li>Use CamelCase for class names</li> <li>Use UPPER_CASE for constants</li> </ul>"},{"location":"development_guide/#type-annotations","title":"Type Annotations","text":"<ul> <li>Use type annotations for all functions and methods</li> <li>Use <code>Optional[T]</code> for parameters that could be <code>None</code></li> <li>Use <code>Union[T1, T2]</code> for parameters that could be multiple types</li> <li>Use <code>Any</code> only when absolutely necessary</li> <li>Use generics (<code>TypeVar</code>, <code>Generic</code>) for flexible typing</li> </ul> <p>Example:</p> <pre><code>from typing import Dict, List, Optional, TypeVar, Generic\n\nT = TypeVar('T')\n\nclass Registry(Generic[T]):\n    def get_item(self, name: str) -&gt; Optional[T]:\n        \"\"\"Get an item from the registry by name.\"\"\"\n        # Implementation\n</code></pre>"},{"location":"development_guide/#documentation-guidelines","title":"Documentation Guidelines","text":""},{"location":"development_guide/#docstrings","title":"Docstrings","text":"<ul> <li>Use Google-style docstrings for all classes, methods, and functions</li> <li>Include a brief description, parameters, return values, and exceptions</li> <li>Add examples for complex functions</li> <li>Document all public APIs</li> </ul> <p>Example:</p> <pre><code>def apply_dynamic_decorators(text: str) -&gt; str:\n    \"\"\"\n    Apply all dynamic decorators found in the text.\n\n    This function extracts decorator annotations from the text, applies\n    the corresponding transformations, and returns the modified text.\n\n    Args:\n        text: The input text containing decorator annotations.\n\n    Returns:\n        The transformed text with decorators applied and annotations removed.\n\n    Raises:\n        DecoratorNotFoundError: If a referenced decorator is not registered.\n\n    Example:\n        &gt;&gt;&gt; apply_dynamic_decorators(\"+++StepByStep(numbered=true)\\\\nExplain quantum computing.\")\n        \"Please break down your explanation into numbered steps.\\\\n\\\\nExplain quantum computing.\"\n    \"\"\"\n    # Implementation\n</code></pre>"},{"location":"development_guide/#code-comments","title":"Code Comments","text":"<ul> <li>Use comments to explain complex logic or non-obvious design decisions</li> <li>Avoid redundant comments that simply restate the code</li> <li>Use TODO, FIXME, or NOTE comments for future work</li> </ul>"},{"location":"development_guide/#error-handling","title":"Error Handling","text":"<ul> <li>Use custom exception classes for specific error cases</li> <li>Provide clear error messages with context</li> <li>Handle exceptions at appropriate levels</li> <li>Use context managers for resource cleanup</li> </ul> <p>Example:</p> <pre><code>class DecoratorNotFoundError(Exception):\n    \"\"\"Raised when a referenced decorator is not found in the registry.\"\"\"\n    pass\n\ndef get_decorator(name: str) -&gt; DecoratorBase:\n    \"\"\"Get a decorator from the registry by name.\"\"\"\n    if name not in _registry:\n        raise DecoratorNotFoundError(f\"Decorator '{name}' not found in registry\")\n    return _registry[name]\n</code></pre>"},{"location":"development_guide/#testing-guidelines","title":"Testing Guidelines","text":""},{"location":"development_guide/#test-organization","title":"Test Organization","text":"<ul> <li>Organize tests to mirror the package structure</li> <li>Use descriptive test names that explain what's being tested</li> <li>Group related tests in classes</li> </ul>"},{"location":"development_guide/#writing-tests","title":"Writing Tests","text":"<ul> <li>Use pytest for unit and integration tests</li> <li>Write test cases for normal operation, edge cases, and error conditions</li> <li>Use fixtures for common setup</li> <li>Use parametrized tests for testing multiple inputs</li> <li>Aim for high test coverage</li> </ul> <p>Example:</p> <pre><code>import pytest\nfrom prompt_decorators import apply_dynamic_decorators, register_decorator, DecoratorDefinition\n\n@pytest.fixture\ndef example_decorator():\n    \"\"\"Fixture that provides a test decorator.\"\"\"\n    decorator_def = DecoratorDefinition(\n        name=\"Example\",\n        description=\"Example decorator for testing\",\n        category=\"Test\",\n        parameters=[\n            {\n                \"name\": \"prefix\",\n                \"type\": \"string\",\n                \"description\": \"Text to prepend\",\n                \"default\": \"Prefix: \"\n            }\n        ],\n        transform_function=\"return prefix + text;\"\n    )\n    register_decorator(decorator_def)\n    return decorator_def\n\ndef test_apply_dynamic_decorators(example_decorator):\n    \"\"\"Test that decorators are correctly applied to text.\"\"\"\n    # Arrange\n    prompt = \"\"\"\n    +++Example(prefix=\"Test: \")\n    This is a test\n    \"\"\"\n\n    # Act\n    result = apply_dynamic_decorators(prompt)\n\n    # Assert\n    assert result.strip() == \"Test: This is a test\"\n</code></pre>"},{"location":"development_guide/#mocking-and-test-doubles","title":"Mocking and Test Doubles","text":"<ul> <li>Use <code>unittest.mock</code> or <code>pytest-mock</code> for mocking</li> <li>Create test doubles (mocks, stubs, fakes) for external dependencies</li> <li>Use mocking judiciously, preferring integration tests when possible</li> </ul>"},{"location":"development_guide/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Minimize JavaScript evaluation overhead</li> <li>Cache expensive operations when appropriate</li> <li>Profile code to identify bottlenecks</li> <li>Be mindful of memory usage with large prompts</li> </ul>"},{"location":"development_guide/#working-with-javascript","title":"Working with JavaScript","text":"<p>The Prompt Decorators framework uses JavaScript for transform functions. Here are some guidelines:</p>"},{"location":"development_guide/#writing-transform-functions","title":"Writing Transform Functions","text":"<ul> <li>Keep transform functions simple and focused</li> <li>Avoid complex logic that is difficult to debug</li> <li>Use ES6 syntax (template literals, arrow functions, etc.)</li> <li>Test with multiple inputs, including edge cases</li> </ul>"},{"location":"development_guide/#javascript-best-practices","title":"JavaScript Best Practices","text":"<ul> <li>Avoid using <code>eval</code> in transform functions</li> <li>Use template literals for string concatenation</li> <li>Handle potential errors (e.g., missing parameters)</li> <li>Keep functions pure when possible</li> </ul> <p>Example:</p> <pre><code>// Good\nconst result = `${prefix}${text}${suffix}`;\n\n// Avoid\nconst result = prefix + text + suffix;\n</code></pre>"},{"location":"development_guide/#security-considerations","title":"Security Considerations","text":"<ul> <li>Validate inputs before executing transform functions</li> <li>Sanitize user inputs to prevent injection attacks</li> <li>Implement timeout mechanisms for complex transforms</li> <li>Avoid exposing sensitive information in transform functions</li> </ul>"},{"location":"development_guide/#working-with-decorators","title":"Working with Decorators","text":""},{"location":"development_guide/#creating-decorators","title":"Creating Decorators","text":"<ul> <li>Choose clear, descriptive names</li> <li>Define sensible default parameter values</li> <li>Include comprehensive descriptions</li> <li>Use appropriate parameter types</li> <li>Test with various inputs and combinations</li> </ul>"},{"location":"development_guide/#decorator-categories","title":"Decorator Categories","text":"<ul> <li>Assign decorators to appropriate categories</li> <li>Document category-specific behavior</li> <li>Consider compatibility between decorators in the same category</li> </ul>"},{"location":"development_guide/#decorator-registry","title":"Decorator Registry","text":"<ul> <li>Register decorators at an appropriate time (import vs. runtime)</li> <li>Handle versioning and deprecation appropriately</li> <li>Document decorator dependencies</li> </ul>"},{"location":"development_guide/#continuous-integration","title":"Continuous Integration","text":""},{"location":"development_guide/#github-actions","title":"GitHub Actions","text":"<p>We use GitHub Actions for continuous integration:</p> <ul> <li>Test Workflow: Runs tests on multiple Python versions</li> <li>Lint Workflow: Checks code style and typing</li> <li>Docs Workflow: Builds and validates documentation</li> <li>Release Workflow: Publishes packages to PyPI</li> </ul>"},{"location":"development_guide/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>We use pre-commit hooks to ensure code quality:</p> <ul> <li>ruff: Checks formatting and linting</li> <li>mypy: Verifies type annotations</li> <li>pytest: Runs tests</li> <li>doc8: Validates documentation</li> </ul>"},{"location":"development_guide/#release-process","title":"Release Process","text":""},{"location":"development_guide/#version-numbering","title":"Version Numbering","text":"<p>We follow Semantic Versioning:</p> <ul> <li>MAJOR: Incompatible API changes</li> <li>MINOR: Backwards-compatible feature additions</li> <li>PATCH: Backwards-compatible bug fixes</li> </ul>"},{"location":"development_guide/#release-checklist","title":"Release Checklist","text":"<ol> <li>Update version in <code>pyproject.toml</code></li> <li>Update <code>CHANGELOG.md</code> with changes</li> <li>Create a release commit and tag</li> <li>Push to GitHub</li> <li>Create a GitHub release</li> <li>Build and publish to PyPI</li> </ol>"},{"location":"development_guide/#changelog-maintenance","title":"Changelog Maintenance","text":"<ul> <li>Organize changes by type (Added, Changed, Deprecated, Removed, Fixed, Security)</li> <li>Include contributor acknowledgements</li> <li>Link to relevant issues and pull requests</li> </ul>"},{"location":"development_guide/#advanced-development-topics","title":"Advanced Development Topics","text":""},{"location":"development_guide/#adding-a-new-integration","title":"Adding a New Integration","text":"<ol> <li>Create a new directory in <code>prompt_decorators/integrations/</code></li> <li>Implement the integration with clear interfaces</li> <li>Add tests in <code>tests/integrations/</code></li> <li>Document the integration in <code>docs/integrations/</code></li> <li>Update <code>README.md</code> with the new integration</li> </ol>"},{"location":"development_guide/#creating-custom-tools","title":"Creating Custom Tools","text":"<ol> <li>Define the tool's purpose and interface</li> <li>Implement the tool in an appropriate module</li> <li>Add tests for the tool</li> <li>Document the tool's usage</li> <li>Integrate with the main package if appropriate</li> </ol>"},{"location":"development_guide/#performance-optimization","title":"Performance Optimization","text":"<ol> <li>Profile code to identify bottlenecks</li> <li>Optimize critical paths</li> <li>Add benchmarks to measure improvements</li> <li>Document performance considerations</li> </ol>"},{"location":"development_guide/#troubleshooting-development-issues","title":"Troubleshooting Development Issues","text":""},{"location":"development_guide/#common-issues","title":"Common Issues","text":""},{"location":"development_guide/#decorator-not-found","title":"Decorator Not Found","text":"<pre><code>DecoratorNotFoundError: Decorator 'ExampleDecorator' not found in registry\n</code></pre> <ul> <li>Ensure the decorator is registered before use</li> <li>Check for typos in the decorator name</li> <li>Verify the import order</li> </ul>"},{"location":"development_guide/#javascript-errors","title":"JavaScript Errors","text":"<pre><code>JavaScriptError: Unexpected token in transform_function\n</code></pre> <ul> <li>Check JavaScript syntax in the transform function</li> <li>Ensure all variables are defined</li> <li>Test the transform function with different inputs</li> </ul>"},{"location":"development_guide/#type-checking-errors","title":"Type Checking Errors","text":"<pre><code>mypy: error: Argument 1 to \"apply_decorator\" has incompatible type \"str\"; expected \"DecoratorBase\"\n</code></pre> <ul> <li>Fix type annotations</li> <li>Update signature to match implementation</li> <li>Add appropriate type casts</li> </ul>"},{"location":"development_guide/#debugging-strategies","title":"Debugging Strategies","text":"<ul> <li>Use logging to trace execution flow</li> <li>Add debug prints for complex operations</li> <li>Use a debugger for step-by-step execution</li> <li>Isolate issues with minimal reproducible examples</li> </ul>"},{"location":"development_guide/#additional-resources","title":"Additional Resources","text":"<ul> <li>Python Documentation Style Guide</li> <li>JavaScript Best Practices</li> <li>Effective Pull Request Reviews</li> <li>Semantic Versioning</li> <li>GitHub Actions Documentation</li> </ul>"},{"location":"development_guide/#next-steps","title":"Next Steps","text":"<ul> <li>Explore the core concepts to understand the framework's architecture</li> <li>Check the API Reference for detailed reference</li> <li>Read the tutorials for practical examples</li> </ul> <p>For detailed API documentation, see the API Reference.</p>"},{"location":"documentation_checklist/","title":"Documentation Verification Checklist","text":"<p>This checklist helps ensure that the documentation for the prompt-decorators project is complete, accurate, and helpful for users. Use this checklist when reviewing documentation changes or conducting regular documentation audits.</p>"},{"location":"documentation_checklist/#navigation-structure","title":"Navigation Structure","text":"<ul> <li> All important sections are accessible from the navigation</li> <li> The navigation hierarchy makes logical sense</li> <li> Section titles are clear and descriptive</li> <li> Breadcrumbs work correctly</li> <li> Table of contents is accurate and complete</li> </ul>"},{"location":"documentation_checklist/#content-quality","title":"Content Quality","text":"<ul> <li> Documentation is clear and well-written</li> <li> Examples are accurate and helpful</li> <li> Terminology is consistent throughout</li> <li> Code examples are up-to-date with the current API</li> <li> All code examples are runnable without modification</li> <li> Complex concepts are explained with appropriate detail</li> <li> No spelling or grammatical errors</li> </ul>"},{"location":"documentation_checklist/#visual-appearance","title":"Visual Appearance","text":"<ul> <li> Documentation renders correctly on desktop browsers</li> <li> Documentation renders correctly on mobile devices</li> <li> Code blocks are properly formatted with syntax highlighting</li> <li> Images and diagrams are clear and relevant</li> <li> Dark/light mode switching works correctly (if applicable)</li> <li> Tables are formatted correctly and readable</li> </ul>"},{"location":"documentation_checklist/#user-experience","title":"User Experience","text":"<ul> <li> Search functionality works correctly</li> <li> Documentation is easy to navigate</li> <li> Related content is properly linked</li> <li> External links open in new tabs</li> <li> No broken links or 404 errors</li> <li> Page load times are reasonable</li> </ul>"},{"location":"documentation_checklist/#api-documentation","title":"API Documentation","text":"<ul> <li> All public classes, methods, and functions are documented</li> <li> Parameter descriptions are clear and accurate</li> <li> Return value descriptions are clear and accurate</li> <li> Exception information is included where relevant</li> <li> Type annotations match the documentation</li> <li> Examples demonstrate common use cases</li> <li> Deprecated features are clearly marked</li> </ul>"},{"location":"documentation_checklist/#registry-documentation","title":"Registry Documentation","text":"<ul> <li> All decorators in the registry have corresponding documentation</li> <li> Decorator parameters are clearly documented</li> <li> Decorator examples show typical usage patterns</li> <li> Compatibility information is included</li> <li> Version information is accurate</li> </ul>"},{"location":"documentation_checklist/#getting-started","title":"Getting Started","text":"<ul> <li> Installation instructions are clear and work for all supported platforms</li> <li> Quick start guide provides a simple, working example</li> <li> Prerequisites are clearly stated</li> <li> Common pitfalls are addressed</li> </ul>"},{"location":"documentation_checklist/#tutorials-and-guides","title":"Tutorials and Guides","text":"<ul> <li> Tutorials cover key use cases</li> <li> Step-by-step instructions are clear and accurate</li> <li> Advanced usage scenarios are documented</li> <li> Integration with other tools/libraries is explained where relevant</li> </ul>"},{"location":"documentation_checklist/#feedback-and-improvement","title":"Feedback and Improvement","text":"<ul> <li> Documentation includes a way for users to provide feedback</li> <li> Issues identified in previous reviews have been addressed</li> <li> Recent API changes are reflected in the documentation</li> <li> Documentation is reviewed for accuracy before each release</li> </ul>"},{"location":"documentation_checklist/#accessibility","title":"Accessibility","text":"<ul> <li> Documentation meets basic accessibility standards</li> <li> Images have alt text</li> <li> Color contrast is sufficient</li> <li> Navigation is keyboard-accessible</li> </ul>"},{"location":"documentation_checklist/#notes","title":"Notes","text":"<p>Use this section to record any issues found during the review and plans for addressing them:</p> <p>1. 2. 3.</p>"},{"location":"documentation_checklist/#review-information","title":"Review Information","text":"<ul> <li>Reviewer:</li> <li>Date:</li> <li>Version Reviewed:</li> </ul>"},{"location":"documentation_workflow/","title":"Documentation Workflow","text":"<p>This document explains the workflow for generating and maintaining documentation for the Prompt Decorators project.</p>"},{"location":"documentation_workflow/#overview","title":"Overview","text":"<p>The documentation for Prompt Decorators consists of:</p> <ol> <li>API Reference: Automatically generated from docstrings and type annotations in the code</li> <li>User Guides: Manually written Markdown files</li> <li>Examples: Code examples with explanations</li> <li>Tutorials: Step-by-step guides for common tasks</li> </ol> <p>We use MkDocs with the Material theme to build the documentation website.</p>"},{"location":"documentation_workflow/#documentation-generation-process","title":"Documentation Generation Process","text":"<p>The documentation generation process involves two main steps:</p> <ol> <li>Generate API Reference: Extract docstrings and type annotations from the code to create Markdown files</li> <li>Build Documentation Website: Use MkDocs to build a static website from all Markdown files</li> </ol>"},{"location":"documentation_workflow/#step-1-generate-api-reference","title":"Step 1: Generate API Reference","text":"<p>To generate the API reference documentation, use the <code>generate_docs.py</code> script:</p> <pre><code># Generate Markdown documentation\npython docs/generate_docs.py --format markdown\n\n# Clean the output directory before generating documentation\npython docs/generate_docs.py --format markdown --clean\n\n# Generate both Markdown and HTML documentation\npython docs/generate_docs.py --format both\n</code></pre> <p>This script: - Extracts docstrings and type annotations from the code - Loads decorator definitions from the registry - Merges code and registry documentation - Generates Markdown files in the <code>docs/api</code> directory</p>"},{"location":"documentation_workflow/#step-2-build-documentation-website","title":"Step 2: Build Documentation Website","text":"<p>To build the documentation website, use MkDocs:</p> <pre><code># Serve documentation locally (with live reload)\nmkdocs serve\n\n# Build documentation\nmkdocs build\n\n# Deploy documentation to GitHub Pages\nmkdocs gh-deploy\n</code></pre>"},{"location":"documentation_workflow/#documentation-structure","title":"Documentation Structure","text":"<p>The documentation is organized as follows:</p> <ul> <li><code>docs/</code>: Root directory for documentation</li> <li><code>api/</code>: API reference documentation (auto-generated)</li> <li><code>examples/</code>: Code examples with explanations</li> <li><code>guide/</code>: User guides</li> <li><code>tutorials/</code>: Step-by-step tutorials</li> <li><code>project_summaries/</code>: Project overview and summaries</li> <li><code>guides/</code>: Domain-specific guides</li> </ul>"},{"location":"documentation_workflow/#maintaining-documentation","title":"Maintaining Documentation","text":""},{"location":"documentation_workflow/#updating-api-reference","title":"Updating API Reference","text":"<p>When you make changes to the code:</p> <ol> <li>Update docstrings and type annotations in the code</li> <li>Run <code>python docs/generate_docs.py --format markdown --clean</code> to regenerate the API reference</li> <li>Run <code>mkdocs serve</code> to preview the changes</li> <li>Commit the changes to the repository</li> </ol>"},{"location":"documentation_workflow/#adding-new-documentation","title":"Adding New Documentation","text":"<p>To add new documentation:</p> <ol> <li>Create a new Markdown file in the appropriate directory</li> <li>Add the file to the navigation in <code>mkdocs.yml</code></li> <li>Run <code>mkdocs serve</code> to preview the changes</li> <li>Commit the changes to the repository</li> </ol>"},{"location":"documentation_workflow/#documentation-standards","title":"Documentation Standards","text":"<p>Please follow these standards when writing documentation:</p> <ol> <li>Docstrings: Use Google-style docstrings (see DOCSTRING_STANDARDS.md)</li> <li>Markdown: Use consistent formatting and structure</li> <li>Examples: Include runnable examples that demonstrate key features</li> <li>Links: Ensure all links are valid and point to the correct location</li> </ol>"},{"location":"documentation_workflow/#troubleshooting","title":"Troubleshooting","text":""},{"location":"documentation_workflow/#broken-links","title":"Broken Links","text":"<p>If you encounter broken links in the documentation:</p> <ol> <li>Run <code>mkdocs build</code> to see warnings about broken links</li> <li>Fix the broken links in the source files</li> <li>Regenerate the API reference if necessary</li> <li>Run <code>mkdocs serve</code> to verify the fixes</li> </ol>"},{"location":"documentation_workflow/#missing-documentation","title":"Missing Documentation","text":"<p>If you notice missing documentation:</p> <ol> <li>Check if the code has proper docstrings and type annotations</li> <li>Ensure the module or class is included in the documentation generation process</li> <li>Update the docstrings and regenerate the API reference</li> <li>Update the navigation in <code>mkdocs.yml</code> if necessary</li> </ol>"},{"location":"extensions/","title":"Prompt Decorators Extension System","text":"<p>This document describes the current extension capabilities and future plans for the prompt-decorators extension system.</p>"},{"location":"extensions/#current-extension-capabilities","title":"Current Extension Capabilities","text":"<p>The prompt-decorators system currently supports extensions in the following ways:</p>"},{"location":"extensions/#1-registry-extensions","title":"1. Registry Extensions","text":"<p>Extensions can be added to the registry in the <code>registry/extensions/</code> directory. These extensions are loaded at runtime when the decorator registry is initialized.</p> <p>Current extension directories include: - <code>registry/extensions/code_generation/</code> - <code>registry/extensions/devops_and_infrastructure/</code> - <code>registry/extensions/implementation-focused/</code> - <code>registry/extensions/testing_and_debugging/</code></p>"},{"location":"extensions/#2-extension-package-format","title":"2. Extension Package Format","text":"<p>Extensions follow the registry entry schema format as defined in <code>schemas/registry-entry.schema.json</code>. Each extension must include:</p> <ul> <li><code>decoratorName</code>: The name of the decorator</li> <li><code>version</code>: Semantic versioning</li> <li><code>description</code>: What the decorator does</li> <li><code>parameters</code>: Configuration parameters</li> <li><code>transformationTemplate</code>: How the decorator transforms prompts</li> </ul>"},{"location":"extensions/#3-loading-extensions","title":"3. Loading Extensions","text":"<p>Extensions in the registry are automatically loaded when the <code>DynamicDecorator</code> class is initialized. The current implementation scans the registry directory and loads all decorator definitions.</p> <p>Example of loading extensions:</p> <pre><code>from prompt_decorators.core.dynamic_decorator import DynamicDecorator\n\n# Load all decorators from the registry\nDynamicDecorator.load_registry()\n\n# Now extensions are available\ncode_review = DynamicDecorator(\"CodeReview\", focus=\"security\")\n</code></pre>"},{"location":"extensions/#limitations-and-future-plans","title":"Limitations and Future Plans","text":""},{"location":"extensions/#current-limitations","title":"Current Limitations","text":"<ol> <li> <p>No Remote Loading: The current implementation does not support loading extensions from remote URLs as described in the specification.</p> </li> <li> <p>No Dynamic Extension Discovery: Extensions must be included in the registry directory at package installation time.</p> </li> <li> <p>Limited Extension Validation: While extension schemas are validated, there's limited validation of compatibility between extensions.</p> </li> <li> <p>No Extension Marketplace: There's no centralized repository for discovering and sharing extensions.</p> </li> </ol>"},{"location":"extensions/#future-extension-capabilities","title":"Future Extension Capabilities","text":"<p>The following capabilities are planned for future releases:</p>"},{"location":"extensions/#1-remote-extension-loading","title":"1. Remote Extension Loading","text":"<p>Future versions will support loading extensions from remote URLs as described in the specification:</p> <pre><code>+++Extension(source=https://decorator-registry.ai/scientific-pack.json)\n+++ScientificReasoning(discipline=physics)\n</code></pre> <p>This will: - Securely load extension definitions from verified URLs - Validate extensions against the registry schema - Cache extensions locally for performance</p>"},{"location":"extensions/#2-extension-discovery-service","title":"2. Extension Discovery Service","text":"<p>A central registry service is planned to allow: - Publishing extensions to a central repository - Discovering extensions through a web interface - Rating and reviewing extensions - Searching for extensions by category, name, or function</p>"},{"location":"extensions/#3-enhanced-compatibility-checking","title":"3. Enhanced Compatibility Checking","text":"<p>Future versions will provide more robust compatibility checking: - Verifying that extensions don't conflict with core decorators - Checking for compatibility between extensions - Validating required dependencies</p>"},{"location":"extensions/#4-extension-configuration","title":"4. Extension Configuration","text":"<p>More advanced extension configuration options are planned: - Per-environment configuration - Model-specific optimizations - User preference support</p>"},{"location":"extensions/#working-with-extensions-today","title":"Working with Extensions Today","text":""},{"location":"extensions/#creating-a-custom-extension","title":"Creating a Custom Extension","text":"<p>To create a custom extension today:</p> <ol> <li>Create a new JSON file in the <code>registry/extensions/</code> directory</li> <li>Follow the registry entry schema format</li> <li>Include all required fields (decoratorName, version, etc.)</li> <li>Define parameters and transformation templates</li> <li>Validate using the validation tools</li> </ol> <p>Example of a minimal extension:</p> <pre><code>{\n  \"decoratorName\": \"CustomExtension\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A custom decorator extension\",\n  \"parameters\": [\n    {\n      \"name\": \"level\",\n      \"type\": \"enum\",\n      \"description\": \"Level of detail\",\n      \"enum\": [\"basic\", \"detailed\", \"comprehensive\"],\n      \"default\": \"detailed\"\n    }\n  ],\n  \"transformationTemplate\": {\n    \"instruction\": \"Apply custom processing to this prompt.\",\n    \"parameterMapping\": {\n      \"level\": {\n        \"valueMap\": {\n          \"basic\": \"Use minimal processing.\",\n          \"detailed\": \"Apply standard processing.\",\n          \"comprehensive\": \"Use extensive processing.\"\n        }\n      }\n    },\n    \"placement\": \"prepend\",\n    \"compositionBehavior\": \"accumulate\"\n  }\n}\n</code></pre>"},{"location":"extensions/#using-extensions","title":"Using Extensions","text":"<p>To use extensions in your code:</p> <pre><code>from prompt_decorators import transform_prompt\n\n# Use an extension\nprompt = \"\"\"\n+++CustomExtension(level=comprehensive)\nExplain quantum computing.\n\"\"\"\n\ntransformed = transform_prompt(prompt)\n</code></pre>"},{"location":"extensions/#contributing-extensions","title":"Contributing Extensions","text":"<p>Contributions of new extensions are welcome! To contribute:</p> <ol> <li>Review the existing extensions for patterns and examples</li> <li>Create your extension following the registry entry schema</li> <li>Add comprehensive documentation and examples</li> <li>Include tests for your extension</li> <li>Submit a pull request</li> </ol> <p>All contributed extensions should be domain-specific and provide clear value beyond the core decorators.</p>"},{"location":"faq/","title":"Frequently Asked Questions","text":"<p>This document answers common questions about the Prompt Decorators framework.</p>"},{"location":"faq/#general-questions","title":"General Questions","text":""},{"location":"faq/#what-is-prompt-decorators","title":"What is Prompt Decorators?","text":"<p>Prompt Decorators is a Python framework for enhancing prompts sent to Large Language Models (LLMs). It provides a standardized way to modify how AI models process and respond to requests using a decorator pattern.</p>"},{"location":"faq/#how-does-it-work","title":"How does it work?","text":"<p>The framework uses a simple syntax where decorators are prefixed with <code>+++</code> followed by a decorator name and optional parameters. These decorators are transformed into natural language instructions that LLMs can understand.</p>"},{"location":"faq/#what-problem-does-it-solve","title":"What problem does it solve?","text":"<p>Prompt Decorators addresses several challenges:</p> <ol> <li>Consistency: Provides a standardized way to enhance prompts across different LLMs</li> <li>Reusability: Allows prompt enhancements to be reused across projects</li> <li>Composability: Enables combining multiple enhancements for complex behaviors</li> <li>Maintainability: Makes prompt engineering more structured and maintainable</li> </ol>"},{"location":"faq/#which-llm-providers-are-supported","title":"Which LLM providers are supported?","text":"<p>The framework is designed to work with any LLM provider, including:</p> <ul> <li>OpenAI (GPT-3.5, GPT-4, etc.)</li> <li>Anthropic Claude</li> <li>Google Gemini</li> <li>Mistral AI</li> <li>Hugging Face models</li> <li>Local models</li> </ul>"},{"location":"faq/#is-it-open-source","title":"Is it open source?","text":"<p>Yes, Prompt Decorators is open source under the MIT License, which allows for both personal and commercial use.</p>"},{"location":"faq/#installation-and-setup","title":"Installation and Setup","text":""},{"location":"faq/#how-do-i-install-prompt-decorators","title":"How do I install Prompt Decorators?","text":"<p>Install using pip:</p> <pre><code>pip install prompt-decorators\n</code></pre> <p>For additional features, you can install with extras:</p> <pre><code># For MCP integration\npip install \"prompt-decorators[mcp]\"\n\n# For development\npip install \"prompt-decorators[dev,test,docs]\"\n</code></pre>"},{"location":"faq/#what-are-the-system-requirements","title":"What are the system requirements?","text":"<ul> <li>Python 3.11 or higher</li> <li>No special hardware requirements</li> <li>Works on Windows, macOS, and Linux</li> </ul>"},{"location":"faq/#how-do-i-verify-my-installation","title":"How do I verify my installation?","text":"<pre><code>import prompt_decorators\nprint(prompt_decorators.__version__)\n</code></pre>"},{"location":"faq/#do-i-need-api-keys-for-llm-providers","title":"Do I need API keys for LLM providers?","text":"<p>Yes, you'll need API keys for any LLM providers you want to use. The framework itself doesn't provide access to LLMs.</p>"},{"location":"faq/#using-decorators","title":"Using Decorators","text":""},{"location":"faq/#how-do-i-use-decorators-in-my-prompts","title":"How do I use decorators in my prompts?","text":"<p>Use the inline syntax directly in your prompts:</p> <pre><code>prompt = \"\"\"\n+++StepByStep(numbered=true)\n+++Audience(level=\"beginner\")\nExplain quantum computing.\n\"\"\"\n\nfrom prompt_decorators import apply_dynamic_decorators\ntransformed_prompt = apply_dynamic_decorators(prompt)\n</code></pre>"},{"location":"faq/#can-i-use-decorators-programmatically","title":"Can I use decorators programmatically?","text":"<p>Yes, you can create and use decorator instances in your code:</p> <pre><code>from prompt_decorators import create_decorator_instance\n\nstep_by_step = create_decorator_instance(\"StepByStep\", numbered=True)\naudience = create_decorator_instance(\"Audience\", level=\"beginner\")\n\noriginal_prompt = \"Explain quantum computing.\"\ntransformed_prompt = step_by_step(audience(original_prompt))\n</code></pre>"},{"location":"faq/#how-do-i-combine-multiple-decorators","title":"How do I combine multiple decorators?","text":"<p>You can stack decorators either inline:</p> <pre><code>+++Persona(role=\"scientist\")\n+++StepByStep(numbered=true)\n+++Audience(level=\"beginner\")\nExplain quantum computing.\n</code></pre> <p>Or programmatically:</p> <pre><code>persona = create_decorator_instance(\"Persona\", role=\"scientist\")\nstep_by_step = create_decorator_instance(\"StepByStep\", numbered=True)\naudience = create_decorator_instance(\"Audience\", level=\"beginner\")\n\ntransformed_prompt = persona(step_by_step(audience(original_prompt)))\n</code></pre>"},{"location":"faq/#what-happens-if-decorators-conflict","title":"What happens if decorators conflict?","text":"<p>When decorators have conflicting behaviors, the later decorator in the sequence takes precedence. For example, if you use both <code>Concise</code> and <code>Detailed</code>, the one that appears later will have more influence on the result.</p>"},{"location":"faq/#how-many-decorators-can-i-use-at-once","title":"How many decorators can I use at once?","text":"<p>There's no hard limit on the number of decorators you can use, but consider:</p> <ol> <li>Token Usage: Each decorator adds instructions that count toward token limits</li> <li>Clarity: Too many decorators might create conflicting or confusing instructions</li> <li>Performance: More decorators mean more processing time</li> </ol> <p>A practical limit is typically 3-5 decorators per prompt.</p>"},{"location":"faq/#available-decorators","title":"Available Decorators","text":""},{"location":"faq/#what-decorators-are-included","title":"What decorators are included?","text":"<p>The framework includes over 140 pre-defined decorators in categories such as:</p> <ul> <li>Reasoning: Enhance logical thinking and problem-solving</li> <li>Format: Control output format and structure</li> <li>Style: Modify tone, voice, and writing style</li> <li>Audience: Target specific audiences</li> <li>Persona: Adopt specific roles or personalities</li> <li>Domain: Focus on specific knowledge domains</li> <li>Length: Control response length</li> </ul>"},{"location":"faq/#how-do-i-see-all-available-decorators","title":"How do I see all available decorators?","text":"<pre><code>from prompt_decorators import get_available_decorators\n\ndecorators = get_available_decorators()\nfor decorator in decorators:\n    print(f\"{decorator.name}: {decorator.description}\")\n</code></pre>"},{"location":"faq/#what-are-the-most-commonly-used-decorators","title":"What are the most commonly used decorators?","text":"<p>Some of the most popular decorators include:</p> <ul> <li><code>StepByStep</code>: Breaks down responses into sequential steps</li> <li><code>Reasoning</code>: Enhances logical reasoning in responses</li> <li><code>Audience</code>: Adapts content for specific audience levels</li> <li><code>Persona</code>: Adopts a specific role or personality</li> <li><code>OutputFormat</code>: Controls the format of the output (markdown, JSON, etc.)</li> <li><code>Concise</code>: Creates brief, to-the-point responses</li> <li><code>Detailed</code>: Provides comprehensive, detailed responses</li> </ul>"},{"location":"faq/#custom-decorators","title":"Custom Decorators","text":""},{"location":"faq/#can-i-create-my-own-decorators","title":"Can I create my own decorators?","text":"<p>Yes, you can create custom decorators using the <code>DecoratorDefinition</code> class:</p> <pre><code>from prompt_decorators import DecoratorDefinition, register_decorator\n\nmy_decorator_def = DecoratorDefinition(\n    name=\"MyCustomDecorator\",\n    description=\"A custom decorator that adds a prefix and suffix\",\n    category=\"Custom\",\n    parameters=[\n        {\"name\": \"prefix\", \"type\": \"string\", \"description\": \"Text to add before\", \"default\": \"START: \"},\n        {\"name\": \"suffix\", \"type\": \"string\", \"description\": \"Text to add after\", \"default\": \" :END\"}\n    ],\n    transform_function=\"return prefix + text + suffix;\"\n)\n\nregister_decorator(my_decorator_def)\n</code></pre>"},{"location":"faq/#what-language-are-transform-functions-written-in","title":"What language are transform functions written in?","text":"<p>Transform functions are written in JavaScript, which is executed in a sandboxed environment.</p>"},{"location":"faq/#can-i-share-my-custom-decorators","title":"Can I share my custom decorators?","text":"<p>Yes, you can share custom decorators by:</p> <ol> <li>Creating a Python package with your decorator definitions</li> <li>Sharing JSON files containing decorator definitions</li> <li>Contributing to the main project</li> </ol>"},{"location":"faq/#how-do-i-validate-my-custom-decorators","title":"How do I validate my custom decorators?","text":"<p>Use the validator tool to check your decorators:</p> <pre><code>python -m prompt_decorators.tools.validator validate my_decorator.json\n</code></pre>"},{"location":"faq/#integrations","title":"Integrations","text":""},{"location":"faq/#how-do-i-use-prompt-decorators-with-claude-desktop","title":"How do I use Prompt Decorators with Claude Desktop?","text":"<ol> <li> <p>Install the MCP integration:    <pre><code>pip install \"prompt-decorators[mcp]\"\n</code></pre></p> </li> <li> <p>Run the Claude Desktop integration:    <pre><code>python -m prompt_decorators.integrations.mcp.claude_desktop\n</code></pre></p> </li> <li> <p>In Claude Desktop, you'll see new tools available for working with decorators.</p> </li> </ol>"},{"location":"faq/#what-is-mcp","title":"What is MCP?","text":"<p>MCP (Model Context Protocol) is a protocol for integrating tools with LLM clients. Prompt Decorators provides an MCP integration that allows any MCP-compatible client to use decorators.</p>"},{"location":"faq/#can-i-use-prompt-decorators-in-a-web-application","title":"Can I use Prompt Decorators in a web application?","text":"<p>Yes, you can integrate Prompt Decorators into web applications:</p> <pre><code>from fastapi import FastAPI, Request\nfrom prompt_decorators import apply_dynamic_decorators\n\napp = FastAPI()\n\n@app.post(\"/generate\")\nasync def generate(request: Request):\n    data = await request.json()\n    prompt = data.get(\"prompt\", \"\")\n\n    # Apply decorators\n    transformed_prompt = apply_dynamic_decorators(prompt)\n\n    # Send to LLM (implementation depends on your LLM client)\n    response = your_llm_client.generate(transformed_prompt)\n\n    return {\"response\": response}\n</code></pre>"},{"location":"faq/#performance-and-limitations","title":"Performance and Limitations","text":""},{"location":"faq/#what-is-the-performance-impact","title":"What is the performance impact?","text":"<p>The framework adds minimal overhead to prompt processing:</p> <ul> <li>Parsing decorators: microseconds to milliseconds</li> <li>Executing transform functions: milliseconds</li> <li>Overall impact: negligible compared to LLM API call time</li> </ul>"},{"location":"faq/#are-there-token-limits","title":"Are there token limits?","text":"<p>The framework itself doesn't impose token limits, but:</p> <ol> <li>Each decorator adds instructions that count toward your LLM's token limits</li> <li>More complex decorators add more tokens</li> <li>Consider the token limits of your LLM provider</li> </ol>"},{"location":"faq/#can-decorators-access-external-resources","title":"Can decorators access external resources?","text":"<p>No, transform functions run in a sandboxed JavaScript environment and cannot access external resources like files, networks, or databases.</p>"},{"location":"faq/#is-there-a-rate-limit","title":"Is there a rate limit?","text":"<p>The framework itself doesn't impose rate limits, but your LLM provider might have rate limits on API calls.</p>"},{"location":"faq/#troubleshooting","title":"Troubleshooting","text":""},{"location":"faq/#why-isnt-my-decorator-being-applied","title":"Why isn't my decorator being applied?","text":"<p>Common issues include:</p> <ol> <li>Syntax Errors: Check that your decorator syntax is correct (<code>+++DecoratorName(param=value)</code>)</li> <li>Missing Registration: Ensure the decorator is registered before use</li> <li>Name Typos: Verify the decorator name is spelled correctly (case-sensitive)</li> <li>Parameter Errors: Check that parameter names and values are correct</li> </ol>"},{"location":"faq/#how-do-i-debug-decorator-transformations","title":"How do I debug decorator transformations?","text":"<p>Print the transformed prompt to see what's happening:</p> <pre><code>from prompt_decorators import apply_dynamic_decorators\n\nprompt = \"\"\"\n+++StepByStep(numbered=true)\nExplain quantum computing.\n\"\"\"\n\ntransformed_prompt = apply_dynamic_decorators(prompt)\nprint(\"Original prompt:\", prompt)\nprint(\"Transformed prompt:\", transformed_prompt)\n</code></pre>"},{"location":"faq/#why-am-i-getting-a-decorator-not-found-error","title":"Why am I getting a \"Decorator not found\" error?","text":"<p>This error occurs when you reference a decorator that isn't registered. Ensure:</p> <ol> <li>You've imported the decorator correctly</li> <li>The decorator name is spelled correctly (case-sensitive)</li> <li>Any custom decorators are registered before use</li> </ol>"},{"location":"faq/#how-do-i-fix-javascript-errors-in-transform-functions","title":"How do I fix JavaScript errors in transform functions?","text":"<p>If you're getting JavaScript errors in your transform functions:</p> <ol> <li>Check the syntax of your JavaScript code</li> <li>Ensure all variables used in the function are defined</li> <li>Verify that the function returns a string</li> <li>Test the function with different inputs</li> </ol>"},{"location":"faq/#contributing-and-support","title":"Contributing and Support","text":""},{"location":"faq/#how-can-i-contribute-to-the-project","title":"How can I contribute to the project?","text":"<p>You can contribute by:</p> <ol> <li>Submitting bug reports and feature requests on GitHub</li> <li>Creating pull requests with bug fixes or new features</li> <li>Improving documentation</li> <li>Creating and sharing custom decorators</li> <li>Helping answer questions in the community</li> </ol>"},{"location":"faq/#where-can-i-get-help","title":"Where can I get help?","text":"<ul> <li>Documentation: https://synaptiai.github.io/prompt-decorators/</li> <li>GitHub Issues: https://github.com/synaptiai/prompt-decorators/issues</li> <li>Discussions: https://github.com/synaptiai/prompt-decorators/discussions</li> </ul>"},{"location":"faq/#is-there-commercial-support-available","title":"Is there commercial support available?","text":"<p>For commercial support, please contact the maintainers through GitHub.</p>"},{"location":"faq/#how-do-i-report-a-bug","title":"How do I report a bug?","text":"<p>Report bugs on GitHub:</p> <ol> <li>Go to https://github.com/synaptiai/prompt-decorators/issues</li> <li>Click \"New Issue\"</li> <li>Select \"Bug Report\"</li> <li>Fill in the template with details about the bug</li> <li>Submit the issue</li> </ol>"},{"location":"faq/#advanced-topics","title":"Advanced Topics","text":""},{"location":"faq/#can-i-use-prompt-decorators-with-streaming-responses","title":"Can I use Prompt Decorators with streaming responses?","text":"<p>Yes, since the decorators are applied to the prompt before sending it to the LLM, streaming responses work normally.</p>"},{"location":"faq/#how-do-i-handle-versioning-of-decorators","title":"How do I handle versioning of decorators?","text":"<p>For versioning custom decorators:</p> <ol> <li>Include version information in decorator names or descriptions</li> <li>Use semantic versioning for your decorator packages</li> <li>Document compatibility between versions</li> </ol>"},{"location":"faq/#can-i-use-prompt-decorators-in-production","title":"Can I use Prompt Decorators in production?","text":"<p>Yes, the framework is designed for production use:</p> <ol> <li>It's well-tested and has a comprehensive test suite</li> <li>It follows best practices for security and performance</li> <li>It's used in production by multiple organizations</li> </ol>"},{"location":"faq/#how-do-i-optimize-token-usage","title":"How do I optimize token usage?","text":"<p>To minimize token usage:</p> <ol> <li>Use concise decorators that add minimal instructions</li> <li>Combine related decorators into custom composite decorators</li> <li>Use parameter defaults when possible</li> <li>Consider creating specialized decorators for your specific needs</li> </ol>"},{"location":"glossary/","title":"Glossary","text":"<p>This glossary defines key terms and concepts used in the Prompt Decorators framework.</p>"},{"location":"glossary/#a","title":"A","text":""},{"location":"glossary/#annotation","title":"Annotation","text":"<p>The syntax used to apply a decorator to a prompt, consisting of the decorator prefix (<code>+++</code>), the decorator name, and optional parameters.</p> <p>Example: <code>+++StepByStep(numbered=true)</code></p>"},{"location":"glossary/#apply","title":"Apply","text":"<p>The process of transforming a prompt by executing the decorator's transform function.</p>"},{"location":"glossary/#c","title":"C","text":""},{"location":"glossary/#category","title":"Category","text":"<p>A grouping of decorators with similar functionality or purpose, such as \"Reasoning\", \"Format\", or \"Style\".</p>"},{"location":"glossary/#claude-desktop","title":"Claude Desktop","text":"<p>A desktop application for interacting with Anthropic's Claude AI model. Prompt Decorators integrates with Claude Desktop through the MCP protocol.</p>"},{"location":"glossary/#composite-decorator","title":"Composite Decorator","text":"<p>A decorator that internally uses multiple other decorators to create a more complex transformation.</p>"},{"location":"glossary/#conflict","title":"Conflict","text":"<p>A situation where two or more decorators have incompatible behaviors or modify the same aspect of a prompt in contradictory ways.</p>"},{"location":"glossary/#d","title":"D","text":""},{"location":"glossary/#decorator","title":"Decorator","text":"<p>A reusable component that modifies a prompt to enhance how an LLM processes and responds to it.</p>"},{"location":"glossary/#decorator-definition","title":"Decorator Definition","text":"<p>A specification of a decorator, including its name, description, category, parameters, and transform function.</p>"},{"location":"glossary/#decorator-instance","title":"Decorator Instance","text":"<p>A specific instance of a decorator with particular parameter values.</p>"},{"location":"glossary/#decorator-pattern","title":"Decorator Pattern","text":"<p>A design pattern where objects (decorators) wrap around other objects (prompts) to modify their behavior without changing their structure.</p>"},{"location":"glossary/#decorator-registry","title":"Decorator Registry","text":"<p>A catalog of available decorators that can be looked up by name.</p>"},{"location":"glossary/#dynamic-decorator","title":"Dynamic Decorator","text":"<p>A decorator that is defined and loaded at runtime rather than being generated as code.</p>"},{"location":"glossary/#dynamic-implementation","title":"Dynamic Implementation","text":"<p>The approach used in Prompt Decorators v0.3.0+ where decorators are loaded directly from definitions at runtime, without code generation.</p>"},{"location":"glossary/#i","title":"I","text":""},{"location":"glossary/#inline-syntax","title":"Inline Syntax","text":"<p>The syntax for including decorators directly in prompt text using the <code>+++</code> prefix.</p> <p>Example: <pre><code>+++StepByStep(numbered=true)\nExplain quantum computing.\n</code></pre></p>"},{"location":"glossary/#integration","title":"Integration","text":"<p>A connection between the Prompt Decorators framework and another system, such as an LLM provider or client application.</p>"},{"location":"glossary/#j","title":"J","text":""},{"location":"glossary/#javascript","title":"JavaScript","text":"<p>The language used for writing transform functions in decorator definitions.</p>"},{"location":"glossary/#l","title":"L","text":""},{"location":"glossary/#large-language-model-llm","title":"Large Language Model (LLM)","text":"<p>An AI model trained on vast amounts of text data that can generate human-like text based on prompts.</p>"},{"location":"glossary/#m","title":"M","text":""},{"location":"glossary/#mcp-model-context-protocol","title":"MCP (Model Context Protocol)","text":"<p>A protocol for integrating tools with LLM clients, allowing them to extend the capabilities of the LLM.</p>"},{"location":"glossary/#mcp-integration","title":"MCP Integration","text":"<p>The component of Prompt Decorators that implements the Model Context Protocol, enabling integration with MCP-compatible clients like Claude Desktop.</p>"},{"location":"glossary/#mcp-server","title":"MCP Server","text":"<p>A server that implements the Model Context Protocol and exposes Prompt Decorators functionality as MCP tools.</p>"},{"location":"glossary/#p","title":"P","text":""},{"location":"glossary/#parameter","title":"Parameter","text":"<p>A configurable option for a decorator that affects its behavior.</p> <p>Example: In <code>StepByStep(numbered=true)</code>, <code>numbered</code> is a parameter with the value <code>true</code>.</p>"},{"location":"glossary/#parameter-type","title":"Parameter Type","text":"<p>The data type of a parameter, which can be <code>string</code>, <code>number</code>, <code>boolean</code>, or <code>enum</code>.</p>"},{"location":"glossary/#precedence","title":"Precedence","text":"<p>The rule determining which decorator takes effect when multiple decorators conflict. In Prompt Decorators, later decorators take precedence over earlier ones.</p>"},{"location":"glossary/#prompt","title":"Prompt","text":"<p>The input text sent to an LLM to generate a response.</p>"},{"location":"glossary/#prompt-engineering","title":"Prompt Engineering","text":"<p>The practice of crafting prompts to effectively communicate with and get desired outputs from LLMs.</p>"},{"location":"glossary/#r","title":"R","text":""},{"location":"glossary/#registry","title":"Registry","text":"<p>See Decorator Registry.</p>"},{"location":"glossary/#s","title":"S","text":""},{"location":"glossary/#sandboxed-environment","title":"Sandboxed Environment","text":"<p>A restricted execution environment where JavaScript transform functions run, preventing access to external resources for security.</p>"},{"location":"glossary/#stacking","title":"Stacking","text":"<p>The practice of applying multiple decorators to a single prompt, either inline or programmatically.</p>"},{"location":"glossary/#t","title":"T","text":""},{"location":"glossary/#token","title":"Token","text":"<p>The basic unit of text that LLMs process. Tokens are typically word fragments, with a word consisting of one or more tokens.</p>"},{"location":"glossary/#token-limit","title":"Token Limit","text":"<p>The maximum number of tokens that an LLM can process in a single request, including both the prompt and the response.</p>"},{"location":"glossary/#transform-function","title":"Transform Function","text":"<p>A JavaScript function that defines how a decorator modifies a prompt. It takes the input text and parameter values and returns the transformed text.</p>"},{"location":"glossary/#transformation","title":"Transformation","text":"<p>The process of modifying a prompt by applying one or more decorators.</p>"},{"location":"glossary/#v","title":"V","text":""},{"location":"glossary/#validator","title":"Validator","text":"<p>A tool for checking decorator definitions against the framework's specifications and identifying potential issues.</p>"},{"location":"glossary/#common-decorator-categories","title":"Common Decorator Categories","text":""},{"location":"glossary/#audience-decorators","title":"Audience Decorators","text":"<p>Decorators that adapt content for specific audience expertise levels.</p> <p>Examples: <code>Audience</code>, <code>ELI5</code>, <code>Technical</code></p>"},{"location":"glossary/#domain-decorators","title":"Domain Decorators","text":"<p>Decorators that focus on specific knowledge domains or fields.</p> <p>Examples: <code>Scientific</code>, <code>Legal</code>, <code>Medical</code></p>"},{"location":"glossary/#format-decorators","title":"Format Decorators","text":"<p>Decorators that control the structure and format of the output.</p> <p>Examples: <code>OutputFormat</code>, <code>Bullet</code>, <code>TableFormat</code></p>"},{"location":"glossary/#length-decorators","title":"Length Decorators","text":"<p>Decorators that control the verbosity or conciseness of responses.</p> <p>Examples: <code>Concise</code>, <code>Detailed</code>, <code>Summary</code></p>"},{"location":"glossary/#persona-decorators","title":"Persona Decorators","text":"<p>Decorators that adopt specific roles, personalities, or expertise.</p> <p>Examples: <code>Persona</code>, <code>AsExpert</code>, <code>Professional</code></p>"},{"location":"glossary/#reasoning-decorators","title":"Reasoning Decorators","text":"<p>Decorators that enhance logical thinking and problem-solving.</p> <p>Examples: <code>Reasoning</code>, <code>StepByStep</code>, <code>TreeOfThought</code></p>"},{"location":"glossary/#style-decorators","title":"Style Decorators","text":"<p>Decorators that modify tone, voice, and writing style.</p> <p>Examples: <code>Tone</code>, <code>Academic</code>, <code>Creative</code></p>"},{"location":"glossary/#common-decorator-parameters","title":"Common Decorator Parameters","text":""},{"location":"glossary/#depth","title":"depth","text":"<p>Controls the level of detail or thoroughness in a response.</p> <p>Possible values: <code>basic</code>, <code>moderate</code>, <code>comprehensive</code></p>"},{"location":"glossary/#format","title":"format","text":"<p>Specifies the output format for structured responses.</p> <p>Possible values: <code>markdown</code>, <code>json</code>, <code>html</code>, <code>csv</code>, etc.</p>"},{"location":"glossary/#level","title":"level","text":"<p>Indicates the expertise level for audience adaptation.</p> <p>Possible values: <code>beginner</code>, <code>intermediate</code>, <code>expert</code></p>"},{"location":"glossary/#numbered","title":"numbered","text":"<p>Determines whether steps or items should be numbered.</p> <p>Possible values: <code>true</code>, <code>false</code></p>"},{"location":"glossary/#role","title":"role","text":"<p>Specifies the role or persona to adopt.</p> <p>Possible values: Various roles like <code>teacher</code>, <code>scientist</code>, <code>lawyer</code>, etc.</p>"},{"location":"glossary/#style","title":"style","text":"<p>Defines the writing or communication style.</p> <p>Possible values: <code>formal</code>, <code>casual</code>, <code>technical</code>, <code>creative</code>, etc.</p>"},{"location":"implementation-status/","title":"Prompt Decorators Implementation Status","text":"<p>This document tracks the implementation status of features described in the Prompt Decorators Specification.</p>"},{"location":"implementation-status/#implementation-phases","title":"Implementation Phases","text":"<p>The specification outlines a phased implementation approach. Current progress:</p> <ul> <li>Phase 1 (Core Support): \u2705 Complete</li> <li>Core decorators are implemented</li> <li>Basic transformation functionality works</li> <li> <p>Parameter validation is operational</p> </li> <li> <p>Phase 2 (Extended Support): \ud83d\udd04 In Progress</p> </li> <li>Reasoning Process Decorators: \u2705 Complete</li> <li>Output Structure Decorators: \u2705 Complete</li> <li>Tone and Style Decorators: \u2705 Complete</li> <li>Verification and Quality Decorators: \u2705 Complete</li> <li> <p>Meta-Decorators: \ud83d\udd04 Partially Complete</p> </li> <li> <p>Phase 3 (Full Support): \ud83d\udd52 Planned</p> </li> <li>Complete implementation of all standard decorators</li> <li>Comprehensive error handling</li> <li> <p>Enhanced composition strategies</p> </li> <li> <p>Phase 4 (Extensions): \ud83d\udd52 Planned</p> </li> <li>Extension loading mechanism</li> <li>Domain-specific extensions</li> <li>Extension discovery service</li> </ul>"},{"location":"implementation-status/#feature-implementation-status","title":"Feature Implementation Status","text":"Feature Status Notes Core Decorator Syntax \u2705 Complete The core <code>+++Decorator(params)</code> syntax is fully implemented Parameter Types \u2705 Complete All parameter types (string, number, boolean, enum, array) are supported Decorator Placement \u2705 Complete Decorators can be placed at the beginning or on new lines Versioning Syntax \ud83d\udd04 Partial Basic versioning works but version ranges aren't fully implemented Error Handling \u2705 Complete Implementations ignore syntax errors and proceed with processing JSON Schema Definitions \u2705 Complete All schemas are defined and used for validation Core Decorators \u2705 Complete All core decorators are implemented Reasoning Process Decorators \u2705 Complete All reasoning decorators are implemented Output Structure Decorators \u2705 Complete All output structure decorators are implemented Decorator Conflicts/Compatibility \ud83d\udd04 Partial Basic conflict resolution works but compatibility checking is limited Tone and Style Decorators \u2705 Complete All tone and style decorators are implemented Verification and Quality Decorators \u2705 Complete All verification decorators are implemented Meta-Decorators \ud83d\udd04 Partial Basic meta-decorators work but some advanced features are pending Registry and Discovery \ud83d\udd04 Partial Registry structure exists but discovery service is pending Extension Mechanism \ud83d\udd52 Planned Extension loading from URLs is planned for future releases Standardization Process \ud83d\udd04 In Progress Specification is defined but feedback integration is ongoing Security Considerations \ud83d\udd04 Partial Basic input validation is implemented Testing and Validation \ud83d\udd04 Partial Unit tests exist but comprehensive test suite is in development"},{"location":"implementation-status/#validation-tools","title":"Validation Tools","text":"<p>The specification mentions several validation tools. Their implementation status:</p> Tool Status Current Implementation Decorator Validator \ud83d\udd04 Partial Basic validation in <code>scripts/validate_decorators.py</code> Behavior Test Framework \ud83d\udd04 Partial Some behavior tests in <code>tests/</code> directory Compatibility Scanner \ud83d\udd52 Planned Pending implementation"},{"location":"implementation-status/#test-suite","title":"Test Suite","text":"<p>The specification references a dedicated test suite repository. Current status:</p> <ul> <li>Dedicated Repository: \ud83d\udd52 Planned</li> <li>Current Tests: \ud83d\udd04 In Progress</li> <li>Located in the <code>tests/</code> directory of the main repository</li> <li>Includes test cases for core decorators</li> <li>Includes basic composition tests</li> <li>Missing comprehensive error handling tests</li> <li>Missing performance benchmarks</li> </ul>"},{"location":"implementation-status/#next-steps","title":"Next Steps","text":"<ol> <li>Complete remaining Phase 2 components</li> <li>Implement a unified validation CLI tool</li> <li>Expand test coverage</li> <li>Document extension capabilities clearly</li> <li>Begin work on Extension Mechanism for Phase 4</li> </ol>"},{"location":"implementation-status/#compatibility-notes","title":"Compatibility Notes","text":"<p>Currently, the implementation fully supports: - Python 3.8+ - All major operating systems - All LLM providers via the standardized API</p>"},{"location":"implementation-status/#reporting-issues","title":"Reporting Issues","text":"<p>If you notice discrepancies between this status document and the actual implementation, please file an issue in the repository.</p>"},{"location":"installation/","title":"Installation","text":"<p>This guide provides step-by-step instructions for installing the Prompt Decorators package.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11 or higher</li> <li>pip (Python package installer)</li> </ul>"},{"location":"installation/#installation-methods","title":"Installation Methods","text":""},{"location":"installation/#using-pip-recommended","title":"Using pip (Recommended)","text":"<p>The simplest way to install Prompt Decorators is using pip:</p> <pre><code>pip install prompt-decorators\n</code></pre>"},{"location":"installation/#using-poetry","title":"Using Poetry","text":"<p>If you're using Poetry for dependency management:</p> <pre><code>poetry add prompt-decorators\n</code></pre>"},{"location":"installation/#development-installation","title":"Development Installation","text":"<p>For development purposes, you can install the package from source:</p> <pre><code># Clone the repository\ngit clone https://github.com/synaptiai/prompt-decorators.git\ncd prompt-decorators\n\n# Install in development mode\npip install -e .\n</code></pre> <p>For development with all optional dependencies:</p> <pre><code>pip install -e \".[dev,test,docs]\"\n</code></pre>"},{"location":"installation/#verifying-installation","title":"Verifying Installation","text":"<p>You can verify your installation by running:</p> <pre><code>import prompt_decorators\nprint(prompt_decorators.__version__)\n</code></pre> <p>You should see the version number printed to the console.</p>"},{"location":"installation/#environment-setup","title":"Environment Setup","text":""},{"location":"installation/#configuration","title":"Configuration","text":"<p>The Prompt Decorators package has minimal configuration requirements. However, when using specific integrations, additional configuration may be needed.</p> <p>For example, if you're using the OpenAI integration, you'll need to set up your API key:</p> <pre><code>import os\nos.environ[\"OPENAI_API_KEY\"] = \"your-api-key\"\n</code></pre> <p>Alternatively, you can create a <code>.env</code> file in your project directory:</p> <pre><code>OPENAI_API_KEY=your-api-key\n</code></pre> <p>And then use a library like <code>python-dotenv</code> to load it:</p> <pre><code>from dotenv import load_dotenv\nload_dotenv()\n</code></pre>"},{"location":"installation/#mcp-integration-installation","title":"MCP Integration Installation","text":"<p>If you plan to use the Model Context Protocol (MCP) integration:</p> <pre><code>pip install \"prompt-decorators[mcp]\"\n</code></pre> <p>This will install the MCP dependencies required for using Prompt Decorators with any MCP-compatible client.</p>"},{"location":"installation/#optional-dependencies","title":"Optional Dependencies","text":"<p>The package supports several optional dependency groups:</p> <ul> <li><code>dev</code>: Development dependencies</li> <li><code>test</code>: Testing dependencies</li> <li><code>docs</code>: Documentation dependencies</li> <li><code>mcp</code>: Model Context Protocol integration</li> </ul> <p>You can install any combination:</p> <pre><code># Install with MCP and testing dependencies\npip install \"prompt-decorators[mcp,test]\"\n</code></pre>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/#common-installation-issues","title":"Common Installation Issues","text":""},{"location":"installation/#package-not-found","title":"Package Not Found","text":"<p>If you see \"Package not found\" errors, ensure that: - You're using the correct package name (<code>prompt-decorators</code>) - Your PyPI or pip configuration is correct - Your internet connection is stable</p>"},{"location":"installation/#version-conflicts","title":"Version Conflicts","text":"<p>If you encounter version conflicts with dependencies:</p> <pre><code># Install with a specific version\npip install prompt-decorators==0.3.0\n\n# Or resolve dependencies explicitly\npip install --upgrade pip setuptools wheel\npip install prompt-decorators\n</code></pre>"},{"location":"installation/#permission-errors","title":"Permission Errors","text":"<p>If you encounter permission errors:</p> <pre><code># Use the --user flag\npip install --user prompt-decorators\n\n# Or use a virtual environment (recommended)\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\npip install prompt-decorators\n</code></pre>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<p>After installation, proceed to the Quick Start guide to begin using the package.</p>"},{"location":"navigation/","title":"Documentation Navigation","text":"<p>This guide helps you navigate the Prompt Decorators documentation to find the information you need quickly.</p>"},{"location":"navigation/#documentation-structure","title":"Documentation Structure","text":"<p>The Prompt Decorators documentation is organized into several main sections:</p> <ol> <li>Getting Started: Basic information to get up and running</li> <li>Tutorials: Step-by-step guides for common tasks</li> <li>Integrations: Information about connecting with other systems</li> <li>Contributing: Guidelines for contributing to the project</li> <li>Project Documentation: Technical details about the project</li> <li>Tools: Documentation for utility tools</li> </ol>"},{"location":"navigation/#finding-what-you-need","title":"Finding What You Need","text":""},{"location":"navigation/#if-youre-new-to-prompt-decorators","title":"If you're new to Prompt Decorators:","text":"<ol> <li>Start with the Home page for an overview</li> <li>Read the Installation guide to set up the package</li> <li>Follow the Quick Start guide for basic usage</li> <li>Explore Core Concepts to understand the framework</li> </ol>"},{"location":"navigation/#if-you-want-to-create-decorators","title":"If you want to create decorators:","text":"<ol> <li>Read Creating Decorators for a comprehensive guide</li> <li>Follow the Creating Custom Decorators tutorial</li> <li>Check the Validator Tool documentation to validate your decorators</li> </ol>"},{"location":"navigation/#if-you-want-to-use-decorators-with-specific-llms","title":"If you want to use decorators with specific LLMs:","text":"<ol> <li>Read Compatibility for LLM-specific information</li> <li>Explore the MCP Integration for Claude and other LLMs</li> <li>Check Claude Desktop for Claude-specific setup</li> </ol>"},{"location":"navigation/#if-you-want-to-contribute-to-the-project","title":"If you want to contribute to the project:","text":"<ol> <li>Read the Contributing Guidelines</li> <li>Set up your environment using the Development Setup guide</li> <li>Follow the Development Guide for best practices</li> <li>Review the Documentation Workflow for documentation contributions</li> </ol>"},{"location":"navigation/#if-you-need-technical-details","title":"If you need technical details:","text":"<ol> <li>Read the Architecture document for system design</li> <li>Check the Specification for detailed protocol information</li> <li>Explore the Code Quality Integration for quality standards</li> </ol>"},{"location":"navigation/#documentation-map","title":"Documentation Map","text":"<p>```mermaid graph TD     A[Home] --&gt; B[Getting Started]     A --&gt; C[Tutorials]     A --&gt; D[Integrations]     A --&gt; E[Contributing]     A --&gt; F[Project Documentation]     A --&gt; G[Tools]</p> <pre><code>B --&gt; B1[Installation]\nB --&gt; B2[Quick Start]\nB --&gt; B3[Core Concepts]\nB --&gt; B4[Creating Decorators]\nB --&gt; B5[Compatibility]\n\nC --&gt; C1[Creating Custom Decorators]\nC --&gt; C2[Combining Decorators]\nC --&gt; C3[Extension Development]\n\nD --&gt; D1[Overview]\nD --&gt; D2[Model Context Protocol]\nD2 --&gt; D2A[MCP Server]\nD2 --&gt; D2B[Claude Desktop]\n\nE --&gt; E1[Guidelines]\nE --&gt; E2[Development Setup]\nE --&gt; E3[Development Guide]\nE --&gt; E4[Documentation]\nE --&gt; E5[Documentation Standards]\nE --&gt; E6[Decorator Registry]\n\nF --&gt; F1[Roadmap]\nF --&gt; F2[Architecture]\nF --&gt; F3[Specification]\nF --&gt; F4[Code Quality Integration]\nF --&gt; F5[FAQ]\nF --&gt; F6[Glossary]\nF --&gt; F7[Navigation]\n\nG --&gt; G1[Validator Tool]\nG --&gt; G2[MCP Server]\nG --&gt; G3[Claude Desktop]\nG --&gt; G4[Demoing the Prompt Decorators]\n</code></pre> <p>```</p>"},{"location":"navigation/#quick-reference","title":"Quick Reference","text":""},{"location":"navigation/#getting-started","title":"Getting Started","text":"<ul> <li>Installation: How to install the package</li> <li>Quick Start: Basic usage examples</li> <li>Core Concepts: Key concepts and design philosophy</li> <li>Creating Decorators: How to create custom decorators</li> <li>Compatibility: LLM provider compatibility information</li> </ul>"},{"location":"navigation/#tutorials","title":"Tutorials","text":"<ul> <li>Creating Custom Decorators: Step-by-step guide to creating decorators</li> <li>Combining Decorators: How to combine multiple decorators</li> <li>Extension Development: Creating decorator extension packages</li> </ul>"},{"location":"navigation/#integrations","title":"Integrations","text":"<ul> <li>Integrations Overview: Overview of available integrations</li> <li>Model Context Protocol (MCP): MCP integration details</li> <li>MCP Server: Running the MCP server</li> <li>Claude Desktop: Using with Claude Desktop</li> </ul>"},{"location":"navigation/#contributing","title":"Contributing","text":"<ul> <li>Guidelines: Contribution guidelines</li> <li>Development Setup: Setting up your development environment</li> <li>Development Guide: Development best practices</li> <li>Documentation: Documentation contribution workflow</li> <li>Documentation Standards: Standards for documentation</li> <li>Decorator Registry: Information about the decorator registry</li> </ul>"},{"location":"navigation/#project-documentation","title":"Project Documentation","text":"<ul> <li>Roadmap: Future development plans</li> <li>Architecture: System architecture and design</li> <li>Specification: Detailed technical specification</li> <li>Code Quality Integration: Code quality tools and processes</li> <li>FAQ: Frequently asked questions</li> <li>Glossary: Definitions of key terms</li> <li>Navigation: This navigation guide</li> </ul>"},{"location":"navigation/#tools","title":"Tools","text":"<ul> <li>Validator Tool: Tool for validating decorator definitions</li> <li>MCP Server: MCP server documentation</li> <li>Claude Desktop: Claude Desktop integration</li> <li>Demoing the Prompt Decorators: Demo tools and examples</li> </ul>"},{"location":"navigation/#search-tips","title":"Search Tips","text":"<p>The documentation includes a search feature that can help you find specific information:</p> <ol> <li>Use the search box in the top navigation bar</li> <li>Enter keywords related to what you're looking for</li> <li>Press Enter to see search results</li> <li>Click on a result to navigate to that page</li> </ol> <p>Effective search terms include: - Decorator names (e.g., \"StepByStep\", \"Reasoning\") - Concepts (e.g., \"parameters\", \"transform function\") - Tasks (e.g., \"create decorator\", \"combine decorators\") - Integration names (e.g., \"Claude\", \"MCP\")</p>"},{"location":"navigation/#additional-resources","title":"Additional Resources","text":"<ul> <li>GitHub Repository: Source code and issue tracking</li> <li>PyPI Package: Package information</li> <li>Release Notes: Version history and changes</li> </ul>"},{"location":"navigation/#feedback","title":"Feedback","text":"<p>If you can't find what you're looking for or have suggestions for improving the documentation:</p> <ol> <li>Open an issue on GitHub</li> <li>Specify what information you were looking for</li> <li>Suggest where you would expect to find it</li> </ol> <p>Your feedback helps us improve the documentation for everyone!</p>"},{"location":"prompt-decorators-specification-v1.0/","title":"Prompt Decorators Specification","text":""},{"location":"prompt-decorators-specification-v1.0/#abstract","title":"Abstract","text":"<p>This document proposes a standardized framework for \"Prompt Decorators\" \u2013 a system of annotated instructions that modify the behavior and output formatting of Large Language Models (LLMs). Building on concepts from software design patterns, particularly the Decorator pattern in object-oriented programming, this standard creates a structured, extensible approach to prompt engineering. The proposed system enables consistent, reusable interaction paradigms across different AI implementations, reducing cognitive load on users while increasing the utility, reliability, and standardization of AI interactions.</p>"},{"location":"prompt-decorators-specification-v1.0/#executive-summary","title":"Executive Summary","text":"<p>Prompt Decorators address the growing complexity of AI interactions by providing a standardized syntax for modifying AI behavior. By prefixing prompts with <code>+++</code> followed by descriptive directives like <code>Reasoning</code>, <code>StepByStep</code>, or <code>CiteSources</code>, users can consistently control how AI models process and respond to requests across different platforms and implementations. This standard defines a comprehensive set of decorators, implementation patterns, compatibility considerations, and evolution mechanisms to create a robust ecosystem for structured AI interactions.</p> <p>Key benefits include: - Reduced Cognitive Load: Users can employ shorter, standardized instructions - Consistency: More standardized behavior across compatible AI systems - Composability: Decorators can be combined for complex behavior - Extensibility: The framework allows for domain-specific extensions - Efficiency: More structured prompts can lead to more efficient interactions</p> <p>Implementations have demonstrated improvements in content quality, user satisfaction, and workflow efficiency across various domains. This standard aims to provide a foundation for more reliable, effective human-AI collaboration that can evolve with advances in AI capabilities.</p>"},{"location":"prompt-decorators-specification-v1.0/#1-introduction-and-scope","title":"1. Introduction and Scope","text":""},{"location":"prompt-decorators-specification-v1.0/#11-purpose","title":"1.1 Purpose","text":"<p>This standard defines a framework for \"Prompt Decorators\" that:</p> <ol> <li>MUST provide a consistent syntax for modifying AI behavior</li> <li>SHOULD work across different LLM implementations when supported</li> <li>SHOULD reduce prompt engineering complexity</li> <li>SHOULD enable composition of multiple behavioral modifications</li> <li>MAY be extended for domain-specific applications</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#12-scope","title":"1.2 Scope","text":"<p>This standard covers:</p> <ul> <li>Core decorator syntax and grammar</li> <li>Standard decorator definitions and behavior</li> <li>Implementation guidelines for LLM providers, application developers, and end users</li> <li>Extension mechanisms for specialized decorators</li> <li>Versioning and evolution processes</li> </ul> <p>This standard does not cover:</p> <ul> <li>Internal implementation of LLM reasoning or processing</li> <li>Model-specific optimizations or capabilities</li> <li>User interface design for decorator application</li> <li>Dataset creation or model training techniques</li> </ul>"},{"location":"prompt-decorators-specification-v1.0/#13-conformance","title":"1.3 Conformance","text":"<p>Implementations claiming conformance to this standard:</p> <ol> <li>MUST support the core syntax defined in Section 3</li> <li>MUST implement at least the minimal set of decorators defined in Section 4.1</li> <li>SHOULD implement the full set of decorators defined in Section 4</li> <li>MUST handle unsupported decorators gracefully according to Section 5.4</li> <li>SHOULD provide documentation on supported and unsupported decorators</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#14-background-and-motivation","title":"1.4 Background and Motivation","text":"<p>As Large Language Models become increasingly integrated into workflows across industries, the need for standardized, consistent ways to interact with these systems has become apparent. Current prompt engineering approaches are largely ad-hoc, requiring extensive documentation, reinvention, and significant cognitive overhead when switching between systems or use cases.</p> <p>Prompt Decorators address this challenge by providing a systematic approach to modifying AI behavior through simple, composable annotations. Inspired by the Decorator pattern in programming and Python's function decorators, they serve as a layer of abstraction that decouples the core prompt from instructions about how to process and present the response.</p>"},{"location":"prompt-decorators-specification-v1.0/#15-current-challenges-in-prompt-engineering","title":"1.5 Current Challenges in Prompt Engineering","text":"<p>Current prompt engineering suffers from several limitations:</p> <ul> <li>Inconsistency: Instructions vary widely between users, platforms, and models</li> <li>Verbosity: Detailed instructions consume token context that could be used for content</li> <li>Cognitive Overhead: Users must remember or document specific prompting techniques</li> <li>Lack of Composability: Combining different instruction paradigms is cumbersome</li> <li>Undocumented Behavior: Expected model behavior is often implicit rather than explicit</li> </ul>"},{"location":"prompt-decorators-specification-v1.0/#16-benefits-of-prompt-decorators","title":"1.6 Benefits of Prompt Decorators","text":"<p>The proposed standard addresses these challenges through:</p> <ul> <li>Standardization: Common vocabulary and syntax across platforms and models</li> <li>Efficiency: Concise annotations that reduce token consumption</li> <li>Reusability: Consistent behaviors that can be reused across different contexts</li> <li>Composability: Ability to combine decorators for complex interaction patterns</li> <li>Explicit Behavior: Clear documentation of expected model responses</li> <li>Reduced Cognitive Load: Simple annotations instead of lengthy instructions</li> </ul>"},{"location":"prompt-decorators-specification-v1.0/#2-core-principles-and-design-philosophy","title":"2. Core Principles and Design Philosophy","text":""},{"location":"prompt-decorators-specification-v1.0/#21-guiding-principles","title":"2.1 Guiding Principles","text":"<p>The Prompt Decorator standard is designed around these core principles:</p> <ol> <li>Simplicity: Decorators should be easy to learn, remember, and apply</li> <li>Consistency: Behavior should be predictable across different models and contexts</li> <li>Composability: Decorators should work together without conflicts</li> <li>Extensibility: The framework should allow for new decorators as needs evolve</li> <li>Minimalism: Decorators should use minimal syntax and tokens</li> <li>Model Agnosticism: Standards should apply across different LLM implementations</li> <li>Human Readability: Syntax should be comprehensible to humans, not just machines</li> <li>Graceful Degradation: Unrecognized decorators should be handled sensibly</li> <li>Versioning Support: The standard should accommodate evolution over time</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#22-design-choices","title":"2.2 Design Choices","text":"<p>The standard employs the following design patterns:</p> <ul> <li>Triple Plus Prefix (<code>+++</code>) to clearly demarcate decorators from regular text</li> <li>Parameter Encapsulation using parentheses with explicit parameter names</li> <li>Categorization to organize decorators by function and purpose</li> <li>Hierarchical Structure allowing for general and specific decorator types</li> </ul>"},{"location":"prompt-decorators-specification-v1.0/#3-syntax-specification","title":"3. Syntax Specification","text":""},{"location":"prompt-decorators-specification-v1.0/#31-basic-syntax","title":"3.1 Basic Syntax","text":"<p>The canonical syntax for a Prompt Decorator MUST follow this pattern:</p> <pre><code>+++&lt;DecoratorName&gt;[(parameter1=value1[, parameter2=value2, ...])]\n</code></pre> <p>Where: - <code>+++</code> is the decorator prefix that MUST be used to identify a decorator - <code>&lt;DecoratorName&gt;</code> is the case-sensitive name of the decorator - Parameters are OPTIONAL and enclosed in parentheses - Multiple parameters MUST be separated by commas - Parameter names and values MUST be separated by equals signs - String values MAY be enclosed in quotes for clarity, especially when containing spaces</p>"},{"location":"prompt-decorators-specification-v1.0/#32-parameter-types","title":"3.2 Parameter Types","text":"<p>Parameters MUST use one of the following types:</p> <ol> <li>String values: <code>parameter=\"value\"</code> or <code>parameter=value</code></li> <li>Numeric values: <code>parameter=42</code> or <code>parameter=3.14</code></li> <li>Boolean values: <code>parameter=true</code> or <code>parameter=false</code></li> <li>Enumerated values: <code>parameter=option1</code> (from a predefined set)</li> <li>Arrays: <code>parameter=[item1,item2,item3]</code></li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#33-decorator-placement-and-composition","title":"3.3 Decorator Placement and Composition","text":"<ol> <li>Decorators MUST appear at the beginning of a prompt or on a new line</li> <li>Multiple decorators MAY be stacked, with each decorator on a new line</li> <li>When multiple decorators are used, they MUST be applied in the order they appear</li> <li>The <code>+++Version</code> decorator, if present, MUST be the first decorator</li> </ol> <p>Example of proper composition:</p> <pre><code>+++Version(standard=1.0.0)\n+++Reasoning(depth=comprehensive)\n+++CiteSources(style=APA)\nWhat are the environmental impacts of electric vehicles?\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#34-versioning-syntax","title":"3.4 Versioning Syntax","text":"<p>To specify versions of individual decorators:</p> <pre><code>+++&lt;DecoratorName&gt;:v&lt;VersionNumber&gt;(parameters)\n</code></pre> <p>Example: <pre><code>+++Reasoning:v2(depth=comprehensive)\n</code></pre></p>"},{"location":"prompt-decorators-specification-v1.0/#35-error-handling","title":"3.5 Error Handling","text":"<ol> <li>Implementations MUST ignore syntax errors in decorators rather than failing</li> <li>Implementations SHOULD provide warnings for malformed decorators</li> <li>Implementations MUST proceed with processing the rest of the prompt when encountering errors</li> <li>Implementations SHOULD document their error handling behavior</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#36-json-schema-definitions","title":"3.6 JSON Schema Definitions","text":"<p>The standard provides formal JSON Schema definitions for validating decorator implementations. These schemas are available in the <code>/schemas</code> directory:</p> <ol> <li>Base Decorator Schema (<code>decorator.schema.json</code>):</li> <li>Defines the structure of individual decorators</li> <li>Validates decorator names, versions, and parameters</li> <li>Includes metadata for documentation and deprecation</li> <li> <p>Required for all decorator implementations</p> </li> <li> <p>API Request Schema (<code>api-request.schema.json</code>):</p> </li> <li>Defines the structure of API requests using decorators</li> <li>Includes prompt text, decorator list, and metadata</li> <li>References the base decorator schema for validation</li> <li> <p>Used by LLM providers implementing the standard</p> </li> <li> <p>Registry Entry Schema (<code>registry-entry.schema.json</code>):</p> </li> <li>Defines how decorators are registered in the central registry</li> <li>Includes detailed metadata, documentation, and compatibility info</li> <li>Used for publishing decorators to the registry</li> <li> <p>Ensures consistent documentation and versioning</p> </li> <li> <p>Extension Package Schema (<code>extension-package.schema.json</code>):</p> </li> <li>Defines how decorator extensions are packaged</li> <li>Includes dependency management and configuration</li> <li>References the registry entry schema for decorator definitions</li> <li>Used for distributing collections of related decorators</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#361-schema-usage","title":"3.6.1 Schema Usage","text":"<p>Implementations MUST validate their decorator implementations against these schemas:</p> <pre><code># Using ajv-cli\nnpx ajv-cli validate -s decorator.schema.json -d your-decorator.json\n\n# Using python-jsonschema\njsonschema -i your-decorator.json decorator.schema.json\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#362-schema-versioning","title":"3.6.2 Schema Versioning","text":"<p>The JSON schemas follow semantic versioning: - Major version changes indicate breaking changes - Minor version changes add features in a backward-compatible manner - Patch version changes fix issues in a backward-compatible manner</p>"},{"location":"prompt-decorators-specification-v1.0/#363-schema-references","title":"3.6.3 Schema References","text":"<p>JSON files can reference these schemas using the <code>$schema</code> property:</p> <pre><code>{\n  \"$schema\": \"https://raw.githubusercontent.com/prompt-decorators/spec/main/schemas/decorator.schema.json\",\n  \"name\": \"YourDecorator\",\n  \"version\": \"1.0.0\",\n  ...\n}\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#4-categories-of-prompt-decorators","title":"4. Categories of Prompt Decorators","text":"<p>Based on an analysis of common interaction patterns and effective prompt techniques, the following comprehensive set of decorators has been organized into functional categories.</p>"},{"location":"prompt-decorators-specification-v1.0/#41-core-decorators","title":"4.1 Core Decorators","text":"<p>These decorators form the minimal conforming implementation and MUST be supported by any implementation claiming compliance with this standard:</p> Decorator Description Parameters <code>+++Reasoning</code> Explicit reasoning path before conclusion <code>depth=[basic\\|moderate\\|comprehensive]</code> <code>+++StepByStep</code> Sequential problem-solving with labeled steps <code>numbered=[true\\|false]</code> <code>+++OutputFormat</code> Specify output format <code>format=[json\\|markdown\\|yaml\\|xml\\|plaintext]</code> <code>+++Tone</code> Overall tone adjustment <code>style=[formal\\|casual\\|friendly\\|technical\\|humorous]</code> <code>+++Version</code> Specify standard version compatibility <code>standard=[semver]</code>"},{"location":"prompt-decorators-specification-v1.0/#42-reasoning-process-decorators","title":"4.2 Reasoning Process Decorators","text":"<p>These decorators modify how the AI approaches reasoning about a problem.</p> Decorator Description Parameters <code>+++Reasoning</code> Explicit reasoning path before conclusion <code>depth=[basic\\|moderate\\|comprehensive]</code> <code>+++StepByStep</code> Sequential problem-solving with labeled steps <code>numbered=[true\\|false]</code> <code>+++Socratic</code> Question-based exploration of the topic <code>iterations=[1-5]</code> <code>+++Debate</code> Multiple viewpoint analysis <code>perspectives=[2-5]</code> <code>+++FirstPrinciples</code> Break down to fundamental truths <code>depth=[1-5]</code> <code>+++RootCause</code> Systematic analysis to identify underlying causes <code>method=[fivewhys\\|fishbone\\|pareto]</code> <code>+++TreeOfThought</code> Explore multiple reasoning branches <code>branches=[2-5]</code>, <code>depth=[1-5]</code> <code>+++Analogical</code> Use analogies for reasoning and explanation <code>domain=[general\\|specified]</code> <code>+++ForcedAnalogy</code> Compare concepts through specific analogical domains <code>source=[sports\\|nature\\|cooking\\|etc]</code> <code>+++Inductive</code> Pattern-based reasoning from specific to general - <code>+++Deductive</code> Logical reasoning from general to specific - <code>+++Abductive</code> Generate best explanations from limited information <code>hypotheses=[2-5]</code> <code>+++RedTeam</code> Challenge assumptions with adversarial analysis <code>strength=[moderate\\|aggressive\\|steelman]</code> <code>+++BlindSpots</code> Identify hidden assumptions and risks <code>focus=[assumptions\\|risks\\|biases\\|all]</code> <code>+++Contrarian</code> Generate counterarguments to test perspectives <code>approach=[outsider\\|skeptic\\|devil's-advocate]</code> <code>+++NegativeSpace</code> Uncover what isn't explicitly stated <code>focus=[implications\\|missing\\|unstated]</code> <code>+++DeepDive</code> Multi-layered, progressively deeper analysis <code>layers=[3-5]</code>, <code>focus=[nuance\\|examples\\|implications]</code>"},{"location":"prompt-decorators-specification-v1.0/#43-output-structure-decorators","title":"4.3 Output Structure Decorators","text":"<p>These decorators specify the structure and format of the AI's response.</p> Decorator Description Parameters <code>+++OutputFormat</code> Specify output format <code>format=[json\\|markdown\\|yaml\\|xml\\|csv\\|plaintext]</code> <code>+++Schema</code> Define custom structure <code>schema=[schemaDefinition]</code> <code>+++TableFormat</code> Present data in tables <code>columns=[col1,col2,...]</code>, <code>format=[markdown\\|ascii\\|csv]</code> <code>+++Summary</code> Provide condensed summary <code>length=[short\\|medium\\|long]</code>, <code>wordCount=[number]</code> <code>+++Outline</code> Structured outline format <code>depth=[1-5]</code>, <code>style=[numeric\\|bullet\\|roman]</code> <code>+++Nested</code> Hierarchical organization <code>depth=[1-5]</code>, <code>style=[bullet\\|numbered\\|mixed]</code> <code>+++Bullet</code> Bullet point format <code>style=[dash\\|dot\\|arrow\\|star]</code> <code>+++Timeline</code> Chronological structure <code>granularity=[day\\|month\\|year\\|era]</code> <code>+++Comparison</code> Direct comparison structure <code>aspects=[aspect1,aspect2,...]</code>, <code>format=[table\\|prose\\|bullets]</code> <code>+++MECE</code> Mutually exclusive, collectively exhaustive framework <code>dimensions=[2-5]</code> <code>+++DecisionMatrix</code> Structured decision-making format <code>options=[option1,option2,...]</code>, <code>criteria=[criterion1,criterion2,...]</code> <code>+++Alternatives</code> Generate multiple distinct alternatives <code>count=[2-10]</code>, <code>diversity=[low\\|medium\\|high]</code> <code>+++Layered</code> Present at multiple explanation depths <code>levels=[sentence\\|paragraph\\|page]</code>, <code>count=[2-5]</code> <code>+++Constraints</code> Apply specific limitations to the output <code>wordCount=[number]</code>, <code>budget=[number]</code>, <code>timeframe=[spec]</code> <code>+++Prioritize</code> Rank items based on specified criteria <code>criteria=[impact\\|feasibility\\|cost\\|etc]</code>, <code>count=[number]</code>"},{"location":"prompt-decorators-specification-v1.0/#44-decorator-conflicts-and-compatibility","title":"4.4 Decorator Conflicts and Compatibility","text":"<p>Some decorators may have incompatible behaviors. Implementations MUST resolve conflicts according to these rules:</p> <ol> <li>When decorators have fundamentally incompatible requirements (e.g., <code>+++ELI5</code> and <code>+++Technical</code>), the later decorator in the sequence takes precedence</li> <li>When facing a parameter conflict between decorators, the parameter in the later decorator takes precedence</li> <li>Implementations SHOULD provide documentation on known decorator conflicts</li> <li>Implementations MAY provide warnings when detecting incompatible decorator combinations</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#441-known-incompatibilities","title":"4.4.1 Known Incompatibilities","text":"Decorator Incompatible With Reason <code>+++ELI5</code> <code>+++Technical</code>, <code>+++Academic</code> Contradictory audience adaptation <code>+++Concise</code> <code>+++Detailed</code> Contradictory verbosity goals <code>+++Inductive</code> <code>+++Deductive</code> Contradictory reasoning methods <code>+++Bullet</code> <code>+++OutputFormat(format=json)</code> Structural conflict"},{"location":"prompt-decorators-specification-v1.0/#45-tone-and-style-decorators","title":"4.5 Tone and Style Decorators","text":"<p>These decorators modify the linguistic style and tone of the AI's response.</p> Decorator Description Parameters <code>+++Tone</code> Overall tone adjustment <code>style=[formal\\|casual\\|friendly\\|technical\\|humorous]</code> <code>+++Audience</code> Adjust for audience expertise <code>level=[beginner\\|intermediate\\|expert\\|technical]</code> <code>+++ELI5</code> Explain like I'm 5 years old <code>strictness=[true\\|false]</code> <code>+++Academic</code> Scholarly style <code>style=[humanities\\|scientific\\|legal]</code>, <code>format=[APA\\|MLA\\|Chicago]</code> <code>+++Professional</code> Business-oriented language <code>industry=[general\\|industry]</code> <code>+++Creative</code> Creative writing style <code>genre=[narrative\\|poetry\\|dialogic]</code> <code>+++Concise</code> Brief and to-the-point <code>maxWords=[number]</code> <code>+++Detailed</code> Comprehensive and thorough <code>depth=[moderate\\|comprehensive\\|exhaustive]</code> <code>+++Narrative</code> Story-based delivery <code>structure=[classic\\|nonlinear\\|case-study]</code> <code>+++Motivational</code> Encouraging, inspiring tone <code>intensity=[mild\\|moderate\\|high]</code> <code>+++AsExpert</code> Respond from specific expert role <code>role=[title]</code>, <code>experience=[junior\\|senior\\|leading]</code> <code>+++Persona</code> Adopt specific stakeholder viewpoint <code>role=[customer\\|executive\\|skeptic\\|etc]</code> <code>+++StyleShift</code> Modify persuasion tactics or urgency <code>aspect=[urgency\\|persuasion\\|formality]</code>, <code>level=[1-5]</code> <code>+++Remix</code> Reframe content for different contexts <code>target=[audience]</code>, <code>context=[setting]</code> <code>+++Extremes</code> Present radical and minimal versions <code>versions=[radical\\|minimal\\|both]</code>"},{"location":"prompt-decorators-specification-v1.0/#46-verification-and-quality-decorators","title":"4.6 Verification and Quality Decorators","text":"<p>These decorators focus on ensuring the accuracy, balance, and quality of the AI's response.</p> Decorator Description Parameters <code>+++CiteSources</code> Reference backing for claims <code>style=[inline\\|footnote\\|endnote]</code>, <code>format=[APA\\|MLA\\|Chicago]</code> <code>+++FactCheck</code> Verification of claims <code>confidence=[true\\|false]</code>, <code>uncertain=[mark\\|exclude]</code> <code>+++Limitations</code> Explicit statement of limitations <code>detail=[brief\\|comprehensive]</code>, <code>position=[beginning\\|end]</code> <code>+++Confidence</code> Indicate confidence in answers <code>scale=[percent\\|qualitative\\|stars]</code> <code>+++Balanced</code> Ensure equal coverage of viewpoints <code>perspectives=[2-5]</code> <code>+++Steelman</code> Present strongest version of arguments <code>sides=[1-5]</code> <code>+++PeerReview</code> Self-critique as in academic review <code>criteria=[accuracy\\|methodology\\|limitations\\|all]</code> <code>+++Precision</code> Focus on exactness and accuracy <code>level=[moderate\\|high\\|maximum]</code> <code>+++Uncertainty</code> Highlight areas of uncertainty <code>format=[inline\\|section\\|confidence]</code> <code>+++QualityMetrics</code> Apply specific quality metrics <code>metrics=[metric1,metric2,...]</code> <code>+++StressTest</code> Identify potential failure points <code>scenarios=[3-5]</code>, <code>severity=[mild\\|moderate\\|extreme]</code> <code>+++BreakAndBuild</code> Criticize then reconstruct an idea <code>breakdown=[weaknesses\\|assumptions\\|risks]</code> <code>+++FindGaps</code> Identify missing elements in an idea <code>aspects=[questions\\|resources\\|stakeholders\\|etc]</code>"},{"location":"prompt-decorators-specification-v1.0/#47-meta-decorators","title":"4.7 Meta-Decorators","text":"<p>These decorators modify the behavior of other decorators or provide higher-level control.</p> Decorator Description Parameters <code>+++Refine</code> Multiple improvement iterations <code>iterations=[2-5]</code>, <code>focus=[clarity\\|accuracy\\|conciseness]</code> <code>+++Combine</code> Use multiple decorators <code>decorators=[D1,D2,...]</code> <code>+++Conditional</code> Conditional application <code>if=[condition]</code>, <code>then=[decorator]</code>, <code>else=[decorator]</code> <code>+++Priority</code> Prioritized application <code>decorators=[D1,D2,...]</code> <code>+++Custom</code> User-defined decorator behavior <code>rules=[ruleDefinition]</code> <code>+++Override</code> Override default behaviors <code>default=[decorator]</code> <code>+++Context</code> Domain-specific adaptation <code>domain=[domain]</code> <code>+++Extension</code> Extensibility mechanism <code>source=[URI]</code> <code>+++Version</code> Version specification <code>v=[semver]</code> <code>+++Compatibility</code> Model compatibility <code>models=[M1,M2,...]</code> <code>+++Chain</code> Define multi-step response process <code>steps=[step1,step2,...]</code>, <code>showAll=[true\\|false]</code> <code>+++BuildOn</code> Reference previous context <code>reference=[last\\|specific]</code>, <code>approach=[extend\\|refine\\|contrast]</code>"},{"location":"prompt-decorators-specification-v1.0/#5-implementation-considerations","title":"5. Implementation Considerations","text":""},{"location":"prompt-decorators-specification-v1.0/#51-for-llm-providers","title":"5.1 For LLM Providers","text":"<p>LLM providers can implement this standard by:</p> <ol> <li>Pre-processing: Detecting decorators and modifying the prompt programmatically</li> <li>Fine-tuning: Training models to recognize and respond to decorators</li> <li>Documentation: Providing clear guidance on supported decorators</li> <li>Fallback Mechanisms: Handling unrecognized decorators gracefully</li> <li>Efficiency: Optimizing implementation to minimize token usage</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#511-reference-implementation","title":"5.1.1 Reference Implementation","text":"<p>A reference implementation for processing decorators in a provider API might look like:</p> <pre><code>def process_decorators(user_prompt):\n    decorators = []\n    cleaned_prompt = user_prompt\n\n    # Extract decorator patterns\n    decorator_pattern = r'\\+\\+\\+([A-Za-z]+)(?:\\(([^)]+)\\))?'\n    matches = re.findall(decorator_pattern, user_prompt)\n\n    for match in matches:\n        decorator_name = match[0]\n        params_str = match[1] if len(match) &gt; 1 else \"\"\n\n        # Parse parameters\n        params = {}\n        if params_str:\n            param_pairs = params_str.split(',')\n            for pair in param_pairs:\n                if '=' in pair:\n                    key, value = pair.split('=', 1)\n                    params[key.strip()] = value.strip()\n\n        decorators.append({\n            \"name\": decorator_name,\n            \"parameters\": params\n        })\n\n        # Remove decorator from prompt\n        pattern_to_remove = f\"+++{decorator_name}\" + (f\"({params_str})\" if params_str else \"\")\n        cleaned_prompt = cleaned_prompt.replace(pattern_to_remove, \"\", 1)\n\n    return {\n        \"decorators\": decorators,\n        \"cleaned_prompt\": cleaned_prompt.strip()\n    }\n\ndef generate_system_prompt(decorators):\n    \"\"\"Generate model instructions based on recognized decorators\"\"\"\n    system_prompt = \"You are a helpful assistant. \"\n\n    for decorator in decorators:\n        if decorator[\"name\"] == \"Reasoning\":\n            system_prompt += \"Provide detailed reasoning before giving your final answer. \"\n        elif decorator[\"name\"] == \"StepByStep\":\n            system_prompt += \"Break down your response into clearly labeled steps. \"\n        # Add more decorator handling...\n\n    return system_prompt\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#52-for-application-developers","title":"5.2 For Application Developers","text":"<p>Application developers integrating LLMs should consider:</p> <ol> <li>UI Integration: Providing interfaces for applying decorators</li> <li>Template Libraries: Creating reusable templates with decorators</li> <li>Validation: Ensuring decorators are used correctly</li> <li>Conflict Resolution: Handling potential conflicts between decorators</li> <li>Analytics: Tracking decorator effectiveness</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#521-implementation-pattern-for-applications","title":"5.2.1 Implementation Pattern for Applications","text":"<p>For client applications, decorator implementation could follow this pattern:</p> <pre><code>// Example decorator implementation in a UI application\nclass PromptDecoratorManager {\n  constructor() {\n    this.availableDecorators = {\n      \"Reasoning\": {\n        description: \"Provides detailed reasoning process\",\n        parameters: [\"depth\"],\n        defaults: { depth: \"moderate\" }\n      },\n      \"StepByStep\": {\n        description: \"Breaks response into sequential steps\",\n        parameters: [\"numbered\"],\n        defaults: { numbered: \"true\" }\n      },\n      // More decorators...\n    };\n\n    this.activeDecorators = [];\n  }\n\n  addDecorator(name, parameters = {}) {\n    if (!this.availableDecorators[name]) {\n      throw new Error(`Unknown decorator: ${name}`);\n    }\n\n    // Apply default parameters where not specified\n    const decorator = {\n      name,\n      parameters: { ...this.availableDecorators[name].defaults, ...parameters }\n    };\n\n    this.activeDecorators.push(decorator);\n    return this;\n  }\n\n  applyToPrompt(userPrompt) {\n    let decoratedPrompt = userPrompt;\n\n    // Prepend decorators to prompt\n    for (const decorator of this.activeDecorators) {\n      const paramString = Object.entries(decorator.parameters)\n        .map(([key, value]) =&gt; `${key}=${value}`)\n        .join(',');\n\n      const decoratorString = paramString\n        ? `+++${decorator.name}(${paramString})\\n`\n        : `+++${decorator.name}\\n`;\n\n      decoratedPrompt = decoratorString + decoratedPrompt;\n    }\n\n    return decoratedPrompt;\n  }\n}\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#53-for-end-users","title":"5.3 For End Users","text":"<p>End users can benefit from decorators through:</p> <ol> <li>Personal Libraries: Building collections of effective decorators</li> <li>Workflow Integration: Incorporating decorators into standard workflows</li> <li>Experimentation: Testing different decorators for specific tasks</li> <li>Sharing: Exchanging effective decorator configurations</li> <li>Feedback: Providing input on decorator effectiveness</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#531-model-instructions-for-decorator-recognition","title":"5.3.1 Model Instructions for Decorator Recognition","text":"<p>When working with models that don't natively support decorators, users can include the following in their system prompt or initial conversation:</p> <pre><code>A \"Prompt Decorator\" is an instruction added to a prompt to modify the output or influence how the response is generated.\n\nWhen you see text starting with +++ followed by a decorator name (like +++Reasoning), apply the following modifications to your response:\n\n- +++Reasoning: Begin your response with detailed explanation of your reasoning process before providing conclusions.\n- +++StepByStep: Structure your response as a sequence of clearly labeled steps.\n- +++Debate: Present multiple perspectives on the topic before reaching a conclusion.\n- +++CiteSources: Include references or citations to support your claims.\n- +++FactCheck: Verify factual accuracy and indicate uncertainty when appropriate.\n- +++OutputFormat(format=X): Structure your response in the specified format (JSON, markdown, etc.).\n- +++Tone(style=X): Adjust your response tone to match the specified style.\n\nSome decorators may include parameters in parentheses, like +++Refine(iterations=3), which modify how the decorator is applied.\n\nThese definitions must always be followed when the corresponding decorator is present in a prompt. Please retain them in memory, as I will use them in future interactions.\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#54-cross-model-compatibility-and-fallbacks","title":"5.4 Cross-Model Compatibility and Fallbacks","text":"<p>Different language models will have varying capabilities for implementing decorator behaviors. Implementation should include fallback mechanisms:</p>"},{"location":"prompt-decorators-specification-v1.0/#541-capability-detection","title":"5.4.1 Capability Detection","text":"<p>Before applying decorators, applications should detect model capabilities:</p> <pre><code>def detect_model_capabilities(model_id):\n    # Model capability database (would be more extensive in practice)\n    model_capabilities = {\n        \"gpt-4\": {\n            \"reasoning\": True,\n            \"step_by_step\": True,\n            \"fact_check\": True,\n            \"debate\": True,\n            \"output_formats\": [\"json\", \"markdown\", \"yaml\", \"xml\"]\n        },\n        \"gpt-3.5-turbo\": {\n            \"reasoning\": True,\n            \"step_by_step\": True,\n            \"fact_check\": False,\n            \"debate\": True,\n            \"output_formats\": [\"json\", \"markdown\"]\n        },\n        \"text-bison\": {\n            \"reasoning\": False,\n            \"step_by_step\": True,\n            \"fact_check\": False,\n            \"debate\": False,\n            \"output_formats\": [\"json\"]\n        }\n    }\n\n    return model_capabilities.get(model_id, {\n        \"reasoning\": False,\n        \"step_by_step\": False,\n        \"fact_check\": False,\n        \"debate\": False,\n        \"output_formats\": []\n    })\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#542-fallback-strategies","title":"5.4.2 Fallback Strategies","text":"<p>When a model doesn't support a decorator behavior:</p> <ol> <li>Notification: Inform users when a decorator can't be applied</li> <li>Approximate Implementation: Use available capabilities to approximate the desired behavior</li> <li>Model Switching: Switch to a more capable model when critical decorators are requested</li> <li>Hybrid Approach: Process part of the decorator functionality in middleware</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#55-alternative-syntax-options","title":"5.5 Alternative Syntax Options","text":"<p>While the <code>+++Decorator</code> syntax is recommended for its visibility and compatibility, implementations MUST support the JSON format and MAY support additional formats:</p>"},{"location":"prompt-decorators-specification-v1.0/#551-json-format-required","title":"5.5.1 JSON Format (Required)","text":"<p>For API-centric applications or when working with structured data, implementations MUST support the JSON format as defined in <code>api-request.schema.json</code>:</p> <pre><code>{\n  \"$schema\": \"https://raw.githubusercontent.com/prompt-decorators/spec/main/schemas/api-request.schema.json\",\n  \"prompt\": \"Explain how nuclear fusion works\",\n  \"decorators\": [\n    {\n      \"name\": \"Reasoning\",\n      \"version\": \"1.0.0\",\n      \"parameters\": {\n        \"depth\": \"comprehensive\"\n      },\n      \"metadata\": {\n        \"description\": \"Provides detailed reasoning before conclusions\",\n        \"category\": \"reasoning\"\n      }\n    },\n    {\n      \"name\": \"StepByStep\",\n      \"version\": \"1.0.0\",\n      \"parameters\": {\n        \"numbered\": true\n      }\n    }\n  ],\n  \"metadata\": {\n    \"model\": \"gpt-4\",\n    \"version\": \"1.0.0\",\n    \"temperature\": 0.7\n  }\n}\n</code></pre> <p>The JSON format MUST be validated against the provided schemas to ensure compatibility.</p>"},{"location":"prompt-decorators-specification-v1.0/#552-markdown-style-format-optional","title":"5.5.2 Markdown-Style Format (Optional)","text":"<p>For documentation or text-heavy environments, implementations MAY support a Markdown-style format:</p> <pre><code>&lt;!-- @Reasoning depth=comprehensive --&gt;\n&lt;!-- @StepByStep numbered=true --&gt;\n\nExplain how nuclear fusion works\n</code></pre> <p>When using the Markdown format, implementations MUST convert it to the canonical JSON format internally for processing.</p>"},{"location":"prompt-decorators-specification-v1.0/#553-yaml-configuration-optional","title":"5.5.3 YAML Configuration (Optional)","text":"<p>For configuration-based systems, implementations MAY support YAML format:</p> <pre><code>prompt: Explain how nuclear fusion works\ndecorators:\n  - name: Reasoning\n    version: 1.0.0\n    parameters:\n      depth: comprehensive\n    metadata:\n      description: Provides detailed reasoning before conclusions\n      category: reasoning\n  - name: StepByStep\n    version: 1.0.0\n    parameters:\n      numbered: true\nmetadata:\n  model: gpt-4\n  version: 1.0.0\n  temperature: 0.7\n</code></pre> <p>When using YAML format, implementations MUST convert it to the canonical JSON format and validate against the provided schemas.</p>"},{"location":"prompt-decorators-specification-v1.0/#554-format-conversion","title":"5.5.4 Format Conversion","text":"<p>Implementations that support multiple formats MUST:</p> <ol> <li>Convert all formats to the canonical JSON format internally</li> <li>Validate the converted format against the appropriate JSON schema</li> <li>Handle conversion errors gracefully with appropriate error messages</li> <li>Preserve all metadata and parameters during conversion</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#56-decorator-transformation-implementation","title":"5.6 Decorator Transformation Implementation","text":"<p>Implementations of prompt decorators MUST provide a mechanism for transforming the original prompt according to the decorator's intended behavior. This section describes the standard approach to prompt transformation.</p>"},{"location":"prompt-decorators-specification-v1.0/#561-transformation-models","title":"5.6.1 Transformation Models","text":"<p>The transformation model for prompt decorators follows these principles:</p> <ol> <li>Decorator's Purpose: Each decorator defines a specific modification to the prompt or response behavior.</li> <li>Instruction-Based Implementation: Decorators primarily work by adding specific instructions to the prompt.</li> <li>Parameter-Specific Variations: Parameters modify the instructions according to their values.</li> <li>Composition Logic: Multiple decorators combine in a predictable way.</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#562-standard-implementation-pattern","title":"5.6.2 Standard Implementation Pattern","text":"<p>A compliant implementation of decorator transformation behavior MUST follow this pattern:</p> <pre><code>def apply_decorator(prompt, decorator_name, parameters):\n    \"\"\"\n    Apply a decorator transformation to a prompt.\n\n    Args:\n        prompt: Original prompt text\n        decorator_name: Name of the decorator to apply\n        parameters: Dictionary of parameters\n\n    Returns:\n        Transformed prompt text\n    \"\"\"\n    # Base implementation for Reasoning decorator\n    if decorator_name == \"Reasoning\":\n        depth = parameters.get(\"depth\", \"moderate\")\n\n        # Base instruction\n        instruction = \"Please provide detailed reasoning in your response. Show your thought process before reaching a conclusion.\"\n\n        # Parameter-specific modifications\n        if depth == \"comprehensive\":\n            instruction += \" Provide a very thorough and detailed analysis with multiple perspectives.\"\n        elif depth == \"basic\":\n            instruction += \" Focus on the most important logical steps.\"\n\n        # Apply transformation (usually prepending)\n        return f\"{instruction}\\n\\n{prompt}\"\n\n    # Implementations for other decorators...\n\n    # Default fallback\n    return prompt\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#563-transformation-templates","title":"5.6.3 Transformation Templates","text":"<p>For consistent behavior across implementations, each decorator SHOULD define a transformation template consisting of:</p> <ol> <li>Base Instruction: The standard instruction text that implements the decorator's behavior.</li> <li>Parameter Mappings: How each parameter and its possible values modify the instruction.</li> <li>Placement Strategy: How the transformed content is positioned (typically prepended).</li> </ol> <p>Decorators MAY define this information in their registry entries using the <code>transformationTemplate</code> property as defined in the registry-entry schema:</p> <pre><code>{\n  \"transformationTemplate\": {\n    \"instruction\": \"Please provide detailed reasoning in your response. Show your thought process before reaching a conclusion.\",\n    \"parameterMapping\": {\n      \"depth\": {\n        \"valueMap\": {\n          \"basic\": \"Focus on the most important logical steps.\",\n          \"moderate\": \"Balance detail with clarity in your reasoning.\",\n          \"comprehensive\": \"Provide a very thorough and detailed analysis with multiple perspectives.\"\n        }\n      }\n    },\n    \"placement\": \"prepend\",\n    \"compositionBehavior\": \"accumulate\"\n  }\n}\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#564-composition-rules","title":"5.6.4 Composition Rules","text":"<p>When applying multiple decorators, implementations MUST follow these rules:</p> <ol> <li>Order of Application: Apply decorators in the order they appear in the prompt or decorator list.</li> <li>Accumulation: Instructions from multiple decorators accumulate unless they explicitly override each other.</li> <li>Coherence: The combined instructions must form a coherent set of directives.</li> <li>Conflict Resolution: If decorators have contradictory instructions, the later decorator takes precedence.</li> </ol> <p>Example of composition:</p> <pre><code>Original:\n+++Reasoning(depth=comprehensive)\n+++Audience(level=beginner)\nExplain quantum computing.\n\nTransformed:\nPlease provide detailed reasoning in your response with thorough analysis.\nPlease tailor your response for a beginner audience with minimal technical jargon.\n\nExplain quantum computing.\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#565-implementation-requirements","title":"5.6.5 Implementation Requirements","text":"<p>A compliant decorator implementation MUST:</p> <ol> <li>Parse Decorators: Correctly extract decorators and their parameters from prompts.</li> <li>Apply Transformations: Transform the prompt according to the decorator's template.</li> <li>Support Composition: Handle multiple decorators correctly.</li> <li>Provide Fallbacks: Gracefully handle unsupported decorators.</li> <li>Document Behavior: Clearly document the transformation behavior for each supported decorator.</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#566-testing-and-validation","title":"5.6.6 Testing and Validation","text":"<p>Implementations SHOULD include tests that validate:</p> <ol> <li>Correct transformation of prompts for each supported decorator.</li> <li>Proper handling of all parameter combinations.</li> <li>Consistent behavior when composing multiple decorators.</li> <li>Correct fallback behavior for unsupported decorators or parameters.</li> </ol> <p>Implementations MAY use the <code>implementationGuidance.examples</code> property in the registry entry to define test cases for validation:</p> <pre><code>{\n  \"implementationGuidance\": {\n    \"examples\": [\n      {\n        \"context\": \"Standard use case\",\n        \"originalPrompt\": \"What are the environmental impacts of electric vehicles?\",\n        \"transformedPrompt\": \"Please provide detailed reasoning in your response. Show your thought process before reaching a conclusion. Provide a very thorough and detailed analysis with multiple perspectives.\\n\\nWhat are the environmental impacts of electric vehicles?\"\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#6-use-cases-and-examples","title":"6. Use Cases and Examples","text":""},{"location":"prompt-decorators-specification-v1.0/#61-research-and-analysis","title":"6.1 Research and Analysis","text":"<pre><code>+++FirstPrinciples\n+++CiteSources(style=inline, format=APA)\n+++Limitations(position=end)\nAnalyze the potential impact of quantum computing on cryptography over the next decade.\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#62-education-and-learning","title":"6.2 Education and Learning","text":"<pre><code>+++ELI5(strictness=true)\n+++StepByStep(numbered=true)\n+++Analogical(domain=everyday)\nExplain how nuclear fusion works.\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#63-decision-support","title":"6.3 Decision Support","text":"<pre><code>+++DecisionMatrix(options=on-prem,hybrid,cloud-native, criteria=cost,security,scalability,complexity)\n+++StressTest(scenarios=3)\n+++FindGaps(aspects=stakeholders,resources,timeline)\nShould our company migrate our infrastructure to a cloud-native architecture?\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#64-creative-writing","title":"6.4 Creative Writing","text":"<pre><code>+++Creative(genre=narrative)\n+++Tone(style=humorous)\n+++Extremes(versions=both)\nWrite a short story about a robot learning to understand human emotions.\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#65-technical-documentation","title":"6.5 Technical Documentation","text":"<pre><code>+++Professional(industry=software)\n+++Audience(level=intermediate)\n+++Layered(levels=overview,detailed,examples)\n+++OutputFormat(format=markdown)\nCreate documentation for a RESTful API that manages user authentication.\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#66-strategic-analysis","title":"6.6 Strategic Analysis","text":"<pre><code>+++RedTeam(strength=steelman)\n+++BlindSpots(focus=all)\n+++BreakAndBuild\nOur company is planning to enter the sustainable energy market with a new battery technology.\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#67-multi-step-problem-solving","title":"6.7 Multi-step Problem Solving","text":"<pre><code>+++Chain(steps=summarize,critique,improve,actionize, showAll=true)\n+++DeepDive(layers=3, focus=nuance)\nHere's our current marketing strategy for launching in the European market...\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#7-versioning-and-evolution","title":"7. Versioning and Evolution","text":""},{"location":"prompt-decorators-specification-v1.0/#71-decorator-evolution-strategy","title":"7.1 Decorator Evolution Strategy","text":"<p>The standard includes mechanisms for decorator evolution while maintaining backward compatibility:</p>"},{"location":"prompt-decorators-specification-v1.0/#711-decorator-versioning","title":"7.1.1 Decorator Versioning","text":"<p>Individual decorators can specify versions:</p> <pre><code>+++Reasoning:v2(depth=comprehensive)\n</code></pre> <p>Implementations should interpret versioned decorators according to their specifications, with the following guidelines:</p> <ol> <li>Default Version: When no version is specified, the latest stable version is assumed</li> <li>Version Ranges: Implementations may specify supported version ranges</li> <li>Deprecation: Implementations should support deprecated versions with appropriate warnings</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#712-standard-versioning","title":"7.1.2 Standard Versioning","text":"<p>The overall standard follows semantic versioning:</p> <pre><code>+++Version(standard=1.2.0)\n</code></pre> <p>This decorator indicates compliance with a specific version of the standard and should be the first decorator in a sequence if used.</p>"},{"location":"prompt-decorators-specification-v1.0/#713-feature-detection","title":"7.1.3 Feature Detection","text":"<p>Implementations can use the following pattern to detect supported features:</p> <pre><code>+++FeatureDetect(reasoning, stepByStep, outputFormat)\n</code></pre> <p>This allows applications to programmatically determine which decorators a particular model or implementation supports.</p>"},{"location":"prompt-decorators-specification-v1.0/#72-community-and-ecosystem-development","title":"7.2 Community and Ecosystem Development","text":""},{"location":"prompt-decorators-specification-v1.0/#721-registry-and-discovery","title":"7.2.1 Registry and Discovery","text":"<p>A central registry for standard and community decorators facilitates discovery and adoption. All registry entries MUST conform to the <code>registry-entry.schema.json</code> schema:</p> <pre><code>{\n  \"$schema\": \"https://raw.githubusercontent.com/prompt-decorators/spec/main/schemas/registry-entry.schema.json\",\n  \"decoratorName\": \"ScientificReasoning\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Applies scientific method reasoning process\",\n  \"author\": {\n    \"name\": \"Scientific AI Consortium\",\n    \"email\": \"contact@example.org\",\n    \"url\": \"https://example.org\"\n  },\n  \"parameters\": [\n    {\n      \"name\": \"discipline\",\n      \"type\": \"enum\",\n      \"description\": \"Scientific discipline context\",\n      \"enum\": [\"physics\", \"biology\", \"chemistry\", \"general\"],\n      \"default\": \"general\",\n      \"required\": false\n    },\n    {\n      \"name\": \"rigor\",\n      \"type\": \"enum\",\n      \"description\": \"Level of scientific rigor\",\n      \"enum\": [\"academic\", \"educational\", \"popular\"],\n      \"default\": \"educational\",\n      \"required\": false\n    }\n  ],\n  \"examples\": [\n    {\n      \"description\": \"Basic scientific analysis of a physics problem\",\n      \"usage\": \"+++ScientificReasoning(discipline=physics, rigor=academic)\",\n      \"result\": \"Analyzes the problem using formal physics methodology and academic rigor\"\n    }\n  ],\n  \"compatibility\": {\n    \"requires\": [\"Reasoning\"],\n    \"conflicts\": [\"ELI5\"],\n    \"minStandardVersion\": \"1.0.0\",\n    \"maxStandardVersion\": \"2.0.0\",\n    \"models\": [\n      \"gpt-4\",\n      \"gpt-3.5-turbo\"\n    ]\n  }\n}\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#722-extension-mechanism","title":"7.2.2 Extension Mechanism","text":"<p>The <code>+++Extension</code> decorator enables loading of community-defined decorators. Extension packages MUST conform to the <code>extension-package.schema.json</code> schema:</p> <pre><code>{\n  \"$schema\": \"https://raw.githubusercontent.com/prompt-decorators/spec/main/schemas/extension-package.schema.json\",\n  \"name\": \"scientific-reasoning-pack\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A collection of decorators for scientific reasoning and analysis\",\n  \"author\": {\n    \"name\": \"Scientific AI Consortium\",\n    \"email\": \"contact@example.org\",\n    \"url\": \"https://example.org\"\n  },\n  \"license\": \"Apache 2.0\",\n  \"keywords\": [\"science\", \"reasoning\", \"analysis\"],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/example/scientific-reasoning-pack\"\n  },\n  \"decorators\": [\n    {\n      \"decoratorName\": \"ScientificReasoning\",\n      \"version\": \"1.0.0\",\n      \"description\": \"Applies scientific method reasoning process\",\n      \"parameters\": [\n        {\n          \"name\": \"discipline\",\n          \"type\": \"enum\",\n          \"description\": \"Scientific discipline context\",\n          \"enum\": [\"physics\", \"biology\", \"chemistry\", \"general\"],\n          \"default\": \"general\"\n        }\n      ]\n    }\n  ],\n  \"dependencies\": {\n    \"standard\": {\n      \"version\": \"1.0.0\"\n    },\n    \"extensions\": [\n      {\n        \"name\": \"core-reasoning\",\n        \"version\": \"1.0.0\"\n      }\n    ]\n  }\n}\n</code></pre> <p>Usage example: <pre><code>+++Extension(source=https://decorator-registry.ai/scientific-pack.json)\n+++ScientificReasoning(discipline=physics)\n</code></pre></p>"},{"location":"prompt-decorators-specification-v1.0/#723-schema-evolution","title":"7.2.3 Schema Evolution","text":"<p>The JSON schemas for the registry and extensions follow these principles:</p> <ol> <li>Backward Compatibility: Schema changes MUST maintain backward compatibility within major versions</li> <li>Version Alignment: Schema versions MUST align with the standard version</li> <li>Migration Support: Major version changes MUST include migration guides</li> <li>Validation Tools: The community MUST maintain tools for schema validation</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#724-governance-model","title":"7.2.4 Governance Model","text":"<p>The governance of the Prompt Decorator standard includes:</p> <ol> <li>Technical Committee: Oversees standard evolution and core decorator definitions</li> <li>Community Working Groups: Develop specialized decorator sets for specific domains</li> <li>Public Review Process: Ensures new proposals receive adequate review and feedback</li> <li>Versioning Policy: Establishes guidelines for backward compatibility and deprecation</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#73-standardization-process","title":"7.3 Standardization Process","text":"<ol> <li>Community Feedback: Gathering input from AI practitioners and users</li> <li>Formal Specification: Developing a comprehensive technical specification</li> <li>Reference Implementation: Creating open-source implementation examples</li> <li>Compatibility Testing: Ensuring consistent behavior across platforms</li> <li>Standards Body: Establishing governance for ongoing development</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#74-extensions-and-enhancements","title":"7.4 Extensions and Enhancements","text":"<ol> <li>Model-Specific Decorators: Optimizations for specific LLM architectures</li> <li>Domain-Specific Decorators: Specialized decorators for fields like medicine, law, etc.</li> <li>Interoperability: Standards for decorator translation between systems</li> <li>Metadata Integration: Linking decorators with metadata about responses</li> <li>Learning Mechanisms: Systems that learn effective decorator patterns from usage</li> <li>Automated Decorator Selection: AI-assisted decorator recommendation based on query intent</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#8-security-and-privacy-considerations","title":"8. Security and Privacy Considerations","text":""},{"location":"prompt-decorators-specification-v1.0/#81-security-considerations","title":"8.1 Security Considerations","text":"<p>Implementations of Prompt Decorators should consider these security aspects:</p> <ol> <li>Input Validation: Implementations MUST validate decorator syntax to prevent injection attacks</li> <li>Resource Limitations: Implementations SHOULD enforce limits on decorator complexity to prevent denial-of-service attacks</li> <li>Authorization Controls: Implementations MAY restrict access to certain decorators based on user permissions</li> <li>Sandbox Execution: When implementing custom decorators, execution SHOULD be sandboxed</li> <li>Audit Logging: Implementations SHOULD log decorator usage for security monitoring</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#82-privacy-considerations","title":"8.2 Privacy Considerations","text":"<p>Implementations should address these privacy concerns:</p> <ol> <li>Data Minimization: Decorators SHOULD NOT require unnecessary personal information</li> <li>Purpose Limitation: Implementations SHOULD document how decorator information is used</li> <li>User Control: Users SHOULD have the ability to disable or limit decorator tracking</li> <li>Transparency: Documentation SHOULD disclose how decorator usage data might be collected or analyzed</li> <li>Persistent Storage: Implementations SHOULD clarify if and how decorator preferences are stored</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#83-ethical-considerations","title":"8.3 Ethical Considerations","text":"<p>Implementers should consider these ethical aspects:</p> <ol> <li>Accessibility: Decorators SHOULD be designed to work with assistive technologies</li> <li>Bias Mitigation: Implementations SHOULD test decorators with diverse inputs to identify potential biases</li> <li>Transparency: The effect of decorators SHOULD be made clear to users</li> <li>User Agency: Users SHOULD be able to understand and control decorator effects</li> <li>Documentation: Implementations SHOULD document limitations and potential issues</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#9-testing-and-validation","title":"9. Testing and Validation","text":""},{"location":"prompt-decorators-specification-v1.0/#91-conformance-testing","title":"9.1 Conformance Testing","text":"<p>Implementations claiming conformance with this standard SHOULD implement these test procedures:</p> <ol> <li>Syntax Validation: Test parsing and recognition of all core decorators</li> <li>Behavior Validation: Test that each supported decorator produces the expected behavioral change</li> <li>Composition Testing: Test combinations of decorators for expected interaction</li> <li>Error Handling: Test handling of malformed decorators</li> <li>Edge Cases: Test boundary conditions for parameter values</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#10-references","title":"10. References","text":"<ol> <li>Gamma, E., Helm, R., Johnson, R., &amp; Vlissides, J. (1994). Design Patterns: Elements of Reusable Object-Oriented Software.</li> <li>Python Software Foundation. (2021). PEP 318 \u2013 Decorators for Functions and Methods.</li> <li>Wei, J., Wang, X., Schuurmans, D., Bosma, M., et al. (2022). Chain of Thought Prompting Elicits Reasoning in Large Language Models.</li> <li>Yao, S., Yu, D., Zhao, J., Shafran, I., et al. (2023). Tree of Thoughts: Deliberate Problem Solving with Large Language Models.</li> <li>White, J., Fu, Q., Hays, S., Sandborn, M., et al. (2023). A Prompt Pattern Catalog to Enhance Prompt Engineering with ChatGPT.</li> <li>Kojima, T., Gu, S.S., Reid, M., Matsuo, Y., &amp; Iwasawa, Y. (2022). Large Language Models are Zero-Shot Reasoners.</li> <li>Liu, P., Yuan, W., Fu, J., Jiang, Z., et al. (2023). Pre-train, Prompt, and Predict: A Systematic Survey of Prompting Methods in Natural Language Processing.</li> <li>Reynolds, L., &amp; McDonell, K. (2021). Prompt Programming for Large Language Models: Beyond the Few-Shot Paradigm.</li> </ol>"},{"location":"quickstart/","title":"Quick Start","text":"<p>This guide will help you get started with Prompt Decorators quickly, showing the most common usage patterns.</p>"},{"location":"quickstart/#basic-usage","title":"Basic Usage","text":""},{"location":"quickstart/#1-import-the-package","title":"1. Import the Package","text":"<pre><code>from prompt_decorators import apply_dynamic_decorators, create_decorator_instance\n</code></pre>"},{"location":"quickstart/#2-using-inline-decorator-syntax","title":"2. Using Inline Decorator Syntax","text":"<p>The simplest way to use prompt decorators is with the inline syntax directly in your prompts:</p> <pre><code># Create a prompt with decorators using inline syntax\nprompt = \"\"\"\n+++StepByStep(numbered=true)\nExplain how photosynthesis works.\n\"\"\"\n\n# Apply the decorators to transform the prompt\ntransformed_prompt = apply_dynamic_decorators(prompt)\n\n# Send the transformed prompt to any LLM\n# response = your_llm_function(transformed_prompt)\nprint(transformed_prompt)\n</code></pre>"},{"location":"quickstart/#3-using-decorator-instances","title":"3. Using Decorator Instances","text":"<p>You can also create and use decorator instances programmatically:</p> <pre><code># Create a decorator instance\nstep_by_step = create_decorator_instance(\"StepByStep\", numbered=True)\n\n# Apply the decorator to a prompt\noriginal_prompt = \"Explain how photosynthesis works.\"\ntransformed_prompt = step_by_step(original_prompt)\n\n# Send to your LLM\n# response = your_llm_function(transformed_prompt)\nprint(transformed_prompt)\n</code></pre>"},{"location":"quickstart/#4-combining-multiple-decorators","title":"4. Combining Multiple Decorators","text":"<p>You can stack multiple decorators either inline or programmatically:</p> <pre><code># Inline stacking\nprompt = \"\"\"\n+++Persona(role=\"scientist\")\n+++StepByStep(numbered=true)\n+++Audience(level=\"beginner\")\nExplain how photosynthesis works.\n\"\"\"\ntransformed_prompt = apply_dynamic_decorators(prompt)\n\n# Or programmatically\npersona = create_decorator_instance(\"Persona\", role=\"scientist\")\nstep_by_step = create_decorator_instance(\"StepByStep\", numbered=True)\naudience = create_decorator_instance(\"Audience\", level=\"beginner\")\n\noriginal_prompt = \"Explain how photosynthesis works.\"\ntransformed_prompt = persona(step_by_step(audience(original_prompt)))\n</code></pre>"},{"location":"quickstart/#working-with-decorators","title":"Working with Decorators","text":""},{"location":"quickstart/#listing-available-decorators","title":"Listing Available Decorators","text":"<p>You can list all available decorators:</p> <pre><code>from prompt_decorators import get_available_decorators\n\ndecorators = get_available_decorators()\nfor decorator in decorators:\n    print(f\"{decorator.name}: {decorator.description}\")\n</code></pre>"},{"location":"quickstart/#getting-decorator-details","title":"Getting Decorator Details","text":"<p>To get detailed information about a specific decorator:</p> <pre><code># Find a specific decorator by name\ndecorators = get_available_decorators()\nreasoning_decorator = next((d for d in decorators if d.name == \"Reasoning\"), None)\n\nif reasoning_decorator:\n    print(f\"Name: {reasoning_decorator.name}\")\n    print(f\"Description: {reasoning_decorator.description}\")\n    print(f\"Category: {reasoning_decorator.category}\")\n    print(\"Parameters:\")\n    for param in reasoning_decorator.parameters:\n        print(f\"  - {param.name}: {param.description}\")\n        if hasattr(param, 'default'):\n            print(f\"    Default: {param.default}\")\n</code></pre>"},{"location":"quickstart/#integration-with-llm-providers","title":"Integration with LLM Providers","text":""},{"location":"quickstart/#using-with-openai","title":"Using with OpenAI","text":"<pre><code>import openai\nfrom prompt_decorators import apply_dynamic_decorators\n\n# Set up OpenAI API key\nopenai.api_key = \"your-api-key-here\"\n\n# Create and transform a prompt\nprompt = \"\"\"\n+++StepByStep(numbered=true)\n+++Audience(level=\"beginner\")\nExplain quantum computing.\n\"\"\"\ntransformed_prompt = apply_dynamic_decorators(prompt)\n\n# Send to OpenAI\nresponse = openai.chat.completions.create(\n    model=\"gpt-4\",\n    messages=[\n        {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n        {\"role\": \"user\", \"content\": transformed_prompt}\n    ],\n    temperature=0.7,\n    max_tokens=1000\n)\n\n# Print the response\nprint(response.choices[0].message.content)\n</code></pre>"},{"location":"quickstart/#using-with-anthropic-claude","title":"Using with Anthropic Claude","text":"<pre><code>import anthropic\nfrom prompt_decorators import apply_dynamic_decorators\n\n# Set up Anthropic client\nclient = anthropic.Anthropic(api_key=\"your-anthropic-api-key\")\n\n# Create and transform a prompt\nprompt = \"\"\"\n+++StepByStep(numbered=true)\n+++Persona(role=\"teacher\")\nExplain the water cycle.\n\"\"\"\ntransformed_prompt = apply_dynamic_decorators(prompt)\n\n# Send to Anthropic Claude\nmessage = client.messages.create(\n    model=\"claude-3-opus-20240229\",\n    max_tokens=1000,\n    temperature=0.7,\n    messages=[\n        {\"role\": \"user\", \"content\": transformed_prompt}\n    ]\n)\n\n# Print the response\nprint(message.content[0].text)\n</code></pre>"},{"location":"quickstart/#mcp-integration","title":"MCP Integration","text":"<p>Prompt Decorators integrates with the Model Context Protocol (MCP) to provide decoration functionality to any MCP-compatible client:</p> <pre><code># Run the MCP server (general use)\npython -m prompt_decorators.integrations.mcp\n\n# For Claude Desktop integration\npython -m prompt_decorators.integrations.mcp.claude_desktop\n</code></pre> <p>For detailed MCP integration instructions, see the MCP Integration Guide.</p>"},{"location":"quickstart/#creating-custom-decorators","title":"Creating Custom Decorators","text":"<p>You can create your own decorators:</p> <pre><code>from prompt_decorators import (\n    DecoratorDefinition,\n    register_decorator,\n    create_decorator_instance\n)\n\n# Define a custom decorator\nmy_decorator_def = DecoratorDefinition(\n    name=\"MyCustomDecorator\",\n    description=\"A custom decorator that adds a prefix and suffix\",\n    category=\"Custom\",\n    parameters=[\n        {\"name\": \"prefix\", \"type\": \"string\", \"description\": \"Text to add before\", \"default\": \"START: \"},\n        {\"name\": \"suffix\", \"type\": \"string\", \"description\": \"Text to add after\", \"default\": \" :END\"}\n    ],\n    transform_function=\"return prefix + text + suffix;\"\n)\n\n# Register it for use\nregister_decorator(my_decorator_def)\n\n# Use your custom decorator\nmy_decorator = create_decorator_instance(\"MyCustomDecorator\", prefix=\"BEGINNING: \", suffix=\" :COMPLETE\")\nresult = my_decorator(\"This is my text\")\nprint(result)  # Output: \"BEGINNING: This is my text :COMPLETE\"\n</code></pre> <p>For more examples of how to create custom decorators, see the Creating Custom Decorators Tutorial.</p>"},{"location":"quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Explore Core Concepts to understand the design principles behind the framework</li> <li>Learn about Creating Decorators to build your own custom decorators</li> <li>Check out the Tutorials for step-by-step examples</li> <li>See the MCP Integration for using decorators with Claude and other LLMs</li> </ul>"},{"location":"roadmap/","title":"Roadmap","text":"<p>This page outlines the future development plans for the Prompt Decorators framework.</p>"},{"location":"roadmap/#core-framework-enhancements","title":"Core Framework Enhancements","text":"<ul> <li>Performance Optimization: Improve the efficiency of decorator application for large prompts</li> <li>Expanded Decorator Library: Add 10+ new decorators covering additional prompt engineering techniques</li> <li>Enhanced Compatibility Checking: Develop more sophisticated compatibility rules between decorators</li> <li>Improved Error Handling: Add better error messages and recovery mechanisms</li> </ul>"},{"location":"roadmap/#documentation-and-examples","title":"Documentation and Examples","text":"<ul> <li>Interactive Documentation: Create an interactive web-based playground for trying decorators</li> <li>Video Tutorials: Produce a series of tutorial videos demonstrating key features</li> <li>Case Studies: Document real-world use cases and success stories</li> <li>Expanded Examples: Add more complex examples showing advanced usage patterns</li> </ul>"},{"location":"roadmap/#testing-and-quality-assurance","title":"Testing and Quality Assurance","text":"<ul> <li>Expanded Test Coverage: Achieve 95%+ test coverage across the codebase</li> <li>Benchmark Suite: Develop benchmarks for measuring decorator performance</li> <li>Compatibility Testing: Test with a wider range of LLM providers and models</li> <li>Security Audit: Conduct a comprehensive security review</li> </ul>"},{"location":"roadmap/#advanced-features","title":"Advanced Features","text":"<ul> <li>Decorator Marketplace: Create a central repository for sharing community-created decorators</li> <li>Visual Decorator Builder: Develop a GUI tool for creating and configuring decorators</li> <li>Adaptive Decorators: Implement decorators that adapt based on the prompt content or context</li> <li>Multilingual Support: Enhance decorators to work effectively with multiple languages</li> <li>Versioned Registry: Support multiple versions of decorators in the registry</li> </ul>"},{"location":"roadmap/#integration-and-ecosystem","title":"Integration and Ecosystem","text":"<ul> <li>LangChain Integration: Develop deeper integration with the LangChain ecosystem</li> <li>Hugging Face Integration: Create specialized adapters for Hugging Face models</li> <li>Web Framework Plugins: Build plugins for popular web frameworks (Flask, FastAPI, Django)</li> <li>Vector Database Connectors: Add support for retrieving decorators from vector databases</li> <li>Prompt Management System: Develop a system for managing and versioning decorated prompts</li> </ul>"},{"location":"roadmap/#analytics-and-monitoring","title":"Analytics and Monitoring","text":"<ul> <li>Decorator Analytics: Add tools for tracking decorator usage and effectiveness</li> <li>Performance Monitoring: Implement monitoring for decorator application time and token usage</li> <li>A/B Testing Framework: Create tools for comparing different decorator combinations</li> <li>Quality Metrics: Develop metrics for evaluating the quality of decorated prompts</li> </ul>"},{"location":"roadmap/#advanced-ai-capabilities","title":"Advanced AI Capabilities","text":"<ul> <li>Auto-Decorator Selection: Use AI to automatically select optimal decorators for a given prompt</li> <li>Self-Optimizing Decorators: Implement decorators that learn and improve based on usage patterns</li> <li>Context-Aware Decorators: Develop decorators that adapt based on conversation history</li> <li>Multimodal Decorators: Extend the framework to support multimodal prompts (text + images)</li> <li>Decorator Synthesis: Generate new decorators based on natural language descriptions</li> </ul>"},{"location":"roadmap/#enterprise-features","title":"Enterprise Features","text":"<ul> <li>Role-Based Access Control: Add permissions for decorator creation and usage</li> <li>Audit Logging: Implement comprehensive logging for compliance and security</li> <li>Enterprise Deployment Tools: Create tools for deploying in enterprise environments</li> <li>High Availability: Ensure the framework can operate in high-availability environments</li> <li>SLA Monitoring: Add tools for monitoring service level agreements</li> </ul>"},{"location":"roadmap/#research-and-innovation","title":"Research and Innovation","text":"<ul> <li>Academic Partnerships: Collaborate with academic institutions on prompt engineering research</li> <li>Published Research: Publish papers on the effectiveness of different decorator approaches</li> <li>Novel Prompt Techniques: Research and implement cutting-edge prompt engineering techniques</li> <li>Cross-Model Optimization: Develop techniques for optimizing prompts across different LLM architectures</li> <li>Prompt Efficiency Research: Research methods for reducing token usage while maintaining effectiveness</li> </ul>"},{"location":"roadmap/#community-and-ecosystem","title":"Community and Ecosystem","text":"<ul> <li>Open Governance Model: Establish an open governance model for the project</li> <li>Community Events: Host regular community events, hackathons, and challenges</li> <li>Training and Certification: Develop training materials and certification programs</li> <li>Extended Plugin System: Create a more robust plugin system for community extensions</li> <li>Integration Ecosystem: Build a broader ecosystem of integrations with other AI tools</li> </ul>"},{"location":"roadmap/#how-to-contribute","title":"How to Contribute","text":"<p>We welcome contributions to help us achieve these roadmap goals! Here's how you can get involved:</p> <ol> <li>Feature Development: Pick an item from the roadmap and submit a pull request</li> <li>Bug Fixes: Help us address issues in the issue tracker</li> <li>Documentation: Improve our documentation or create tutorials</li> <li>Testing: Help us test the framework with different LLMs and use cases</li> <li>Feedback: Share your ideas and suggestions for the roadmap</li> </ol> <p>See our Contributing Guide for more details on how to contribute.</p>"},{"location":"roadmap/#feedback","title":"Feedback","text":"<p>This roadmap is a living document and will evolve based on community feedback and changing priorities. If you have suggestions or feedback on the roadmap, please:</p> <ul> <li>Open an issue on our GitHub repository</li> <li>Discuss in our community forums</li> <li>Reach out to the maintainers directly</li> </ul> <p>We value your input in shaping the future of the Prompt Decorators framework!</p>"},{"location":"validator_tool/","title":"Validator Tool","text":"<p>The Prompt Decorators Validator Tool is a utility for validating decorator definitions, ensuring they conform to the framework's specifications, and helping detect issues before they affect your applications.</p>"},{"location":"validator_tool/#overview","title":"Overview","text":"<p>The validator tool performs several key functions:</p> <ol> <li>Schema Validation: Ensures decorator definitions match the expected schema</li> <li>Parameter Validation: Verifies parameter types, names, and defaults</li> <li>Transform Function Analysis: Checks for syntax errors and potential issues</li> <li>Compatibility Checking: Identifies potential conflicts between decorators</li> <li>Performance Analysis: Evaluates transform functions for efficiency concerns</li> </ol>"},{"location":"validator_tool/#installation","title":"Installation","text":"<p>The validator tool is included with the prompt-decorators package:</p> <pre><code>pip install prompt-decorators\n</code></pre> <p>For the command-line interface, install with the CLI extras:</p> <pre><code>pip install \"prompt-decorators[cli]\"\n</code></pre>"},{"location":"validator_tool/#using-the-validator-cli","title":"Using the Validator CLI","text":"<p>The validator can be used from the command line:</p> <pre><code># Validate a single decorator JSON file\nprompt-decorators validate my_decorator.json\n\n# Validate all decorators in a directory\nprompt-decorators validate --directory path/to/decorators\n\n# Validate a decorator defined in Python code\nprompt-decorators validate --module my_package.decorators\n\n# Generate a report\nprompt-decorators validate --report report.html path/to/decorators\n</code></pre>"},{"location":"validator_tool/#available-commands","title":"Available Commands","text":"<ul> <li><code>validate</code>: Validate decorator definitions</li> <li><code>check-conflicts</code>: Check for conflicts between decorators</li> <li><code>analyze</code>: Analyze transform functions for performance issues</li> <li><code>verify</code>: Verify that decorators work with various LLM providers</li> </ul>"},{"location":"validator_tool/#options","title":"Options","text":"<ul> <li><code>--directory</code>, <code>-d</code>: Directory containing decorator definitions</li> <li><code>--recursive</code>, <code>-r</code>: Recursively search directories</li> <li><code>--module</code>, <code>-m</code>: Python module containing decorator definitions</li> <li><code>--format</code>, <code>-f</code>: Output format (text, json, html)</li> <li><code>--report</code>: Generate a detailed report file</li> <li><code>--verbose</code>, <code>-v</code>: Show detailed validation information</li> <li><code>--fix</code>: Attempt to fix issues automatically</li> </ul>"},{"location":"validator_tool/#using-the-validator-in-code","title":"Using the Validator in Code","text":"<p>You can also use the validator programmatically in your Python code:</p> <pre><code>from prompt_decorators.tools.validator import (\n    validate_decorator_definition,\n    validate_transform_function,\n    check_decorator_conflicts\n)\n\n# Validate a decorator definition\nfrom prompt_decorators import DecoratorDefinition\n\nmy_decorator = DecoratorDefinition(\n    name=\"MyDecorator\",\n    description=\"A sample decorator\",\n    category=\"Custom\",\n    parameters=[\n        {\n            \"name\": \"param1\",\n            \"type\": \"string\",\n            \"description\": \"A parameter\",\n            \"default\": \"default value\"\n        }\n    ],\n    transform_function=\"return 'Modified: ' + text;\"\n)\n\n# Validate against schema\nvalidation_result = validate_decorator_definition(my_decorator)\nif validation_result.is_valid:\n    print(\"Decorator is valid!\")\nelse:\n    print(f\"Validation errors: {validation_result.errors}\")\n\n# Validate transform function specifically\ntransform_result = validate_transform_function(my_decorator.transform_function)\nif transform_result.is_valid:\n    print(\"Transform function is valid!\")\nelse:\n    print(f\"Transform function errors: {transform_result.errors}\")\n\n# Check for conflicts with existing decorators\nconflicts = check_decorator_conflicts(my_decorator)\nif conflicts:\n    print(f\"Potential conflicts with: {', '.join(conflicts)}\")\n</code></pre>"},{"location":"validator_tool/#validation-checks","title":"Validation Checks","text":"<p>The validator performs these checks:</p>"},{"location":"validator_tool/#schema-validation","title":"Schema Validation","text":"<ul> <li>Ensures required fields are present (name, description, etc.)</li> <li>Validates structure conforms to the JSON schema</li> <li>Checks field types and formats</li> </ul>"},{"location":"validator_tool/#parameter-validation","title":"Parameter Validation","text":"<ul> <li>Verifies parameter names are unique</li> <li>Ensures enum parameters have valid options</li> <li>Checks default values match parameter types</li> <li>Validates parameter descriptions</li> </ul>"},{"location":"validator_tool/#transform-function-analysis","title":"Transform Function Analysis","text":"<ul> <li>Checks JavaScript syntax</li> <li>Verifies all parameters are used correctly</li> <li>Ensures function returns a string value</li> <li>Warns about potential security issues</li> </ul>"},{"location":"validator_tool/#compatibility-analysis","title":"Compatibility Analysis","text":"<ul> <li>Identifies conflicting parameter names</li> <li>Detects overlapping functionality</li> <li>Warns about parameters with similar names but different types</li> </ul>"},{"location":"validator_tool/#creating-a-custom-validator","title":"Creating a Custom Validator","text":"<p>You can extend the validator for your specific needs:</p> <pre><code>from prompt_decorators.tools.validator import DecoratorValidator, ValidationRule\n\n# Create a custom validation rule\nclass CustomParameterRule(ValidationRule):\n    \"\"\"Rule that requires parameters to follow a naming convention.\"\"\"\n\n    def validate(self, decorator_def):\n        \"\"\"Check that all parameters follow snake_case convention.\"\"\"\n        issues = []\n\n        for param in decorator_def.parameters:\n            name = param.get(\"name\", \"\")\n            if not name.islower() or \" \" in name:\n                issues.append(f\"Parameter '{name}' should use snake_case\")\n\n        return issues\n\n# Create a custom validator with your rule\nclass CustomValidator(DecoratorValidator):\n    def __init__(self):\n        super().__init__()\n        self.add_rule(CustomParameterRule())\n\n# Use your custom validator\nvalidator = CustomValidator()\nresult = validator.validate(my_decorator)\n</code></pre>"},{"location":"validator_tool/#continuous-integration","title":"Continuous Integration","text":"<p>The validator tool can be integrated into your CI/CD pipeline:</p> <pre><code># GitHub Actions example\nname: Validate Decorators\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up Python\n      uses: actions/setup-python@v2\n      with:\n        python-version: '3.11'\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install prompt-decorators[cli]\n    - name: Validate decorators\n      run: |\n        prompt-decorators validate --directory ./decorators --report validation-report.html\n    - name: Upload validation report\n      uses: actions/upload-artifact@v2\n      with:\n        name: validation-report\n        path: validation-report.html\n</code></pre>"},{"location":"validator_tool/#common-validation-issues-and-solutions","title":"Common Validation Issues and Solutions","text":""},{"location":"validator_tool/#issue-missing-required-fields","title":"Issue: Missing Required Fields","text":"<pre><code>Error: Missing required field 'description' in decorator 'MyDecorator'\n</code></pre> <p>Solution: Add the missing field to your decorator definition.</p>"},{"location":"validator_tool/#issue-invalid-parameter-type","title":"Issue: Invalid Parameter Type","text":"<pre><code>Error: Parameter 'count' has invalid type 'integer'. Valid types are: string, number, boolean, enum\n</code></pre> <p>Solution: Change the parameter type to one of the supported types. Use <code>\"type\": \"number\"</code> instead of <code>\"type\": \"integer\"</code>.</p>"},{"location":"validator_tool/#issue-transform-function-syntax-error","title":"Issue: Transform Function Syntax Error","text":"<pre><code>Error: Syntax error in transform function: Unexpected token 'return'\n</code></pre> <p>Solution: Fix the JavaScript syntax in your transform function. Make sure you're using valid JavaScript.</p>"},{"location":"validator_tool/#issue-missing-parameter-in-transform-function","title":"Issue: Missing Parameter in Transform Function","text":"<pre><code>Warning: Parameter 'format' is defined but not used in the transform function\n</code></pre> <p>Solution: Either use the parameter in your transform function or remove it from the parameter definitions.</p>"},{"location":"validator_tool/#issue-potential-security-issue","title":"Issue: Potential Security Issue","text":"<pre><code>Warning: Transform function uses 'eval', which can be a security risk\n</code></pre> <p>Solution: Avoid using <code>eval</code> or other unsafe JavaScript constructs in your transform functions.</p>"},{"location":"validator_tool/#performance-optimization","title":"Performance Optimization","text":"<p>The validator can help identify performance issues in your decorators:</p> <pre><code>prompt-decorators analyze --performance my_decorator.json\n</code></pre> <p>This will analyze your transform functions for performance issues such as:</p> <ul> <li>Inefficient string concatenations</li> <li>Complex loops or recursion</li> <li>Excessive memory usage</li> <li>Potential performance bottlenecks</li> </ul>"},{"location":"validator_tool/#best-practices","title":"Best Practices","text":"<ol> <li>Validate Early and Often: Run validation during development, not just before release</li> <li>Automate Validation: Include validation in your CI/CD pipeline</li> <li>Fix All Errors: Resolve all validation errors before using decorators in production</li> <li>Review Warnings: Warnings may indicate future problems</li> <li>Use Reports: Generate and review comprehensive validation reports</li> </ol>"},{"location":"validator_tool/#related-tools","title":"Related Tools","text":"<ul> <li>Schema Generator: Generate JSON schema files for your decorators</li> <li>Documentation Generator: Create documentation from decorator definitions</li> <li>Test Generator: Generate test cases for your decorators</li> </ul>"},{"location":"validator_tool/#next-steps","title":"Next Steps","text":"<ul> <li>Learn how to create your own decorators</li> <li>Explore custom decorators in the tutorials</li> <li>Check out the decorator specification</li> </ul>"},{"location":"workflow-rules/","title":"Cursor Workflow Rules","text":"<p>This project has been updated to use the auto rule generator from cursor-auto-rules-agile-workflow.</p> <p>Note: This script can be safely re-run at any time to update the template rules to their latest versions. It will not impact or overwrite any custom rules you've created.</p>"},{"location":"workflow-rules/#core-features","title":"Core Features","text":"<ul> <li>Automated rule generation</li> <li>Standardized documentation formats</li> <li>AI behavior control and optimization</li> <li>Flexible workflow integration options</li> </ul>"},{"location":"workflow-rules/#workflow-integration-options","title":"Workflow Integration Options","text":""},{"location":"workflow-rules/#1-automatic-rule-application-recommended","title":"1. Automatic Rule Application (Recommended)","text":"<p>The core workflow rules are automatically installed in <code>.cursor/rules/</code>: - <code>901-prd.mdc</code> - Product Requirements Document standards - <code>902-arch.mdc</code> - Architecture documentation standards - <code>903-story.mdc</code> - User story standards - <code>801-workflow-agile.mdc</code> - Complete Agile workflow (optional)</p> <p>These rules are automatically applied when working with corresponding file types.</p>"},{"location":"workflow-rules/#2-notepad-based-workflow","title":"2. Notepad-Based Workflow","text":"<p>For a more flexible approach, use the templates in <code>xnotes/</code>: 1. Enable Notepads in Cursor options 2. Create a new notepad (e.g., \"agile\") 3. Copy contents from <code>xnotes/workflow-agile.md</code> 4. Use `@notepad-name` in conversations</p> <p>\ud83d\udca1 Tip: The Notepad approach is ideal for: - Initial project setup - Story implementation - Focused development sessions - Reducing context overhead</p>"},{"location":"workflow-rules/#getting-started","title":"Getting Started","text":"<ol> <li>Review the templates in `xnotes/`</li> <li>Choose your preferred workflow approach</li> <li>Start using the AI with confidence!</li> </ol> <p>For demos and tutorials, visit: BMad Code Videos</p>"},{"location":"api/","title":"API Reference","text":"<p>This section contains the API reference for the Prompt Decorators package.</p>"},{"location":"api/#modules","title":"Modules","text":"<ul> <li>config</li> <li>core</li> <li>dynamic_decorators_module</li> <li>integrations</li> <li>schemas</li> <li>utils</li> </ul>"},{"location":"api/decorators/","title":"Decorator API Reference","text":"<p>This section provides API reference for all available decorators in the Prompt Decorators package.</p>"},{"location":"api/decorators/#decorators","title":"Decorators","text":""},{"location":"api/decorators/APIDesign/","title":"APIDesign Decorator","text":"<p>Documentation for the APIDesign decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Abductive/","title":"Abductive Decorator","text":"<p>Documentation for the Abductive decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Academic/","title":"Academic Decorator","text":"<p>Documentation for the Academic decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Algorithm/","title":"Algorithm Decorator","text":"<p>Documentation for the Algorithm decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Alternatives/","title":"Alternatives Decorator","text":"<p>Documentation for the Alternatives decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Analogical/","title":"Analogical Decorator","text":"<p>Documentation for the Analogical decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Antipatterns/","title":"Antipatterns Decorator","text":"<p>Documentation for the Antipatterns decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Architecture/","title":"Architecture Decorator","text":"<p>Documentation for the Architecture decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/AsExpert/","title":"AsExpert Decorator","text":"<p>Documentation for the AsExpert decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/AsyncPattern/","title":"AsyncPattern Decorator","text":"<p>Documentation for the AsyncPattern decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Audience/","title":"Audience Decorator","text":"<p>Documentation for the Audience decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Backup/","title":"Backup Decorator","text":"<p>Documentation for the Backup decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Balanced/","title":"Balanced Decorator","text":"<p>Documentation for the Balanced decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/BestPractices/","title":"BestPractices Decorator","text":"<p>Documentation for the BestPractices decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/BlindSpots/","title":"BlindSpots Decorator","text":"<p>Documentation for the BlindSpots decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/BreakAndBuild/","title":"BreakAndBuild Decorator","text":"<p>Documentation for the BreakAndBuild decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/BugDiagnosis/","title":"BugDiagnosis Decorator","text":"<p>Documentation for the BugDiagnosis decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/BuildOn/","title":"BuildOn Decorator","text":"<p>Documentation for the BuildOn decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Bullet/","title":"Bullet Decorator","text":"<p>Documentation for the Bullet decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/CICD/","title":"CICD Decorator","text":"<p>Documentation for the CICD decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Chain/","title":"Chain Decorator","text":"<p>Documentation for the Chain decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/ChangeVerification/","title":"ChangeVerification Decorator","text":"<p>Documentation for the ChangeVerification decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/CiteSources/","title":"CiteSources Decorator","text":"<p>Documentation for the CiteSources decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/CodeAudit/","title":"CodeAudit Decorator","text":"<p>Documentation for the CodeAudit decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/CodeContext/","title":"CodeContext Decorator","text":"<p>Documentation for the CodeContext decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/CodeGen/","title":"CodeGen Decorator","text":"<p>Documentation for the CodeGen decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/CodeReview/","title":"CodeReview Decorator","text":"<p>Documentation for the CodeReview decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/CodeStandards/","title":"CodeStandards Decorator","text":"<p>Documentation for the CodeStandards decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/CodeWalkthrough/","title":"CodeWalkthrough Decorator","text":"<p>Documentation for the CodeWalkthrough decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/CommitMessage/","title":"CommitMessage Decorator","text":"<p>Documentation for the CommitMessage decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Compare/","title":"Compare Decorator","text":"<p>Documentation for the Compare decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Comparison/","title":"Comparison Decorator","text":"<p>Documentation for the Comparison decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Compatibility/","title":"Compatibility Decorator","text":"<p>Documentation for the Compatibility decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/ComplexityLevel/","title":"ComplexityLevel Decorator","text":"<p>Documentation for the ComplexityLevel decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/ConceptModel/","title":"ConceptModel Decorator","text":"<p>Documentation for the ConceptModel decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Concise/","title":"Concise Decorator","text":"<p>Documentation for the Concise decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Conditional/","title":"Conditional Decorator","text":"<p>Documentation for the Conditional decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Confidence/","title":"Confidence Decorator","text":"<p>Documentation for the Confidence decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Constraints/","title":"Constraints Decorator","text":"<p>Documentation for the Constraints decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Context/","title":"Context Decorator","text":"<p>Documentation for the Context decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Contrarian/","title":"Contrarian Decorator","text":"<p>Documentation for the Contrarian decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Creative/","title":"Creative Decorator","text":"<p>Documentation for the Creative decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Custom/","title":"Custom Decorator","text":"<p>Documentation for the Custom decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/DataModel/","title":"DataModel Decorator","text":"<p>Documentation for the DataModel decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Debate/","title":"Debate Decorator","text":"<p>Documentation for the Debate decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/DebugStrategy/","title":"DebugStrategy Decorator","text":"<p>Documentation for the DebugStrategy decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/DecisionMatrix/","title":"DecisionMatrix Decorator","text":"<p>Documentation for the DecisionMatrix decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Deductive/","title":"Deductive Decorator","text":"<p>Documentation for the Deductive decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/DependencyAnalysis/","title":"DependencyAnalysis Decorator","text":"<p>Documentation for the DependencyAnalysis decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Deployment/","title":"Deployment Decorator","text":"<p>Documentation for the Deployment decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/DesignPattern/","title":"DesignPattern Decorator","text":"<p>Documentation for the DesignPattern decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Detailed/","title":"Detailed Decorator","text":"<p>Documentation for the Detailed decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Documentation/","title":"Documentation Decorator","text":"<p>Documentation for the Documentation decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/ELI5/","title":"ELI5 Decorator","text":"<p>Documentation for the ELI5 decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/EdgeCases/","title":"EdgeCases Decorator","text":"<p>Documentation for the EdgeCases decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/ErrorDiagnosis/","title":"ErrorDiagnosis Decorator","text":"<p>Documentation for the ErrorDiagnosis decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/ErrorStrategy/","title":"ErrorStrategy Decorator","text":"<p>Documentation for the ErrorStrategy decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Estimation/","title":"Estimation Decorator","text":"<p>Documentation for the Estimation decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Explain/","title":"Explain Decorator","text":"<p>Documentation for the Explain decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/ExtendCode/","title":"ExtendCode Decorator","text":"<p>Documentation for the ExtendCode decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Extension/","title":"Extension Decorator","text":"<p>Documentation for the Extension decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Extremes/","title":"Extremes Decorator","text":"<p>Documentation for the Extremes decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/FactCheck/","title":"FactCheck Decorator","text":"<p>Documentation for the FactCheck decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/FindGaps/","title":"FindGaps Decorator","text":"<p>Documentation for the FindGaps decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/FirstPrinciples/","title":"FirstPrinciples Decorator","text":"<p>Documentation for the FirstPrinciples decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/ForcedAnalogy/","title":"ForcedAnalogy Decorator","text":"<p>Documentation for the ForcedAnalogy decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/ImplPhase/","title":"ImplPhase Decorator","text":"<p>Documentation for the ImplPhase decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/ImplementationStrategy/","title":"ImplementationStrategy Decorator","text":"<p>Documentation for the ImplementationStrategy decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/IncrementalBuild/","title":"IncrementalBuild Decorator","text":"<p>Documentation for the IncrementalBuild decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Inductive/","title":"Inductive Decorator","text":"<p>Documentation for the Inductive decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Infrastructure/","title":"Infrastructure Decorator","text":"<p>Documentation for the Infrastructure decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Interface/","title":"Interface Decorator","text":"<p>Documentation for the Interface decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Iterate/","title":"Iterate Decorator","text":"<p>Documentation for the Iterate decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Layered/","title":"Layered Decorator","text":"<p>Documentation for the Layered decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/LearningPath/","title":"LearningPath Decorator","text":"<p>Documentation for the LearningPath decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Limitations/","title":"Limitations Decorator","text":"<p>Documentation for the Limitations decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/LoggingStrategy/","title":"LoggingStrategy Decorator","text":"<p>Documentation for the LoggingStrategy decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/MECE/","title":"MECE Decorator","text":"<p>Documentation for the MECE decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/MemoryConstraint/","title":"MemoryConstraint Decorator","text":"<p>Documentation for the MemoryConstraint decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Migration/","title":"Migration Decorator","text":"<p>Documentation for the Migration decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/MockData/","title":"MockData Decorator","text":"<p>Documentation for the MockData decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Monitoring/","title":"Monitoring Decorator","text":"<p>Documentation for the Monitoring decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Motivational/","title":"Motivational Decorator","text":"<p>Documentation for the Motivational decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Narrative/","title":"Narrative Decorator","text":"<p>Documentation for the Narrative decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/NegativeSpace/","title":"NegativeSpace Decorator","text":"<p>Documentation for the NegativeSpace decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Nested/","title":"Nested Decorator","text":"<p>Documentation for the Nested decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/OptimizationFocus/","title":"OptimizationFocus Decorator","text":"<p>Documentation for the OptimizationFocus decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Optimize/","title":"Optimize Decorator","text":"<p>Documentation for the Optimize decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Outline/","title":"Outline Decorator","text":"<p>Documentation for the Outline decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/OutputFormat/","title":"OutputFormat Decorator","text":"<p>Documentation for the OutputFormat decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Override/","title":"Override Decorator","text":"<p>Documentation for the Override decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/PeerReview/","title":"PeerReview Decorator","text":"<p>Documentation for the PeerReview decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Performance/","title":"Performance Decorator","text":"<p>Documentation for the Performance decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Persona/","title":"Persona Decorator","text":"<p>Documentation for the Persona decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/PostMortem/","title":"PostMortem Decorator","text":"<p>Documentation for the PostMortem decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/PreciseModification/","title":"PreciseModification Decorator","text":"<p>Documentation for the PreciseModification decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Precision/","title":"Precision Decorator","text":"<p>Documentation for the Precision decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Prioritize/","title":"Prioritize Decorator","text":"<p>Documentation for the Prioritize decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Priority/","title":"Priority Decorator","text":"<p>Documentation for the Priority decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Professional/","title":"Professional Decorator","text":"<p>Documentation for the Professional decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/PullRequest/","title":"PullRequest Decorator","text":"<p>Documentation for the PullRequest decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/QualityMetrics/","title":"QualityMetrics Decorator","text":"<p>Documentation for the QualityMetrics decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Reasoning/","title":"Reasoning Decorator","text":"<p>Documentation for the Reasoning decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/RedTeam/","title":"RedTeam Decorator","text":"<p>Documentation for the RedTeam decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Refactor/","title":"Refactor Decorator","text":"<p>Documentation for the Refactor decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Refine/","title":"Refine Decorator","text":"<p>Documentation for the Refine decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/ReleaseNotes/","title":"ReleaseNotes Decorator","text":"<p>Documentation for the ReleaseNotes decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Remix/","title":"Remix Decorator","text":"<p>Documentation for the Remix decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Reproduce/","title":"Reproduce Decorator","text":"<p>Documentation for the Reproduce decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Roadmap/","title":"Roadmap Decorator","text":"<p>Documentation for the Roadmap decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/RootCause/","title":"RootCause Decorator","text":"<p>Documentation for the RootCause decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/RootCauseAnalysis/","title":"RootCauseAnalysis Decorator","text":"<p>Documentation for the RootCauseAnalysis decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/SRE/","title":"SRE Decorator","text":"<p>Documentation for the SRE decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Scalability/","title":"Scalability Decorator","text":"<p>Documentation for the Scalability decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Schema/","title":"Schema Decorator","text":"<p>Documentation for the Schema decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/SecurityAudit/","title":"SecurityAudit Decorator","text":"<p>Documentation for the SecurityAudit decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Socratic/","title":"Socratic Decorator","text":"<p>Documentation for the Socratic decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Steelman/","title":"Steelman Decorator","text":"<p>Documentation for the Steelman decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/StepByStep/","title":"StepByStep Decorator","text":"<p>Documentation for the StepByStep decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/StepByStepImpl/","title":"StepByStepImpl Decorator","text":"<p>Documentation for the StepByStepImpl decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/StressTest/","title":"StressTest Decorator","text":"<p>Documentation for the StressTest decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/StyleShift/","title":"StyleShift Decorator","text":"<p>Documentation for the StyleShift decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Summary/","title":"Summary Decorator","text":"<p>Documentation for the Summary decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/SystemDiagram/","title":"SystemDiagram Decorator","text":"<p>Documentation for the SystemDiagram decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/SystemIntegration/","title":"SystemIntegration Decorator","text":"<p>Documentation for the SystemIntegration decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/TableFormat/","title":"TableFormat Decorator","text":"<p>Documentation for the TableFormat decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/TaskBreakdown/","title":"TaskBreakdown Decorator","text":"<p>Documentation for the TaskBreakdown decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/TechDebt/","title":"TechDebt Decorator","text":"<p>Documentation for the TechDebt decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/TechDebtControl/","title":"TechDebtControl Decorator","text":"<p>Documentation for the TechDebtControl decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/TechStack/","title":"TechStack Decorator","text":"<p>Documentation for the TechStack decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/TestCases/","title":"TestCases Decorator","text":"<p>Documentation for the TestCases decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/TestStrategy/","title":"TestStrategy Decorator","text":"<p>Documentation for the TestStrategy decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Timeline/","title":"Timeline Decorator","text":"<p>Documentation for the Timeline decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Tone/","title":"Tone Decorator","text":"<p>Documentation for the Tone decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Tradeoffs/","title":"Tradeoffs Decorator","text":"<p>Documentation for the Tradeoffs decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/TreeOfThought/","title":"TreeOfThought Decorator","text":"<p>Documentation for the TreeOfThought decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Troubleshoot/","title":"Troubleshoot Decorator","text":"<p>Documentation for the Troubleshoot decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/TypeDefinition/","title":"TypeDefinition Decorator","text":"<p>Documentation for the TypeDefinition decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Uncertainty/","title":"Uncertainty Decorator","text":"<p>Documentation for the Uncertainty decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/decorators/Version/","title":"Version Decorator","text":"<p>Documentation for the Version decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/modules/","title":"API Modules Reference","text":"<p>This section provides API reference documentation for all modules in the Prompt Decorators package.</p>"},{"location":"api/modules/#core-modules","title":"Core Modules","text":"<ul> <li>prompt_decorators: The main package for the Prompt Decorators framework.</li> <li>prompt_decorators.config: Configuration management for the Prompt Decorators framework.</li> <li>prompt_decorators.core: Core functionality for the Prompt Decorators framework.</li> <li>prompt_decorators.dynamic_decorators_module: Dynamic decorator loading and registration.</li> </ul>"},{"location":"api/modules/#core-submodules","title":"Core Submodules","text":"<ul> <li>prompt_decorators.core.base: Base classes for decorators.</li> <li>prompt_decorators.core.dynamic_decorator: Dynamic decorator implementation.</li> <li>prompt_decorators.core.exceptions: Exception classes for the framework.</li> <li>prompt_decorators.core.model_specific: Model-specific decorator handling.</li> <li>prompt_decorators.core.parser: Parsing utilities for decorators.</li> <li>prompt_decorators.core.registry: Decorator registry management.</li> <li>prompt_decorators.core.request: Request handling for decorators.</li> <li>prompt_decorators.core.validation: Validation utilities for decorators.</li> </ul>"},{"location":"api/modules/#schema-modules","title":"Schema Modules","text":"<ul> <li>prompt_decorators.schemas: Schema definitions for the framework.</li> <li>prompt_decorators.schemas.decorator_schema: Schema definitions for decorators.</li> </ul>"},{"location":"api/modules/#utility-modules","title":"Utility Modules","text":"<ul> <li>prompt_decorators.utils: Utility functions for the framework.</li> <li>prompt_decorators.utils.cache: Caching utilities.</li> <li>prompt_decorators.utils.compatibility: Compatibility utilities.</li> <li>prompt_decorators.utils.discovery: Discovery utilities for finding decorators.</li> <li>prompt_decorators.utils.doc_gen: Documentation generation utilities.</li> <li>prompt_decorators.utils.factory: Factory utilities for creating decorators.</li> <li>prompt_decorators.utils.json_loader: JSON loading utilities.</li> <li>prompt_decorators.utils.model_detection: Model detection utilities.</li> <li>prompt_decorators.utils.plugins: Plugin utilities.</li> <li>prompt_decorators.utils.string_utils: String manipulation utilities.</li> <li>prompt_decorators.utils.telemetry: Telemetry utilities.</li> </ul>"},{"location":"api/modules/#integration-modules","title":"Integration Modules","text":"<ul> <li>prompt_decorators.integrations: Integration utilities for external systems.</li> <li>prompt_decorators.integrations.mcp: Model Context Protocol integration.</li> <li>prompt_decorators.integrations.mcp.claude_desktop: Claude Desktop integration.</li> <li>prompt_decorators.integrations.mcp.install_claude_desktop: Claude Desktop installation utilities.</li> <li>prompt_decorators.integrations.mcp.server: MCP server implementation</li> </ul>"},{"location":"api/modules/prompt_decorators.config/","title":"prompt_decorators.config","text":"<p>Configuration settings for prompt decorators package.</p>"},{"location":"api/modules/prompt_decorators.config/#functions","title":"Functions","text":""},{"location":"api/modules/prompt_decorators.config/#ensure_paths_exist","title":"ensure_paths_exist","text":"<p>Ensure all required paths exist.</p>"},{"location":"api/modules/prompt_decorators.core.base/","title":"base","text":"<p>Module documentation for prompt_decorators.core.base.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/modules/prompt_decorators.core.dynamic_decorator/","title":"dynamic_decorator","text":"<p>Module documentation for prompt_decorators.core.dynamic_decorator.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/modules/prompt_decorators.core.exceptions/","title":"exceptions","text":"<p>Module documentation for prompt_decorators.core.exceptions.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/modules/prompt_decorators.core/","title":"prompt_decorators.core","text":"<p>Core components of the prompt decorators system.</p> <p>This package contains the core components and functionality that power the prompt decorators system, including the base decorator classes, validation logic, request handling, and model-specific adaptations.</p>"},{"location":"api/modules/prompt_decorators.core.model_specific/","title":"model_specific","text":"<p>Module documentation for prompt_decorators.core.model_specific.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/modules/prompt_decorators.core.parser/","title":"parser","text":"<p>Module documentation for prompt_decorators.core.parser.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/modules/prompt_decorators.core.registry/","title":"registry","text":"<p>Module documentation for prompt_decorators.core.registry.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/modules/prompt_decorators.core.request/","title":"request","text":"<p>Module documentation for prompt_decorators.core.request.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/modules/prompt_decorators.core.validation/","title":"validation","text":"<p>Module documentation for prompt_decorators.core.validation.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/","title":"prompt_decorators.dynamic_decorators_module","text":"<p>Dynamic Prompt Decorators Module.</p> <p>This module provides a unified interface for working with prompt decorators without the need for code generation. It dynamically loads decorator definitions from the registry at runtime, removing the need to generate Python classes for each decorator.</p> <p>Features: - Dynamic loading of decorators from registry - Prompt transformation with any decorator - Parameter validation against schema - Support for decorator composition</p> <p>Example usage:     &gt;&gt;&gt; from prompt_decorators.dynamic_decorators_module import apply_dynamic_decorators, create_decorator_instance     &gt;&gt;&gt; # Using apply_dynamic_decorators for string-based decorators     &gt;&gt;&gt; transformed = apply_dynamic_decorators(     ...     \"+++StepByStep(numbered=true) +++Tone(style=technical) What is quantum computing?\"     ... )     &gt;&gt;&gt;     &gt;&gt;&gt; # Using decorator objects     &gt;&gt;&gt; step_by_step = create_decorator_instance(\"StepByStep\", numbered=True)     &gt;&gt;&gt; technical_tone = create_decorator_instance(\"Tone\", style=\"technical\")     &gt;&gt;&gt; prompt = \"What is quantum computing?\"     &gt;&gt;&gt; prompt = step_by_step(prompt)     &gt;&gt;&gt; prompt = technical_tone(prompt)</p>"},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#classes","title":"Classes","text":""},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#decoratordefinition","title":"DecoratorDefinition","text":"<p>Class representing a decorator definition.</p>"},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#methods","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#__init__","title":"<code>__init__</code>","text":"<p>Initialize a decorator definition.</p> <pre><code>    Args:\n        name: Name of the decorator\n        description: Description of the decorator\n        category: Category of the decorator\n        parameters: List of parameter definitions\n        transform_function: JavaScript function for transforming prompts\n        version: Version of the decorator\n</code></pre>"},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#to_dict","title":"<code>to_dict</code>","text":"<p>Convert the definition to a dictionary.</p>"},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#functions","title":"Functions","text":""},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#apply_decorator","title":"apply_decorator","text":"<p>Apply a decorator to a prompt.</p> <pre><code>Args:\n    decorator_name: Name of the decorator\n    prompt: The prompt text\n    **kwargs: Parameters for the decorator\n\nReturns:\n    The transformed prompt\n</code></pre>"},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#parameters","title":"Parameters","text":"<ul> <li><code>decorator_name</code>: str</li> <li><code>prompt</code>: str</li> <li><code>kwargs</code>: Any</li> </ul>"},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#apply_dynamic_decorators","title":"apply_dynamic_decorators","text":"<p>Apply decorators to a prompt using the +++ syntax.</p> <pre><code>Args:\n    prompt: The prompt text with decorator syntax\n\nReturns:\n    The transformed prompt\n</code></pre>"},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#parameters_1","title":"Parameters","text":"<ul> <li><code>prompt</code>: str</li> </ul>"},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#create_decorator_class","title":"create_decorator_class","text":"<p>Create a decorator class from a definition.</p> <pre><code>Args:\n    definition: Decorator definition\n\nReturns:\n    A decorator class\n</code></pre>"},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#parameters_2","title":"Parameters","text":"<ul> <li><code>definition</code>: DecoratorDefinition</li> </ul>"},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#create_decorator_instance","title":"create_decorator_instance","text":"<p>Create a decorator instance by name.</p> <pre><code>Args:\n    name: Name of the decorator\n    **kwargs: Parameters for the decorator\n\nReturns:\n    A decorator instance\n\nRaises:\n    ValueError: If the decorator is not found\n</code></pre>"},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#parameters_3","title":"Parameters","text":"<ul> <li><code>name</code>: str</li> <li><code>kwargs</code>: Any</li> </ul>"},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#extract_decorator_name","title":"extract_decorator_name","text":"<p>Extract the decorator name from decorator text.</p> <pre><code>Args:\n    decorator_text: Text containing a decorator definition\n\nReturns:\n    The decorator name\n</code></pre>"},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#parameters_4","title":"Parameters","text":"<ul> <li><code>decorator_text</code>: str</li> </ul>"},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#get_available_decorators","title":"get_available_decorators","text":"<p>Get a list of all available decorators.</p> <pre><code>Returns:\n    List of decorator definitions\n</code></pre>"},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#load_decorator_definitions","title":"load_decorator_definitions","text":"<p>Load decorator definitions from the registry.</p>"},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#parse_decorator_text","title":"parse_decorator_text","text":"<p>Parse decorator text into name and parameters.</p> <pre><code>Args:\n    decorator_text: Text containing a decorator definition\n\nReturns:\n    Tuple of (name, parameters)\n</code></pre>"},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#parameters_5","title":"Parameters","text":"<ul> <li><code>decorator_text</code>: str</li> </ul>"},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#register_decorator","title":"register_decorator","text":"<p>Register a decorator definition.</p> <pre><code>Args:\n    definition: Decorator definition\n\nReturns:\n    None\n</code></pre>"},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#parameters_6","title":"Parameters","text":"<ul> <li><code>definition</code>: DecoratorDefinition</li> </ul>"},{"location":"api/modules/prompt_decorators.integrations.mcp.claude_desktop/","title":"claude_desktop","text":"<p>Module documentation for prompt_decorators.integrations.mcp.claude_desktop.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/modules/prompt_decorators.integrations.mcp.install_claude_desktop/","title":"install_claude_desktop","text":"<p>Module documentation for prompt_decorators.integrations.mcp.install_claude_desktop.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/modules/prompt_decorators.integrations.mcp/","title":"prompt_decorators.integrations.mcp","text":"<p>The <code>prompt_decorators.integrations.mcp</code> module provides integration with the Model Context Protocol (MCP).</p>"},{"location":"api/modules/prompt_decorators.integrations.mcp/#overview","title":"Overview","text":"<p>The Model Context Protocol (MCP) is a standardized way to interact with Large Language Models (LLMs). This module provides tools and utilities to integrate the Prompt Decorators framework with MCP-compatible systems.</p>"},{"location":"api/modules/prompt_decorators.integrations.mcp/#components","title":"Components","text":"<p>The module includes the following components:</p> <ul> <li>Claude Desktop Integration: Tools for integrating with Claude Desktop.</li> <li>MCP Server: A server implementation that provides MCP-compatible endpoints for applying decorators to prompts.</li> <li>Installation Utilities: Utilities for installing and configuring the MCP integration.</li> </ul>"},{"location":"api/modules/prompt_decorators.integrations.mcp/#usage","title":"Usage","text":"<p>For information on how to use the MCP Integration, see the MCP Integration Guide in the integrations section of the documentation.</p> <p>For more detailed information about specific components, see the corresponding component documentation.</p>"},{"location":"api/modules/prompt_decorators.integrations.mcp.server/","title":"server","text":"<p>Module documentation for prompt_decorators.integrations.mcp.server.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/modules/prompt_decorators.integrations/","title":"prompt_decorators.integrations","text":"<p>Integration modules for Prompt Decorators.</p> <p>This package contains modules for integrating Prompt Decorators with various frameworks, protocols, and platforms.</p>"},{"location":"api/modules/prompt_decorators/","title":"prompt_decorators","text":"<p>The <code>prompt_decorators</code> package is the core package for the Prompt Decorators framework.</p>"},{"location":"api/modules/prompt_decorators/#overview","title":"Overview","text":"<p>The Prompt Decorators framework provides a way to enhance prompts sent to Large Language Models (LLMs) with specific instructions or context. This is done through the use of decorators, which are special markers that can be added to a prompt to transform it in various ways.</p>"},{"location":"api/modules/prompt_decorators/#modules","title":"Modules","text":"<p>The package is organized into several modules:</p> <ul> <li>Core Modules: Provide the fundamental functionality for defining, registering, and applying decorators.</li> <li>Schema Modules: Define the data structures and validation rules for decorators.</li> <li>Utility Modules: Provide helper functions and tools for working with decorators.</li> <li>Integration Modules: Provide integrations with various LLM platforms and tools.</li> </ul>"},{"location":"api/modules/prompt_decorators/#usage","title":"Usage","text":"<p>For basic usage of the package, see the Quick Start guide.</p> <p>For more detailed information about specific modules, see the corresponding module documentation.</p>"},{"location":"api/modules/prompt_decorators.schemas.decorator_schema/","title":"decorator_schema","text":"<p>Module documentation for prompt_decorators.schemas.decorator_schema.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/modules/prompt_decorators.schemas/","title":"prompt_decorators.schemas","text":"<p>Schema definitions for prompt decorators.</p> <p>This package contains schema definitions for validating decorator definitions and parameters.</p>"},{"location":"api/modules/prompt_decorators.utils.cache/","title":"cache","text":"<p>Module documentation for prompt_decorators.utils.cache.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/modules/prompt_decorators.utils.compatibility/","title":"compatibility","text":"<p>Module documentation for prompt_decorators.utils.compatibility.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/modules/prompt_decorators.utils.discovery/","title":"discovery","text":"<p>Module documentation for prompt_decorators.utils.discovery.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/modules/prompt_decorators.utils.doc_gen/","title":"doc_gen","text":"<p>Module documentation for prompt_decorators.utils.doc_gen.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/modules/prompt_decorators.utils.factory/","title":"factory","text":"<p>Module documentation for prompt_decorators.utils.factory.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/modules/prompt_decorators.utils.json_loader/","title":"json_loader","text":"<p>Module documentation for prompt_decorators.utils.json_loader.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/modules/prompt_decorators.utils/","title":"prompt_decorators.utils","text":"<p>Utility functions for prompt decorators.</p> <p>This package provides utility functions for working with prompt decorators.</p>"},{"location":"api/modules/prompt_decorators.utils.model_detection/","title":"model_detection","text":"<p>Module documentation for prompt_decorators.utils.model_detection.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/modules/prompt_decorators.utils.plugins/","title":"plugins","text":"<p>Module documentation for prompt_decorators.utils.plugins.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/modules/prompt_decorators.utils.string_utils/","title":"string_utils","text":"<p>Module documentation for prompt_decorators.utils.string_utils.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"api/modules/prompt_decorators.utils.telemetry/","title":"telemetry","text":"<p>Module documentation for prompt_decorators.utils.telemetry.</p> <p>This documentation is a placeholder and will be updated in the future.</p>"},{"location":"decorators/","title":"Decorator Reference","text":"<p>This section provides a reference for all available decorators in the Prompt Decorators package.</p>"},{"location":"decorators/#categories","title":"Categories","text":""},{"location":"decorators/format/","title":"Output Format Decorators","text":"<p>This section documents decorators that control the structure and formatting of responses in the Prompt Decorators framework.</p>"},{"location":"decorators/format/#outputformat","title":"OutputFormat","text":"<p>The <code>OutputFormat</code> decorator specifies the overall format for the output.</p> <p>Category: Format</p> <p>Parameters:</p> Parameter Type Description Default <code>format</code> enum The output format (e.g., \"text\", \"markdown\", \"json\", \"yaml\", \"html\", \"csv\") \"markdown\" <code>schema</code> string Optional schema for structured formats like JSON \"\" <code>pretty</code> boolean Whether to format the output with proper indentation and spacing true <p>Example:</p> <pre><code>+++OutputFormat(format=\"json\", pretty=true)\nList the top 5 programming languages and their key features.\n</code></pre> <p>Compatible with: Most other decorators</p>"},{"location":"decorators/format/#bullet","title":"Bullet","text":"<p>The <code>Bullet</code> decorator formats output as a bulleted list.</p> <p>Category: Format</p> <p>Parameters:</p> Parameter Type Description Default <code>style</code> enum The bullet style to use (e.g., \"dash\", \"asterisk\", \"dot\", \"number\", \"letter\") \"dash\" <code>max_items</code> integer Maximum number of bullet points 10 <code>hierarchical</code> boolean Whether to allow nested bullet points true <code>intro</code> boolean Whether to include an introductory sentence before the list true <p>Example:</p> <pre><code>+++Bullet(style=\"asterisk\", max_items=7)\nWhat are the main benefits of exercise?\n</code></pre> <p>Compatible with: Most other decorators, may conflict with <code>OutputFormat(format=\"json\")</code></p>"},{"location":"decorators/format/#tableformat","title":"TableFormat","text":"<p>The <code>TableFormat</code> decorator formats output as a table.</p> <p>Category: Format</p> <p>Parameters:</p> Parameter Type Description Default <code>columns</code> string Comma-separated list of column names \"\" <code>alignment</code> string Alignment for columns (e.g., \"left\", \"center\", \"right\") \"left\" <code>max_rows</code> integer Maximum number of rows 10 <code>include_header</code> boolean Whether to include a header row true <code>format</code> enum Table format style (e.g., \"markdown\", \"ascii\", \"html\") \"markdown\" <p>Example:</p> <pre><code>+++TableFormat(columns=\"Country,Capital,Population\", max_rows=5)\nList the largest countries by population.\n</code></pre> <p>Compatible with: Most other decorators, may conflict with other format decorators</p>"},{"location":"decorators/format/#outline","title":"Outline","text":"<p>The <code>Outline</code> decorator structures output as a hierarchical outline.</p> <p>Category: Format</p> <p>Parameters:</p> Parameter Type Description Default <code>depth</code> integer Maximum depth of the outline 3 <code>numbering</code> boolean Whether to use numbering (true) or bullets (false) true <code>expand_level</code> integer Default level to expand with details 2 <code>intro</code> boolean Whether to include an introduction before the outline true <p>Example:</p> <pre><code>+++Outline(depth=3, numbering=true)\nExplain the structure of a typical novel.\n</code></pre> <p>Compatible with: Most reasoning decorators, may conflict with other format decorators</p>"},{"location":"decorators/format/#summary","title":"Summary","text":"<p>The <code>Summary</code> decorator provides a concise summary of a longer response.</p> <p>Category: Format</p> <p>Parameters:</p> Parameter Type Description Default <code>length</code> enum The length of the summary (e.g., \"brief\", \"moderate\", \"comprehensive\") \"moderate\" <code>position</code> enum Where to place the summary (e.g., \"start\", \"end\", \"both\") \"start\" <code>bullet_points</code> boolean Whether to format the summary as bullet points false <code>include_details</code> boolean Whether to include the detailed response after the summary true <p>Example:</p> <pre><code>+++Summary(length=\"brief\", position=\"start\", bullet_points=true)\nExplain quantum computing.\n</code></pre> <p>Compatible with: Most other decorators</p>"},{"location":"decorators/format/#schema","title":"Schema","text":"<p>The <code>Schema</code> decorator formats output according to a specific schema or data structure.</p> <p>Category: Format</p> <p>Parameters:</p> Parameter Type Description Default <code>format</code> enum The schema format (e.g., \"json\", \"yaml\", \"xml\") \"json\" <code>schema</code> string The schema definition as a string \"\" <code>example</code> string Optional example of the expected output format \"\" <code>strict</code> boolean Whether to enforce strict schema compliance true <p>Example:</p> <pre><code>+++Schema(format=\"json\", schema='{\"name\": \"string\", \"age\": \"number\", \"skills\": \"string[]\"}')\nDescribe a fictional programmer named Alice.\n</code></pre> <p>Compatible with: May conflict with other format decorators</p>"},{"location":"decorators/format/#nested","title":"Nested","text":"<p>The <code>Nested</code> decorator allows for hierarchical structuring of content.</p> <p>Category: Format</p> <p>Parameters:</p> Parameter Type Description Default <code>levels</code> integer Number of hierarchical levels 3 <code>format</code> enum Format for each level (e.g., \"headings\", \"bullets\", \"numbers\") \"headings\" <code>collapse</code> boolean Whether to suggest collapsible sections in supported formats false <code>details_depth</code> integer Maximum depth for detailed content 2 <p>Example:</p> <pre><code>+++Nested(levels=3, format=\"headings\")\nExplain the organization of a modern operating system.\n</code></pre> <p>Compatible with: Many reasoning decorators, may conflict with other format decorators</p>"},{"location":"decorators/format/#priority","title":"Priority","text":"<p>The <code>Priority</code> decorator organizes information by priority or importance.</p> <p>Category: Format</p> <p>Parameters:</p> Parameter Type Description Default <code>levels</code> integer Number of priority levels 3 <code>display</code> enum How to display priorities (e.g., \"numbers\", \"labels\", \"symbols\") \"labels\" <code>descending</code> boolean Whether to list in descending priority (highest first) true <code>criteria</code> string Criteria for determining priority \"importance\" <p>Example:</p> <pre><code>+++Priority(levels=3, display=\"labels\")\nWhat should I consider when buying a laptop?\n</code></pre> <p>Compatible with: Most other decorators</p>"},{"location":"decorators/format/#mece","title":"MECE","text":"<p>The <code>MECE</code> (Mutually Exclusive, Collectively Exhaustive) decorator organizes information into comprehensive, non-overlapping categories.</p> <p>Category: Format</p> <p>Parameters:</p> Parameter Type Description Default <code>categories</code> integer Target number of categories 5 <code>format</code> enum Format for categories (e.g., \"headings\", \"sections\", \"cards\") \"headings\" <code>justify</code> boolean Whether to justify the MECE classification true <code>hierarchical</code> boolean Whether to allow hierarchical categorization false <p>Example:</p> <pre><code>+++MECE(categories=4, justify=true)\nWhat are the different approaches to artificial intelligence?\n</code></pre> <p>Compatible with: Most reasoning decorators</p>"},{"location":"decorators/format/#using-format-decorators","title":"Using Format Decorators","text":"<p>Format decorators can be combined with other types of decorators to control both content and presentation:</p> <pre><code>+++Reasoning(approach=\"comprehensive\")\n+++OutputFormat(format=\"markdown\")\n+++Bullet(style=\"number\")\nExplain the advantages and disadvantages of microservices architecture.\n</code></pre> <p>This combines comprehensive reasoning with markdown formatting and numbered bullets.</p>"},{"location":"decorators/format/#choosing-the-right-format","title":"Choosing the Right Format","text":"<p>When selecting a format decorator, consider:</p> <ol> <li>Audience needs: What format will be most useful to your audience?</li> <li>Content type: What format best suits the type of information you're presenting?</li> <li>Compatibility: Which format works best with your other decorators?</li> <li>Technical requirements: Do you need machine-readable output (like JSON) or human-readable presentation?</li> </ol>"},{"location":"decorators/format/#see-also","title":"See Also","text":"<ul> <li>Reasoning Decorators</li> <li>Style Decorators</li> <li>Creating Custom Format Decorators</li> </ul>"},{"location":"decorators/reasoning/","title":"Reasoning Decorators","text":"<p>This section documents decorators that enhance reasoning capabilities in the Prompt Decorators framework.</p>"},{"location":"decorators/reasoning/#reasoning","title":"Reasoning","text":"<p>The <code>Reasoning</code> decorator specifies a particular reasoning approach to be used in the response.</p> <p>Category: Reasoning</p> <p>Parameters:</p> Parameter Type Description Default <code>approach</code> string The reasoning approach to use (e.g., \"deductive\", \"inductive\") \"general\" <code>depth</code> string The depth of reasoning to apply (e.g., \"basic\", \"detailed\", \"comprehensive\") \"detailed\" <code>steps</code> integer Number of reasoning steps to include 3 <p>Example:</p> <pre><code>+++Reasoning(approach=\"deductive\", depth=\"comprehensive\")\nExplain the relationship between exercise and mental health.\n</code></pre> <p>Compatible with: <code>StepByStep</code>, <code>OutputFormat</code>, <code>Tone</code></p>"},{"location":"decorators/reasoning/#stepbystep","title":"StepByStep","text":"<p>The <code>StepByStep</code> decorator encourages step-by-step problem solving, breaking down complex problems into manageable steps.</p> <p>Category: Reasoning</p> <p>Parameters:</p> Parameter Type Description Default <code>numbered</code> boolean Whether to number the steps true <code>detailed</code> boolean Whether to include detailed explanations for each step true <code>min_steps</code> integer Minimum number of steps to include 3 <code>max_steps</code> integer Maximum number of steps to include 10 <p>Example:</p> <pre><code>+++StepByStep(numbered=true, detailed=true)\nHow to solve a quadratic equation?\n</code></pre> <p>Compatible with: <code>Reasoning</code>, <code>OutputFormat</code>, <code>Tone</code></p>"},{"location":"decorators/reasoning/#treeofthought","title":"TreeOfThought","text":"<p>The <code>TreeOfThought</code> decorator implements the Tree of Thought reasoning approach, exploring multiple reasoning paths.</p> <p>Category: Reasoning</p> <p>Parameters:</p> Parameter Type Description Default <code>branches</code> integer Number of reasoning branches to explore 3 <code>depth</code> integer Depth of reasoning in each branch 2 <code>show_pruning</code> boolean Whether to show pruned reasoning paths false <code>evaluation_criteria</code> string Criteria for evaluating branches \"logical_consistency\" <p>Example:</p> <pre><code>+++TreeOfThought(branches=3, depth=3)\nWhat are the possible outcomes of increasing interest rates on the housing market?\n</code></pre> <p>Compatible with: <code>OutputFormat</code>, <code>Tone</code></p>"},{"location":"decorators/reasoning/#firstprinciples","title":"FirstPrinciples","text":"<p>The <code>FirstPrinciples</code> decorator encourages reasoning from first principles, breaking down complex problems to their fundamental truths.</p> <p>Category: Reasoning</p> <p>Parameters:</p> Parameter Type Description Default <code>depth</code> string Depth of first principles analysis \"detailed\" <code>axioms</code> boolean Whether to explicitly state axioms true <code>context</code> string Domain context for principles (e.g., \"physics\", \"economics\") \"general\" <p>Example:</p> <pre><code>+++FirstPrinciples(axioms=true, context=\"economics\")\nWhy do markets tend toward equilibrium?\n</code></pre> <p>Compatible with: <code>StepByStep</code>, <code>OutputFormat</code></p>"},{"location":"decorators/reasoning/#forcedanalogy","title":"ForcedAnalogy","text":"<p>The <code>ForcedAnalogy</code> decorator uses analogical reasoning, comparing the problem to a different domain to gain insights.</p> <p>Category: Reasoning</p> <p>Parameters:</p> Parameter Type Description Default <code>domain</code> string Domain for the analogy (e.g., \"nature\", \"technology\") \"nature\" <code>detail</code> string Level of detail in the analogy \"moderate\" <code>creative</code> boolean Whether to use creative analogies true <p>Example:</p> <pre><code>+++ForcedAnalogy(domain=\"nature\")\nExplain how social networks spread information.\n</code></pre> <p>Compatible with: <code>Reasoning</code>, <code>OutputFormat</code></p>"},{"location":"decorators/reasoning/#inductive","title":"Inductive","text":"<p>The <code>Inductive</code> decorator applies inductive reasoning, drawing general conclusions from specific observations.</p> <p>Category: Reasoning</p> <p>Parameters:</p> Parameter Type Description Default <code>examples</code> integer Number of examples to use in reasoning 3 <code>confidence</code> string Confidence level in inductive conclusions \"moderate\" <code>caveats</code> boolean Whether to include caveats about inductive reasoning true <p>Example:</p> <pre><code>+++Inductive(examples=5, caveats=true)\nBased on current technology trends, how might mobile devices evolve in the next decade?\n</code></pre> <p>Compatible with: <code>StepByStep</code>, <code>OutputFormat</code></p>"},{"location":"decorators/reasoning/#rootcause","title":"RootCause","text":"<p>The <code>RootCause</code> decorator focuses on identifying root causes of problems or phenomena.</p> <p>Category: Reasoning</p> <p>Parameters:</p> Parameter Type Description Default <code>depth</code> integer How many levels deep to analyze causes 3 <code>systemic</code> boolean Whether to focus on systemic causes true <code>diagram</code> boolean Whether to include a cause-effect diagram false <p>Example:</p> <pre><code>+++RootCause(depth=4, systemic=true)\nWhy do software projects often exceed their initial time estimates?\n</code></pre> <p>Compatible with: <code>StepByStep</code>, <code>OutputFormat</code></p>"},{"location":"decorators/reasoning/#analogical","title":"Analogical","text":"<p>The <code>Analogical</code> decorator uses analogical reasoning to compare the current problem with similar ones.</p> <p>Category: Reasoning</p> <p>Parameters:</p> Parameter Type Description Default <code>sources</code> integer Number of analogical sources to draw from 2 <code>detail</code> string Level of detail in mapping analogies \"detailed\" <code>domain</code> string Domain restriction for analogies \"general\" <p>Example:</p> <pre><code>+++Analogical(sources=3, domain=\"biology\")\nHow is a company's organizational structure similar to other systems?\n</code></pre> <p>Compatible with: <code>Reasoning</code>, <code>OutputFormat</code></p>"},{"location":"decorators/reasoning/#abductive","title":"Abductive","text":"<p>The <code>Abductive</code> decorator uses abductive reasoning to form the most likely explanation for observations.</p> <p>Category: Reasoning</p> <p>Parameters:</p> Parameter Type Description Default <code>hypotheses</code> integer Number of hypotheses to consider 3 <code>ranking</code> boolean Whether to rank hypotheses by likelihood true <code>evidence_focus</code> string Focus on evidence (e.g., \"contradictory\", \"supporting\") \"balanced\" <p>Example:</p> <pre><code>+++Abductive(hypotheses=4, ranking=true)\nWhat might explain the sudden decline in bee populations?\n</code></pre> <p>Compatible with: <code>OutputFormat</code>, <code>Limitations</code></p>"},{"location":"decorators/reasoning/#deductive","title":"Deductive","text":"<p>The <code>Deductive</code> decorator applies deductive reasoning, drawing specific conclusions from general premises.</p> <p>Category: Reasoning</p> <p>Parameters:</p> Parameter Type Description Default <code>premises</code> integer Number of premises to state 3 <code>formal</code> boolean Whether to use formal logic notation false <code>validity_check</code> boolean Whether to check argument validity true <p>Example:</p> <pre><code>+++Deductive(premises=2, validity_check=true)\nIs artificial intelligence conscious?\n</code></pre> <p>Compatible with: <code>StepByStep</code>, <code>OutputFormat</code></p>"},{"location":"decorators/reasoning/#using-reasoning-decorators-together","title":"Using Reasoning Decorators Together","text":"<p>Reasoning decorators can often be combined with each other or with decorators from other categories to create more powerful transformations. For example:</p> <pre><code>+++Reasoning(approach=\"deductive\")\n+++StepByStep(numbered=true)\n+++OutputFormat(format=\"markdown\")\nAnalyze the impact of remote work on urban development.\n</code></pre> <p>This combines a deductive reasoning approach with step-by-step problem solving and markdown formatting.</p>"},{"location":"decorators/reasoning/#see-also","title":"See Also","text":"<ul> <li>Format Decorators (coming soon)</li> <li>Style Decorators (coming soon)</li> <li>Creating Custom Reasoning Decorators</li> </ul>"},{"location":"decorators/style/","title":"Style Decorators","text":"<p>This section documents decorators that modify the style, tone, and presentation of responses in the Prompt Decorators framework.</p>"},{"location":"decorators/style/#tone","title":"Tone","text":"<p>The <code>Tone</code> decorator adjusts the tone of the response to match a specified style.</p> <p>Category: Style</p> <p>Parameters:</p> Parameter Type Description Default <code>style</code> enum The tone style to use (e.g., \"formal\", \"casual\", \"technical\", \"friendly\", \"enthusiastic\", \"professional\") \"professional\" <code>intensity</code> string The intensity of the tone adjustment (e.g., \"mild\", \"moderate\", \"strong\") \"moderate\" <p>Example:</p> <pre><code>+++Tone(style=\"friendly\", intensity=\"strong\")\nExplain the concept of object-oriented programming.\n</code></pre> <p>Compatible with: Most other decorators, particularly well with <code>Audience</code> and <code>Persona</code></p>"},{"location":"decorators/style/#persona","title":"Persona","text":"<p>The <code>Persona</code> decorator instructs the model to adopt a specific persona or role when generating a response.</p> <p>Category: Style</p> <p>Parameters:</p> Parameter Type Description Default <code>role</code> string The role or persona to adopt (e.g., \"teacher\", \"scientist\", \"coach\") \"expert\" <code>style</code> string Additional styling for the persona (e.g., \"enthusiastic\", \"dry\", \"methodical\") \"neutral\" <code>background</code> string Optional background context for the persona \"\" <p>Example:</p> <pre><code>+++Persona(role=\"experienced software engineer\", style=\"pragmatic\")\nWhat are the most important principles of good software design?\n</code></pre> <p>Compatible with: <code>Tone</code>, <code>OutputFormat</code>, most reasoning decorators</p>"},{"location":"decorators/style/#audience","title":"Audience","text":"<p>The <code>Audience</code> decorator adapts the content for a specific audience or expertise level.</p> <p>Category: Style</p> <p>Parameters:</p> Parameter Type Description Default <code>level</code> enum The expertise level of the audience (e.g., \"beginner\", \"intermediate\", \"advanced\", \"expert\") \"intermediate\" <code>domain</code> string Specific domain knowledge or context for the audience \"general\" <code>adapt_terminology</code> boolean Whether to adapt terminology to the audience level true <p>Example:</p> <pre><code>+++Audience(level=\"beginner\", domain=\"programming\")\nExplain how databases work.\n</code></pre> <p>Compatible with: <code>Tone</code>, <code>ELI5</code>, <code>OutputFormat</code></p>"},{"location":"decorators/style/#eli5","title":"ELI5","text":"<p>The <code>ELI5</code> (\"Explain Like I'm 5\") decorator simplifies explanations to be understandable by someone with minimal background knowledge.</p> <p>Category: Style</p> <p>Parameters:</p> Parameter Type Description Default <code>use_analogies</code> boolean Whether to use simple analogies in explanations true <code>simplified_vocabulary</code> boolean Whether to use simplified vocabulary true <code>visual_descriptions</code> boolean Whether to use visual descriptions and examples true <p>Example:</p> <pre><code>+++ELI5(use_analogies=true)\nHow does the internet work?\n</code></pre> <p>Compatible with: <code>OutputFormat</code>, <code>StepByStep</code></p>"},{"location":"decorators/style/#concise","title":"Concise","text":"<p>The <code>Concise</code> decorator generates brief, to-the-point responses.</p> <p>Category: Style</p> <p>Parameters:</p> Parameter Type Description Default <code>level</code> enum The level of conciseness (e.g., \"minimal\", \"moderate\", \"extreme\") \"moderate\" <code>retain_examples</code> boolean Whether to retain illustrative examples false <code>bullet_points</code> boolean Whether to use bullet points for brevity true <p>Example:</p> <pre><code>+++Concise(level=\"extreme\", bullet_points=true)\nWhat are the key features of Python?\n</code></pre> <p>Compatible with: <code>OutputFormat</code>, incompatible with <code>Detailed</code></p>"},{"location":"decorators/style/#detailed","title":"Detailed","text":"<p>The <code>Detailed</code> decorator produces comprehensive, in-depth responses with thorough explanations.</p> <p>Category: Style</p> <p>Parameters:</p> Parameter Type Description Default <code>depth</code> enum The level of detail (e.g., \"moderate\", \"comprehensive\", \"exhaustive\") \"comprehensive\" <code>include_examples</code> boolean Whether to include examples true <code>include_context</code> boolean Whether to include background context true <p>Example:</p> <pre><code>+++Detailed(depth=\"exhaustive\", include_examples=true)\nHow do neural networks learn?\n</code></pre> <p>Compatible with: Most reasoning decorators, incompatible with <code>Concise</code></p>"},{"location":"decorators/style/#professional","title":"Professional","text":"<p>The <code>Professional</code> decorator ensures responses have a professional, business-appropriate tone and format.</p> <p>Category: Style</p> <p>Parameters:</p> Parameter Type Description Default <code>formality</code> enum The level of formality (e.g., \"standard\", \"highly formal\") \"standard\" <code>industry</code> string Specific industry context, if applicable \"general\" <code>include_citations</code> boolean Whether to include citations and references false <p>Example:</p> <pre><code>+++Professional(formality=\"highly formal\", industry=\"finance\")\nWhat are the key considerations for regulatory compliance?\n</code></pre> <p>Compatible with: <code>OutputFormat</code>, <code>Detailed</code>, most reasoning decorators</p>"},{"location":"decorators/style/#styleshift","title":"StyleShift","text":"<p>The <code>StyleShift</code> decorator transforms the style of text to match a specified genre, author, or cultural style.</p> <p>Category: Style</p> <p>Parameters:</p> Parameter Type Description Default <code>target_style</code> string The style to emulate (e.g., \"academic\", \"journalistic\", \"literary\") \"academic\" <code>example_source</code> string An example source or author to imitate \"\" <code>maintain_content</code> boolean Whether to maintain all content while shifting style true <p>Example:</p> <pre><code>+++StyleShift(target_style=\"journalistic\", example_source=\"The Economist\")\nExplain the implications of quantum computing for cryptography.\n</code></pre> <p>Compatible with: Most other decorators, may conflict with <code>Tone</code> if using contradictory styles</p>"},{"location":"decorators/style/#motivational","title":"Motivational","text":"<p>The <code>Motivational</code> decorator adds inspirational and encouraging elements to the response.</p> <p>Category: Style</p> <p>Parameters:</p> Parameter Type Description Default <code>intensity</code> enum The intensity of motivational language (e.g., \"subtle\", \"moderate\", \"strong\") \"moderate\" <code>emphasize_progress</code> boolean Whether to emphasize progress and growth true <code>include_quotes</code> boolean Whether to include motivational quotes false <p>Example:</p> <pre><code>+++Motivational(intensity=\"strong\", include_quotes=true)\nHow can I improve my programming skills?\n</code></pre> <p>Compatible with: Most other decorators</p>"},{"location":"decorators/style/#using-style-decorators-together","title":"Using Style Decorators Together","text":"<p>Style decorators can be combined with other decorators to create more nuanced responses. For example:</p> <pre><code>+++Persona(role=\"teacher\")\n+++Audience(level=\"beginner\")\n+++OutputFormat(format=\"markdown\")\nExplain how gravity works.\n</code></pre> <p>This combines a teacher persona with beginner-friendly explanations in markdown format.</p>"},{"location":"decorators/style/#see-also","title":"See Also","text":"<ul> <li>Reasoning Decorators</li> <li>Output Format Decorators (coming soon)</li> <li>Creating Custom Style Decorators</li> </ul>"},{"location":"demo/","title":"Demoing the Prompt Decorators","text":"<p>This guide explains how to use the demo tools provided with the Prompt Decorators framework to showcase its capabilities. The demos help illustrate the power of decorators in enhancing LLM outputs for different use cases.</p>"},{"location":"demo/#overview","title":"Overview","text":"<p>The Prompt Decorators demo package includes:</p> <ol> <li>A CLI demo for quick examples from the command line</li> <li>An interactive web demo for visual experimentation</li> <li>A collection of example scripts for different use cases</li> <li>A comparison tool to see before/after decorator effects</li> </ol>"},{"location":"demo/#installation","title":"Installation","text":"<p>To use the demo tools, install the package with the demo extras:</p> <pre><code>pip install \"prompt-decorators[demo]\"\n</code></pre> <p>This installs the core package plus additional dependencies required for the demos.</p>"},{"location":"demo/#command-line-demo","title":"Command Line Demo","text":"<p>The CLI demo allows you to quickly experiment with decorators from the command line:</p> <pre><code># Run a basic example\npython -m prompt_decorators.demo.main basic step-by-step\n\n# Try a custom prompt with decorators\npython -m prompt_decorators.demo.dynamic_openai_demo run-custom-prompt \\\n  --prompt \"Explain quantum computing\" \\\n  --decorator \"Audience(level=beginner)\" \\\n  --decorator \"StepByStep(numbered=true)\"\n</code></pre>"},{"location":"demo/#available-commands","title":"Available Commands","text":"<pre><code># List all available decorators\npython -m prompt_decorators.demo.dynamic_openai_demo --list-decorators\n\n# Run a predefined example\npython -m prompt_decorators.demo.dynamic_openai_demo --example step_by_step\n\n# Getting help\npython -m prompt_decorators.demo.dynamic_openai_demo --help\n</code></pre>"},{"location":"demo/#basic-examples","title":"Basic Examples","text":"<pre><code># Basic reasoning and structure decorators\npython -m prompt_decorators.demo.main basic reasoning                 # Use the Reasoning decorator\npython -m prompt_decorators.demo.main basic step-by-step              # Use the StepByStep decorator\npython -m prompt_decorators.demo.main basic output-format             # Use the OutputFormat decorator\npython -m prompt_decorators.demo.main basic bullet                    # Use the Bullet decorator\npython -m prompt_decorators.demo.main basic tree-of-thought           # Use the TreeOfThought decorator\n</code></pre>"},{"location":"demo/#advanced-examples","title":"Advanced Examples","text":"<pre><code># Standard advanced compositions\npython -m prompt_decorators.demo.main advanced compound-decorators     # Combines StepByStep, Reasoning, and OutputFormat\npython -m prompt_decorators.demo.main advanced tech-tutorial           # Creates a technical tutorial using multiple decorators\npython -m prompt_decorators.demo.main advanced decision-analysis       # Uses decorators for structured decision analysis\npython -m prompt_decorators.demo.main advanced debate-topic            # Creates balanced debate analysis\n</code></pre>"},{"location":"demo/#interactive-web-demo","title":"Interactive Web Demo","text":"<p>The web demo provides an interactive interface for exploring decorators:</p> <pre><code># Start the web interface\npython -m prompt_decorators.demo.web_app\n</code></pre> <p>Then open your browser to http://localhost:7860 to access the interface.</p>"},{"location":"demo/#web-demo-features","title":"Web Demo Features","text":"<ul> <li>Interactive Decorator Selection: Choose from available decorators with a simple interface</li> <li>Parameter Configuration: Customize decorator parameters</li> <li>Real-time Preview: See the transformed prompt before sending to an LLM</li> <li>Response Comparison: Compare responses with and without decorators</li> <li>Decorator Stacking: Combine multiple decorators and adjust their order</li> <li>Export Options: Save your configurations and responses</li> </ul>"},{"location":"demo/#example-scripts","title":"Example Scripts","text":"<p>The demo package includes example scripts that showcase different applications of prompt decorators:</p>"},{"location":"demo/#basic-examples_1","title":"Basic Examples","text":"<p>Found in <code>demo/examples/basic.py</code>:</p> <pre><code>from prompt_decorators.demo.examples.basic import run_example\n\n# Run the reasoning example\nrun_example(\"reasoning\")\n</code></pre>"},{"location":"demo/#advanced-examples_1","title":"Advanced Examples","text":"<p>Found in <code>demo/examples/advanced.py</code>:</p> <pre><code>from prompt_decorators.demo.examples.advanced import run_example\n\n# Run the technical tutorial example\nrun_example(\"tech_tutorial\")\n</code></pre>"},{"location":"demo/#domain-specific-examples","title":"Domain-Specific Examples","text":"<p>Found in <code>demo/examples/domain_specific.py</code>:</p> <pre><code>from prompt_decorators.demo.examples.domain_specific import run_example\n\n# Run the data science example\nrun_example(\"data_science\")\n</code></pre>"},{"location":"demo/#comparison-tool","title":"Comparison Tool","text":"<p>The comparison tool helps visualize the difference between decorated and undecorated prompts:</p> <pre><code>python -m prompt_decorators.demo.compare \\\n  --prompt \"Explain how nuclear fusion works\" \\\n  --decorator \"StepByStep(numbered=true)\" \\\n  --decorator \"Audience(level=beginner)\" \\\n  --model \"gpt-4\"\n</code></pre> <p>This will: 1. Send the original prompt to the LLM 2. Send the decorated prompt to the LLM 3. Display both responses side by side for comparison</p>"},{"location":"demo/#configuration","title":"Configuration","text":"<p>The demo tools can be configured through environment variables or a <code>.env</code> file:</p> <pre><code># OpenAI API Key\nOPENAI_API_KEY=your_openai_api_key_here\n\n# Model Configuration\nDEFAULT_MODEL=gpt-4o-mini\nMAX_TOKENS=2048\nTEMPERATURE=0.7\n\n# Logging Configuration\nLOG_LEVEL=INFO\nSAVE_LOGS=false\nLOG_FILE=prompt_decorator_demo.log\n</code></pre>"},{"location":"demo/#creating-your-own-demos","title":"Creating Your Own Demos","text":"<p>You can create custom demos based on the provided examples:</p> <pre><code>from prompt_decorators import apply_dynamic_decorators, create_decorator_instance\nfrom prompt_decorators.demo.utils.llm_client import get_completion\n\n# Define a custom demo\ndef my_custom_demo():\n    # Create a decorated prompt\n    prompt = \"\"\"\n    +++Persona(role=\"historian\")\n    +++StepByStep(numbered=true)\n    +++OutputFormat(format=\"markdown\")\n    Explain the causes of World War I\n    \"\"\"\n\n    # Apply decorators\n    transformed_prompt = apply_dynamic_decorators(prompt)\n\n    # Print the transformation\n    print(\"Original prompt:\")\n    print(prompt)\n    print(\"\\nTransformed prompt:\")\n    print(transformed_prompt)\n\n    # Get LLM response (if API key is configured)\n    try:\n        response = get_completion(transformed_prompt)\n        print(\"\\nLLM Response:\")\n        print(response)\n    except Exception as e:\n        print(f\"Error getting LLM response: {e}\")\n\nif __name__ == \"__main__\":\n    my_custom_demo()\n</code></pre>"},{"location":"demo/#demo-architecture","title":"Demo Architecture","text":"<p>The demo code is structured as follows:</p> <ul> <li><code>prompt_decorators/demo/main.py</code>: Main entry point for CLI</li> <li><code>prompt_decorators/demo/dynamic_openai_demo.py</code>: OpenAI-specific demo</li> <li><code>prompt_decorators/demo/web_app.py</code>: Web interface using Gradio</li> <li><code>prompt_decorators/demo/compare.py</code>: Comparison tool</li> <li><code>prompt_decorators/demo/examples/</code>: Example scripts</li> <li><code>prompt_decorators/demo/utils/</code>: Utility functions</li> </ul>"},{"location":"demo/#best-practices-for-demonstrations","title":"Best Practices for Demonstrations","text":"<p>When using the demo tools to present Prompt Decorators:</p> <ol> <li>Start Simple: Begin with basic decorators before moving to complex combinations</li> <li>Show Transformations: Always display both the original and transformed prompts</li> <li>Use Real-World Examples: Choose examples relevant to your audience</li> <li>Highlight Benefits: Emphasize improved structure, clarity, or depth in responses</li> <li>Compare Results: Show the difference between decorated and undecorated prompts</li> <li>Customize for Audience: Adjust examples based on your audience's domain</li> </ol>"},{"location":"demo/#troubleshooting","title":"Troubleshooting","text":""},{"location":"demo/#api-key-issues","title":"API Key Issues","text":"<p>If you encounter authentication errors:</p> <pre><code>Error: OpenAI API key not found. Please set the OPENAI_API_KEY environment variable.\n</code></pre> <p>Make sure to set your API key:</p> <pre><code>export OPENAI_API_KEY=your_api_key_here\n</code></pre> <p>Or create a <code>.env</code> file in the demo directory.</p>"},{"location":"demo/#model-availability","title":"Model Availability","text":"<p>If you see:</p> <pre><code>Error: The model 'gpt-4' does not exist or you do not have access to it.\n</code></pre> <p>Try using a different model:</p> <pre><code>python -m prompt_decorators.demo.dynamic_openai_demo run-custom-prompt \\\n  --prompt \"Hello world\" \\\n  --model \"gpt-3.5-turbo\"\n</code></pre>"},{"location":"demo/#other-issues","title":"Other Issues","text":"<p>For other common issues, check the troubleshooting section in the README.md file in the demo directory.</p>"},{"location":"demo/#next-steps","title":"Next Steps","text":"<ul> <li>Explore the tutorials to create your own decorators</li> <li>Learn about MCP integration to use decorators with Claude and other LLMs</li> <li>Read the specification for detailed technical information</li> </ul>"},{"location":"integrations/","title":"Integrations","text":"<p>Prompt Decorators can be integrated with various systems and platforms to enhance their capabilities. This section documents the available integrations and how to use them.</p>"},{"location":"integrations/#available-integrations","title":"Available Integrations","text":""},{"location":"integrations/#model-context-protocol-mcp","title":"Model Context Protocol (MCP)","text":"<p>The Model Context Protocol (MCP) integration allows you to expose prompt decorators as MCP tools, which can be used by MCP-compatible clients like Claude Desktop.</p> <ul> <li>MCP Overview - General overview of the MCP integration</li> <li>MCP Server - Documentation for the MCP server implementation</li> <li>Claude Desktop Integration - How to use prompt decorators with Claude Desktop</li> </ul>"},{"location":"integrations/#coming-soon","title":"Coming Soon","text":"<p>We're working on the following integrations:</p> <ul> <li>Langchain: Integration with the Langchain framework</li> <li>Ollama: Integration with the Ollama local LLM platform</li> <li>FastAPI: Expose prompt decorators as a REST API</li> <li>LlamaIndex: Integration with the LlamaIndex framework</li> </ul>"},{"location":"integrations/#why-use-integrations","title":"Why Use Integrations?","text":"<p>Integrations extend the capabilities of Prompt Decorators by making them available in different contexts:</p> <ol> <li>Enhanced Accessibility: Integrate prompt decorators into your existing workflows and tools.</li> <li>Standardized Communication: Use common protocols and interfaces to interact with prompt decorators.</li> <li>Expanded Functionality: Combine the power of prompt decorators with other systems.</li> <li>User-Friendly Interfaces: Make prompt decorators available through intuitive interfaces.</li> </ol>"},{"location":"integrations/#creating-custom-integrations","title":"Creating Custom Integrations","text":"<p>If you want to create a custom integration for Prompt Decorators, see the Extension Development tutorial for guidance.</p>"},{"location":"integrations/mcp/","title":"Model Context Protocol (MCP) Integration","text":"<p>Prompt Decorators integrates with the Model Context Protocol (MCP), allowing you to easily expose prompt decorators as MCP tools that can be used by any MCP-compatible client, including Claude Desktop.</p>"},{"location":"integrations/mcp/#overview","title":"Overview","text":"<p>The Model Context Protocol (MCP) is a standardized protocol for communication between LLM clients and servers. Our integration allows you to expose your prompt decorators as MCP tools, which can then be accessed by any MCP client.</p> <p>The integration is built using the official MCP SDK and follows all the best practices for MCP server implementation.</p>"},{"location":"integrations/mcp/#installation","title":"Installation","text":"<p>First, install the MCP SDK:</p> <pre><code>pip install mcp\n</code></pre>"},{"location":"integrations/mcp/#usage","title":"Usage","text":""},{"location":"integrations/mcp/#running-the-server","title":"Running the Server","text":"<p>You can run the MCP server using:</p> <pre><code># General use\npython -m prompt_decorators.integrations.mcp [--verbose]\n\n# For Claude Desktop specifically\npython -m prompt_decorators.integrations.mcp.claude_desktop [--verbose]\n</code></pre>"},{"location":"integrations/mcp/#available-tools","title":"Available Tools","text":"<p>The MCP integration provides the following tools:</p> <ol> <li>list_decorators: Lists all available prompt decorators.</li> <li>get_decorator_details: Retrieves detailed information about a specific decorator.</li> <li>apply_decorators: Applies decorators to a prompt using the +++ syntax.</li> <li>create_decorated_prompt: Creates a decorated prompt using a predefined template.</li> </ol>"},{"location":"integrations/mcp/#using-the-tools","title":"Using the Tools","text":"<p>Here's how you can use these tools from an MCP client:</p>"},{"location":"integrations/mcp/#list-decorators","title":"List Decorators","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"callTool\",\n  \"params\": {\n    \"name\": \"list_decorators\",\n    \"arguments\": {}\n  }\n}\n</code></pre> <p>Response: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"decorators\": {\n      \"Academic\": {\n        \"name\": \"Academic\",\n        \"description\": \"Apply academic writing style and tone\",\n        \"category\": \"Style\",\n        \"parameters\": [{\"name\": \"level\", \"description\": \"Academic level\", \"type\": \"string\", \"required\": false}]\n      },\n      \"Reasoning\": {\n        \"name\": \"Reasoning\",\n        \"description\": \"Enhance reasoning capabilities\",\n        \"category\": \"Critical Thinking\",\n        \"parameters\": [{\"name\": \"depth\", \"description\": \"Reasoning depth\", \"type\": \"string\", \"required\": false}]\n      }\n      // ... more decorators\n    }\n  }\n}\n</code></pre></p>"},{"location":"integrations/mcp/#get-decorator-details","title":"Get Decorator Details","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"callTool\",\n  \"params\": {\n    \"name\": \"get_decorator_details\",\n    \"arguments\": {\n      \"name\": \"StepByStep\"\n    }\n  }\n}\n</code></pre> <p>Response: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"name\": \"StepByStep\",\n    \"description\": \"Break down the response into step-by-step instructions\",\n    \"category\": \"Structure\",\n    \"parameters\": [\n      {\"name\": \"numbered\", \"description\": \"Use numbered steps\", \"type\": \"boolean\", \"required\": false}\n    ],\n    \"version\": \"1.0.0\"\n  }\n}\n</code></pre></p>"},{"location":"integrations/mcp/#apply-decorators","title":"Apply Decorators","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"callTool\",\n  \"params\": {\n    \"name\": \"apply_decorators\",\n    \"arguments\": {\n      \"prompt\": \"Explain quantum computing\",\n      \"decorators\": [\n        {\"name\": \"StepByStep\"},\n        {\"name\": \"Academic\", \"parameters\": {\"level\": \"advanced\"}}\n      ]\n    }\n  }\n}\n</code></pre> <p>Response: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"original_prompt\": \"Explain quantum computing\",\n    \"decorated_prompt\": \"I'll provide a step-by-step academic explanation of quantum computing at an advanced level...\",\n    \"applied_decorators\": [\"StepByStep\", \"Academic\"]\n  }\n}\n</code></pre></p>"},{"location":"integrations/mcp/#create-decorated-prompt","title":"Create Decorated Prompt","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"callTool\",\n  \"params\": {\n    \"name\": \"create_decorated_prompt\",\n    \"arguments\": {\n      \"template_name\": \"detailed-reasoning\",\n      \"content\": \"Why is the sky blue?\"\n    }\n  }\n}\n</code></pre> <p>Response: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"template_name\": \"detailed-reasoning\",\n    \"template_description\": \"Enhanced critical thinking template with structured reasoning\",\n    \"original_content\": \"Why is the sky blue?\",\n    \"decorated_prompt\": \"I'll analyze why the sky appears blue, using detailed reasoning and a step-by-step approach...\",\n    \"applied_decorators\": [\n      {\"name\": \"SystemMessage\", \"parameters\": {\"message\": \"Analyze this problem step-by-step with detailed reasoning.\"}},\n      {\"name\": \"Reasoning\", \"parameters\": {\"depth\": \"deep\"}},\n      {\"name\": \"Structured\", \"parameters\": {\"format\": \"markdown\"}}\n    ]\n  }\n}\n</code></pre></p>"},{"location":"integrations/mcp/#predefined-templates","title":"Predefined Templates","text":"<p>The integration includes the following predefined templates:</p> <ul> <li>detailed-reasoning: Enhanced critical thinking template with structured reasoning.</li> <li>academic-analysis: Academic style analysis with citations and formal tone.</li> <li>explain-simply: Simplify complex topics for broader understanding.</li> <li>creative-storytelling: Creative writing with storytelling elements.</li> <li>problem-solving: Structured approach to solving problems.</li> </ul>"},{"location":"integrations/mcp/#implementation-details","title":"Implementation Details","text":"<p>The MCP integration is built using the official MCP SDK. The server implementation follows the FastMCP pattern from the SDK, which provides all the necessary functionality for running an MCP server.</p> <p>The integration registers four tools with the MCP server:</p> <ol> <li><code>list_decorators</code>: Lists all available prompt decorators loaded from the dynamic decorators module.</li> <li><code>get_decorator_details</code>: Provides detailed information about a specific decorator, including its parameters and usage.</li> <li><code>apply_decorators</code>: Applies a list of decorators to a given prompt, returning the transformed prompt.</li> <li><code>create_decorated_prompt</code>: Uses a predefined template to create a decorated prompt, with customizable parameters.</li> </ol>"},{"location":"integrations/mcp/#next-steps","title":"Next Steps","text":"<p>To learn more about the MCP server implementation and how to integrate it with Claude Desktop, see:</p> <ul> <li>MCP Server</li> <li>Claude Desktop Integration</li> </ul>"},{"location":"integrations/mcp/claude_desktop/","title":"Claude Desktop Integration","text":"<p>Prompt Decorators can be easily integrated with Claude Desktop using the MCP (Model Context Protocol) integration. This document explains how to set up and use the Prompt Decorators MCP server with Claude Desktop.</p>"},{"location":"integrations/mcp/claude_desktop/#overview","title":"Overview","text":"<p>Claude Desktop supports external tools through the MCP protocol, allowing you to extend Claude's capabilities with custom functionality. The Prompt Decorators MCP integration enables Claude to apply prompt decorators to your prompts, enhancing Claude's responses with structured reasoning, specific output formats, and more.</p>"},{"location":"integrations/mcp/claude_desktop/#prerequisites","title":"Prerequisites","text":"<ul> <li>Claude Desktop installed on your system</li> <li>Python 3.11 or higher</li> <li>Prompt Decorators package installed</li> <li>MCP SDK installed (<code>pip install mcp</code>)</li> </ul>"},{"location":"integrations/mcp/claude_desktop/#installation","title":"Installation","text":""},{"location":"integrations/mcp/claude_desktop/#1-install-required-packages","title":"1. Install Required Packages","text":"<pre><code>pip install prompt-decorators mcp\n</code></pre>"},{"location":"integrations/mcp/claude_desktop/#2-create-a-configuration-file","title":"2. Create a Configuration File","text":"<p>Claude Desktop requires a configuration file that specifies how to run the MCP server. You can use our provided script to generate this configuration file:</p> <pre><code>python install_claude_desktop.py\n</code></pre> <p>This will create a <code>claude_desktop_config.json</code> file in your current directory with the appropriate configuration.</p> <p>Alternatively, you can manually create a configuration file with the following structure:</p> <pre><code>{\n  \"name\": \"Prompt Decorators\",\n  \"command\": \"/absolute/path/to/python\",\n  \"args\": [\n    \"-m\",\n    \"prompt_decorators.integrations.mcp.claude_desktop\"\n  ],\n  \"cwd\": \"/absolute/path/to/prompt-decorators\",\n  \"env\": {\n    \"PYTHONPATH\": \"/absolute/path/to/prompt-decorators\",\n    \"PYTHONUNBUFFERED\": \"1\",\n    \"PYTHONDONTWRITEBYTECODE\": \"1\"\n  }\n}\n</code></pre> <p>Replace the paths with the appropriate paths on your system: - <code>/absolute/path/to/python</code>: The path to your Python executable - <code>/absolute/path/to/prompt-decorators</code>: The path to the directory containing the prompt-decorators package</p>"},{"location":"integrations/mcp/claude_desktop/#3-configure-claude-desktop","title":"3. Configure Claude Desktop","text":"<ol> <li>Open Claude Desktop</li> <li>Go to Settings (gear icon) &gt; Advanced &gt; Context Sources</li> <li>Click \"Add Context Source\"</li> <li>Either:</li> <li>Click \"Import from File\" and select your <code>claude_desktop_config.json</code> file</li> <li> <p>Or manually enter the configuration details</p> </li> <li> <p>Click \"Save\"</p> </li> </ol>"},{"location":"integrations/mcp/claude_desktop/#using-prompt-decorators-in-claude-desktop","title":"Using Prompt Decorators in Claude Desktop","text":"<p>Once the integration is set up, you can use Prompt Decorators in Claude Desktop through the <code>/tool</code> command.</p>"},{"location":"integrations/mcp/claude_desktop/#available-tools","title":"Available Tools","text":"<p>The integration provides four tools:</p> <ol> <li><code>list_decorators</code>: Lists all available prompt decorators</li> <li><code>get_decorator_details</code>: Gets detailed information about a specific decorator</li> <li><code>apply_decorators</code>: Applies decorators to a prompt</li> <li><code>create_decorated_prompt</code>: Creates a decorated prompt using a predefined template</li> </ol>"},{"location":"integrations/mcp/claude_desktop/#example-usage","title":"Example Usage","text":""},{"location":"integrations/mcp/claude_desktop/#listing-decorators","title":"Listing Decorators","text":"<p>To see all available decorators:</p> <pre><code>/tool list_decorators\n</code></pre> <p>This will return a list of all available decorators with their descriptions, categories, and parameters.</p>"},{"location":"integrations/mcp/claude_desktop/#getting-decorator-details","title":"Getting Decorator Details","text":"<p>To get detailed information about a specific decorator:</p> <pre><code>/tool get_decorator_details name=StepByStep\n</code></pre> <p>This will return detailed information about the StepByStep decorator, including its parameters and usage.</p>"},{"location":"integrations/mcp/claude_desktop/#applying-decorators","title":"Applying Decorators","text":"<p>To apply decorators to a prompt:</p> <pre><code>/tool apply_decorators prompt=\"Explain quantum computing\" decorators=[{\"name\": \"StepByStep\"}, {\"name\": \"Academic\", \"parameters\": {\"level\": \"advanced\"}}]\n</code></pre> <p>This will return a decorated prompt that includes the StepByStep and Academic decorators.</p>"},{"location":"integrations/mcp/claude_desktop/#using-templates","title":"Using Templates","text":"<p>To create a decorated prompt using a predefined template:</p> <pre><code>/tool create_decorated_prompt template_name=\"detailed-reasoning\" content=\"Why is the sky blue?\"\n</code></pre> <p>This will return a decorated prompt using the detailed-reasoning template.</p>"},{"location":"integrations/mcp/claude_desktop/#predefined-templates","title":"Predefined Templates","text":"<p>The integration includes these predefined templates:</p> <ul> <li>detailed-reasoning: Enhanced critical thinking template with structured reasoning</li> <li>academic-analysis: Academic style analysis with citations and formal tone</li> <li>explain-simply: Simplify complex topics for broader understanding</li> <li>creative-storytelling: Creative writing with storytelling elements</li> <li>problem-solving: Structured approach to solving problems</li> </ul>"},{"location":"integrations/mcp/claude_desktop/#troubleshooting","title":"Troubleshooting","text":""},{"location":"integrations/mcp/claude_desktop/#connection-issues","title":"Connection Issues","text":"<p>If Claude Desktop cannot connect to the MCP server:</p> <ol> <li>Check that the paths in your configuration file are correct</li> <li>Ensure that the MCP SDK is installed (<code>pip install mcp</code>)</li> <li>Try running the server manually to check for errors:    <pre><code>python -m prompt_decorators.integrations.mcp.claude_desktop --verbose\n</code></pre></li> <li>Check that the PYTHONPATH environment variable is set correctly in the configuration</li> </ol>"},{"location":"integrations/mcp/claude_desktop/#debugging","title":"Debugging","text":"<p>You can run the Claude Desktop handler with the <code>--verbose</code></p>"},{"location":"integrations/mcp/server/","title":"MCP Server","text":"<p>The Prompt Decorators MCP server exposes prompt decorators as MCP tools, allowing any MCP-compatible client to access and use them. This document provides detailed information about the server implementation and usage.</p>"},{"location":"integrations/mcp/server/#implementation-overview","title":"Implementation Overview","text":"<p>The MCP server is implemented using the official MCP SDK, specifically the <code>FastMCP</code> class, which provides a high-level API for creating MCP servers.</p> <p>The server exposes four tools:</p> <ol> <li><code>list_decorators</code>: Lists all available prompt decorators.</li> <li><code>get_decorator_details</code>: Retrieves detailed information about a specific decorator.</li> <li><code>apply_decorators</code>: Applies decorators to a prompt using the +++ syntax.</li> <li><code>create_decorated_prompt</code>: Creates a decorated prompt using a predefined template.</li> </ol>"},{"location":"integrations/mcp/server/#source-code","title":"Source Code","text":"<p>The main server implementation is in the <code>prompt_decorators/integrations/mcp/server.py</code> file. It uses the dynamic decorator module to load and apply decorators.</p> <pre><code>from mcp.server.fastmcp import FastMCP\nfrom prompt_decorators.dynamic_decorators_module import (\n    get_available_decorators,\n    apply_dynamic_decorators,\n    load_decorator_definitions,\n)\n\n# Create the MCP server\nmcp = FastMCP(\"Prompt Decorators\")\n\n@mcp.tool()\ndef list_decorators() -&gt; Dict[str, Any]:\n    \"\"\"Lists all available prompt decorators.\"\"\"\n    # Implementation...\n\n@mcp.tool()\ndef get_decorator_details(name: str) -&gt; Dict[str, Any]:\n    \"\"\"Get detailed information about a specific decorator.\"\"\"\n    # Implementation...\n\n@mcp.tool()\ndef apply_decorators(prompt: str, decorators: List[Dict[str, Any]]) -&gt; Dict[str, Any]:\n    \"\"\"Apply decorators to a prompt using the +++ syntax.\"\"\"\n    # Implementation...\n\n@mcp.tool()\ndef create_decorated_prompt(template_name: str, content: str, parameters: Optional[Dict[str, Any]] = None) -&gt; Dict[str, Any]:\n    \"\"\"Create a decorated prompt using a predefined template.\"\"\"\n    # Implementation...\n\ndef run_server(host: str = \"0.0.0.0\", port: int = 5000) -&gt; None:\n    \"\"\"Run the MCP server.\"\"\"\n    # Implementation...\n</code></pre>"},{"location":"integrations/mcp/server/#running-the-server","title":"Running the Server","text":"<p>You can run the MCP server using the following command:</p> <pre><code>python -m prompt_decorators.integrations.mcp [--host HOST] [--port PORT] [--verbose]\n</code></pre> <p>Options: - <code>--verbose</code>: Enable verbose logging for debugging - <code>--host</code>: Specify the host to bind to (default: \"0.0.0.0\") - <code>--port</code>: Specify the port to listen on (default: 5000)</p>"},{"location":"integrations/mcp/server/#tool-details","title":"Tool Details","text":""},{"location":"integrations/mcp/server/#list_decorators","title":"list_decorators","text":"<p>Lists all available prompt decorators.</p> <p>Parameters: None</p> <p>Returns: A dictionary containing information about all available decorators, including their names, descriptions, categories, and parameters.</p> <p>Example Response: <pre><code>{\n  \"decorators\": {\n    \"Academic\": {\n      \"name\": \"Academic\",\n      \"description\": \"Apply academic writing style and tone\",\n      \"category\": \"Style\",\n      \"parameters\": [{\"name\": \"level\", \"description\": \"Academic level\", \"type\": \"string\", \"required\": false}]\n    },\n    \"Reasoning\": {\n      \"name\": \"Reasoning\",\n      \"description\": \"Enhance reasoning capabilities\",\n      \"category\": \"Critical Thinking\",\n      \"parameters\": [{\"name\": \"depth\", \"description\": \"Reasoning depth\", \"type\": \"string\", \"required\": false}]\n    }\n    // ... more decorators\n  }\n}\n</code></pre></p>"},{"location":"integrations/mcp/server/#get_decorator_details","title":"get_decorator_details","text":"<p>Retrieves detailed information about a specific decorator.</p> <p>Parameters: - <code>name</code> (string, required): The name of the decorator to get details for.</p> <p>Returns: A dictionary containing detailed information about the decorator, including its name, description, category, parameters, and version.</p> <p>Example Request: <pre><code>{\n  \"name\": \"StepByStep\"\n}\n</code></pre></p> <p>Example Response: <pre><code>{\n  \"name\": \"StepByStep\",\n  \"description\": \"Break down the response into step-by-step instructions\",\n  \"category\": \"Structure\",\n  \"parameters\": [\n    {\"name\": \"numbered\", \"description\": \"Use numbered steps\", \"type\": \"boolean\", \"required\": false}\n  ],\n  \"version\": \"1.0.0\"\n}\n</code></pre></p>"},{"location":"integrations/mcp/server/#apply_decorators","title":"apply_decorators","text":"<p>Applies decorators to a prompt using the +++ syntax.</p> <p>Parameters: - <code>prompt</code> (string, required): The prompt text to decorate. - <code>decorators</code> (array, required): List of decorators to apply, each with name and parameters.</p> <p>Returns: A dictionary containing the original prompt, the decorated prompt, and the list of applied decorators.</p> <p>Example Request: <pre><code>{\n  \"prompt\": \"Explain quantum computing\",\n  \"decorators\": [\n    {\"name\": \"StepByStep\"},\n    {\"name\": \"Academic\", \"parameters\": {\"level\": \"advanced\"}}\n  ]\n}\n</code></pre></p> <p>Example Response: <pre><code>{\n  \"original_prompt\": \"Explain quantum computing\",\n  \"decorated_prompt\": \"I'll provide a step-by-step academic explanation of quantum computing at an advanced level...\",\n  \"applied_decorators\": [\"StepByStep\", \"Academic\"]\n}\n</code></pre></p>"},{"location":"integrations/mcp/server/#create_decorated_prompt","title":"create_decorated_prompt","text":"<p>Creates a decorated prompt using a predefined template.</p> <p>Parameters: - <code>template_name</code> (string, required): The name of the template to use. - <code>content</code> (string, required): The content to include in the prompt. - <code>parameters</code> (object, optional): Optional parameters for customizing the template.</p> <p>Returns: A dictionary containing the template name, description, original content, decorated prompt, and applied decorators.</p> <p>Example Request: <pre><code>{\n  \"template_name\": \"detailed-reasoning\",\n  \"content\": \"Why is the sky blue?\",\n  \"parameters\": {\n    \"depth\": \"comprehensive\"\n  }\n}\n</code></pre></p> <p>Example Response: <pre><code>{\n  \"template_name\": \"detailed-reasoning\",\n  \"template_description\": \"Enhanced critical thinking template with structured reasoning\",\n  \"original_content\": \"Why is the sky blue?\",\n  \"decorated_prompt\": \"I'll analyze why the sky appears blue, using detailed reasoning and a comprehensive approach...\",\n  \"applied_decorators\": [\n    {\"name\": \"SystemMessage\", \"parameters\": {\"message\": \"Analyze this problem step-by-step with detailed reasoning.\"}},\n    {\"name\": \"Reasoning\", \"parameters\": {\"depth\": \"comprehensive\"}},\n    {\"name\": \"Structured\", \"parameters\": {\"format\": \"markdown\"}}\n  ]\n}\n</code></pre></p>"},{"location":"integrations/mcp/server/#predefined-templates","title":"Predefined Templates","text":"<p>The server includes the following predefined templates:</p>"},{"location":"integrations/mcp/server/#detailed-reasoning","title":"detailed-reasoning","text":"<p>Enhanced critical thinking template with structured reasoning.</p> <p>Decorators: - <code>SystemMessage</code>: Sets the system message to guide detailed reasoning. - <code>Reasoning</code>: Applies deep reasoning capabilities. - <code>Structured</code>: Formats the response in Markdown.</p>"},{"location":"integrations/mcp/server/#academic-analysis","title":"academic-analysis","text":"<p>Academic style analysis with citations and formal tone.</p> <p>Decorators: - <code>Academic</code>: Sets advanced academic level. - <code>Citation</code>: Uses APA citation style. - <code>Formal</code>: Applies formal tone.</p>"},{"location":"integrations/mcp/server/#explain-simply","title":"explain-simply","text":"<p>Simplify complex topics for broader understanding.</p> <p>Decorators: - <code>SystemMessage</code>: Sets the system message for simple explanations. - <code>Simplify</code>: Sets beginner-level explanations. - <code>Examples</code>: Includes examples to illustrate concepts.</p>"},{"location":"integrations/mcp/server/#creative-storytelling","title":"creative-storytelling","text":"<p>Creative writing with storytelling elements.</p> <p>Decorators: - <code>Creative</code>: Uses narrative style for creative content. - <code>Engaging</code>: Makes the content engaging. - <code>Vivid</code>: Adds high-level of vividness to descriptions.</p>"},{"location":"integrations/mcp/server/#problem-solving","title":"problem-solving","text":"<p>Structured approach to solving problems.</p> <p>Decorators: - <code>SystemMessage</code>: Sets the system message for problem-solving. - <code>ProblemSolver</code>: Applies problem-solving methodology. - <code>StepByStep</code>: Breaks down the solution into steps.</p>"},{"location":"integrations/mcp/server/#error-handling","title":"Error Handling","text":"<p>The server includes robust error handling for various scenarios:</p> <ul> <li>Invalid decorator names: Returns an error with available decorators.</li> <li>Invalid template names: Returns an error with available templates.</li> <li>Server initialization issues: Logs detailed error information.</li> <li>Runtime errors: Logs exceptions and returns error messages.</li> </ul>"},{"location":"integrations/mcp/server/#implementation-details","title":"Implementation Details","text":""},{"location":"integrations/mcp/server/#server-lifecycle","title":"Server Lifecycle","text":"<p>The server lifecycle is managed by the <code>run_server</code> function, which:</p> <ol> <li>Configures logging based on the verbose flag.</li> <li>Loads all available decorators from the dynamic decorators module.</li> <li>Starts the MCP server using the <code>mcp.run()</code> method.</li> <li>Handles shutdown requests and exceptions.</li> </ol>"},{"location":"integrations/mcp/server/#tool-implementation","title":"Tool Implementation","text":"<p>Each tool is implemented as a Python function decorated with <code>@mcp.tool()</code>. The function signature defines the parameters and return type of the tool.</p>"},{"location":"integrations/mcp/server/#dynamic-decorator-loading","title":"Dynamic Decorator Loading","text":"<p>The server uses the <code>get_available_decorators()</code> function from the dynamic decorators module to load all available decorators at runtime. This ensures that all decorators registered with the system are available to MCP clients.</p>"},{"location":"integrations/mcp/server/#template-management","title":"Template Management","text":"<p>Templates are defined as dictionaries with a description and a list of decorators to apply. Each decorator includes its name and parameters.</p>"},{"location":"integrations/mcp/server/#extending-the-server","title":"Extending the Server","text":"<p>You can extend the server by adding new tools or templates:</p>"},{"location":"integrations/mcp/server/#adding-a-new-tool","title":"Adding a New Tool","text":"<pre><code>@mcp.tool()\ndef my_custom_tool(param1: str, param2: int) -&gt; Dict[str, Any]:\n    \"\"\"\n    Custom tool description.\n\n    Args:\n        param1: Description of param1.\n        param2: Description of param2.\n\n    Returns:\n        A dictionary with the result.\n    \"\"\"\n    # Implementation...\n    return {\"result\": \"...\"}\n</code></pre>"},{"location":"integrations/mcp/server/#adding-a-new-template","title":"Adding a New Template","text":"<pre><code>templates[\"my-template\"] = {\n    \"description\": \"My custom template description\",\n    \"decorators\": [\n        {\"name\": \"Decorator1\", \"parameters\": {\"param1\": \"value1\"}},\n        {\"name\": \"Decorator2\", \"parameters\": {\"param2\": \"value2\"}}\n    ]\n}\n</code></pre>"},{"location":"integrations/mcp/server/#next-steps","title":"Next Steps","text":"<p>To learn more about integrating the MCP server with Claude Desktop, see Claude Desktop Integration.</p>"},{"location":"tutorials/combining_decorators/","title":"Tutorial: Combining Decorators","text":"<p>This tutorial will guide you through the process of combining multiple decorators to create sophisticated prompt transformations. By stacking decorators, you can achieve complex behaviors that would be difficult to implement with a single decorator.</p>"},{"location":"tutorials/combining_decorators/#prerequisites","title":"Prerequisites","text":"<p>Before starting this tutorial, ensure you have:</p> <ol> <li>Installed the Prompt Decorators package (<code>pip install prompt-decorators</code>)</li> <li>Completed the Creating Custom Decorators tutorial</li> <li>Familiarity with the core concepts of the framework</li> </ol>"},{"location":"tutorials/combining_decorators/#why-combine-decorators","title":"Why Combine Decorators?","text":"<p>Combining decorators allows you to:</p> <ul> <li>Apply multiple enhancements to a single prompt</li> <li>Create modular transformations that can be mixed and matched</li> <li>Separate concerns, making each decorator focused on a specific task</li> <li>Build complex behaviors from simple building blocks</li> </ul>"},{"location":"tutorials/combining_decorators/#methods-for-combining-decorators","title":"Methods for Combining Decorators","text":"<p>There are three main ways to combine decorators:</p> <ol> <li>Inline stacking: Using multiple decorator annotations in your prompt text</li> <li>Programmatic chaining: Applying decorators in sequence in your code</li> <li>Composite decorators: Creating new decorators that internally use other decorators</li> </ol> <p>Let's explore each approach.</p>"},{"location":"tutorials/combining_decorators/#1-inline-stacking","title":"1. Inline Stacking","text":"<p>The simplest way to combine decorators is by stacking them in your prompt using the inline syntax:</p> <pre><code>from prompt_decorators import apply_dynamic_decorators\n\n# Create a prompt with multiple stacked decorators\nprompt = \"\"\"\n+++Persona(role=\"data scientist\")\n+++Reasoning(depth=\"comprehensive\")\n+++OutputFormat(format=\"markdown\")\nAnalyze this dataset and identify key trends:\n[dataset description...]\n\"\"\"\n\n# Apply all decorators at once\ntransformed_prompt = apply_dynamic_decorators(prompt)\n</code></pre> <p>When using inline stacking: - Decorators are applied in order, from top to bottom - Each decorator transforms the text that results from previous decorators - Later decorators can modify or override effects of earlier ones</p>"},{"location":"tutorials/combining_decorators/#example-technical-analysis-with-multiple-decorators","title":"Example: Technical Analysis with Multiple Decorators","text":"<p>Here's an example that combines decorators for a technical analysis:</p> <pre><code>from prompt_decorators import apply_dynamic_decorators\nimport openai\n\n# Multi-decorator prompt for technical analysis\nprompt = \"\"\"\n+++Persona(role=\"data scientist\")\n+++Reasoning(depth=\"comprehensive\")\n+++StepByStep(numbered=true)\n+++OutputFormat(format=\"markdown\")\n+++Audience(level=\"technical\")\n\nAnalyze the following dataset of customer churn and identify the key factors that predict churn:\n\nCustomer ID, Age, Tenure (months), Monthly Contract, Services Subscribed, Monthly Charges, Churn\n1, 42, 24, Yes, Internet+Phone, 89.90, No\n2, 27, 3, No, Internet only, 45.50, Yes\n3, 35, 18, Yes, Full package, 120.30, No\n4, 51, 36, Yes, Internet+TV, 95.75, No\n5, 23, 1, No, Phone only, 25.10, Yes\n...\n\"\"\"\n\ntransformed_prompt = apply_dynamic_decorators(prompt)\n\n# Send to an LLM\nopenai.api_key = \"your-api-key-here\"\nresponse = openai.chat.completions.create(\n    model=\"gpt-4\",\n    messages=[{\"role\": \"user\", \"content\": transformed_prompt}],\n    temperature=0.7\n)\n</code></pre> <p>The resulting transformation applies multiple effects: 1. Adopts the persona of a data scientist 2. Provides comprehensive reasoning 3. Structures the response as numbered steps 4. Formats the output in markdown 5. Targets a technical audience</p>"},{"location":"tutorials/combining_decorators/#2-programmatic-chaining","title":"2. Programmatic Chaining","text":"<p>You can also chain decorators programmatically in your code:</p> <pre><code>from prompt_decorators import create_decorator_instance\n\n# Create individual decorator instances\npersona = create_decorator_instance(\"Persona\", role=\"teacher\")\nstep_by_step = create_decorator_instance(\"StepByStep\", numbered=True)\naudience = create_decorator_instance(\"Audience\", level=\"beginner\")\n\n# Original prompt\noriginal_prompt = \"Explain how photosynthesis works.\"\n\n# Apply decorators in sequence (order matters!)\ntransformed_prompt = persona(step_by_step(audience(original_prompt)))\n\n# The order is: audience -&gt; step_by_step -&gt; persona\n</code></pre> <p>When using programmatic chaining: - You have more control over the order of application - You can conditionally apply decorators based on runtime conditions - You can reuse decorator instances across multiple prompts</p>"},{"location":"tutorials/combining_decorators/#example-conditional-decorator-application","title":"Example: Conditional Decorator Application","text":"<p>Here's an example that applies decorators conditionally:</p> <pre><code>from prompt_decorators import create_decorator_instance\n\ndef generate_educational_content(topic, audience_level, include_steps=True, use_markdown=False):\n    \"\"\"Generate educational content with appropriate decorators.\"\"\"\n    prompt = f\"Explain {topic}.\"\n\n    # Start with audience adaptation\n    audience = create_decorator_instance(\"Audience\", level=audience_level)\n    prompt = audience(prompt)\n\n    # Add steps if requested\n    if include_steps:\n        step_by_step = create_decorator_instance(\"StepByStep\", numbered=True)\n        prompt = step_by_step(prompt)\n\n    # Add markdown formatting if requested\n    if use_markdown:\n        output_format = create_decorator_instance(\"OutputFormat\", format=\"markdown\")\n        prompt = output_format(prompt)\n\n    # Always add a suitable persona for educational content\n    if audience_level in [\"beginner\", \"intermediate\"]:\n        persona = create_decorator_instance(\"Persona\", role=\"teacher\")\n    else:\n        persona = create_decorator_instance(\"Persona\", role=\"professor\")\n\n    prompt = persona(prompt)\n\n    return prompt\n\n# Example usage\nbeginner_content = generate_educational_content(\n    \"photosynthesis\",\n    audience_level=\"beginner\",\n    include_steps=True\n)\n\nexpert_content = generate_educational_content(\n    \"quantum computing\",\n    audience_level=\"expert\",\n    include_steps=False,\n    use_markdown=True\n)\n</code></pre>"},{"location":"tutorials/combining_decorators/#3-composite-decorators","title":"3. Composite Decorators","text":"<p>For reusable combinations of decorators, you can create composite decorators that encapsulate multiple transformations:</p> <pre><code>from prompt_decorators import DecoratorDefinition, register_decorator\n\n# Define a composite decorator\ntechnical_tutorial = DecoratorDefinition(\n    name=\"TechnicalTutorial\",\n    description=\"Creates a technical tutorial with steps, reasoning, and technical details\",\n    category=\"Composite\",\n    parameters=[\n        {\n            \"name\": \"format\",\n            \"type\": \"enum\",\n            \"description\": \"Output format\",\n            \"enum\": [\"markdown\", \"plaintext\"],\n            \"default\": \"markdown\"\n        },\n        {\n            \"name\": \"examples\",\n            \"type\": \"boolean\",\n            \"description\": \"Include examples\",\n            \"default\": True\n        }\n    ],\n    transform_function=\"\"\"\n    // Create instances of the component decorators\n    const persona = createDecoratorInstance('Persona', { role: 'senior developer' });\n    const steps = createDecoratorInstance('StepByStep', { numbered: true });\n    const audience = createDecoratorInstance('Audience', { level: 'technical' });\n    const outputFormat = createDecoratorInstance('OutputFormat', { format: format });\n\n    // Apply conditional decorators\n    let result = persona(steps(audience(text)));\n    result = outputFormat(result);\n\n    // Add examples instruction if needed\n    if (examples) {\n        result = \"Please include practical code examples for each step.\\\\n\\\\n\" + result;\n    }\n\n    return result;\n    \"\"\"\n)\n\n# Register the composite decorator\nregister_decorator(technical_tutorial)\n\n# Use the composite decorator\nfrom prompt_decorators import create_decorator_instance\n\ntutorial = create_decorator_instance(\"TechnicalTutorial\", format=\"markdown\", examples=True)\ntransformed = tutorial(\"Explain how to implement a binary search algorithm.\")\n</code></pre> <p>When creating composite decorators: - You encapsulate complexity behind a simpler interface - You ensure consistent application of multiple decorators - You can provide parameters that control the internal decorators</p>"},{"location":"tutorials/combining_decorators/#example-educational-content-generator","title":"Example: Educational Content Generator","text":"<p>Here's a more advanced composite decorator for educational content:</p> <pre><code>from prompt_decorators import DecoratorDefinition, register_decorator, create_decorator_instance\n\neducational_content = DecoratorDefinition(\n    name=\"EducationalContent\",\n    description=\"Creates educational content with appropriate structure and style\",\n    category=\"Education\",\n    parameters=[\n        {\n            \"name\": \"level\",\n            \"type\": \"enum\",\n            \"description\": \"Target audience level\",\n            \"enum\": [\"elementary\", \"middle_school\", \"high_school\", \"undergraduate\", \"graduate\"],\n            \"default\": \"high_school\"\n        },\n        {\n            \"name\": \"structure\",\n            \"type\": \"enum\",\n            \"description\": \"Content structure\",\n            \"enum\": [\"steps\", \"outline\", \"narrative\", \"q_and_a\"],\n            \"default\": \"steps\"\n        },\n        {\n            \"name\": \"visuals\",\n            \"type\": \"boolean\",\n            \"description\": \"Include descriptions of visual aids\",\n            \"default\": True\n        },\n        {\n            \"name\": \"assessment\",\n            \"type\": \"boolean\",\n            \"description\": \"Include assessment questions\",\n            \"default\": False\n        }\n    ],\n    transform_function=\"\"\"\n    // Map education level to audience level\n    let audienceLevel = \"intermediate\";\n    if (level === \"elementary\" || level === \"middle_school\") {\n        audienceLevel = \"beginner\";\n    } else if (level === \"graduate\") {\n        audienceLevel = \"expert\";\n    }\n\n    // Map structure to appropriate decorator\n    let structureDecorator;\n    if (structure === \"steps\") {\n        structureDecorator = createDecoratorInstance('StepByStep', { numbered: true });\n    } else if (structure === \"outline\") {\n        structureDecorator = createDecoratorInstance('Outline', { depth: 3 });\n    } else if (structure === \"narrative\") {\n        structureDecorator = createDecoratorInstance('Narrative', { structure: 'classic' });\n    } else if (structure === \"q_and_a\") {\n        structureDecorator = createDecoratorInstance('QAndA');\n    }\n\n    // Create audience and persona decorators\n    const audience = createDecoratorInstance('Audience', { level: audienceLevel });\n\n    // Create appropriate persona based on level\n    let personaRole = \"teacher\";\n    if (level === \"undergraduate\" || level === \"graduate\") {\n        personaRole = \"professor\";\n    } else if (level === \"elementary\") {\n        personaRole = \"elementary teacher\";\n    }\n    const persona = createDecoratorInstance('Persona', { role: personaRole });\n\n    // Apply the basic transformations\n    let result = persona(structureDecorator(audience(text)));\n\n    // Add instructions for visuals if requested\n    if (visuals) {\n        result = \"Please include descriptions of appropriate visual aids or diagrams that would help explain the concepts.\\\\n\\\\n\" + result;\n    }\n\n    // Add assessment questions if requested\n    if (assessment) {\n        const assessmentDecorator = createDecoratorInstance('Assessment', { questionCount: 5, includeAnswers: true });\n        result = assessmentDecorator(result);\n    }\n\n    return result;\n    \"\"\"\n)\n\n# Register the composite decorator\nregister_decorator(educational_content)\n\n# Example usage\neducational = create_decorator_instance(\n    \"EducationalContent\",\n    level=\"high_school\",\n    structure=\"steps\",\n    visuals=True,\n    assessment=True\n)\n\nlesson = educational(\"Explain the process of cell division (mitosis).\")\n</code></pre>"},{"location":"tutorials/combining_decorators/#advanced-topics-handling-decorator-conflicts","title":"Advanced Topics: Handling Decorator Conflicts","text":"<p>When combining decorators, you may encounter conflicts. The framework handles conflicts by giving precedence to later decorators, but you can also explicitly manage them:</p>"},{"location":"tutorials/combining_decorators/#incompatible-decorators","title":"Incompatible Decorators","text":"<p>Some decorators are inherently incompatible:</p> <pre><code># These decorators have conflicting behaviors\nprompt = \"\"\"\n+++Concise(level=\"high\")\n+++Detailed(depth=\"comprehensive\")\nExplain quantum computing.\n\"\"\"\n</code></pre> <p>In this case, <code>Detailed</code> will win because it appears later. To manage this:</p> <ol> <li>Be aware of potential conflicts (see Compatibility)</li> <li>Order your decorators carefully, with higher priority decorators later in the sequence</li> <li>Consider using composite decorators that are designed to work together</li> </ol>"},{"location":"tutorials/combining_decorators/#parameter-conflicts","title":"Parameter Conflicts","text":"<p>Parameter conflicts can occur when decorators modify the same aspect:</p> <pre><code># Parameter conflict example\nprompt = \"\"\"\n+++OutputFormat(format=\"json\")\n+++OutputFormat(format=\"markdown\")\nProvide a list of popular programming languages.\n\"\"\"\n</code></pre> <p>Again, the later parameter (<code>format=\"markdown\"</code>) will override the earlier one.</p>"},{"location":"tutorials/combining_decorators/#real-world-example-research-paper-generator","title":"Real-World Example: Research Paper Generator","text":"<p>Let's build a comprehensive example that combines multiple decorators to generate research paper outlines:</p> <pre><code>from prompt_decorators import (\n    DecoratorDefinition,\n    register_decorator,\n    create_decorator_instance,\n    apply_dynamic_decorators\n)\nimport openai\n\n# Define a composite decorator for research papers\nresearch_paper = DecoratorDefinition(\n    name=\"ResearchPaper\",\n    description=\"Generates research paper content with appropriate academic structure and style\",\n    category=\"Academic\",\n    parameters=[\n        {\n            \"name\": \"field\",\n            \"type\": \"enum\",\n            \"description\": \"Academic field\",\n            \"enum\": [\"computer_science\", \"biology\", \"psychology\", \"physics\", \"economics\"],\n            \"default\": \"computer_science\"\n        },\n        {\n            \"name\": \"paper_section\",\n            \"type\": \"enum\",\n            \"description\": \"Which section of the paper to generate\",\n            \"enum\": [\"abstract\", \"introduction\", \"methodology\", \"results\", \"discussion\", \"conclusion\", \"outline\"],\n            \"default\": \"outline\"\n        },\n        {\n            \"name\": \"citation_style\",\n            \"type\": \"enum\",\n            \"description\": \"Citation style\",\n            \"enum\": [\"APA\", \"MLA\", \"Chicago\", \"IEEE\", \"Harvard\"],\n            \"default\": \"APA\"\n        },\n        {\n            \"name\": \"include_citations\",\n            \"type\": \"boolean\",\n            \"description\": \"Whether to include citations\",\n            \"default\": True\n        }\n    ],\n    transform_function=\"\"\"\n    // Map field to persona role\n    const fieldMap = {\n        computer_science: \"computer scientist\",\n        biology: \"biologist\",\n        psychology: \"psychologist\",\n        physics: \"physicist\",\n        economics: \"economist\"\n    };\n    const role = fieldMap[field] || \"researcher\";\n\n    // Basic decorators\n    const persona = createDecoratorInstance('Persona', { role: role });\n    const academic = createDecoratorInstance('Academic', { style: 'scientific' });\n    const outputFormat = createDecoratorInstance('OutputFormat', { format: 'markdown' });\n\n    // Section-specific decorators\n    let sectionDecorator;\n    let instruction = \"\";\n\n    if (paper_section === \"abstract\") {\n        sectionDecorator = createDecoratorInstance('Concise', { level: 'high' });\n        instruction = \"Please write an abstract for a research paper on the following topic. \" +\n            \"Keep it between 150-250 words and focus on the research question, methodology, \" +\n            \"key findings, and implications.\\\\n\\\\n\";\n    } else if (paper_section === \"introduction\") {\n        sectionDecorator = createDecoratorInstance('FirstPrinciples', { depth: 3 });\n        instruction = \"Please write an introduction section for a research paper on the following topic. \" +\n            \"Include background information, the research gap being addressed, the research question, \" +\n            \"and the significance of the study.\\\\n\\\\n\";\n    } else if (paper_section === \"methodology\") {\n        sectionDecorator = createDecoratorInstance('StepByStep', { numbered: true });\n        instruction = \"Please write a methodology section for a research paper on the following topic. \" +\n            \"Detail the research design, participants/data sources, procedures, measures, and analysis methods.\\\\n\\\\n\";\n    } else if (paper_section === \"results\") {\n        sectionDecorator = createDecoratorInstance('Detailed', { depth: 'comprehensive' });\n        instruction = \"Please write a results section for a research paper on the following topic. \" +\n            \"Present the findings without interpretation, using appropriate organizational structure.\\\\n\\\\n\";\n    } else if (paper_section === \"discussion\") {\n        sectionDecorator = createDecoratorInstance('Reasoning', { depth: 'comprehensive' });\n        instruction = \"Please write a discussion section for a research paper on the following topic. \" +\n            \"Interpret the results, relate them to prior work, address limitations, and suggest future directions.\\\\n\\\\n\";\n    } else if (paper_section === \"conclusion\") {\n        sectionDecorator = createDecoratorInstance('Concise', { level: 'moderate' });\n        instruction = \"Please write a conclusion section for a research paper on the following topic. \" +\n            \"Summarize the main findings and their implications without introducing new information.\\\\n\\\\n\";\n    } else {\n        // Default: outline\n        sectionDecorator = createDecoratorInstance('Outline', { depth: 3 });\n        instruction = \"Please create a detailed outline for a research paper on the following topic. \" +\n            \"Include all major sections and subsections with brief descriptions of their content.\\\\n\\\\n\";\n    }\n\n    // Citation decorator if requested\n    let citationDecorator = null;\n    if (include_citations) {\n        citationDecorator = createDecoratorInstance('CiteSources', { style: citation_style });\n    }\n\n    // Apply transformations in sequence\n    let result = instruction + text;\n    result = academic(result);\n    result = sectionDecorator(result);\n    if (citationDecorator) {\n        result = citationDecorator(result);\n    }\n    result = persona(result);\n    result = outputFormat(result);\n\n    return result;\n    \"\"\"\n)\n\n# Register the decorator\nregister_decorator(research_paper)\n\n# Create a research paper outline\nresearch = create_decorator_instance(\n    \"ResearchPaper\",\n    field=\"computer_science\",\n    paper_section=\"outline\",\n    citation_style=\"IEEE\",\n    include_citations=True\n)\n\ntopic = \"The impact of transformer architectures on natural language processing tasks\"\npaper_outline = research(topic)\n\n# Send to an LLM\nopenai.api_key = \"your-api-key-here\"\nresponse = openai.chat.completions.create(\n    model=\"gpt-4\",\n    messages=[{\"role\": \"user\", \"content\": paper_outline}],\n    temperature=0.7\n)\n\nprint(response.choices[0].message.content)\n</code></pre>"},{"location":"tutorials/combining_decorators/#best-practices-for-combining-decorators","title":"Best Practices for Combining Decorators","text":"<p>When combining decorators, follow these best practices:</p> <ol> <li>Consider Order Carefully: The sequence of decorators affects the final result</li> <li>Minimize Conflicts: Avoid combining inherently contradictory decorators</li> <li>Create Composites for Common Patterns: If you frequently use a specific combination, create a composite decorator</li> <li>Test Thoroughly: Different LLMs may handle combinations differently</li> <li>Watch Token Limits: Multiple decorators increase instruction length, which counts against token limits</li> <li>Document Combinations: Keep track of effective decorator combinations for different tasks</li> </ol>"},{"location":"tutorials/combining_decorators/#next-steps","title":"Next Steps","text":"<p>Now that you've learned how to combine decorators, you can:</p> <ol> <li>Explore extension development to create decorator packages</li> <li>Dive into advanced techniques like conditional decorator application</li> <li>Create domain-specific composite decorators for your use case</li> <li>Experiment with the MCP integration to use decorator combinations with Claude Desktop</li> </ol>"},{"location":"tutorials/creating_custom_decorator/","title":"Tutorial: Creating a Custom Decorator","text":"<p>This tutorial will guide you through the process of creating a custom decorator with the Prompt Decorators framework. We'll create a practical, reusable decorator that you can adapt for your own use cases.</p>"},{"location":"tutorials/creating_custom_decorator/#prerequisites","title":"Prerequisites","text":"<p>Before starting this tutorial, ensure you have:</p> <ol> <li>Installed the Prompt Decorators package (<code>pip install prompt-decorators</code>)</li> <li>Basic understanding of Python</li> <li>Familiarity with the core concepts of the framework</li> </ol>"},{"location":"tutorials/creating_custom_decorator/#what-well-build","title":"What We'll Build","text":"<p>We'll create a <code>CodeReview</code> decorator that transforms a prompt into instructions for conducting a code review of the provided code. This is useful for:</p> <ul> <li>Getting more consistent code reviews from LLMs</li> <li>Focusing the LLM on specific aspects of the code</li> <li>Ensuring best practices are checked</li> </ul>"},{"location":"tutorials/creating_custom_decorator/#step-1-import-the-required-modules","title":"Step 1: Import the Required Modules","text":"<p>First, let's import the necessary components:</p> <pre><code>from prompt_decorators import (\n    DecoratorDefinition,\n    register_decorator,\n    create_decorator_instance,\n    apply_dynamic_decorators\n)\n</code></pre>"},{"location":"tutorials/creating_custom_decorator/#step-2-define-the-decorator","title":"Step 2: Define the Decorator","text":"<p>Now, we'll define our <code>CodeReview</code> decorator:</p> <pre><code>code_review_decorator = DecoratorDefinition(\n    name=\"CodeReview\",\n    description=\"Transforms a prompt into instructions for conducting a code review\",\n    category=\"Development\",\n    parameters=[\n        {\n            \"name\": \"focus\",\n            \"type\": \"enum\",\n            \"description\": \"What aspects to focus on in the review\",\n            \"enum\": [\"security\", \"performance\", \"readability\", \"all\"],\n            \"default\": \"all\"\n        },\n        {\n            \"name\": \"severity\",\n            \"type\": \"enum\",\n            \"description\": \"Whether to include only issues of specific severity\",\n            \"enum\": [\"critical\", \"major\", \"all\"],\n            \"default\": \"all\"\n        },\n        {\n            \"name\": \"suggest_fixes\",\n            \"type\": \"boolean\",\n            \"description\": \"Whether to suggest specific fixes for issues\",\n            \"default\": True\n        }\n    ],\n    transform_function=\"\"\"\n    let instruction = \"Please perform a code review on the following code. \";\n\n    // Add focus-specific instructions\n    if (focus === \"security\") {\n        instruction += \"Focus primarily on security issues such as injection vulnerabilities, \" +\n            \"authentication problems, data exposure, and other security concerns. \";\n    } else if (focus === \"performance\") {\n        instruction += \"Focus primarily on performance issues such as inefficient algorithms, \" +\n            \"resource leaks, unnecessary operations, and optimization opportunities. \";\n    } else if (focus === \"readability\") {\n        instruction += \"Focus primarily on code readability including naming conventions, \" +\n            \"documentation, code organization, and adherence to style guidelines. \";\n    } else {\n        instruction += \"Evaluate all aspects including security, performance, readability, \" +\n            \"maintainability, and adherence to best practices. \";\n    }\n\n    // Add severity-specific instructions\n    if (severity === \"critical\") {\n        instruction += \"Only highlight critical issues that could lead to serious vulnerabilities or failures. \";\n    } else if (severity === \"major\") {\n        instruction += \"Focus on major and critical issues, ignoring minor stylistic concerns. \";\n    } else {\n        instruction += \"Include issues of all severity levels, from critical to minor. \";\n    }\n\n    // Add fix suggestion instructions\n    if (suggest_fixes) {\n        instruction += \"For each issue identified, suggest a specific fix with example code. \";\n    } else {\n        instruction += \"Identify issues without providing specific fix implementations. \";\n    }\n\n    // Formatting instructions\n    instruction += \"Format your review as follows:\\\\n\" +\n        \"1. Summary of the code and its purpose (based on the code itself)\\\\n\" +\n        \"2. Overall assessment\\\\n\" +\n        \"3. Issues identified (with severity level for each)\";\n\n    if (suggest_fixes) {\n        instruction += \"\\\\n4. Suggested fixes with code examples\";\n    }\n\n    instruction += \"\\\\n\\\\nHere's the code to review:\\\\n\\\\n\";\n\n    return instruction + text;\n    \"\"\"\n)\n</code></pre>"},{"location":"tutorials/creating_custom_decorator/#step-3-register-the-decorator","title":"Step 3: Register the Decorator","text":"<p>Next, register the decorator to make it available:</p> <pre><code>register_decorator(code_review_decorator)\n</code></pre>"},{"location":"tutorials/creating_custom_decorator/#step-4-test-the-decorator","title":"Step 4: Test the Decorator","text":"<p>Now let's test our decorator with a simple code snippet:</p> <pre><code># Sample code for review\ncode_to_review = \"\"\"\ndef calculate_discount(price, discount_percent):\n    # Calculate discounted price\n    discounted = price * (1 - discount_percent / 100)\n    return discounted\n\n# Apply discount to all products\nproduct_prices = [100, 200, 300, -50, 500]\ndiscounted_prices = []\nfor price in product_prices:\n    new_price = calculate_discount(price, 10)\n    discounted_prices.append(new_price)\nprint(\"Discounted prices:\", discounted_prices)\n\"\"\"\n\n# Test the decorator programmatically\ncode_review = create_decorator_instance(\"CodeReview\", focus=\"security\", severity=\"all\", suggest_fixes=True)\ntransformed_prompt = code_review(code_to_review)\n\nprint(\"Transformed Prompt:\")\nprint(\"-\" * 80)\nprint(transformed_prompt)\nprint(\"-\" * 80)\n</code></pre>"},{"location":"tutorials/creating_custom_decorator/#step-5-test-with-an-llm","title":"Step 5: Test with an LLM","text":"<p>Finally, let's send our decorated prompt to an LLM (this example uses OpenAI, but you can use any provider):</p> <pre><code>import openai\n\nopenai.api_key = \"your-api-key-here\"\n\nresponse = openai.chat.completions.create(\n    model=\"gpt-4\",\n    messages=[\n        {\"role\": \"system\", \"content\": \"You are an expert code reviewer with years of experience.\"},\n        {\"role\": \"user\", \"content\": transformed_prompt}\n    ],\n    temperature=0.7,\n    max_tokens=1500\n)\n\nprint(\"\\nLLM Response:\")\nprint(\"-\" * 80)\nprint(response.choices[0].message.content)\n</code></pre>"},{"location":"tutorials/creating_custom_decorator/#complete-example","title":"Complete Example","text":"<p>Here's the complete example that you can run:</p> <pre><code>from prompt_decorators import (\n    DecoratorDefinition,\n    register_decorator,\n    create_decorator_instance,\n    apply_dynamic_decorators\n)\nimport openai\n\n# Define the CodeReview decorator\ncode_review_decorator = DecoratorDefinition(\n    name=\"CodeReview\",\n    description=\"Transforms a prompt into instructions for conducting a code review\",\n    category=\"Development\",\n    parameters=[\n        {\n            \"name\": \"focus\",\n            \"type\": \"enum\",\n            \"description\": \"What aspects to focus on in the review\",\n            \"enum\": [\"security\", \"performance\", \"readability\", \"all\"],\n            \"default\": \"all\"\n        },\n        {\n            \"name\": \"severity\",\n            \"type\": \"enum\",\n            \"description\": \"Whether to include only issues of specific severity\",\n            \"enum\": [\"critical\", \"major\", \"all\"],\n            \"default\": \"all\"\n        },\n        {\n            \"name\": \"suggest_fixes\",\n            \"type\": \"boolean\",\n            \"description\": \"Whether to suggest specific fixes for issues\",\n            \"default\": True\n        }\n    ],\n    transform_function=\"\"\"\n    let instruction = \"Please perform a code review on the following code. \";\n\n    // Add focus-specific instructions\n    if (focus === \"security\") {\n        instruction += \"Focus primarily on security issues such as injection vulnerabilities, \" +\n            \"authentication problems, data exposure, and other security concerns. \";\n    } else if (focus === \"performance\") {\n        instruction += \"Focus primarily on performance issues such as inefficient algorithms, \" +\n            \"resource leaks, unnecessary operations, and optimization opportunities. \";\n    } else if (focus === \"readability\") {\n        instruction += \"Focus primarily on code readability including naming conventions, \" +\n            \"documentation, code organization, and adherence to style guidelines. \";\n    } else {\n        instruction += \"Evaluate all aspects including security, performance, readability, \" +\n            \"maintainability, and adherence to best practices. \";\n    }\n\n    // Add severity-specific instructions\n    if (severity === \"critical\") {\n        instruction += \"Only highlight critical issues that could lead to serious vulnerabilities or failures. \";\n    } else if (severity === \"major\") {\n        instruction += \"Focus on major and critical issues, ignoring minor stylistic concerns. \";\n    } else {\n        instruction += \"Include issues of all severity levels, from critical to minor. \";\n    }\n\n    // Add fix suggestion instructions\n    if (suggest_fixes) {\n        instruction += \"For each issue identified, suggest a specific fix with example code. \";\n    } else {\n        instruction += \"Identify issues without providing specific fix implementations. \";\n    }\n\n    // Formatting instructions\n    instruction += \"Format your review as follows:\\\\n\" +\n        \"1. Summary of the code and its purpose (based on the code itself)\\\\n\" +\n        \"2. Overall assessment\\\\n\" +\n        \"3. Issues identified (with severity level for each)\";\n\n    if (suggest_fixes) {\n        instruction += \"\\\\n4. Suggested fixes with code examples\";\n    }\n\n    instruction += \"\\\\n\\\\nHere's the code to review:\\\\n\\\\n\";\n\n    return instruction + text;\n    \"\"\"\n)\n\n# Register the decorator\nregister_decorator(code_review_decorator)\n\n# Sample code for review\ncode_to_review = \"\"\"\ndef calculate_discount(price, discount_percent):\n    # Calculate discounted price\n    discounted = price * (1 - discount_percent / 100)\n    return discounted\n\n# Apply discount to all products\nproduct_prices = [100, 200, 300, -50, 500]\ndiscounted_prices = []\nfor price in product_prices:\n    new_price = calculate_discount(price, 10)\n    discounted_prices.append(new_price)\nprint(\"Discounted prices:\", discounted_prices)\n\"\"\"\n\n# Test inline decorator syntax\ninline_prompt = f\"\"\"\n+++CodeReview(focus=security, severity=all, suggest_fixes=true)\n{code_to_review}\n\"\"\"\n\ntransformed_prompt = apply_dynamic_decorators(inline_prompt)\n\n# Send to OpenAI (replace with your API key)\nopenai.api_key = \"your-api-key-here\"\n\nresponse = openai.chat.completions.create(\n    model=\"gpt-4\",\n    messages=[\n        {\"role\": \"system\", \"content\": \"You are an expert code reviewer with years of experience.\"},\n        {\"role\": \"user\", \"content\": transformed_prompt}\n    ],\n    temperature=0.7,\n    max_tokens=1500\n)\n\nprint(\"LLM Response:\")\nprint(\"-\" * 80)\nprint(response.choices[0].message.content)\n</code></pre>"},{"location":"tutorials/creating_custom_decorator/#variations-and-extensions","title":"Variations and Extensions","text":"<p>Here are some ways you can modify and extend this decorator:</p>"},{"location":"tutorials/creating_custom_decorator/#add-language-specific-reviews","title":"Add Language-Specific Reviews","text":"<p>Extend the decorator to handle different programming languages:</p> <pre><code>code_review_decorator = DecoratorDefinition(\n    name=\"CodeReview\",\n    description=\"Transforms a prompt into instructions for conducting a code review\",\n    category=\"Development\",\n    parameters=[\n        # ... other parameters ...\n        {\n            \"name\": \"language\",\n            \"type\": \"enum\",\n            \"description\": \"Programming language of the code\",\n            \"enum\": [\"python\", \"javascript\", \"java\", \"csharp\", \"go\", \"auto\"],\n            \"default\": \"auto\"\n        }\n    ],\n    transform_function=\"\"\"\n    let instruction = \"Please perform a code review on the following code. \";\n\n    // Language-specific instructions\n    if (language !== \"auto\") {\n        instruction += `This is ${language} code. Apply best practices specific to ${language}. `;\n    } else {\n        instruction += \"Determine the language from the code and apply appropriate best practices. \";\n    }\n\n    // ... rest of the transformation function ...\n    \"\"\"\n)\n</code></pre>"},{"location":"tutorials/creating_custom_decorator/#add-team-standards","title":"Add Team Standards","text":"<p>Customize the decorator for your team's specific standards:</p> <pre><code>code_review_decorator = DecoratorDefinition(\n    name=\"TeamCodeReview\",\n    description=\"Transforms a prompt into instructions for conducting a code review using team standards\",\n    category=\"Development\",\n    parameters=[\n        # ... other parameters ...\n        {\n            \"name\": \"team_standards\",\n            \"type\": \"enum\",\n            \"description\": \"Which team's standards to apply\",\n            \"enum\": [\"backend\", \"frontend\", \"data\", \"devops\"],\n            \"default\": \"backend\"\n        }\n    ],\n    transform_function=\"\"\"\n    let instruction = \"Please perform a code review on the following code. \";\n\n    // Add team-specific standards\n    if (team_standards === \"backend\") {\n        instruction += \"Apply our backend team standards: \" +\n            \"1. All functions must have type annotations. \" +\n            \"2. Use meaningful variable names. \" +\n            \"3. Functions should do one thing well. \" +\n            \"4. Include error handling for all external calls. \";\n    } else if (team_standards === \"frontend\") {\n        instruction += \"Apply our frontend team standards: \" +\n            \"1. Components should be reusable. \" +\n            \"2. Use consistent naming conventions. \" +\n            \"3. Ensure accessibility compliance. \" +\n            \"4. Avoid direct DOM manipulation. \";\n    }\n    // ... other team standards ...\n\n    // ... rest of the transformation function ...\n    \"\"\"\n)\n</code></pre>"},{"location":"tutorials/creating_custom_decorator/#best-practices","title":"Best Practices","text":"<p>When creating your decorators, keep these best practices in mind:</p> <ol> <li>Keep Transforms Focused: Each decorator should do one thing well</li> <li>Provide Good Defaults: Make your decorators usable without requiring parameters</li> <li>Document Thoroughly: Include clear descriptions for your decorator and its parameters</li> <li>Handle Edge Cases: Consider how your decorator behaves with unusual inputs</li> <li>Test with Multiple Models: Different LLMs may respond differently to the same instructions</li> </ol>"},{"location":"tutorials/creating_custom_decorator/#next-steps","title":"Next Steps","text":"<p>Now that you've created your first custom decorator, you can:</p> <ol> <li>Combine decorators for more complex behaviors</li> <li>Develop domain-specific decorator packages</li> <li>Share your decorator with the community</li> <li>Explore the MCP integration to use your decorators with Claude Desktop</li> </ol>"},{"location":"tutorials/extension_development/","title":"Tutorial: Extension Development","text":"<p>This tutorial will guide you through the process of developing extensions for the Prompt Decorators framework, specifically focusing on creating packages of domain-specific decorators. By the end, you'll know how to design, implement, and distribute your own decorator packages.</p>"},{"location":"tutorials/extension_development/#prerequisites","title":"Prerequisites","text":"<p>Before starting this tutorial, ensure you have:</p> <ol> <li>Installed the Prompt Decorators package (<code>pip install prompt-decorators</code>)</li> <li>Completed the Creating Custom Decorators tutorial</li> <li>Completed the Combining Decorators tutorial</li> <li>Basic understanding of Python package development</li> </ol>"},{"location":"tutorials/extension_development/#what-are-decorator-extensions","title":"What are Decorator Extensions?","text":"<p>Decorator extensions are collections of related decorators packaged together for a specific domain or purpose. They extend the functionality of the core framework by providing specialized decorators for particular use cases. Examples include:</p> <ul> <li>Data Science: Decorators for data analysis, visualization, and machine learning tasks</li> <li>Medical: Decorators for clinical reports, medical terminology, and research</li> <li>Legal: Decorators for legal document drafting, case analysis, and contract review</li> <li>Education: Decorators for lesson planning, educational content, and assessments</li> </ul>"},{"location":"tutorials/extension_development/#why-create-extensions","title":"Why Create Extensions?","text":"<p>Creating decorator extensions offers several benefits:</p> <ul> <li>Reusability: Package common decorators for easy reuse</li> <li>Domain Specialization: Create decorators tailored to specific fields</li> <li>Distribution: Share your decorators with the community</li> <li>Standardization: Establish consistent prompt engineering practices</li> <li>Compatibility: Ensure decorators work well together</li> </ul>"},{"location":"tutorials/extension_development/#extension-development-workflow","title":"Extension Development Workflow","text":"<p>The general workflow for developing a decorator extension is:</p> <ol> <li>Plan: Define the scope and purpose of your extension</li> <li>Design: Design the individual decorators and their interactions</li> <li>Implement: Create and test the decorators</li> <li>Package: Structure your code as a Python package</li> <li>Document: Create comprehensive documentation</li> <li>Distribute: Publish your extension</li> </ol> <p>Let's walk through each step with a concrete example.</p>"},{"location":"tutorials/extension_development/#example-developing-a-data-science-extension","title":"Example: Developing a Data Science Extension","text":"<p>For this tutorial, we'll create a \"Data Science Decorator Extension\" that includes specialized decorators for data analysis tasks.</p>"},{"location":"tutorials/extension_development/#step-1-planning-your-extension","title":"Step 1: Planning Your Extension","text":"<p>First, define the scope and purpose:</p> <ul> <li>Name: <code>prompt-decorators-datascience</code></li> <li>Purpose: Enhance LLM prompts for data science workflows</li> <li>Target Users: Data scientists, analysts, and ML engineers</li> <li>Core Functionality: Data analysis, visualization, model training, and interpretation</li> </ul> <p>Next, outline the decorators you want to include:</p> <ol> <li><code>DataAnalysis</code>: For exploratory data analysis</li> <li><code>DataVisualization</code>: For creating visualization specifications</li> <li><code>ModelEvaluation</code>: For evaluating ML model performance</li> <li><code>StatisticalSummary</code>: For statistical analysis of data</li> <li><code>DataCleaning</code>: For data preprocessing suggestions</li> </ol>"},{"location":"tutorials/extension_development/#step-2-setting-up-your-project","title":"Step 2: Setting Up Your Project","text":"<p>Create a project directory structure:</p> <pre><code>mkdir prompt-decorators-datascience\ncd prompt-decorators-datascience\n\n# Create basic package structure\nmkdir -p prompt_decorators_datascience/decorators\ntouch prompt_decorators_datascience/__init__.py\ntouch prompt_decorators_datascience/decorators/__init__.py\ntouch setup.py\ntouch README.md\ntouch LICENSE\n</code></pre> <p>Set up your <code>setup.py</code>:</p> <pre><code>from setuptools import setup, find_packages\n\nsetup(\n    name=\"prompt-decorators-datascience\",\n    version=\"0.1.0\",\n    description=\"Data Science decorators for the Prompt Decorators framework\",\n    author=\"Your Name\",\n    author_email=\"your.email@example.com\",\n    packages=find_packages(),\n    install_requires=[\n        \"prompt-decorators&gt;=0.3.0\",\n    ],\n    classifiers=[\n        \"Development Status :: 3 - Alpha\",\n        \"Intended Audience :: Developers\",\n        \"Intended Audience :: Science/Research\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.11\",\n    ],\n    keywords=\"prompt engineering, llm, ai, decorators, data science\",\n    python_requires=\"&gt;=3.11\",\n)\n</code></pre>"},{"location":"tutorials/extension_development/#step-3-implementing-decorators","title":"Step 3: Implementing Decorators","text":"<p>Create a module for each decorator or group of related decorators. Let's implement the <code>DataAnalysis</code> decorator first.</p> <p>Create a file <code>prompt_decorators_datascience/decorators/analysis.py</code>:</p> <pre><code>from prompt_decorators import DecoratorDefinition\n\ndata_analysis_decorator = DecoratorDefinition(\n    name=\"DataAnalysis\",\n    description=\"Directs LLM to perform exploratory data analysis on provided data\",\n    category=\"DataScience\",\n    parameters=[\n        {\n            \"name\": \"depth\",\n            \"type\": \"enum\",\n            \"description\": \"Depth of analysis\",\n            \"enum\": [\"basic\", \"moderate\", \"comprehensive\"],\n            \"default\": \"moderate\"\n        },\n        {\n            \"name\": \"focus\",\n            \"type\": \"enum\",\n            \"description\": \"Primary focus of the analysis\",\n            \"enum\": [\"patterns\", \"outliers\", \"correlations\", \"distributions\", \"all\"],\n            \"default\": \"all\"\n        },\n        {\n            \"name\": \"include_visualizations\",\n            \"type\": \"boolean\",\n            \"description\": \"Whether to include visualization recommendations\",\n            \"default\": True\n        }\n    ],\n    transform_function=\"\"\"\n    let instruction = \"Please perform exploratory data analysis on the following data. \";\n\n    // Add depth-specific instructions\n    if (depth === \"basic\") {\n        instruction += \"Focus on the most important high-level insights and summary statistics. \";\n    } else if (depth === \"moderate\") {\n        instruction += \"Provide a balanced analysis with key statistics, trends, and notable patterns. \";\n    } else if (depth === \"comprehensive\") {\n        instruction += \"Conduct a thorough analysis exploring all aspects of the data including distributions, \" +\n            \"relationships, patterns, outliers, and potential issues. \";\n    }\n\n    // Add focus-specific instructions\n    if (focus === \"patterns\") {\n        instruction += \"Focus primarily on identifying patterns and trends in the data. \";\n    } else if (focus === \"outliers\") {\n        instruction += \"Pay special attention to outliers and anomalies in the data. \";\n    } else if (focus === \"correlations\") {\n        instruction += \"Emphasize relationships and correlations between variables. \";\n    } else if (focus === \"distributions\") {\n        instruction += \"Focus on the distributions of variables and their statistical properties. \";\n    } else {\n        instruction += \"Cover all aspects including patterns, outliers, correlations, and distributions. \";\n    }\n\n    // Add visualization instructions\n    if (include_visualizations) {\n        instruction += \"For each insight, recommend appropriate visualizations (with code examples if applicable). \";\n    }\n\n    // Add structure instructions\n    instruction += \"Structure your analysis as follows:\\\\n\" +\n        \"1. Data Overview: Summarize the dataset structure\\\\n\" +\n        \"2. Summary Statistics: Provide key statistical measures\\\\n\" +\n        \"3. Key Insights: Highlight the most important findings\";\n\n    if (focus !== \"all\") {\n        instruction += \"\\\\n4. Detailed Analysis: \" + focus.charAt(0).toUpperCase() + focus.slice(1);\n    } else {\n        instruction += \"\\\\n4. Detailed Analysis: Patterns, outliers, correlations, and distributions\";\n    }\n\n    if (include_visualizations) {\n        instruction += \"\\\\n5. Visualization Recommendations: Suggest appropriate charts with explanations\";\n    }\n\n    instruction += \"\\\\n6. Next Steps: Suggest further analyses or actions based on the findings\";\n\n    instruction += \"\\\\n\\\\nHere's the data to analyze:\\\\n\\\\n\";\n\n    return instruction + text;\n    \"\"\"\n)\n</code></pre> <p>Now create the <code>DataVisualization</code> decorator in <code>prompt_decorators_datascience/decorators/visualization.py</code>:</p> <pre><code>from prompt_decorators import DecoratorDefinition\n\ndata_visualization_decorator = DecoratorDefinition(\n    name=\"DataVisualization\",\n    description=\"Directs LLM to provide visualization recommendations and code for data\",\n    category=\"DataScience\",\n    parameters=[\n        {\n            \"name\": \"library\",\n            \"type\": \"enum\",\n            \"description\": \"Visualization library to use\",\n            \"enum\": [\"matplotlib\", \"seaborn\", \"plotly\", \"altair\", \"any\"],\n            \"default\": \"any\"\n        },\n        {\n            \"name\": \"chart_types\",\n            \"type\": \"string\",\n            \"description\": \"Comma-separated list of chart types to include\",\n            \"default\": \"all\"\n        },\n        {\n            \"name\": \"include_code\",\n            \"type\": \"boolean\",\n            \"description\": \"Whether to include code examples\",\n            \"default\": True\n        }\n    ],\n    transform_function=\"\"\"\n    let instruction = \"Please recommend visualizations for the following data. \";\n\n    // Add library-specific instructions\n    if (library !== \"any\") {\n        instruction += `Use the ${library} library for all visualizations. `;\n    } else {\n        instruction += \"Use the most appropriate visualization library for each chart type. \";\n    }\n\n    // Add chart type instructions\n    if (chart_types !== \"all\") {\n        const chartList = chart_types.split(\",\").map(t =&gt; t.trim());\n        instruction += `Focus on the following chart types: ${chartList.join(\", \")}. `;\n    } else {\n        instruction += \"Recommend a diverse set of chart types appropriate for the data. \";\n    }\n\n    // Add code instructions\n    if (include_code) {\n        instruction += \"For each visualization, provide Python code that would create the chart. Ensure the code is correct, complete, and ready to run. \";\n    } else {\n        instruction += \"Describe each visualization clearly but do not include code examples. \";\n    }\n\n    // Add structure instructions\n    instruction += \"Structure your response as follows:\\\\n\" +\n        \"1. Data Overview: Brief summary of the data\\\\n\" +\n        \"2. Visualization Recommendations: For each visualization include:\\\\n\" +\n        \"   a. Purpose: What insight this visualization will provide\\\\n\" +\n        \"   b. Chart Type: The specific type of chart recommended\\\\n\" +\n        \"   c. Variables: Which data variables should be included\";\n\n    if (include_code) {\n        instruction += \"\\\\n   d. Code: Python code to generate this visualization\";\n    }\n\n    instruction += \"\\\\n3. Dashboard Suggestion: How these visualizations could be combined into a dashboard\\\\n\";\n\n    instruction += \"\\\\nHere's the data to visualize:\\\\n\\\\n\";\n\n    return instruction + text;\n    \"\"\"\n)\n</code></pre> <p>Repeat this process for the other decorators in your extension.</p>"},{"location":"tutorials/extension_development/#step-4-registering-decorators","title":"Step 4: Registering Decorators","text":"<p>In your package's <code>__init__.py</code>, import and register all your decorators:</p> <pre><code>\"\"\"\nPrompt Decorators - Data Science Extension\n\nA collection of prompt decorators for data science workflows.\n\"\"\"\n\nfrom prompt_decorators import register_decorator\n\n# Import decorators\nfrom .decorators.analysis import data_analysis_decorator\nfrom .decorators.visualization import data_visualization_decorator\n# Import other decorators...\n\n# Register all decorators\ndef register_all_decorators():\n    \"\"\"Register all decorators from this extension.\"\"\"\n    register_decorator(data_analysis_decorator)\n    register_decorator(data_visualization_decorator)\n    # Register other decorators...\n\n# Auto-register when the package is imported\nregister_all_decorators()\n\n# Export public API\n__all__ = [\n    \"data_analysis_decorator\",\n    \"data_visualization_decorator\",\n    # Add other decorators...\n]\n</code></pre> <p>In your decorators' <code>__init__.py</code>, export the decorators:</p> <pre><code>\"\"\"Data science decorators.\"\"\"\n\nfrom .analysis import data_analysis_decorator\nfrom .visualization import data_visualization_decorator\n# Import other decorators...\n\n__all__ = [\n    \"data_analysis_decorator\",\n    \"data_visualization_decorator\",\n    # Add other decorators...\n]\n</code></pre>"},{"location":"tutorials/extension_development/#step-5-creating-composite-decorators","title":"Step 5: Creating Composite Decorators","text":"<p>You can also create composite decorators that combine multiple data science decorators for common workflows:</p> <pre><code>from prompt_decorators import DecoratorDefinition\n\ndata_science_workflow_decorator = DecoratorDefinition(\n    name=\"DataScienceWorkflow\",\n    description=\"Comprehensive data science workflow combining analysis, visualization, and insights\",\n    category=\"DataScience\",\n    parameters=[\n        {\n            \"name\": \"workflow_stage\",\n            \"type\": \"enum\",\n            \"description\": \"Stage of the data science workflow\",\n            \"enum\": [\"exploration\", \"preprocessing\", \"modeling\", \"evaluation\", \"full\"],\n            \"default\": \"full\"\n        },\n        {\n            \"name\": \"detail_level\",\n            \"type\": \"enum\",\n            \"description\": \"Level of detail in the response\",\n            \"enum\": [\"brief\", \"standard\", \"detailed\"],\n            \"default\": \"standard\"\n        }\n    ],\n    transform_function=\"\"\"\n    // Import our component decorators from this extension\n    const dataAnalysis = createDecoratorInstance('DataAnalysis', {\n        depth: detail_level === \"brief\" ? \"basic\" : detail_level === \"detailed\" ? \"comprehensive\" : \"moderate\",\n        include_visualizations: true\n    });\n\n    const dataViz = createDecoratorInstance('DataVisualization', {\n        include_code: true\n    });\n\n    // Add standard decorators\n    const outputFormat = createDecoratorInstance('OutputFormat', { format: 'markdown' });\n    const reasoning = createDecoratorInstance('Reasoning', {\n        depth: detail_level === \"brief\" ? \"basic\" : detail_level === \"detailed\" ? \"comprehensive\" : \"moderate\"\n    });\n\n    let result = text;\n\n    // Apply different decorators based on workflow stage\n    if (workflow_stage === \"exploration\" || workflow_stage === \"full\") {\n        result = dataAnalysis(result);\n    }\n\n    if (workflow_stage === \"preprocessing\") {\n        // Use a hypothetical DataCleaning decorator\n        const dataCleaning = createDecoratorInstance('DataCleaning');\n        result = dataCleaning(result);\n    }\n\n    if ((workflow_stage === \"exploration\" || workflow_stage === \"full\") &amp;&amp; detail_level !== \"brief\") {\n        result = dataViz(result);\n    }\n\n    if (workflow_stage === \"modeling\" || workflow_stage === \"full\") {\n        // Use a hypothetical ModelSelection decorator\n        const modelSelection = createDecoratorInstance('ModelSelection');\n        result = modelSelection(result);\n    }\n\n    if (workflow_stage === \"evaluation\" || workflow_stage === \"full\") {\n        // Use a hypothetical ModelEvaluation decorator\n        const modelEvaluation = createDecoratorInstance('ModelEvaluation');\n        result = modelEvaluation(result);\n    }\n\n    // Always apply these decorators\n    result = reasoning(result);\n    result = outputFormat(result);\n\n    return result;\n    \"\"\"\n)\n</code></pre> <p>Add this to your extension and register it along with the other decorators.</p>"},{"location":"tutorials/extension_development/#step-6-testing-your-extension","title":"Step 6: Testing Your Extension","text":"<p>Create a test script to ensure your decorators work as expected:</p> <pre><code># test_extension.py\nimport openai\nfrom prompt_decorators import apply_dynamic_decorators, create_decorator_instance\n# Import your extension\nimport prompt_decorators_datascience\n\n# Sample data\nsample_data = \"\"\"\nAge,Income,Education,Job_Experience,Credit_Score\n32,65000,Bachelors,8,720\n45,85000,Masters,15,780\n23,35000,High School,2,650\n37,72000,Bachelors,12,710\n51,95000,PhD,20,800\n29,48000,Associates,5,680\n\"\"\"\n\n# Test DataAnalysis decorator\ndef test_data_analysis():\n    # Using inline syntax\n    prompt = f\"\"\"\n    +++DataAnalysis(depth=comprehensive, focus=correlations)\n    {sample_data}\n    \"\"\"\n\n    transformed_prompt = apply_dynamic_decorators(prompt)\n    print(\"Data Analysis Transformed Prompt:\")\n    print(\"-\" * 80)\n    print(transformed_prompt)\n    print(\"-\" * 80)\n\n    # Using programmatic approach\n    data_analysis = create_decorator_instance(\"DataAnalysis\", depth=\"comprehensive\", focus=\"correlations\")\n    transformed_prompt_2 = data_analysis(sample_data)\n\n    # They should be identical\n    assert transformed_prompt == transformed_prompt_2\n\n# Test DataVisualization decorator\ndef test_data_visualization():\n    # Using inline syntax\n    prompt = f\"\"\"\n    +++DataVisualization(library=seaborn, include_code=true)\n    {sample_data}\n    \"\"\"\n\n    transformed_prompt = apply_dynamic_decorators(prompt)\n    print(\"Data Visualization Transformed Prompt:\")\n    print(\"-\" * 80)\n    print(transformed_prompt)\n    print(\"-\" * 80)\n\n# Test with an LLM\ndef test_with_llm():\n    # Using DataAnalysis decorator\n    prompt = f\"\"\"\n    +++DataAnalysis(depth=moderate, focus=all)\n    {sample_data}\n    \"\"\"\n\n    transformed_prompt = apply_dynamic_decorators(prompt)\n\n    # Replace with your API key\n    openai.api_key = \"your-api-key-here\"\n\n    response = openai.chat.completions.create(\n        model=\"gpt-4\",\n        messages=[{\"role\": \"user\", \"content\": transformed_prompt}],\n        temperature=0.7\n    )\n\n    print(\"LLM Response:\")\n    print(\"-\" * 80)\n    print(response.choices[0].message.content)\n\nif __name__ == \"__main__\":\n    test_data_analysis()\n    test_data_visualization()\n    # Uncomment to test with an actual LLM\n    # test_with_llm()\n</code></pre>"},{"location":"tutorials/extension_development/#step-7-documenting-your-extension","title":"Step 7: Documenting Your Extension","text":"<p>Create thorough documentation for your extension. At minimum, include:</p> <ol> <li>README.md: Overview, installation, and basic usage</li> <li>API Documentation: Details of each decorator</li> <li>Examples: Practical examples of using each decorator</li> <li>Integration Guide: How to integrate with existing workflows</li> </ol> <p>Here's a sample README.md:</p> <pre><code># Prompt Decorators - Data Science Extension\n\nA collection of specialized prompt decorators for data science workflows. This extension for the [Prompt Decorators](https://github.com/synaptiai/prompt-decorators) framework provides decorators for data analysis, visualization, model evaluation, and more.\n\n## Installation\n\n```bash\npip install prompt-decorators-datascience\n</code></pre>"},{"location":"tutorials/extension_development/#usage","title":"Usage","text":"<pre><code>from prompt_decorators import apply_dynamic_decorators\nimport prompt_decorators_datascience  # This registers all the decorators\n\n# Using inline syntax\nprompt = \"\"\"\n+++DataAnalysis(depth=comprehensive, focus=correlations)\nHere's my dataset:\nAge,Income,Education,Job_Experience,Credit_Score\n32,65000,Bachelors,8,720\n45,85000,Masters,15,780\n23,35000,High School,2,650\n...\n\"\"\"\n\ntransformed_prompt = apply_dynamic_decorators(prompt)\n# Now send transformed_prompt to your LLM\n</code></pre>"},{"location":"tutorials/extension_development/#available-decorators","title":"Available Decorators","text":""},{"location":"tutorials/extension_development/#dataanalysis","title":"DataAnalysis","text":"<p>Directs LLM to perform exploratory data analysis on provided data.</p> <p>Parameters: - <code>depth</code> (enum): Depth of analysis (basic, moderate, comprehensive) - <code>focus</code> (enum): Primary focus (patterns, outliers, correlations, distributions, all) - <code>include_visualizations</code> (boolean): Whether to include visualization recommendations</p>"},{"location":"tutorials/extension_development/#datavisualization","title":"DataVisualization","text":"<p>Directs LLM to provide visualization recommendations and code for data.</p> <p>Parameters: - <code>library</code> (enum): Visualization library to use (matplotlib, seaborn, plotly, altair, any) - <code>chart_types</code> (string): Comma-separated list of chart types to include - <code>include_code</code> (boolean): Whether to include code examples</p>"},{"location":"tutorials/extension_development/#datascienceworkflow","title":"DataScienceWorkflow","text":"<p>Comprehensive data science workflow combining analysis, visualization, and insights.</p> <p>Parameters: - <code>workflow_stage</code> (enum): Stage of the data science workflow (exploration, preprocessing, modeling, evaluation, full) - <code>detail_level</code> (enum): Level of detail in the response (brief, standard, detailed)</p>"},{"location":"tutorials/extension_development/#license","title":"License","text":"<p>MIT <pre><code>### Step 8: Packaging and Distribution\n\nOnce your extension is ready for distribution, create a package:\n\n```bash\n# Create a source distribution\npython setup.py sdist\n\n# Create a wheel package\npython setup.py bdist_wheel\n</code></pre></p> <p>If you want to publish to PyPI:</p> <pre><code># Install twine\npip install twine\n\n# Upload to PyPI\ntwine upload dist/*\n</code></pre> <p>Alternatively, you can publish your package to GitHub and install directly from there:</p> <pre><code>pip install git+https://github.com/yourusername/prompt-decorators-datascience.git\n</code></pre>"},{"location":"tutorials/extension_development/#advanced-extension-development","title":"Advanced Extension Development","text":""},{"location":"tutorials/extension_development/#configuration-management","title":"Configuration Management","text":"<p>For more complex extensions, you might want to add configuration management:</p> <pre><code># prompt_decorators_datascience/config.py\n\nclass DataScienceExtensionConfig:\n    \"\"\"Configuration for the data science extension.\"\"\"\n\n    def __init__(self):\n        self.default_visualization_library = \"matplotlib\"\n        self.include_code_by_default = True\n        self.default_analysis_depth = \"moderate\"\n\n    def update_from_dict(self, config_dict):\n        \"\"\"Update configuration from a dictionary.\"\"\"\n        for key, value in config_dict.items():\n            if hasattr(self, key):\n                setattr(self, key, value)\n\n    def __str__(self):\n        \"\"\"String representation of the configuration.\"\"\"\n        return str(vars(self))\n\n# Default configuration\nconfig = DataScienceExtensionConfig()\n\ndef configure(config_dict):\n    \"\"\"Configure the extension with custom settings.\"\"\"\n    config.update_from_dict(config_dict)\n</code></pre> <p>Then use this configuration in your decorators:</p> <pre><code>from .config import config\n\n# In your transform_function:\n\"\"\"\n// Use configuration\nconst default_library = \"${config.default_visualization_library}\";\n// ...\n\"\"\"\n</code></pre>"},{"location":"tutorials/extension_development/#versioning-strategy","title":"Versioning Strategy","text":"<p>Implement proper versioning:</p> <pre><code># prompt_decorators_datascience/__init__.py\n\n__version__ = \"0.1.0\"\n</code></pre> <p>Follow semantic versioning: - Increment MAJOR version for incompatible API changes - Increment MINOR version for backwards-compatible new features - Increment PATCH version for backwards-compatible bug fixes</p>"},{"location":"tutorials/extension_development/#testing-framework","title":"Testing Framework","text":"<p>For comprehensive testing, use pytest:</p> <pre><code># tests/test_decorators.py\nimport pytest\nfrom prompt_decorators import apply_dynamic_decorators, create_decorator_instance\nimport prompt_decorators_datascience\n\ndef test_data_analysis_decorator():\n    # Create a test prompt\n    test_data = \"Age,Income\\n30,50000\\n40,70000\"\n    decorator = create_decorator_instance(\"DataAnalysis\", depth=\"basic\")\n\n    # Apply the decorator\n    result = decorator(test_data)\n\n    # Assertions\n    assert \"Please perform exploratory data analysis\" in result\n    assert \"Focus on the most important high-level insights\" in result\n    assert test_data in result\n\n# Add more tests for other decorators...\n</code></pre> <p>Create a tox.ini file for multi-environment testing:</p> <pre><code>[tox]\nenvlist = py38, py39, py310\n\n[testenv]\ndeps =\n    pytest\n    prompt-decorators\ncommands =\n    pytest\n</code></pre>"},{"location":"tutorials/extension_development/#best-practices-for-extension-development","title":"Best Practices for Extension Development","text":"<ol> <li>Focus on a Domain: Keep your extension focused on a specific domain or use case</li> <li>Maintain Compatibility: Ensure your decorators work well with core decorators</li> <li>Provide Sensible Defaults: Make your decorators usable without extensive configuration</li> <li>Version Dependencies: Specify compatible versions of prompt-decorators</li> <li>Document Extensively: Create thorough documentation with examples</li> <li>Test Thoroughly: Test with different LLMs to ensure compatibility</li> <li>Manage Conflicts: Document any conflicts with core decorators</li> <li>Provide Examples: Include real-world examples of using your decorators</li> </ol>"},{"location":"tutorials/extension_development/#extension-ideas","title":"Extension Ideas","text":"<p>Here are some ideas for decorator extensions:</p> <ol> <li>Legal Decorators: For legal document analysis, contract generation, and case research</li> <li>Medical Decorators: For clinical notes, medical literature, and diagnosis assistance</li> <li>Creative Writing: For storytelling, character development, and narrative structure</li> <li>Academic Writing: For research papers, literature reviews, and academic formatting</li> <li>Software Development: For code generation, documentation, and technical specifications</li> <li>Marketing: For content creation, ad copy, and marketing analysis</li> <li>Financial Analysis: For investment analysis, financial reporting, and risk assessment</li> </ol>"},{"location":"tutorials/extension_development/#next-steps","title":"Next Steps","text":"<p>After creating your extension:</p> <ol> <li>Share it with the community</li> <li>Gather feedback and iterate on your design</li> <li>Add more specialized decorators</li> <li>Create tutorials and examples</li> <li>Integrate with other tools and frameworks</li> </ol> <p>By developing extensions, you contribute to the Prompt Decorators ecosystem and help establish best practices for prompt engineering in your domain.</p>"}]}