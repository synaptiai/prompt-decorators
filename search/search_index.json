{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Prompt Decorators","text":"<p>Welcome to the Prompt Decorators documentation! This framework provides a structured way to enhance prompts for Large Language Models (LLMs) through the application of modular, reusable \"decorators.\"</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>What is Prompt Decorators?</li> <li>Quick Start</li> <li>Installation</li> <li>Basic Usage</li> <li>Documentation</li> <li>Guides</li> <li>Project Information</li> <li>Why Use Prompt Decorators?</li> <li>Modularity</li> <li>Reusability</li> <li>Standardization</li> <li>Experimentation</li> <li>Compatibility</li> <li>Getting Help</li> <li>License</li> </ul>"},{"location":"#what-is-prompt-decorators","title":"What is Prompt Decorators?","text":"<p>Prompt Decorators is a Python framework that allows you to apply various \"decorators\" to your prompts, each adding specific functionality or behavior. This approach makes prompt engineering more modular, reusable, and maintainable.</p> <p>Key features include:</p> <ul> <li>Modular Prompt Engineering: Apply specific prompt techniques independently</li> <li>Decorator Registry: Discover and use decorators dynamically</li> <li>Compatibility Checking: Ensure decorators work well together</li> <li>Dynamic Implementation: Runtime loading of decorators from definitions</li> <li>API Integration: Work with multiple LLM providers</li> <li>MCP Integration: Integration with the Model Context Protocol</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<pre><code>pip install prompt-decorators\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code>from prompt_decorators import apply_dynamic_decorators, create_decorator_instance\n\n# Using inline decorator syntax\nprompt = \"\"\"\n+++Reasoning(depth=\"comprehensive\")\n+++OutputFormat(format=\"markdown\")\nExplain quantum entanglement.\n\"\"\"\ndecorated_prompt = apply_dynamic_decorators(prompt)\n\n# Or using programmatic approach\nreasoning = create_decorator_instance(\"Reasoning\", depth=\"comprehensive\")\noutput_format = create_decorator_instance(\"OutputFormat\", format=\"markdown\")\n\nprompt = \"Explain quantum entanglement.\"\ndecorated_prompt = output_format(reasoning(prompt))\n\n# Use the decorated prompt with your favorite LLM API\n# ...\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":""},{"location":"#guides","title":"Guides","text":"<ul> <li>Installation - How to install the framework</li> <li>Quickstart - Get up and running quickly</li> <li>Core Concepts - Core concepts and design philosophy</li> <li>Creating Decorators - Create your own decorators</li> <li>Compatibility - Compatibility with different LLM providers</li> </ul>"},{"location":"#project-information","title":"Project Information","text":"<ul> <li>Contributing - How to contribute to the project</li> <li>Development - Setting up the development environment</li> <li>FAQ - Frequently asked questions</li> <li>Glossary - Definitions of key terms</li> <li>Roadmap - Future development plans</li> </ul>"},{"location":"#why-use-prompt-decorators","title":"Why Use Prompt Decorators?","text":""},{"location":"#modularity","title":"Modularity","text":"<p>Each decorator focuses on a specific prompt engineering technique, allowing you to mix and match them as needed.</p>"},{"location":"#reusability","title":"Reusability","text":"<p>Create a library of prompt techniques that can be reused across different projects and applications.</p>"},{"location":"#standardization","title":"Standardization","text":"<p>Establish consistent prompt patterns across your organization or project.</p>"},{"location":"#experimentation","title":"Experimentation","text":"<p>Easily test different prompt engineering approaches by swapping decorators.</p>"},{"location":"#compatibility","title":"Compatibility","text":"<p>Work with multiple LLM providers using the same decorator patterns.</p>"},{"location":"#getting-help","title":"Getting Help","text":"<p>If you need help with Prompt Decorators, you can:</p> <ul> <li>Check the FAQ for answers to common questions</li> <li>Read the Troubleshooting section in the FAQ</li> <li>Open an issue on our GitHub repository</li> <li>Join our community discussions</li> </ul>"},{"location":"#license","title":"License","text":"<p>Prompt Decorators is released under the Apache 2.0 License. See the LICENSE file for details.</p>"},{"location":"DECORATOR_REGISTRY/","title":"Decorator Registry","text":""},{"location":"DECORATOR_REGISTRY/#overview","title":"Overview","text":"<p>The Decorator Registry is a central component of the Prompt Decorators package that enables runtime discovery and management of decorators. It provides a mechanism to register, discover, and use decorators dynamically, making it easier to extend the system with new decorators and to find decorators by name, category, or other criteria.</p>"},{"location":"DECORATOR_REGISTRY/#features","title":"Features","text":"<ul> <li>Dynamic Registration: Register decorators at runtime from code or JSON definitions</li> <li>Decorator Discovery: Find decorators by name, category, or other criteria</li> <li>Version Management: Support for multiple versions of the same decorator</li> <li>Compatibility Checking: Verify compatibility between decorators</li> <li>Category Organization: Group decorators by category for easier discovery</li> </ul>"},{"location":"DECORATOR_REGISTRY/#implementation","title":"Implementation","text":"<p>The Decorator Registry is implemented in the <code>prompt_decorators.utils.discovery</code> module. The main class is <code>DecoratorRegistry</code>, which provides methods for registering and discovering decorators.</p>"},{"location":"DECORATOR_REGISTRY/#key-components","title":"Key Components","text":"<ol> <li>DecoratorRegistry: The main class that manages the registry of decorators</li> <li>register_decorator: Method to register a decorator class or instance</li> <li>get_decorator: Method to retrieve a decorator by name</li> <li>get_all_decorators: Method to retrieve all registered decorators</li> <li>find_decorators_by_category: Method to find decorators by category</li> </ol>"},{"location":"DECORATOR_REGISTRY/#usage","title":"Usage","text":""},{"location":"DECORATOR_REGISTRY/#registering-decorators","title":"Registering Decorators","text":"<p>Decorators can be registered in several ways:</p> <ol> <li>Registering a Decorator Class:</li> </ol> <pre><code>from prompt_decorators.utils.discovery import DecoratorRegistry\nfrom prompt_decorators.decorators.generated.decorators.concise import Concise\n\n# Get the registry instance\nregistry = DecoratorRegistry()\n\n# Register a decorator class\nregistry.register_decorator(Concise)\n</code></pre> <ol> <li>Registering a Decorator Instance:</li> </ol> <pre><code>from prompt_decorators.utils.discovery import DecoratorRegistry\nfrom prompt_decorators.decorators.generated.decorators.concise import Concise\n\n# Get the registry instance\nregistry = DecoratorRegistry()\n\n# Create a decorator instance\nconcise = Concise(maxWords=100, bulletPoints=True, level=2)\n\n# Register the decorator instance\nregistry.register_decorator(concise)\n</code></pre> <ol> <li>Registering All Decorators from a Directory:</li> </ol> <pre><code>import os\nimport importlib\nimport inspect\nfrom pathlib import Path\nfrom prompt_decorators.utils.discovery import DecoratorRegistry\nfrom prompt_decorators.core.base import BaseDecorator\n\ndef register_decorators():\n    registry = DecoratorRegistry()\n    registry.clear()\n\n    # Path to the generated decorators directory\n    decorators_dir = Path(\"prompt_decorators/decorators/generated/decorators\")\n\n    # Iterate through all Python files in the directory\n    for file_path in decorators_dir.glob(\"*.py\"):\n        if file_path.name == \"__init__.py\":\n            continue\n\n        # Import the module\n        module_name = f\"prompt_decorators.decorators.generated.decorators.{file_path.stem}\"\n        try:\n            module = importlib.import_module(module_name)\n\n            # Find all classes in the module that are subclasses of BaseDecorator\n            for name, obj in inspect.getmembers(module):\n                if inspect.isclass(obj) and issubclass(obj, BaseDecorator) and obj != BaseDecorator:\n                    # Register the decorator\n                    decorator_name = getattr(obj, \"name\", name)\n                    registry.register_decorator(obj)\n                    print(f\"  - Registered: {decorator_name}\")\n        except Exception as e:\n            print(f\"Error registering decorators from {module_name}: {e}\")\n\n    # Print summary\n    decorators = registry.get_all_decorators()\n    print(f\"\\nRegistered {len(decorators)} decorators:\")\n\n    # Print categories\n    categories = set(decorator.category for decorator in decorators)\n    print(f\"\\nDecorator categories ({len(categories)}):\")\n    for category in categories:\n        category_decorators = registry.find_decorators_by_category(category)\n        print(f\"  - {category}: {len(category_decorators)} decorators\")\n</code></pre>"},{"location":"DECORATOR_REGISTRY/#finding-decorators","title":"Finding Decorators","text":"<p>Once decorators are registered, they can be discovered in several ways:</p> <ol> <li>Getting a Decorator by Name:</li> </ol> <pre><code>from prompt_decorators.utils.discovery import DecoratorRegistry\n\nregistry = DecoratorRegistry()\nconcise = registry.get_decorator(\"Concise\")\n</code></pre> <ol> <li>Getting All Decorators:</li> </ol> <pre><code>from prompt_decorators.utils.discovery import DecoratorRegistry\n\nregistry = DecoratorRegistry()\nall_decorators = registry.get_all_decorators()\n</code></pre> <ol> <li>Finding Decorators by Category:</li> </ol> <pre><code>from prompt_decorators.utils.discovery import DecoratorRegistry\n\nregistry = DecoratorRegistry()\ntone_decorators = registry.find_decorators_by_category(\"tone\")\n</code></pre>"},{"location":"DECORATOR_REGISTRY/#using-registered-decorators","title":"Using Registered Decorators","text":"<p>Once a decorator is retrieved from the registry, it can be used like any other decorator:</p> <pre><code>from prompt_decorators.utils.discovery import DecoratorRegistry\n\nregistry = DecoratorRegistry()\nconcise = registry.get_decorator(\"Concise\")\n\n# Create an instance of the decorator\nconcise_instance = concise(maxWords=100, bulletPoints=True, level=2)\n\n# Apply the decorator to a prompt\noriginal_prompt = \"Explain the concept of quantum computing in detail.\"\ndecorated_prompt = concise_instance.apply(original_prompt)\n</code></pre>"},{"location":"DECORATOR_REGISTRY/#examples","title":"Examples","text":"<p>For complete examples of how to use the Decorator Registry, see the following example scripts:</p> <ul> <li><code>examples/register_all_decorators.py</code>: Demonstrates how to register all decorators from the generated directory</li> <li><code>examples/use_registered_decorators.py</code>: Shows how to use registered decorators to modify prompts</li> </ul>"},{"location":"DECORATOR_REGISTRY/#best-practices","title":"Best Practices","text":"<ol> <li>Clear the Registry Before Bulk Registration: If you're registering multiple decorators at once, it's a good practice to clear the registry first to avoid duplicates.</li> <li>Handle Exceptions During Registration: When registering decorators from external sources, make sure to handle exceptions properly to avoid breaking your application.</li> <li>Check Decorator Existence Before Use: Always check if a decorator exists in the registry before trying to use it.</li> <li>Use Categories for Organization: Organize decorators by category to make them easier to discover and use.</li> <li>Consider Version Compatibility: When using multiple decorators together, consider their version compatibility to avoid unexpected behavior.</li> </ol>"},{"location":"DECORATOR_REGISTRY/#future-enhancements","title":"Future Enhancements","text":"<p>The Decorator Registry is designed to be extensible and can be enhanced in several ways:</p> <ol> <li>Plugin System: Add support for loading decorators from external plugins</li> <li>Web API: Create a web API for discovering and using decorators</li> <li>Caching: Implement caching for better performance</li> <li>Analytics: Add analytics to track decorator usage</li> <li>UI Integration: Create a user interface for browsing and selecting decorators</li> </ol>"},{"location":"DOCSTRING_STANDARDS/","title":"Docstring Standards","text":"<p>This document outlines the docstring standards for the <code>prompt-decorators</code> project. All Python code in this project should follow these guidelines to ensure consistency and maintainability.</p>"},{"location":"DOCSTRING_STANDARDS/#google-style-docstrings","title":"Google-Style Docstrings","text":"<p>We use Google-style docstrings throughout the codebase. This style is chosen for its readability and compatibility with documentation generation tools.</p>"},{"location":"DOCSTRING_STANDARDS/#basic-format","title":"Basic Format","text":"<pre><code>def function_name(param1, param2):\n    \"\"\"Short description of the function.\n\n    More detailed description that can span multiple lines and provide\n    additional context about what the function does.\n\n    Args:\n        param1: Description of the first parameter.\n        param2: Description of the second parameter.\n\n    Returns:\n        Description of the return value.\n\n    Raises:\n        ExceptionType: When and why this exception is raised.\n    \"\"\"\n    # Function implementation\n</code></pre>"},{"location":"DOCSTRING_STANDARDS/#required-sections","title":"Required Sections","text":"<ol> <li>Short Description: A concise one-line summary of what the function/class/method does.</li> <li>Detailed Description (optional): A more detailed explanation if needed.</li> <li>Args: Required if the function takes parameters (other than self/cls for methods).</li> <li>Returns: Required if the function returns a value (other than None).</li> <li>Raises (optional): Document exceptions that might be raised.</li> </ol>"},{"location":"DOCSTRING_STANDARDS/#class-docstrings","title":"Class Docstrings","text":"<pre><code>class ClassName:\n    \"\"\"Short description of the class.\n\n    More detailed description of the class and its behavior.\n\n    Attributes:\n        attr1: Description of attr1.\n        attr2: Description of attr2.\n    \"\"\"\n</code></pre>"},{"location":"DOCSTRING_STANDARDS/#method-docstrings","title":"Method Docstrings","text":"<pre><code>def method_name(self, param1):\n    \"\"\"Short description of the method.\n\n    Args:\n        param1: Description of param1.\n\n    Returns:\n        Description of the return value.\n    \"\"\"\n</code></pre>"},{"location":"DOCSTRING_STANDARDS/#type-annotations","title":"Type Annotations","text":"<p>In addition to docstrings, all functions and methods should include type annotations:</p> <pre><code>def function_name(param1: str, param2: int) -&gt; bool:\n    \"\"\"Function description.\n\n    Args:\n        param1: Description of param1.\n        param2: Description of param2.\n\n    Returns:\n        Description of the return value.\n    \"\"\"\n</code></pre>"},{"location":"DOCSTRING_STANDARDS/#examples","title":"Examples","text":""},{"location":"DOCSTRING_STANDARDS/#function-example","title":"Function Example","text":"<pre><code>def calculate_average(numbers: List[float]) -&gt; float:\n    \"\"\"Calculate the average of a list of numbers.\n\n    Args:\n        numbers: A list of numbers to average.\n\n    Returns:\n        The average value.\n\n    Raises:\n        ValueError: If the input list is empty.\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"Cannot calculate average of empty list\")\n    return sum(numbers) / len(numbers)\n</code></pre>"},{"location":"DOCSTRING_STANDARDS/#class-example","title":"Class Example","text":"<pre><code>class DecoratorBase:\n    \"\"\"Base class for all decorators.\n\n    This class provides the foundation for creating decorators with\n    consistent interfaces and behaviors.\n\n    Attributes:\n        name: The name of the decorator.\n        version: The version of the decorator.\n        parameters: Dictionary of parameters for the decorator.\n    \"\"\"\n\n    def __init__(self, name: str, version: str, parameters: Dict[str, Any]):\n        \"\"\"Initialize the decorator.\n\n        Args:\n            name: The name of the decorator.\n            version: The version of the decorator.\n            parameters: Dictionary of parameters for the decorator.\n        \"\"\"\n        self.name = name\n        self.version = version\n        self.parameters = parameters\n\n    def apply(self, text: str) -&gt; str:\n        \"\"\"Apply the decorator to the input text.\n\n        Args:\n            text: The input text to decorate.\n\n        Returns:\n            The decorated text.\n        \"\"\"\n        raise NotImplementedError(\"Subclasses must implement apply()\")\n</code></pre>"},{"location":"DOCSTRING_STANDARDS/#checking-and-fixing-docstrings","title":"Checking and Fixing Docstrings","text":"<p>We have tools to check and fix docstring issues:</p> <ol> <li> <p>Check docstrings:    <pre><code>python scripts/standardize_docstrings.py prompt_decorators --report\n</code></pre></p> </li> <li> <p>Check without fixing (returns error code if issues found):    <pre><code>python scripts/standardize_docstrings.py prompt_decorators --check\n</code></pre></p> </li> <li> <p>Fix docstrings automatically:    <pre><code>python scripts/fix_docstrings.py prompt_decorators\n</code></pre></p> </li> </ol> <p>Our docstring tools can detect several issues: - Missing docstrings - Missing required sections (Args, Returns) - Malformed sections - Inconsistent formatting</p>"},{"location":"DOCSTRING_STANDARDS/#using-the-standardization-script","title":"Using the Standardization Script","text":"<p>The <code>standardize_docstrings.py</code> script offers several options:</p> <pre><code>python scripts/standardize_docstrings.py [path] [options]\n</code></pre> <p>Options: - <code>--exclude [dirs]</code>: Directories to exclude - <code>--report</code>: Generate a detailed report of issues - <code>--check</code>: Only check for issues, don't fix (exits with code 1 if issues found)</p> <p>The docstring standardization script uses Python's AST (Abstract Syntax Tree) to analyze Python files and identify docstring issues. It checks:</p> <ol> <li>Functions with arguments that lack an Args section</li> <li>Functions with return values that lack a Returns section</li> <li>Malformed Args and Returns sections</li> <li>Missing docstrings in functions, classes, and modules</li> </ol>"},{"location":"DOCSTRING_STANDARDS/#integration-with-development-workflow","title":"Integration with Development Workflow","text":"<p>Docstring checking is integrated into our development workflow through various mechanisms:</p>"},{"location":"DOCSTRING_STANDARDS/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>Our pre-commit configuration includes a docstring check that runs before each commit:</p> <pre><code>- id: check-docstrings\n  name: check-docstrings\n  entry: python standardize_docstrings.py\n  language: python\n  types: [python]\n  args: [\"--check\"]\n  description: Check that docstrings follow Google-style format\n</code></pre> <p>This prevents commits that would introduce docstring issues.</p>"},{"location":"DOCSTRING_STANDARDS/#cicd-integration","title":"CI/CD Integration","text":"<p>GitHub Actions runs docstring checks on all pull requests and pushes to main branches:</p> <pre><code>jobs:\n  docstring-check:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: '3.11'\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install poetry\n          poetry install\n      - name: Check docstrings\n        run: python standardize_docstrings.py prompt_decorators --check\n</code></pre> <p>This ensures that all merged code maintains high docstring quality standards.</p>"},{"location":"DOCSTRING_STANDARDS/#current-status-and-known-issues","title":"Current Status and Known Issues","text":"<p>As of the latest update, we've identified and are addressing several docstring issues across the codebase:</p> <ul> <li>75 issues across 16 files for missing Args/Returns sections in function docstrings</li> <li>8 issues for malformed Args sections</li> <li>1 issue for a missing docstring</li> </ul> <p>Our roadmap includes resolving all these issues as part of our code quality improvements before the next major release.</p>"},{"location":"DOCSTRING_STANDARDS/#manual-fixes-in-progress","title":"Manual Fixes in Progress","text":"<p>While our automated tools can identify issues, some complex cases require manual intervention. We're currently working on:</p> <ol> <li>Adding detailed parameter descriptions for complex functions</li> <li>Improving return value descriptions</li> <li>Adding examples to key API functions</li> </ol> <p>Progress on fixing these issues is tracked in our project roadmap.</p>"},{"location":"DOCSTRING_STANDARDS/#additional-resources","title":"Additional Resources","text":"<ul> <li>Google Python Style Guide</li> <li>PEP 257 -- Docstring Conventions</li> <li>PEP 484 -- Type Hints</li> <li>pydocstyle - A tool for checking compliance with Python docstring conventions</li> </ul>"},{"location":"architecture/","title":"Architecture","text":"<p>This document provides an overview of the Prompt Decorators framework architecture, explaining its components, design patterns, and how they interact.</p>"},{"location":"architecture/#system-overview","title":"System Overview","text":"<p>The Prompt Decorators framework is designed around a modular architecture that enables dynamic prompt enhancement through a decorator pattern. The system consists of several key components:</p> <ol> <li>Core Decorator Engine: Handles decorator definition, registration, and application</li> <li>Dynamic Transformation System: Processes JavaScript transform functions at runtime</li> <li>Registry Management: Maintains a catalog of available decorators</li> <li>Integration Layer: Connects with external systems like MCP</li> </ol>"},{"location":"architecture/#architectural-diagram","title":"Architectural Diagram","text":"<p><code>mermaid graph TD     A[User Prompt with Decorators] --&gt; B[Parser]     B --&gt; C[Decorator Registry]     C --&gt; D[Dynamic Decorator]     D --&gt; E[Transform Function Executor]     E --&gt; F[Transformed Prompt]     G[Custom Decorator Definitions] --&gt; C     H[External Integrations] --&gt; C     H --&gt; I[MCP Integration]     I --&gt; J[Claude Desktop]     I --&gt; K[Other MCP Clients]</code></p>"},{"location":"architecture/#key-components","title":"Key Components","text":""},{"location":"architecture/#core-decorator-engine","title":"Core Decorator Engine","text":"<p>The core engine is responsible for the fundamental decorator functionality:</p> <ul> <li>DecoratorBase: Abstract base class that defines the decorator interface</li> <li>DynamicDecorator: Implementation that handles dynamic decorator behavior</li> <li>Parameter Management: Handles parameter validation and processing</li> </ul> <p>The engine follows a decorator pattern, allowing decorators to be stacked and composed:</p> <pre><code># Example of decorator composition\npersona = create_decorator_instance(\"Persona\", role=\"scientist\")\nstep_by_step = create_decorator_instance(\"StepByStep\", numbered=True)\n\n# Apply decorators in sequence\ntransformed_prompt = persona(step_by_step(original_prompt))\n</code></pre>"},{"location":"architecture/#validation-tools","title":"Validation Tools","text":"<p>The framework includes several validation tools to ensure decorator definition quality and proper usage:</p> <ul> <li>Parameter Validators: Type-specific validators in <code>validation.py</code> that enforce parameter constraints</li> <li>Schema Validation: JSON schema validation for decorator definitions</li> <li>Syntax Validation: Parser that validates decorator syntax in prompts</li> <li>Command-line Validators:</li> <li><code>validate_decorators.py</code>: For schema validation of JSON files</li> <li><code>prompt_validator.py</code>: Unified CLI for validating syntax, schema, and directories</li> </ul> <p>The validation system is designed to catch issues early:</p> <p>``` mermaid graph TD     A[Decorator Definition] --&gt; B[Schema Validator]     B -- Valid Schema --&gt; C[Parameter Validator]     C -- Valid Parameters --&gt; D[Transform Function Validator]     D -- Valid Function --&gt; E[Registry]</p> <pre><code>F[Prompt with Decorators] --&gt; G[Syntax Validator]\nG -- Valid Syntax --&gt; H[Decorator Extractor]\nH --&gt; I[Decorator Instances]\n</code></pre> <p>```</p> <p>These validation tools can be used both programmatically and from the command line, providing flexibility for different workflows.</p>"},{"location":"architecture/#dynamic-transformation-system","title":"Dynamic Transformation System","text":"<p>The transformation system executes JavaScript transform functions:</p> <ul> <li>JavaScript Engine: Uses a JavaScript runtime to execute transform functions</li> <li>Context Management: Provides parameter values to transform functions</li> <li>Error Handling: Manages errors in transform function execution</li> </ul> <p>Transform functions are defined as JavaScript strings that are evaluated at runtime:</p> <pre><code>// Example transform function\nfunction transform(text) {\n  return `Please break down your response into ${numbered ? \"numbered\" : \"clear\"} steps.\\n\\n${text}`;\n}\n</code></pre>"},{"location":"architecture/#registry-management","title":"Registry Management","text":"<p>The registry system maintains a catalog of available decorators:</p> <ul> <li>Decorator Registry: Stores decorator definitions</li> <li>Lookup Mechanism: Retrieves decorators by name</li> <li>Dynamic Loading: Loads decorators from JSON definitions</li> </ul> <p>The registry allows decorators to be registered and retrieved:</p> <pre><code># Register a decorator\nregister_decorator(my_decorator_def)\n\n# Retrieve a decorator\ndecorator = get_decorator(\"MyDecorator\")\n</code></pre>"},{"location":"architecture/#integration-layer","title":"Integration Layer","text":"<p>The integration layer connects the framework with external systems:</p> <ul> <li>MCP Integration: Implements the Model Context Protocol</li> <li>Tool Definitions: Exposes decorator functionality as MCP tools</li> <li>Client Adapters: Adapts to specific client requirements</li> </ul>"},{"location":"architecture/#data-flow","title":"Data Flow","text":"<p>The data flow through the system follows these steps:</p> <ol> <li>Input: User provides a prompt with decorator annotations</li> <li>Parsing: The system extracts decorator annotations and parameters</li> <li>Lookup: The system retrieves decorator definitions from the registry</li> <li>Parameter Processing: Parameters are validated and processed</li> <li>Transformation: Transform functions are executed with parameters</li> <li>Composition: Multiple transformations are composed</li> <li>Output: The transformed prompt is returned</li> </ol>"},{"location":"architecture/#design-patterns","title":"Design Patterns","text":"<p>The framework employs several design patterns:</p>"},{"location":"architecture/#decorator-pattern","title":"Decorator Pattern","text":"<p>The core functionality uses the decorator pattern to allow stacking and composition of transformations:</p> <pre><code># Decorator pattern in action\nresult = decorator1(decorator2(decorator3(text)))\n</code></pre>"},{"location":"architecture/#factory-pattern","title":"Factory Pattern","text":"<p>The framework uses a factory pattern to create decorator instances:</p> <pre><code># Factory pattern for creating decorators\ndecorator = create_decorator_instance(\"DecoratorName\", param1=\"value1\")\n</code></pre>"},{"location":"architecture/#registry-pattern","title":"Registry Pattern","text":"<p>The decorator registry implements the registry pattern:</p> <pre><code># Registry pattern for storing and retrieving decorators\nregister_decorator(decorator_definition)\ndecorator = get_decorator(\"DecoratorName\")\n</code></pre>"},{"location":"architecture/#strategy-pattern","title":"Strategy Pattern","text":"<p>Transform functions implement the strategy pattern, allowing different transformation strategies:</p> <pre><code># Different strategies for transformation\ntransform_function1 = \"return prefix + text;\"\ntransform_function2 = \"return text.split('.').join('.\\n');\"\n</code></pre>"},{"location":"architecture/#extension-points","title":"Extension Points","text":"<p>The framework provides several extension points:</p>"},{"location":"architecture/#custom-decorators","title":"Custom Decorators","text":"<p>Users can create custom decorators by defining new decorator definitions:</p> <pre><code># Define a custom decorator\nmy_decorator_def = DecoratorDefinition(\n    name=\"MyCustomDecorator\",\n    description=\"A custom decorator\",\n    category=\"Custom\",\n    parameters=[...],\n    transform_function=\"...\"\n)\n</code></pre>"},{"location":"architecture/#integration-adapters","title":"Integration Adapters","text":"<p>New integrations can be added by implementing adapter classes:</p> <pre><code># Implement a new integration adapter\nclass MyIntegrationAdapter:\n    def apply_decorators(self, prompt):\n        return apply_dynamic_decorators(prompt)\n</code></pre>"},{"location":"architecture/#transform-function-extensions","title":"Transform Function Extensions","text":"<p>The transform function system can be extended with new capabilities:</p> <pre><code># Extend the transform function system\njs_runtime.add_global(\"myUtility\", my_utility_function)\n</code></pre>"},{"location":"architecture/#performance-considerations","title":"Performance Considerations","text":"<p>The architecture addresses performance in several ways:</p> <ul> <li>Lazy Loading: Decorators are loaded only when needed</li> <li>Caching: Frequently used decorators are cached</li> <li>Efficient Parsing: The parser is optimized for quick extraction</li> <li>Minimal Overhead: The system adds minimal overhead to prompt processing</li> </ul>"},{"location":"architecture/#security-considerations","title":"Security Considerations","text":"<p>The architecture includes security measures:</p> <ul> <li>Input Validation: All inputs are validated before processing</li> <li>Sandboxed Execution: JavaScript is executed in a sandboxed environment</li> <li>Parameter Sanitization: Parameters are sanitized before use</li> <li>Error Containment: Errors are contained and don't affect the system</li> </ul>"},{"location":"architecture/#deployment-architecture","title":"Deployment Architecture","text":"<p>The framework can be deployed in several configurations:</p>"},{"location":"architecture/#standalone-library","title":"Standalone Library","text":"<p>The most common deployment is as a standalone Python library:</p> <pre><code>Application --&gt; Prompt Decorators Library --&gt; LLM Provider\n</code></pre>"},{"location":"architecture/#mcp-server","title":"MCP Server","text":"<p>For Claude Desktop and other MCP clients, the framework can be deployed as an MCP server:</p> <pre><code>Claude Desktop --&gt; MCP Protocol --&gt; Prompt Decorators MCP Server --&gt; LLM Provider\n</code></pre>"},{"location":"architecture/#web-service","title":"Web Service","text":"<p>The framework can be deployed as a web service:</p> <pre><code>Client Applications --&gt; API Gateway --&gt; Prompt Decorators Service --&gt; LLM Providers\n</code></pre>"},{"location":"architecture/#future-architecture-directions","title":"Future Architecture Directions","text":"<p>The architecture is designed to evolve in these directions:</p> <ul> <li>Plugin System: A formal plugin system for extensions</li> <li>Distributed Registry: A distributed registry for sharing decorators</li> <li>Advanced Caching: More sophisticated caching strategies</li> <li>Cross-Language Support: Support for other programming languages</li> </ul>"},{"location":"architecture/#implementation-details","title":"Implementation Details","text":""},{"location":"architecture/#core-module","title":"Core Module","text":"<p>The <code>core</code> module implements the fundamental decorator functionality:</p> <pre><code># Base decorator class\nclass DecoratorBase:\n    def __init__(self, **kwargs):\n        self.params = kwargs\n\n    def __call__(self, text: str) -&gt; str:\n        # Apply the decorator to the text\n        return self.transform(text)\n\n    def transform(self, text: str) -&gt; str:\n        # To be implemented by subclasses\n        raise NotImplementedError\n</code></pre>"},{"location":"architecture/#dynamic-decorator-module","title":"Dynamic Decorator Module","text":"<p>The <code>dynamic_decorator</code> module implements the dynamic decorator functionality:</p> <pre><code># Dynamic decorator class\nclass DynamicDecorator(DecoratorBase):\n    def __init__(self, name, description, category, parameters, transform_function):\n        self.name = name\n        self.description = description\n        self.category = category\n        self.parameters = parameters\n        self.transform_function = transform_function\n        super().__init__()\n\n    def transform(self, text: str) -&gt; str:\n        # Execute the transform function with parameters\n        return execute_js(self.transform_function, text, **self.params)\n</code></pre>"},{"location":"architecture/#registry-module","title":"Registry Module","text":"<p>The <code>registry</code> module implements the decorator registry:</p> <pre><code># Decorator registry\n_registry = {}\n\ndef register_decorator(definition):\n    _registry[definition.name] = definition\n\ndef get_decorator(name):\n    if name not in _registry:\n        raise DecoratorNotFoundError(f\"Decorator '{name}' not found\")\n    return _registry[name]\n</code></pre>"},{"location":"architecture/#parser-module","title":"Parser Module","text":"<p>The <code>parser</code> module implements the decorator parsing:</p> <pre><code># Decorator parser\ndef parse_decorators(text):\n    # Extract decorator annotations\n    pattern = r'\\+\\+\\+([A-Za-z]+)(?:\\(([^)]+)\\))?'\n    matches = re.findall(pattern, text)\n\n    decorators = []\n    for name, params_str in matches:\n        params = parse_params(params_str)\n        decorators.append((name, params))\n\n    # Remove decorator annotations\n    clean_text = re.sub(pattern, '', text)\n\n    return decorators, clean_text\n</code></pre>"},{"location":"architecture/#conclusion","title":"Conclusion","text":"<p>The Prompt Decorators architecture provides a flexible, extensible framework for enhancing prompts sent to LLMs. Its modular design allows for easy customization and integration with various systems, while its dynamic implementation enables runtime modification without code generation.</p> <p>The architecture balances simplicity, performance, and security, making it suitable for a wide range of applications from simple script usage to complex enterprise integrations.</p>"},{"location":"code_quality_integration/","title":"Code Quality Integration","text":"<p>This document outlines the code quality tools, processes, and integrations used in the Prompt Decorators project to maintain high standards of code quality.</p>"},{"location":"code_quality_integration/#overview","title":"Overview","text":"<p>The Prompt Decorators project employs a comprehensive set of code quality tools and processes to ensure:</p> <ul> <li>Consistent code style and formatting</li> <li>Static type checking</li> <li>Comprehensive test coverage</li> <li>Documentation quality</li> <li>Security scanning</li> <li>Continuous integration</li> </ul>"},{"location":"code_quality_integration/#code-quality-tools","title":"Code Quality Tools","text":""},{"location":"code_quality_integration/#linting-and-formatting","title":"Linting and Formatting","text":""},{"location":"code_quality_integration/#ruff","title":"Ruff","text":"<p>Ruff is the primary tool for linting and formatting Python code in the project. It replaces multiple tools (black, isort, flake8) with a single, fast tool.</p> <p>Configuration is in <code>pyproject.toml</code>:</p> <pre><code>[tool.ruff]\nline-length = 100\ntarget-version = \"py311\"\nselect = [\"E\", \"F\", \"I\", \"N\", \"B\", \"C4\", \"SIM\", \"ERA\", \"PL\"]\nignore = [\"E203\", \"E501\"]\n\n[tool.ruff.isort]\nknown-first-party = [\"prompt_decorators\"]\n\n[tool.ruff.format]\nquote-style = \"double\"\nindent-style = \"space\"\n</code></pre> <p>Usage:</p> <pre><code># Check code\nruff check .\n\n# Format code\nruff format .\n</code></pre>"},{"location":"code_quality_integration/#type-checking","title":"Type Checking","text":""},{"location":"code_quality_integration/#mypy","title":"Mypy","text":"<p>Mypy is used for static type checking to catch type-related errors before runtime.</p> <p>Configuration is in <code>mypy.ini</code>:</p> <pre><code>[mypy]\npython_version = 3.11\nwarn_return_any = True\nwarn_unused_configs = True\ndisallow_untyped_defs = True\ndisallow_incomplete_defs = True\n\n[mypy.plugins.numpy.*]\nfollow_imports = skip\n\n[mypy-pytest.*]\nignore_missing_imports = True\n</code></pre> <p>Usage:</p> <pre><code>mypy prompt_decorators\n</code></pre>"},{"location":"code_quality_integration/#testing","title":"Testing","text":""},{"location":"code_quality_integration/#pytest","title":"Pytest","text":"<p>Pytest is used for unit and integration testing.</p> <p>Configuration is in <code>pyproject.toml</code>:</p> <pre><code>[tool.pytest.ini_options]\ntestpaths = [\"tests\"]\npython_files = \"test_*.py\"\npython_functions = \"test_*\"\npython_classes = \"Test*\"\naddopts = \"--cov=prompt_decorators --cov-report=term --cov-report=xml\"\n</code></pre> <p>Usage:</p> <pre><code># Run all tests\npytest\n\n# Run with coverage\npytest --cov=prompt_decorators\n</code></pre>"},{"location":"code_quality_integration/#coverage","title":"Coverage","text":"<p>Coverage.py is used to measure test coverage.</p> <p>Configuration is in <code>.coveragerc</code>:</p> <pre><code>[run]\nsource = prompt_decorators\nomit = tests/*\n\n[report]\nexclude_lines =\n    pragma: no cover\n    def __repr__\n    raise NotImplementedError\n</code></pre>"},{"location":"code_quality_integration/#documentation-quality","title":"Documentation Quality","text":""},{"location":"code_quality_integration/#doc8","title":"Doc8","text":"<p>Doc8 is used to check documentation quality.</p> <p>Configuration is in <code>pyproject.toml</code>:</p> <pre><code>[tool.doc8]\nmax-line-length = 100\nignore = [\"D001\"]\n</code></pre> <p>Usage:</p> <pre><code>doc8 docs/\n</code></pre>"},{"location":"code_quality_integration/#security-scanning","title":"Security Scanning","text":""},{"location":"code_quality_integration/#bandit","title":"Bandit","text":"<p>Bandit is used for security vulnerability scanning.</p> <p>Configuration is in <code>.bandit</code>:</p> <pre><code>[bandit]\nexclude = tests\n</code></pre> <p>Usage:</p> <pre><code>bandit -r prompt_decorators\n</code></pre>"},{"location":"code_quality_integration/#pre-commit-integration","title":"Pre-commit Integration","text":"<p>The project uses pre-commit to run quality checks before each commit.</p> <p>Configuration is in <code>.pre-commit-config.yaml</code>:</p> <pre><code>repos:\n-   repo: https://github.com/charliermarsh/ruff-pre-commit\n    rev: v0.0.262\n    hooks:\n    -   id: ruff\n        args: [--fix]\n    -   id: ruff-format\n\n-   repo: https://github.com/pre-commit/mirrors-mypy\n    rev: v1.3.0\n    hooks:\n    -   id: mypy\n        additional_dependencies: [types-requests, types-PyYAML]\n\n-   repo: https://github.com/PyCQA/bandit\n    rev: 1.7.5\n    hooks:\n    -   id: bandit\n        args: [-c, .bandit]\n        exclude: tests/\n\n-   repo: https://github.com/pycqa/doc8\n    rev: v1.1.1\n    hooks:\n    -   id: doc8\n        args: [--max-line-length=100]\n</code></pre> <p>Installation:</p> <pre><code>pip install pre-commit\npre-commit install\n</code></pre> <p>Usage:</p> <pre><code># Run on all files\npre-commit run --all-files\n\n# Run automatically on commit\ngit commit -m \"Your commit message\"\n</code></pre>"},{"location":"code_quality_integration/#continuous-integration","title":"Continuous Integration","text":""},{"location":"code_quality_integration/#github-actions","title":"GitHub Actions","text":"<p>The project uses GitHub Actions for continuous integration.</p>"},{"location":"code_quality_integration/#test-workflow","title":"Test Workflow","text":"<p>The test workflow runs tests on Python 3.11:</p> <pre><code>name: Tests\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: ['3.11']\n\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.python-version }}\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n</code></pre>"},{"location":"code_quality_integration/#lint-workflow","title":"Lint Workflow","text":"<p>The lint workflow checks code style and typing:</p> <pre><code>name: Lint\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  lint:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.11'\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install ruff mypy\n        pip install -e \".[dev]\"\n    - name: Lint with ruff\n      run: |\n        ruff check .\n    - name: Check formatting with ruff\n      run: |\n        ruff format --check .\n    - name: Type check with mypy\n      run: |\n        mypy prompt_decorators\n</code></pre>"},{"location":"code_quality_integration/#docs-workflow","title":"Docs Workflow","text":"<p>The docs workflow builds and validates documentation:</p> <pre><code>name: Docs\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  docs:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.11'\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -e \".[docs]\"\n    - name: Build docs\n      run: |\n        cd docs\n        mkdocs build --strict\n    - name: Check documentation quality\n      run: |\n        doc8 docs/\n</code></pre>"},{"location":"code_quality_integration/#code-quality-metrics","title":"Code Quality Metrics","text":""},{"location":"code_quality_integration/#coverage-reporting","title":"Coverage Reporting","text":"<p>The project uses Codecov for coverage reporting.</p> <p>Integration is through GitHub Actions:</p> <pre><code>- name: Upload coverage to Codecov\n  uses: codecov/codecov-action@v3\n  with:\n    file: ./coverage.xml\n</code></pre>"},{"location":"code_quality_integration/#code-quality-badges","title":"Code Quality Badges","text":"<p>The project includes badges in the README.md to show code quality metrics:</p> <pre><code>[![Tests](https://github.com/synaptiai/prompt-decorators/actions/workflows/tests.yml/badge.svg)](https://github.com/synaptiai/prompt-decorators/actions/workflows/tests.yml)\n[![Codecov](https://codecov.io/gh/synaptiai/prompt-decorators/branch/main/graph/badge.svg)](https://codecov.io/gh/synaptiai/prompt-decorators)\n[![Documentation Status](https://github.com/synaptiai/prompt-decorators/actions/workflows/docs.yml/badge.svg)](https://github.com/synaptiai/prompt-decorators/actions/workflows/docs.yml)\n</code></pre>"},{"location":"code_quality_integration/#pull-request-quality-checks","title":"Pull Request Quality Checks","text":"<p>Pull requests must pass all quality checks before merging:</p> <ol> <li>All tests must pass</li> <li>Code must be properly formatted</li> <li>Type checking must pass</li> <li>Documentation must build successfully</li> <li>Test coverage must not decrease</li> </ol> <p>GitHub branch protection rules enforce these requirements.</p>"},{"location":"code_quality_integration/#developer-workflow","title":"Developer Workflow","text":""},{"location":"code_quality_integration/#local-quality-checks","title":"Local Quality Checks","text":"<p>Developers should run quality checks locally before pushing:</p> <pre><code># Format code\nruff format .\n\n# Check code\nruff check .\n\n# Run type checking\nmypy prompt_decorators\n\n# Run tests\npytest\n\n# Build docs\ncd docs &amp;&amp; mkdocs build\n</code></pre>"},{"location":"code_quality_integration/#cicd-pipeline","title":"CI/CD Pipeline","text":"<p>The CI/CD pipeline follows these steps:</p> <ol> <li>Lint: Check code style and formatting</li> <li>Type Check: Verify type annotations</li> <li>Test: Run unit and integration tests</li> <li>Coverage: Generate coverage reports</li> <li>Docs: Build and validate documentation</li> <li>Security: Scan for security vulnerabilities</li> <li>Release: (On main branch) Build and publish package</li> </ol>"},{"location":"code_quality_integration/#setting-up-quality-tools","title":"Setting Up Quality Tools","text":""},{"location":"code_quality_integration/#for-new-contributors","title":"For New Contributors","text":"<p>New contributors should set up the quality tools:</p> <pre><code># Clone the repository\ngit clone https://github.com/synaptiai/prompt-decorators.git\ncd prompt-decorators\n\n# Install dependencies\npip install -e \".[dev,test,docs]\"\n\n# Install pre-commit hooks\npre-commit install\n</code></pre>"},{"location":"code_quality_integration/#for-cicd-systems","title":"For CI/CD Systems","text":"<p>CI/CD systems should install the necessary dependencies:</p> <pre><code># Install dependencies\npython -m pip install --upgrade pip\npip install -e \".[dev,test,docs]\"\n</code></pre>"},{"location":"code_quality_integration/#best-practices","title":"Best Practices","text":""},{"location":"code_quality_integration/#code-style","title":"Code Style","text":"<ul> <li>Follow PEP 8 style guidelines</li> <li>Use consistent naming conventions</li> <li>Keep functions and methods focused and small</li> <li>Use descriptive variable names</li> </ul>"},{"location":"code_quality_integration/#type-annotations","title":"Type Annotations","text":"<ul> <li>Use type annotations for all functions and methods</li> <li>Use <code>Optional[T]</code> for parameters that could be <code>None</code></li> <li>Use <code>Union[T1, T2]</code> for parameters that could be multiple types</li> <li>Use <code>Any</code> only when absolutely necessary</li> </ul>"},{"location":"code_quality_integration/#testing_1","title":"Testing","text":"<ul> <li>Write tests for all new features and bug fixes</li> <li>Include both positive and negative test cases</li> <li>Test edge cases and error conditions</li> <li>Aim for high test coverage (&gt;90%)</li> </ul>"},{"location":"code_quality_integration/#documentation","title":"Documentation","text":"<ul> <li>Document all public APIs</li> <li>Keep documentation up to date with code changes</li> <li>Include examples in documentation</li> <li>Use clear, concise language</li> </ul>"},{"location":"code_quality_integration/#conclusion","title":"Conclusion","text":"<p>The Prompt Decorators project maintains high code quality through a combination of automated tools, continuous integration, and developer best practices. By following these guidelines, contributors can help ensure the project remains maintainable, reliable, and secure.</p>"},{"location":"compatibility/","title":"Compatibility","text":"<p>This guide explains compatibility considerations for the Prompt Decorators framework, including LLM provider compatibility, decorator conflicts, and integration options.</p>"},{"location":"compatibility/#llm-provider-compatibility","title":"LLM Provider Compatibility","text":"<p>The Prompt Decorators framework is designed to work with any LLM provider, as it transforms decorators into natural language instructions that any model can understand. However, there might be important considerations for each provider.</p>"},{"location":"compatibility/#openai","title":"OpenAI","text":"<p>OpenAI models work well with Prompt Decorators.</p> <pre><code>import openai\nfrom prompt_decorators import apply_dynamic_decorators\n\n# Create a decorated prompt\nprompt = \"\"\"\n+++StepByStep(numbered=true)\n+++Audience(level=\"beginner\")\nExplain quantum computing.\n\"\"\"\ntransformed_prompt = apply_dynamic_decorators(prompt)\n\n# Send to OpenAI\nresponse = openai.chat.completions.create(\n    model=\"gpt-4o\",\n    messages=[\n        {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n        {\"role\": \"user\", \"content\": transformed_prompt}\n    ]\n)\n</code></pre>"},{"location":"compatibility/#considerations","title":"Considerations","text":"<ul> <li>gpt-4o and newer models have the best understanding of complex instructions</li> <li>Add an explicit <code>system</code> message to set baseline behavior</li> </ul>"},{"location":"compatibility/#anthropic-claude","title":"Anthropic Claude","text":"<p>Claude models work well with Prompt Decorators' natural language transformations.</p> <pre><code>import anthropic\nfrom prompt_decorators import apply_dynamic_decorators\n\n# Set up Anthropic client\nclient = anthropic.Anthropic(api_key=\"your-anthropic-api-key\")\n\n# Create a decorated prompt\nprompt = \"\"\"\n+++Reasoning(depth=\"comprehensive\")\n+++OutputFormat(format=\"markdown\")\nWhat are the implications of quantum computing for cryptography?\n\"\"\"\ntransformed_prompt = apply_dynamic_decorators(prompt)\n\n# Send to Anthropic Claude\nmessage = client.messages.create(\n    model=\"claude-3-7-sonnet-latest\",\n    max_tokens=1000,\n    messages=[\n        {\"role\": \"user\", \"content\": transformed_prompt}\n    ]\n)\n</code></pre>"},{"location":"compatibility/#considerations_1","title":"Considerations","text":"<ul> <li>Claude models excel at following structured instructions</li> <li>Use the Claude Desktop integration for seamless experience</li> </ul>"},{"location":"compatibility/#other-providers","title":"Other Providers","text":"<p>The framework is compatible with many other LLM providers:</p> <ul> <li>Hugging Face Models: Work well with explicit instructions generated by decorators</li> <li>Google Gemini: Compatible with transformer decorators</li> <li>Mistral AI: Works with instructions generated by the framework</li> <li>Llama/Llama 2/Llama 3: Compatible with properly transformed prompts</li> <li>Local models: Can use decorators with any locally deployed model</li> </ul>"},{"location":"compatibility/#decorator-compatibility-and-conflicts","title":"Decorator Compatibility and Conflicts","text":"<p>Some decorators may have incompatible behaviors. The framework handles conflicts according to these rules:</p> <ol> <li>Precedence Rule: When decorators have fundamentally incompatible requirements, the later decorator in the sequence takes precedence</li> <li>Parameter Conflicts: When facing a parameter conflict between decorators, the parameter in the later decorator takes precedence</li> <li>Graceful Degradation: If a model can't fully implement a decorator's behavior, it degrades gracefully with partial implementation</li> </ol>"},{"location":"compatibility/#known-decorator-conflicts","title":"Known Decorator Conflicts","text":"Decorator Incompatible With Reason Resolution <code>ELI5</code> <code>Technical</code>, <code>Academic</code> Contradictory audience adaptation Last decorator wins <code>Concise</code> <code>Detailed</code> Contradictory verbosity goals Last decorator wins <code>Inductive</code> <code>Deductive</code> Contradictory reasoning methods Last decorator wins <code>Bullet</code> <code>OutputFormat(format=json)</code> Structural conflict Last decorator wins"},{"location":"compatibility/#compatibility-checking","title":"Compatibility Checking","text":"<p>You can programmatically check for known conflicts:</p> <pre><code>from prompt_decorators import (\n    get_available_decorators,\n    create_decorator_instance\n)\n\n# Get decorator definitions\ndecorators = get_available_decorators()\n\n# Check if two decorators are compatible\ndef check_compatibility(decorator1_name, decorator2_name):\n    dec1 = next((d for d in decorators if d.name == decorator1_name), None)\n    dec2 = next((d for d in decorators if d.name == decorator2_name), None)\n\n    if not dec1 or not dec2:\n        return \"One or both decorators not found\"\n\n    # Check for known conflicts\n    known_conflicts = {\n        \"ELI5\": [\"Technical\", \"Academic\"],\n        \"Concise\": [\"Detailed\"],\n        \"Inductive\": [\"Deductive\"],\n        \"Bullet\": []  # Special case for OutputFormat conflicts\n    }\n\n    if dec1.name in known_conflicts and dec2.name in known_conflicts[dec1.name]:\n        return f\"Known conflict: {dec1.name} conflicts with {dec2.name}\"\n\n    if dec2.name in known_conflicts and dec1.name in known_conflicts[dec2.name]:\n        return f\"Known conflict: {dec2.name} conflicts with {dec1.name}\"\n\n    # Special case for OutputFormat with format=json and Bullet\n    if dec1.name == \"OutputFormat\" and dec2.name == \"Bullet\":\n        if hasattr(dec1, \"parameters\") and any(p.get(\"name\") == \"format\" and p.get(\"default\") == \"json\" for p in dec1.parameters):\n            return \"Conflict: OutputFormat(format=json) conflicts with Bullet\"\n\n    return \"No known conflicts\"\n\n# Example usage\nprint(check_compatibility(\"ELI5\", \"Technical\"))  # Known conflict\nprint(check_compatibility(\"StepByStep\", \"Reasoning\"))  # No conflict\n</code></pre>"},{"location":"compatibility/#integration-options","title":"Integration Options","text":""},{"location":"compatibility/#direct-integration","title":"Direct Integration","text":"<p>The simplest integration method is to apply decorators before sending prompts to an LLM:</p> <pre><code>from prompt_decorators import apply_dynamic_decorators\nfrom your_llm_client import LLMClient\n\nclient = LLMClient()\n\ndef enhanced_prompt(prompt_text, decorators=None):\n    decorated_text = prompt_text\n\n    # Apply inline decorators from the text\n    if \"+++\" in prompt_text:\n        decorated_text = apply_dynamic_decorators(prompt_text)\n\n    # Apply additional decorators programmatically\n    if decorators:\n        for decorator_name, params in decorators.items():\n            decorator = create_decorator_instance(decorator_name, **params)\n            decorated_text = decorator(decorated_text)\n\n    # Send to LLM\n    return client.generate(decorated_text)\n</code></pre>"},{"location":"compatibility/#mcp-integration","title":"MCP Integration","text":"<p>For Anthropic Claude and other compatible clients, use the Model Context Protocol (MCP) integration:</p> <pre><code># Run the MCP server (general use)\npython -m prompt_decorators.integrations.mcp\n\n# For Claude Desktop integration\npython -m prompt_decorators.integrations.mcp.claude_desktop\n</code></pre> <p>This exposes decorator functionality through a set of tools that can be used by any MCP-compatible client.</p>"},{"location":"compatibility/#middleware-integration","title":"Middleware Integration","text":"<p>For web applications or API services, you can implement decorators as middleware:</p> <pre><code>from fastapi import FastAPI, Request, Depends\nfrom prompt_decorators import apply_dynamic_decorators\n\napp = FastAPI()\n\nasync def prompt_decorator_middleware(request: Request):\n    # Extract the prompt from the request\n    body = await request.json()\n    if \"prompt\" in body:\n        body[\"prompt\"] = apply_dynamic_decorators(body[\"prompt\"])\n    return body\n\n@app.post(\"/generate\")\nasync def generate(data: dict = Depends(prompt_decorator_middleware)):\n    # The prompt has already been transformed by the middleware\n    return {\"result\": llm_client.generate(data[\"prompt\"])}\n</code></pre>"},{"location":"compatibility/#model-specific-optimization","title":"Model-Specific Optimization","text":"<p>Different models may respond better to slightly different instruction formats. You can optimize for specific models:</p> <pre><code>from prompt_decorators import DecoratorDefinition, register_decorator\n\n# Define model-specific versions of decorators\ngpt4_reasoning_decorator = DecoratorDefinition(\n    name=\"GPT4_Reasoning\",\n    description=\"Reasoning decorator optimized for gpt-4o\",\n    category=\"ModelSpecific\",\n    parameters=[\n        {\n            \"name\": \"depth\",\n            \"type\": \"enum\",\n            \"description\": \"Depth of reasoning\",\n            \"enum\": [\"basic\", \"moderate\", \"comprehensive\"],\n            \"default\": \"moderate\"\n        }\n    ],\n    transform_function=\"\"\"\n    let instruction = \"I want you to think through this step by step, showing your full reasoning process. \";\n\n    if (depth === \"basic\") {\n        instruction += \"Focus on the key logical steps.\";\n    } else if (depth === \"moderate\") {\n        instruction += \"Provide a balanced explanation with important details and connections.\";\n    } else if (depth === \"comprehensive\") {\n        instruction += \"Show a detailed, thorough analysis considering multiple angles and perspectives.\";\n    }\n\n    return instruction + \"\\\\n\\\\n\" + text;\n    \"\"\"\n)\n\n# Register the model-specific decorator\nregister_decorator(gpt4_reasoning_decorator)\n\n# Use based on the target model\ndef optimize_for_model(prompt, model_name):\n    if model_name.startswith(\"gpt-4o\"):\n        # Use gpt-4o optimized decorators\n        reasoning = create_decorator_instance(\"GPT4_Reasoning\", depth=\"comprehensive\")\n        return reasoning(prompt)\n    elif model_name.startswith(\"claude\"):\n        # Use Claude optimized decorators\n        reasoning = create_decorator_instance(\"Reasoning\", depth=\"comprehensive\")\n        return reasoning(prompt)\n    else:\n        # Use default decorators\n        reasoning = create_decorator_instance(\"Reasoning\", depth=\"comprehensive\")\n        return reasoning(prompt)\n</code></pre>"},{"location":"compatibility/#browser-extension-integration","title":"Browser Extension Integration","text":"<p>For services without direct API access, you can build browser extensions:</p> <pre><code>// JavaScript example for a browser extension\nfunction applyDecorators(text) {\n    // Simple regex-based parser for browser extension\n    const decoratorPattern = /\\+\\+\\+([A-Za-z]+)(?:\\(([^)]+)\\))?/g;\n    let transformed = text;\n\n    // Extract decorators\n    let decorators = [];\n    let match;\n    while ((match = decoratorPattern.exec(text)) !== null) {\n        const name = match[1];\n        const paramsStr = match[2] || \"\";\n\n        // Parse parameters\n        const params = {};\n        if (paramsStr) {\n            paramsStr.split(',').forEach(pair =&gt; {\n                const [key, value] = pair.split('=').map(s =&gt; s.trim());\n                params[key] = value;\n            });\n        }\n\n        decorators.push({ name, params, fullMatch: match[0] });\n    }\n\n    // Apply transformations (simplified)\n    decorators.forEach(dec =&gt; {\n        transformed = transformed.replace(dec.fullMatch, \"\");\n\n        if (dec.name === \"StepByStep\") {\n            const numbered = dec.params.numbered === \"true\";\n            transformed = `Please break down your response into ${numbered ? \"numbered\" : \"clear\"} steps.\\n\\n${transformed}`;\n        } else if (dec.name === \"Reasoning\") {\n            const depth = dec.params.depth || \"moderate\";\n            transformed = `Please provide ${depth} reasoning in your response.\\n\\n${transformed}`;\n        }\n        // Add more decorator implementations as needed\n    });\n\n    return transformed;\n}\n\n// Hook into webpage\ndocument.querySelector('#prompt-textarea').addEventListener('keydown', function(e) {\n    if (e.key === 'Enter' &amp;&amp; !e.shiftKey) {\n        const text = this.value;\n        if (text.includes('+++')) {\n            e.preventDefault();\n            this.value = applyDecorators(text);\n            // Then submit the form programmatically\n            document.querySelector('form').submit();\n        }\n    }\n});\n</code></pre>"},{"location":"compatibility/#next-steps","title":"Next Steps","text":"<ul> <li>Explore MCP integration for Claude and other LLMs</li> <li>Learn about creating custom decorators optimized for specific models</li> <li>Check the tutorials for examples of compatible decorator combinations</li> </ul>"},{"location":"concepts/","title":"Core Concepts","text":"<p>This document explains the core concepts behind the Prompt Decorators framework, including its design philosophy, implementation approach, and key components.</p>"},{"location":"concepts/#what-are-prompt-decorators","title":"What are Prompt Decorators?","text":"<p>Prompt Decorators are a structured framework for enhancing prompts sent to Large Language Models (LLMs). Based on the decorator pattern in software design, they provide a consistent way to modify how AI models process and respond to requests.</p> <p>The framework uses a simple syntax where decorators are prefixed with <code>+++</code> followed by a decorator name and optional parameters, allowing users to consistently control AI behavior across different platforms.</p>"},{"location":"concepts/#key-features","title":"Key Features","text":"<ul> <li>Standardized Syntax: Consistent way to apply modifications across different prompts</li> <li>Composability: Multiple decorators can be combined for complex behaviors</li> <li>Extensibility: The framework supports custom decorator definitions</li> <li>Minimal Token Usage: Concise annotations that reduce token consumption</li> <li>Dynamic Implementation: Runtime modification without code generation</li> </ul>"},{"location":"concepts/#design-philosophy","title":"Design Philosophy","text":"<p>The Prompt Decorators framework is designed around these principles:</p> <ol> <li>Simplicity: Decorators should be easy to learn, remember, and apply</li> <li>Consistency: Behavior should be predictable across different models and contexts</li> <li>Composability: Decorators should work well together without conflicts</li> <li>Extensibility: The framework should allow for new decorators as needs evolve</li> <li>Human Readability: Syntax should be comprehensible to humans, not just machines</li> </ol>"},{"location":"concepts/#core-components","title":"Core Components","text":""},{"location":"concepts/#1-decorator-syntax","title":"1. Decorator Syntax","text":"<p>The canonical syntax for a Prompt Decorator follows this pattern:</p> <pre><code>+++&lt;DecoratorName&gt;[(parameter1=value1[, parameter2=value2, ...])]\n</code></pre> <p>Where: - <code>+++</code> is the decorator prefix that identifies a decorator - <code>&lt;DecoratorName&gt;</code> is the case-sensitive name of the decorator - Parameters are optional and enclosed in parentheses - Multiple parameters are separated by commas - Parameter names and values are separated by equals signs</p> <p>Example: <pre><code>+++StepByStep(numbered=true)\nExplain how nuclear fusion works.\n</code></pre></p>"},{"location":"concepts/#2-dynamic-decorator-implementation","title":"2. Dynamic Decorator Implementation","text":"<p>The framework uses a dynamic implementation that loads decorator definitions at runtime, eliminating the need for code generation. This approach offers several advantages:</p> <ul> <li>Flexibility: Decorators can be created and modified without regenerating code</li> <li>Runtime Loading: Decorators are loaded from definitions when needed</li> <li>Extensibility: Custom decorators can be defined and used immediately</li> </ul>"},{"location":"concepts/#3-decorator-registry","title":"3. Decorator Registry","text":"<p>The framework maintains a registry of available decorators, including their:</p> <ul> <li>Name: Unique identifier for the decorator</li> <li>Description: Purpose and behavior of the decorator</li> <li>Category: Functional grouping (reasoning, format, style, etc.)</li> <li>Parameters: Configurable options with types and default values</li> <li>Transform Function: JavaScript function that defines the transformation logic</li> </ul>"},{"location":"concepts/#4-decorator-categories","title":"4. Decorator Categories","text":"<p>Decorators are organized into functional categories:</p> <ul> <li>Reasoning: Enhance logical thinking and problem-solving (e.g., <code>Reasoning</code>, <code>StepByStep</code>, <code>TreeOfThought</code>)</li> <li>Format: Control output format and structure (e.g., <code>OutputFormat</code>, <code>Bullet</code>, <code>TableFormat</code>)</li> <li>Style: Modify tone, voice, and writing style (e.g., <code>Tone</code>, <code>Academic</code>, <code>Creative</code>)</li> <li>Audience: Target specific audiences (e.g., <code>Audience</code>, <code>ELI5</code>, <code>Technical</code>)</li> <li>Persona: Adopt specific roles or personalities (e.g., <code>Persona</code>, <code>AsExpert</code>, <code>Professional</code>)</li> <li>Domain: Focus on specific knowledge domains (e.g., <code>Scientific</code>, <code>Legal</code>, <code>Medical</code>)</li> <li>Length: Control response length (e.g., <code>Concise</code>, <code>Detailed</code>, <code>Summary</code>)</li> </ul>"},{"location":"concepts/#core-classes-and-functions","title":"Core Classes and Functions","text":""},{"location":"concepts/#decoratorbase","title":"DecoratorBase","text":"<p>The abstract base class for all decorators, providing common functionality:</p> <pre><code>class DecoratorBase:\n    \"\"\"Base class for all decorators.\"\"\"\n\n    def __init__(self, **kwargs):\n        \"\"\"Initialize with parameters as keyword arguments.\"\"\"\n\n    def __call__(self, text: str) -&gt; str:\n        \"\"\"Apply the decorator to the given text.\"\"\"\n\n    def to_string(self) -&gt; str:\n        \"\"\"Convert the decorator to its string representation.\"\"\"\n</code></pre>"},{"location":"concepts/#dynamicdecorator","title":"DynamicDecorator","text":"<p>The implementation class for dynamically defined decorators:</p> <pre><code>class DynamicDecorator(DecoratorBase):\n    \"\"\"Dynamic decorator implementation.\"\"\"\n\n    @classmethod\n    def from_definition(cls, definition: DecoratorDefinition) -&gt; 'DynamicDecorator':\n        \"\"\"Create a decorator class from a definition.\"\"\"\n\n    def __call__(self, text: str) -&gt; str:\n        \"\"\"Apply the decorator to the given text.\"\"\"\n</code></pre>"},{"location":"concepts/#decoratordefinition","title":"DecoratorDefinition","text":"<p>The class that defines a decorator's properties:</p> <pre><code>class DecoratorDefinition:\n    \"\"\"Definition of a decorator.\"\"\"\n\n    def __init__(\n        self,\n        name: str,\n        description: str,\n        category: str,\n        parameters: List[Dict[str, Any]],\n        transform_function: str\n    ):\n        \"\"\"Initialize a decorator definition.\"\"\"\n</code></pre>"},{"location":"concepts/#key-functions","title":"Key Functions","text":"<ul> <li>apply_dynamic_decorators: Parse and apply decorators from a text prompt</li> <li>create_decorator_instance: Create an instance of a decorator by name</li> <li>get_available_decorators: Get a list of all registered decorators</li> <li>register_decorator: Register a new decorator definition</li> </ul>"},{"location":"concepts/#transformation-process","title":"Transformation Process","text":"<p>When decorators are applied to a prompt, the framework follows these steps:</p> <ol> <li>Parsing: Extract decorator names, parameters, and the base prompt text</li> <li>Loading: Load decorator definitions from the registry</li> <li>Parameter Validation: Validate parameter values against definitions</li> <li>Transformation: Apply each decorator's transform function in sequence</li> <li>Composition: Combine the transformed text from multiple decorators</li> </ol> <p>The transformation converts decorator annotations into natural language instructions that the LLM can understand:</p> <pre><code># Original prompt with decorator\n+++Reasoning(depth=comprehensive)\nWhat are the environmental impacts of electric vehicles?\n\n# Transformed prompt\nPlease provide detailed reasoning in your response. Show your thought process step by step before reaching a conclusion. Provide a very thorough and detailed analysis with multiple perspectives.\n\nWhat are the environmental impacts of electric vehicles?\n</code></pre>"},{"location":"concepts/#decorator-compatibility","title":"Decorator Compatibility","text":"<p>The framework includes mechanisms for handling decorator conflicts:</p> <ol> <li>Precedence: When decorators have incompatible requirements, the later decorator takes precedence</li> <li>Parameter Conflicts: For parameter conflicts, the parameter in the later decorator takes precedence</li> <li>Documentation: The framework provides documentation on known decorator conflicts</li> </ol>"},{"location":"concepts/#extension-mechanisms","title":"Extension Mechanisms","text":"<p>The framework supports several extension mechanisms:</p> <ol> <li>Custom Decorators: Users can define and register their own decorators</li> <li>Decorator Packages: Collections of related decorators can be packaged and distributed</li> <li>Integration Adapters: The framework can be integrated with different LLM providers and platforms</li> </ol>"},{"location":"concepts/#next-steps","title":"Next Steps","text":"<ul> <li>Learn how to create custom decorators</li> <li>Explore the MCP integration for using decorators with Claude and other LLMs</li> <li>See the specification for detailed technical information</li> </ul>"},{"location":"contributing/","title":"Contributing to Prompt Decorators","text":"<p>Thank you for your interest in contributing to the Prompt Decorators project! This document provides guidelines and instructions for contributing.</p>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>Please read and follow our Code of Conduct.</p>"},{"location":"contributing/#how-to-contribute","title":"How to Contribute","text":"<p>There are many ways to contribute to the Prompt Decorators project:</p> <ol> <li>Report bugs: If you find a bug, please create an issue on our GitHub repository.</li> <li>Suggest features: If you have an idea for a new feature, please create an issue on our GitHub repository.</li> <li>Improve documentation: Help us improve our documentation by fixing typos, adding examples, or clarifying explanations.</li> <li>Write code: Contribute bug fixes, new features, or improvements to existing features.</li> </ol>"},{"location":"contributing/#development-setup","title":"Development Setup","text":""},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11 or higher</li> <li>Poetry (dependency management)</li> <li>git</li> </ul>"},{"location":"contributing/#setting-up-the-development-environment","title":"Setting Up the Development Environment","text":"<ol> <li>Fork the repository on GitHub.</li> <li>Clone your fork locally:    <pre><code>git clone https://github.com/yourusername/prompt-decorators.git\ncd prompt-decorators\n</code></pre></li> <li>Install Poetry if you don't have it already:    <pre><code>curl -sSL https://install.python-poetry.org | python3 -\n</code></pre></li> <li>Install the package with all dependencies:    <pre><code>poetry install\n</code></pre></li> </ol>"},{"location":"contributing/#running-tests","title":"Running Tests","text":"<p>We use pytest for testing. To run the tests:</p> <pre><code>poetry run pytest\n</code></pre> <p>To run tests with coverage:</p> <pre><code>poetry run pytest --cov=prompt_decorators\n</code></pre>"},{"location":"contributing/#code-style","title":"Code Style","text":"<p>We follow the PEP 8 style guide for Python code. We use the following tools to enforce code style:</p> <ul> <li>black: For code formatting</li> <li>isort: For import sorting</li> <li>ruff: For linting</li> </ul> <p>To format your code:</p> <pre><code>poetry run black prompt_decorators tests\npoetry run isort prompt_decorators tests\n</code></pre> <p>To check your code for style issues:</p> <pre><code>poetry run ruff check prompt_decorators tests\n</code></pre>"},{"location":"contributing/#type-checking","title":"Type Checking","text":"<p>We use mypy for type checking. To run type checking:</p> <pre><code>poetry run mypy prompt_decorators\n</code></pre>"},{"location":"contributing/#docstring-standards","title":"Docstring Standards","text":"<p>We follow Google-style docstrings for all Python code. Please refer to our Docstring Standards for detailed guidelines.</p> <p>To check if your docstrings follow our standards:</p> <pre><code>./standardize_docstrings.py path/to/your/file.py --report\n</code></pre> <p>To automatically fix common docstring issues:</p> <pre><code>./fix_docstrings.py path/to/your/file.py\n</code></pre> <p>We've also set up pre-commit hooks to check docstrings before commits:</p> <pre><code># Install pre-commit hooks\npoetry run pre-commit install\n</code></pre>"},{"location":"contributing/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>We use pre-commit hooks to check code style, types, and docstrings before commits. To install the pre-commit hooks:</p> <pre><code>poetry run pre-commit install\n</code></pre>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Create a new branch for your feature or bug fix:    <pre><code>git checkout -b feature/your-feature-name\n</code></pre></li> <li>Make your changes and commit them with a descriptive commit message.</li> <li>Push your branch to your fork:    <pre><code>git push origin feature/your-feature-name\n</code></pre></li> <li>Create a pull request from your branch to the main repository.</li> <li>Ensure that all tests pass and there are no style issues.</li> <li>Update the documentation if necessary.</li> <li>Wait for a maintainer to review your pull request.</li> </ol>"},{"location":"contributing/#adding-a-new-decorator","title":"Adding a New Decorator","text":"<p>To add a new decorator to the registry:</p> <ol> <li>Create a new JSON file in the appropriate category directory under <code>registry/</code>.</li> <li>Define the decorator's parameters, constraints, and metadata.</li> <li>Run the code generation script:    <pre><code>poetry run python generate_decorators.py\n</code></pre></li> <li>Add tests for your new decorator.</li> <li>Update the documentation if necessary.</li> </ol>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>We use MkDocs with the Material theme for documentation. To build the documentation locally:</p> <pre><code># Generate API and decorator documentation\ncd docs\npython generate_docs.py\n\n# Serve documentation locally\npoetry run mkdocs serve\n</code></pre> <p>This will start a local server at http://localhost:8000 where you can preview the documentation.</p> <p>Important: Always use <code>docs/generate_docs.py</code> to regenerate the API reference and decorator documentation before building or serving with MkDocs. Any other documentation generators found in the codebase are deprecated.</p>"},{"location":"contributing/#license","title":"License","text":"<p>By contributing to the Prompt Decorators project, you agree that your contributions will be licensed under the project's MIT License.</p>"},{"location":"creating_decorators/","title":"Creating Decorators","text":"<p>This guide explains how to create your own custom decorators with the Prompt Decorators framework.</p>"},{"location":"creating_decorators/#overview","title":"Overview","text":"<p>Custom decorators allow you to extend the framework with your own specialized behaviors. This is useful for:</p> <ul> <li>Creating domain-specific decorators for your field</li> <li>Building organization-specific prompt enhancements</li> <li>Optimizing decorators for particular LLM providers</li> <li>Implementing novel prompt engineering techniques</li> </ul>"},{"location":"creating_decorators/#decorator-structure","title":"Decorator Structure","text":"<p>Each decorator consists of:</p> <ol> <li>A name that uniquely identifies it</li> <li>A description explaining its purpose</li> <li>A category for organizational purposes</li> <li>A set of parameters that control its behavior</li> <li>A transform function that applies the decoration</li> </ol>"},{"location":"creating_decorators/#creating-a-basic-decorator","title":"Creating a Basic Decorator","text":""},{"location":"creating_decorators/#using-decoratordefinition","title":"Using DecoratorDefinition","text":"<p>The simplest way to create a custom decorator is using the <code>DecoratorDefinition</code> class:</p> <pre><code>from prompt_decorators import (\n    DecoratorDefinition,\n    register_decorator,\n    create_decorator_instance\n)\n\n# Define a custom decorator\nmy_decorator_def = DecoratorDefinition(\n    name=\"CustomPrefix\",\n    description=\"Adds a custom prefix to the prompt\",\n    category=\"Format\",\n    parameters=[\n        {\n            \"name\": \"prefix\",\n            \"type\": \"string\",\n            \"description\": \"Text to add before the prompt\",\n            \"default\": \"IMPORTANT: \"\n        }\n    ],\n    transform_function=\"return prefix + text;\"\n)\n\n# Register the decorator for use\nregister_decorator(my_decorator_def)\n\n# Create and use an instance of your decorator\ncustom_prefix = create_decorator_instance(\"CustomPrefix\", prefix=\"ATTENTION: \")\nresult = custom_prefix(\"Please review this document carefully.\")\nprint(result)  # \"ATTENTION: Please review this document carefully.\"\n</code></pre>"},{"location":"creating_decorators/#transform-function","title":"Transform Function","text":"<p>The <code>transform_function</code> is the heart of your decorator. It's a JavaScript function (as a string) that takes the input text and applies the decoration. The function has access to:</p> <ul> <li>All defined parameters (e.g., <code>prefix</code> in the example above)</li> <li>The input text as <code>text</code></li> <li>Must return the transformed text</li> </ul> <p>Examples of transform functions:</p> <pre><code>// Simple addition of prefix and suffix\n\"return prefix + text + suffix;\"\n\n// Conditional transformation\n\"if (style === 'formal') { return 'Formally: ' + text; } else { return 'Casually: ' + text; }\"\n\n// Text manipulation\n\"return text.split('.').join('.\\n').trim();\"\n</code></pre>"},{"location":"creating_decorators/#parameters","title":"Parameters","text":"<p>Parameters allow your decorator to be customized. Each parameter has these properties:</p> <ul> <li><code>name</code>: The parameter's identifier</li> <li><code>type</code>: Data type (<code>string</code>, <code>boolean</code>, <code>number</code>, <code>enum</code>)</li> <li><code>description</code>: Documentation for the parameter</li> <li><code>default</code>: Default value if not specified</li> <li><code>enum</code> (optional): List of allowed values for enum types</li> </ul> <p>Example of complex parameters:</p> <pre><code>parameters=[\n    {\n        \"name\": \"style\",\n        \"type\": \"enum\",\n        \"description\": \"The style of formatting to apply\",\n        \"enum\": [\"formal\", \"casual\", \"technical\"],\n        \"default\": \"formal\"\n    },\n    {\n        \"name\": \"include_timestamp\",\n        \"type\": \"boolean\",\n        \"description\": \"Whether to include a timestamp\",\n        \"default\": False\n    },\n    {\n        \"name\": \"indent_level\",\n        \"type\": \"number\",\n        \"description\": \"Level of indentation (0-4)\",\n        \"default\": 0\n    }\n]\n</code></pre>"},{"location":"creating_decorators/#advanced-decorator-creation","title":"Advanced Decorator Creation","text":""},{"location":"creating_decorators/#composition-of-decorators","title":"Composition of Decorators","text":"<p>You can create decorators that compose other decorators:</p> <pre><code>composite_decorator_def = DecoratorDefinition(\n    name=\"FormalSteps\",\n    description=\"Combines formal tone with step-by-step instructions\",\n    category=\"Composite\",\n    parameters=[\n        {\n            \"name\": \"numbered\",\n            \"type\": \"boolean\",\n            \"description\": \"Whether to number the steps\",\n            \"default\": True\n        }\n    ],\n    # First apply Tone(style=formal), then StepByStep with the numbered parameter\n    transform_function=\"\"\"\n    const toneDecorator = createDecoratorInstance('Tone', { style: 'formal' });\n    const stepDecorator = createDecoratorInstance('StepByStep', { numbered: numbered });\n    return stepDecorator(toneDecorator(text));\n    \"\"\"\n)\n</code></pre>"},{"location":"creating_decorators/#conditional-logic","title":"Conditional Logic","text":"<p>You can use conditional logic in your transform function:</p> <pre><code>conditional_decorator_def = DecoratorDefinition(\n    name=\"AdaptiveResponse\",\n    description=\"Adapts the response based on complexity\",\n    category=\"Adaptive\",\n    parameters=[\n        {\n            \"name\": \"complexity\",\n            \"type\": \"enum\",\n            \"description\": \"Complexity level of the input\",\n            \"enum\": [\"simple\", \"moderate\", \"complex\"],\n            \"default\": \"moderate\"\n        }\n    ],\n    transform_function=\"\"\"\n    if (complexity === 'simple') {\n        const eli5 = createDecoratorInstance('ELI5');\n        return eli5(text);\n    } else if (complexity === 'moderate') {\n        const audience = createDecoratorInstance('Audience', { level: 'intermediate' });\n        return audience(text);\n    } else {\n        const detailed = createDecoratorInstance('Detailed', { depth: 'comprehensive' });\n        return detailed(text);\n    }\n    \"\"\"\n)\n</code></pre>"},{"location":"creating_decorators/#advanced-text-processing","title":"Advanced Text Processing","text":"<p>For more complex transformations, you can perform detailed text processing:</p> <pre><code>text_processor_def = DecoratorDefinition(\n    name=\"QueryFocus\",\n    description=\"Focuses a query on specific aspects\",\n    category=\"Query\",\n    parameters=[\n        {\n            \"name\": \"aspects\",\n            \"type\": \"string\",\n            \"description\": \"Comma-separated list of aspects to focus on\",\n            \"default\": \"pros,cons\"\n        }\n    ],\n    transform_function=\"\"\"\n    const aspectList = aspects.split(',').map(a =&gt; a.trim());\n    let result = \"Please focus your analysis on the following aspects:\\\\n\";\n\n    for (let i = 0; i &lt; aspectList.length; i++) {\n        result += `${i+1}. ${aspectList[i]}\\\\n`;\n    }\n\n    result += \"\\\\n\" + text;\n    return result;\n    \"\"\"\n)\n</code></pre>"},{"location":"creating_decorators/#best-practices","title":"Best Practices","text":""},{"location":"creating_decorators/#parameter-design","title":"Parameter Design","text":"<ol> <li>Default Values: Always provide sensible default values for parameters</li> <li>Clear Names: Use descriptive, self-explanatory parameter names</li> <li>Limited Options: For enum types, limit options to a manageable set</li> <li>Documentation: Thoroughly document each parameter's purpose and effect</li> </ol>"},{"location":"creating_decorators/#transform-function_1","title":"Transform Function","text":"<ol> <li>Keep It Simple: Prefer simple transforms that do one thing well</li> <li>Error Handling: Include error handling for unexpected inputs</li> <li>Performance: Avoid unnecessary complexity that could impact performance</li> <li>Testability: Create transforms that can be easily tested</li> </ol>"},{"location":"creating_decorators/#documentation","title":"Documentation","text":"<ol> <li>Clear Description: Provide a concise, clear description of what your decorator does</li> <li>Examples: Include examples of how to use your decorator</li> <li>Category: Choose an appropriate category that matches your decorator's purpose</li> <li>Compatibility: Document any known conflicts with other decorators</li> </ol>"},{"location":"creating_decorators/#testing-your-decorators","title":"Testing Your Decorators","text":"<p>To test your custom decorators:</p> <pre><code># Define and register your decorator\nmy_decorator_def = DecoratorDefinition(...)\nregister_decorator(my_decorator_def)\n\n# Test with different inputs\ntest_cases = [\n    \"Simple test case\",\n    \"Another test with different format\",\n    \"Edge case with special characters: @#$%^&amp;*()\"\n]\n\nmy_decorator = create_decorator_instance(\"MyDecorator\", param1=\"value1\")\n\nfor test in test_cases:\n    transformed = my_decorator(test)\n    print(f\"Original: {test}\")\n    print(f\"Transformed: {transformed}\")\n    print(\"-\" * 50)\n</code></pre>"},{"location":"creating_decorators/#loading-decorators-from-files","title":"Loading Decorators from Files","text":"<p>For reusability, you can define decorators in JSON files:</p> <pre><code>{\n  \"name\": \"BulletedSummary\",\n  \"description\": \"Creates a bulleted summary format\",\n  \"category\": \"Format\",\n  \"parameters\": [\n    {\n      \"name\": \"points\",\n      \"type\": \"number\",\n      \"description\": \"Number of bullet points to request\",\n      \"default\": 5\n    },\n    {\n      \"name\": \"style\",\n      \"type\": \"enum\",\n      \"description\": \"Bullet point style\",\n      \"enum\": [\"dash\", \"star\", \"arrow\"],\n      \"default\": \"dash\"\n    }\n  ],\n  \"transform_function\": \"return `Please summarize the following into ${points} key points using ${style === 'dash' ? '-' : style === 'star' ? '*' : '\u2192'} as bullet points:\\\\n\\\\n${text}`;\"\n}\n</code></pre> <p>Load and register this decorator:</p> <pre><code>import json\nfrom prompt_decorators import DecoratorDefinition, register_decorator\n\n# Load from a JSON file\nwith open(\"path/to/my_decorators.json\", \"r\") as f:\n    decorators_data = json.load(f)\n\n# If it's a single decorator\ndecorator_def = DecoratorDefinition(**decorators_data)\nregister_decorator(decorator_def)\n\n# If it's an array of decorators\nfor decorator_data in decorators_data:\n    decorator_def = DecoratorDefinition(**decorator_data)\n    register_decorator(decorator_def)\n</code></pre>"},{"location":"creating_decorators/#decorator-registry-management","title":"Decorator Registry Management","text":""},{"location":"creating_decorators/#listing-decorators","title":"Listing Decorators","text":"<pre><code>from prompt_decorators import get_available_decorators\n\n# Get all decorators\nall_decorators = get_available_decorators()\n\n# Filter by category\nformat_decorators = [d for d in all_decorators if d.category == \"Format\"]\n\n# Find a specific decorator\nreasoning_decorator = next((d for d in all_decorators if d.name == \"Reasoning\"), None)\n</code></pre>"},{"location":"creating_decorators/#decorator-persistence","title":"Decorator Persistence","text":"<p>To persist your custom decorators across sessions, you can:</p> <ol> <li>Save them to JSON files</li> <li>Load and register them at application startup</li> <li>Organize them into decorator packages</li> </ol>"},{"location":"creating_decorators/#domain-specific-examples","title":"Domain-Specific Examples","text":""},{"location":"creating_decorators/#scientific-research-decorator","title":"Scientific Research Decorator","text":"<pre><code>scientific_method_def = DecoratorDefinition(\n    name=\"ScientificMethod\",\n    description=\"Structures response according to scientific method\",\n    category=\"Domain\",\n    parameters=[\n        {\n            \"name\": \"include_abstract\",\n            \"type\": \"boolean\",\n            \"description\": \"Whether to include an abstract section\",\n            \"default\": True\n        }\n    ],\n    transform_function=\"\"\"\n    let result = \"Please structure your response according to the scientific method with the following sections:\\\\n\";\n\n    if (include_abstract) {\n        result += \"1. Abstract: A brief summary of the entire analysis\\\\n\";\n    }\n\n    result += `${include_abstract ? \"2\" : \"1\"}. Question/Problem: Clearly define the research question\\\\n`;\n    result += `${include_abstract ? \"3\" : \"2\"}. Hypothesis: Formulate a testable hypothesis\\\\n`;\n    result += `${include_abstract ? \"4\" : \"3\"}. Methodology: Describe how to test the hypothesis\\\\n`;\n    result += `${include_abstract ? \"5\" : \"4\"}. Results: Present the expected findings\\\\n`;\n    result += `${include_abstract ? \"6\" : \"5\"}. Discussion: Interpret the results and their implications\\\\n`;\n    result += `${include_abstract ? \"7\" : \"6\"}. Conclusion: Summarize the findings and suggest next steps\\\\n\\\\n`;\n\n    result += text;\n    return result;\n    \"\"\"\n)\n</code></pre>"},{"location":"creating_decorators/#business-analysis-decorator","title":"Business Analysis Decorator","text":"<pre><code>business_analysis_def = DecoratorDefinition(\n    name=\"BusinessAnalysis\",\n    description=\"Structures response as a business analysis\",\n    category=\"Domain\",\n    parameters=[\n        {\n            \"name\": \"framework\",\n            \"type\": \"enum\",\n            \"description\": \"Business analysis framework to use\",\n            \"enum\": [\"SWOT\", \"Porter\", \"PESTEL\"],\n            \"default\": \"SWOT\"\n        }\n    ],\n    transform_function=\"\"\"\n    let result = `Please analyze the following using a ${framework} framework:\\\\n\\\\n`;\n\n    if (framework === \"SWOT\") {\n        result += \"Structure your analysis with these sections:\\\\n\";\n        result += \"1. Strengths: Internal positive factors\\\\n\";\n        result += \"2. Weaknesses: Internal negative factors\\\\n\";\n        result += \"3. Opportunities: External positive factors\\\\n\";\n        result += \"4. Threats: External negative factors\\\\n\\\\n\";\n    } else if (framework === \"Porter\") {\n        result += \"Structure your analysis using Porter's Five Forces:\\\\n\";\n        result += \"1. Threat of new entrants\\\\n\";\n        result += \"2. Bargaining power of buyers\\\\n\";\n        result += \"3. Bargaining power of suppliers\\\\n\";\n        result += \"4. Threat of substitute products or services\\\\n\";\n        result += \"5. Intensity of competitive rivalry\\\\n\\\\n\";\n    } else if (framework === \"PESTEL\") {\n        result += \"Structure your analysis using PESTEL framework:\\\\n\";\n        result += \"1. Political factors\\\\n\";\n        result += \"2. Economic factors\\\\n\";\n        result += \"3. Social factors\\\\n\";\n        result += \"4. Technological factors\\\\n\";\n        result += \"5. Environmental factors\\\\n\";\n        result += \"6. Legal factors\\\\n\\\\n\";\n    }\n\n    result += text;\n    return result;\n    \"\"\"\n)\n</code></pre>"},{"location":"creating_decorators/#next-steps","title":"Next Steps","text":"<ul> <li>Explore the Tutorial: Creating a Custom Decorator for step-by-step examples</li> <li>Learn about Tutorial: Combining Decorators for advanced use cases</li> <li>See the specification for technical details of the decorator system</li> </ul>"},{"location":"creating_decorators/#validating-custom-decorators","title":"Validating Custom Decorators","text":"<p>After creating a custom decorator, it's important to validate it to ensure it works correctly and follows the framework's standards.</p>"},{"location":"creating_decorators/#using-validator-tools","title":"Using Validator Tools","text":"<p>You can validate your custom decorator using the validation tools:</p> <pre><code># For JSON-based decorators, validate the schema\npython scripts/prompt_validator.py schema -f path/to/your/custom_decorator.json\n\n# To validate a decorator's syntax in a prompt\npython scripts/prompt_validator.py syntax -t \"+++CustomPrefix(prefix='CUSTOM: ')\\nThis is a test prompt.\"\n</code></pre>"},{"location":"creating_decorators/#validating-programmatically","title":"Validating Programmatically","text":"<p>You can also validate decorators programmatically:</p> <pre><code>from prompt_decorators.core.validation import TypeValidator, RangeValidator\n\n# Validate a parameter value\nstring_validator = TypeValidator(\"string\")\nis_valid = string_validator.validate(\"This is a string\")  # Returns the string if valid\n\n# Validate a numeric range\nrange_validator = RangeValidator(min_value=1, max_value=10)\nvalid_number = range_validator.validate(5)  # Returns 5 if valid\n# Will raise ValidationError for values outside the range\n\n# Validate a decorator's parameters using extract_decorators\nfrom prompt_decorators.core.dynamic_decorator import extract_decorators\n\nprompt = \"+++CustomPrefix(prefix='TEST: ')\\nMy prompt text.\"\ntry:\n    decorators, text = extract_decorators(prompt)\n    print(f\"Valid decorators found: {[d.name for d in decorators]}\")\nexcept Exception as e:\n    print(f\"Validation error: {e}\")\n</code></pre>"},{"location":"creating_decorators/#common-validation-issues","title":"Common Validation Issues","text":"<p>Watch out for these common issues when creating custom decorators:</p> <ol> <li>Parameter Type Mismatches: Ensure parameter values match their declared types</li> <li>Missing Required Parameters: All required parameters must be provided</li> <li>Invalid Transform Functions: Syntax errors in transform functions</li> <li>Naming Conflicts: Decorator names must be unique in the registry</li> </ol>"},{"location":"development/","title":"Development Setup","text":"<p>This guide will help you set up a development environment for contributing to the Prompt Decorators project.</p>"},{"location":"development/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following installed:</p> <ul> <li>Python 3.11 or higher</li> <li>Git</li> <li>Poetry (recommended) or pip</li> </ul>"},{"location":"development/#setting-up-your-development-environment","title":"Setting Up Your Development Environment","text":""},{"location":"development/#1-clone-the-repository","title":"1. Clone the Repository","text":"<pre><code>git clone https://github.com/synaptiai/prompt-decorators.git\ncd prompt-decorators\n</code></pre>"},{"location":"development/#2-set-up-a-virtual-environment","title":"2. Set Up a Virtual Environment","text":""},{"location":"development/#using-poetry-recommended","title":"Using Poetry (Recommended)","text":"<p>Poetry automatically creates and manages a virtual environment for you:</p> <pre><code># Install dependencies\npoetry install\n\n# Install development dependencies\npoetry install --with dev,test,docs\n</code></pre>"},{"location":"development/#using-venv-and-pip","title":"Using venv and pip","text":"<pre><code># Create a virtual environment\npython -m venv venv\n\n# Activate the virtual environment\n# On Windows:\nvenv\\Scripts\\activate\n# On macOS/Linux:\nsource venv/bin/activate\n\n# Install dependencies\npip install -e \".[dev,test,docs]\"\n</code></pre>"},{"location":"development/#3-install-pre-commit-hooks","title":"3. Install Pre-commit Hooks","text":"<p>We use pre-commit hooks to ensure code quality:</p> <pre><code># Install pre-commit\npip install pre-commit\n\n# Install the pre-commit hooks\npre-commit install\n</code></pre>"},{"location":"development/#4-run-tests-to-verify-setup","title":"4. Run Tests to Verify Setup","text":"<pre><code># Using Poetry\npoetry run pytest\n\n# Using pip\npytest\n</code></pre> <p>If all tests pass, your environment is set up correctly!</p>"},{"location":"development/#project-structure","title":"Project Structure","text":"<p>The project follows this structure:</p> <pre><code>prompt-decorators/\n\u251c\u2500\u2500 prompt_decorators/          # Main package\n\u2502   \u251c\u2500\u2500 __init__.py             # Package exports\n\u2502   \u251c\u2500\u2500 core/                   # Core decorator functionality\n\u2502   \u251c\u2500\u2500 schemas/                # JSON schemas\n\u2502   \u251c\u2500\u2500 utils/                  # Utility functions\n\u2502   \u2514\u2500\u2500 integrations/           # Integration with other systems\n\u251c\u2500\u2500 registry/                   # Decorator definitions\n\u251c\u2500\u2500 schemas/                    # JSON schema definitions\n\u251c\u2500\u2500 tests/                      # Test suite\n\u251c\u2500\u2500 docs/                       # Documentation\n\u251c\u2500\u2500 examples/                   # Example usage\n\u251c\u2500\u2500 scripts/                    # Development scripts\n\u251c\u2500\u2500 pyproject.toml              # Project metadata and dependencies\n\u2514\u2500\u2500 README.md                   # Project overview\n</code></pre>"},{"location":"development/#development-workflow","title":"Development Workflow","text":""},{"location":"development/#setting-up-your-branch","title":"Setting Up Your Branch","text":"<pre><code># Create a new branch for your feature/bugfix\ngit checkout -b feature/your-feature-name\n</code></pre>"},{"location":"development/#making-changes","title":"Making Changes","text":"<ol> <li>Make your changes to the codebase</li> <li>Write tests for your changes</li> <li>Update documentation if necessary</li> </ol>"},{"location":"development/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\npytest\n\n# Run tests with coverage report\npytest --cov=prompt_decorators\n\n# Run specific tests\npytest tests/test_specific_file.py\n\n# Run tests with verbose output\npytest -v\n</code></pre>"},{"location":"development/#running-linters","title":"Running Linters","text":"<pre><code># Run ruff (linting and formatting)\nruff check .\nruff format .\n\n# Run mypy (type checking)\nmypy prompt_decorators\n</code></pre>"},{"location":"development/#building-documentation","title":"Building Documentation","text":"<pre><code># Generate API and decorator documentation\ncd docs\npython generate_docs.py\n\n# Build documentation\ncd docs\nmkdocs build\n\n# Serve documentation locally\nmkdocs serve\n</code></pre> <p>Then visit http://localhost:8000 to view the documentation.</p> <p>Note: Always use <code>generate_docs.py</code> to regenerate documentation when making changes to decorators or code. This is the sole official documentation generator for the project.</p>"},{"location":"development/#working-with-decorators","title":"Working with Decorators","text":""},{"location":"development/#creating-a-new-decorator","title":"Creating a New Decorator","text":"<ol> <li>Define your decorator in the registry directory:</li> </ol> <pre><code>// registry/my_custom_decorator.json\n{\n  \"name\": \"MyCustomDecorator\",\n  \"description\": \"A custom decorator that does X\",\n  \"category\": \"Custom\",\n  \"parameters\": [\n    {\n      \"name\": \"param1\",\n      \"type\": \"string\",\n      \"description\": \"Description of parameter\",\n      \"default\": \"default value\"\n    }\n  ],\n  \"transform_function\": \"return 'Modified: ' + text;\"\n}\n</code></pre> <ol> <li>Test your decorator:</li> </ol> <pre><code>from prompt_decorators import apply_dynamic_decorators, register_decorator, DecoratorDefinition\n\n# Define your decorator in Python\nmy_decorator_def = DecoratorDefinition(\n    name=\"MyCustomDecorator\",\n    description=\"A custom decorator that does X\",\n    category=\"Custom\",\n    parameters=[\n        {\n            \"name\": \"param1\",\n            \"type\": \"string\",\n            \"description\": \"Description of parameter\",\n            \"default\": \"default value\"\n        }\n    ],\n    transform_function=\"return 'Modified: ' + text;\"\n)\n\n# Register it\nregister_decorator(my_decorator_def)\n\n# Test it\nprompt = \"\"\"\n+++MyCustomDecorator(param1=\"test value\")\nThis is a test prompt\n\"\"\"\n\ntransformed = apply_dynamic_decorators(prompt)\nprint(transformed)\n</code></pre>"},{"location":"development/#running-the-validator","title":"Running the Validator","text":"<p>Use the validator to check your decorator:</p> <pre><code>python -m prompt_decorators.tools.validator validate path/to/my_decorator.json\n</code></pre>"},{"location":"development/#using-the-unified-validator-script","title":"Using the Unified Validator Script","text":"<p>The project includes a unified validator script (<code>prompt_validator.py</code>) that provides more comprehensive validation capabilities:</p> <pre><code># Validate decorator syntax in a prompt\npython scripts/prompt_validator.py syntax -t \"+++Reasoning(depth=comprehensive)\\nExplain quantum computing.\"\n\n# Validate a decorator schema file\npython scripts/prompt_validator.py schema -f registry/core/reasoning/deductive.json\n\n# Validate all files in a directory\npython scripts/prompt_validator.py directory -d registry/core -s registry\n\n# Get help on all available commands\npython scripts/prompt_validator.py --help\n</code></pre> <p>This script is especially useful for development as it combines multiple validation functions in a single tool.</p>"},{"location":"development/#code-style-guidelines","title":"Code Style Guidelines","text":""},{"location":"development/#python-code","title":"Python Code","text":"<ul> <li>Follow PEP 8 style guidelines</li> <li>Use ruff for formatting and linting</li> <li>Include type hints for all functions and methods</li> <li>Write docstrings in Google style format</li> </ul>"},{"location":"development/#decorator-definitions","title":"Decorator Definitions","text":"<ul> <li>Use clear, descriptive names for decorators and parameters</li> <li>Provide comprehensive descriptions</li> <li>Include reasonable default values for parameters</li> <li>Write efficient transform functions</li> </ul>"},{"location":"development/#commit-messages","title":"Commit Messages","text":"<p>Follow the Conventional Commits format:</p> <pre><code>&lt;type&gt;(optional scope): &lt;description&gt;\n\n[optional body]\n\n[optional footer(s)]\n</code></pre> <p>Types include: - <code>feat:</code> (new feature) - <code>fix:</code> (bug fix) - <code>docs:</code> (documentation changes) - <code>style:</code> (formatting changes) - <code>refactor:</code> (code restructuring) - <code>test:</code> (adding or refining tests) - <code>chore:</code> (maintenance tasks)</p>"},{"location":"development/#contributing-changes","title":"Contributing Changes","text":""},{"location":"development/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Ensure all tests pass</li> <li>Update documentation if needed</li> <li>Create a pull request with a clear description of changes</li> <li>Reference any related issues</li> <li>Wait for review and address any feedback</li> </ol>"},{"location":"development/#code-review-checklist","title":"Code Review Checklist","text":"<p>Before submitting a PR, check that:</p> <ul> <li> Code follows the project's style guidelines</li> <li> Tests are added/updated and all tests pass</li> <li> Documentation is updated to reflect changes</li> <li> Code is properly typed with type annotations</li> <li> Pre-commit hooks pass with no issues</li> <li> Commit messages follow the project's format</li> </ul>"},{"location":"development/#dependency-management","title":"Dependency Management","text":""},{"location":"development/#adding-a-new-dependency","title":"Adding a New Dependency","text":""},{"location":"development/#using-poetry","title":"Using Poetry","text":"<pre><code># Add a main dependency\npoetry add package-name\n\n# Add a development dependency\npoetry add --group dev package-name\n\n# Add a test dependency\npoetry add --group test package-name\n\n# Add a documentation dependency\npoetry add --group docs package-name\n</code></pre>"},{"location":"development/#using-pip","title":"Using pip","text":"<p>Update <code>setup.py</code> or <code>pyproject.toml</code> with the new dependency, then:</p> <pre><code>pip install -e \".[dev,test,docs]\"\n</code></pre>"},{"location":"development/#testing-guidelines","title":"Testing Guidelines","text":""},{"location":"development/#writing-tests","title":"Writing Tests","text":"<ul> <li>Every feature should have corresponding tests</li> <li>Use pytest fixtures for common test setups</li> <li>Aim for high test coverage (&gt;90%)</li> <li>Include both unit tests and integration tests</li> </ul>"},{"location":"development/#test-structure","title":"Test Structure","text":"<pre><code>import pytest\nfrom prompt_decorators import apply_dynamic_decorators\n\ndef test_decorator_functionality():\n    \"\"\"Test that the decorator transforms the text as expected.\"\"\"\n    # Arrange\n    prompt = \"\"\"\n    +++TestDecorator(param1=\"value\")\n    Test prompt\n    \"\"\"\n\n    # Act\n    result = apply_dynamic_decorators(prompt)\n\n    # Assert\n    assert \"Expected transformation\" in result\n    assert \"Test prompt\" in result\n</code></pre>"},{"location":"development/#release-process","title":"Release Process","text":""},{"location":"development/#preparing-a-release","title":"Preparing a Release","text":"<ol> <li>Update version in <code>pyproject.toml</code></li> <li>Update CHANGELOG.md</li> <li>Ensure all tests pass</li> <li>Build the distribution:</li> </ol> <pre><code># Using Poetry\npoetry build\n\n# Using setuptools\npython -m build\n</code></pre>"},{"location":"development/#publishing-a-release","title":"Publishing a Release","text":"<pre><code># Using Poetry\npoetry publish\n\n# Using Twine\ntwine upload dist/*\n</code></pre>"},{"location":"development/#continuous-integration","title":"Continuous Integration","text":"<p>We use GitHub Actions for CI. Workflows are defined in <code>.github/workflows/</code>:</p> <ul> <li><code>tests.yml</code>: Runs tests on multiple Python versions</li> <li><code>lint.yml</code>: Runs linters and style checks</li> <li><code>docs.yml</code>: Builds and validates documentation</li> <li><code>release.yml</code>: Handles package publishing</li> </ul>"},{"location":"development/#getting-help","title":"Getting Help","text":"<p>If you need help during development:</p> <ul> <li>Check the documentation</li> <li>Open an issue on GitHub</li> <li>Contact the maintainers</li> </ul>"},{"location":"development/#next-steps","title":"Next Steps","text":"<ul> <li>Read the development guide for more detailed workflow information</li> <li>Check the core concepts to understand the framework's architecture</li> <li>Explore the tutorials for practical examples</li> </ul>"},{"location":"development_guide/","title":"Development Guide","text":"<p>This guide provides comprehensive information for developers working on the Prompt Decorators project. It covers best practices, workflows, and coding standards to ensure consistent, high-quality contributions.</p>"},{"location":"development_guide/#development-philosophy","title":"Development Philosophy","text":"<p>The Prompt Decorators project follows these core principles:</p> <ol> <li>Simplicity: Keep the API and implementation as simple as possible</li> <li>Extensibility: Design for future extensions and customizations</li> <li>Quality: Maintain high-quality code through testing and review</li> <li>Documentation: Provide thorough documentation for all components</li> <li>User Focus: Prioritize developer experience and ease of use</li> </ol>"},{"location":"development_guide/#development-workflow","title":"Development Workflow","text":""},{"location":"development_guide/#feature-development-lifecycle","title":"Feature Development Lifecycle","text":"<ol> <li>Planning:</li> <li>Create an issue describing the feature</li> <li>Discuss design and implementation approaches</li> <li> <p>Define acceptance criteria</p> </li> <li> <p>Implementation:</p> </li> <li>Create a new branch (<code>feature/&lt;feature-name&gt;</code>)</li> <li>Implement the feature with tests</li> <li> <p>Update documentation</p> </li> <li> <p>Review:</p> </li> <li>Submit a pull request</li> <li>Address feedback</li> <li> <p>Update implementation as needed</p> </li> <li> <p>Merge:</p> </li> <li>Ensure all checks pass</li> <li>Merge into main branch</li> <li>Delete feature branch</li> </ol>"},{"location":"development_guide/#bug-fix-workflow","title":"Bug Fix Workflow","text":"<ol> <li>Reporting:</li> <li>Create an issue with steps to reproduce</li> <li>Include expected vs. actual behavior</li> <li> <p>Add relevant logs or screenshots</p> </li> <li> <p>Analysis:</p> </li> <li>Verify the bug</li> <li>Identify the root cause</li> <li> <p>Determine the best approach to fix</p> </li> <li> <p>Implementation:</p> </li> <li>Create a new branch (<code>bugfix/&lt;bug-description&gt;</code>)</li> <li>Fix the bug and add tests to prevent regression</li> <li> <p>Update documentation if needed</p> </li> <li> <p>Review and Merge:</p> </li> <li>Submit a pull request</li> <li>Ensure all checks pass</li> <li>Merge after approval</li> </ol>"},{"location":"development_guide/#working-with-issues","title":"Working with Issues","text":"<ul> <li>Use descriptive titles and detailed descriptions</li> <li>Apply appropriate labels (bug, enhancement, documentation, etc.)</li> <li>Link related issues and pull requests</li> <li>Use task lists for tracking progress</li> </ul>"},{"location":"development_guide/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<ul> <li>Reference the related issue(s) in the PR description</li> <li>Provide a clear summary of changes</li> <li>Include screenshots or examples for UI changes</li> <li>Add reviewers who are familiar with the affected code</li> <li>Respond to feedback promptly</li> </ul>"},{"location":"development_guide/#code-organization","title":"Code Organization","text":""},{"location":"development_guide/#package-structure","title":"Package Structure","text":"<pre><code>prompt_decorators/\n\u251c\u2500\u2500 core/                   # Core decorator functionality\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 base.py             # Base decorator classes\n\u2502   \u251c\u2500\u2500 dynamic_decorator.py # Dynamic decorator implementation\n\u2502   \u2514\u2500\u2500 registry.py         # Decorator registry\n\u251c\u2500\u2500 schemas/                # JSON schemas\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 decorator_schema.py # Decorator schema definitions\n\u2502   \u2514\u2500\u2500 validation.py       # Schema validation utilities\n\u251c\u2500\u2500 utils/                  # Utility functions\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 string_utils.py     # String manipulation utilities\n\u2502   \u2514\u2500\u2500 js_utils.py         # JavaScript-related utilities\n\u251c\u2500\u2500 integrations/           # Integration with other systems\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 mcp/                # Model Context Protocol integration\n\u251c\u2500\u2500 __init__.py             # Public API\n\u251c\u2500\u2500 config.py               # Configuration\n\u2514\u2500\u2500 dynamic_decorators_module.py # Dynamic decorator implementation\n</code></pre>"},{"location":"development_guide/#key-modules-and-components","title":"Key Modules and Components","text":""},{"location":"development_guide/#core-module","title":"Core Module","text":"<p>The <code>core</code> module contains the fundamental decorator classes and functionality:</p> <ul> <li><code>base.py</code>: Contains the <code>DecoratorBase</code> abstract base class that all decorators inherit from</li> <li><code>dynamic_decorator.py</code>: Contains the <code>DynamicDecorator</code> implementation</li> <li><code>registry.py</code>: Manages the decorator registry</li> </ul>"},{"location":"development_guide/#schema-module","title":"Schema Module","text":"<p>The <code>schemas</code> module handles schema definition and validation:</p> <ul> <li><code>decorator_schema.py</code>: Contains the <code>DecoratorSchema</code> and <code>ParameterSchema</code> classes</li> <li><code>validation.py</code>: Provides schema validation utilities</li> </ul>"},{"location":"development_guide/#utils-module","title":"Utils Module","text":"<p>The <code>utils</code> module contains utility functions:</p> <ul> <li><code>string_utils.py</code>: String manipulation, including decoration extraction</li> <li><code>js_utils.py</code>: JavaScript-related utilities, including transform function evaluation</li> </ul>"},{"location":"development_guide/#integrations-module","title":"Integrations Module","text":"<p>The <code>integrations</code> module contains integrations with external systems:</p> <ul> <li><code>mcp/</code>: Model Context Protocol integration</li> </ul>"},{"location":"development_guide/#module-responsibilities","title":"Module Responsibilities","text":"<ol> <li>Core: Responsible for decorator definition, registration, and application</li> <li>Schemas: Responsible for defining and validating decorator schemas</li> <li>Utils: Provides utility functions for string manipulation and JavaScript execution</li> <li>Integrations: Connects with external systems and tools</li> </ol>"},{"location":"development_guide/#coding-standards","title":"Coding Standards","text":""},{"location":"development_guide/#python-style-guidelines","title":"Python Style Guidelines","text":"<ul> <li>Follow PEP 8 style guidelines</li> <li>Use <code>ruff</code> for formatting and linting</li> <li>Maximum line length of 100 characters</li> <li>Use 4 spaces for indentation (not tabs)</li> <li>Use snake_case for function and variable names</li> <li>Use CamelCase for class names</li> <li>Use UPPER_CASE for constants</li> </ul>"},{"location":"development_guide/#type-annotations","title":"Type Annotations","text":"<ul> <li>Use type annotations for all functions and methods</li> <li>Use <code>Optional[T]</code> for parameters that could be <code>None</code></li> <li>Use <code>Union[T1, T2]</code> for parameters that could be multiple types</li> <li>Use <code>Any</code> only when absolutely necessary</li> <li>Use generics (<code>TypeVar</code>, <code>Generic</code>) for flexible typing</li> </ul> <p>Example:</p> <pre><code>from typing import Dict, List, Optional, TypeVar, Generic\n\nT = TypeVar('T')\n\nclass Registry(Generic[T]):\n    def get_item(self, name: str) -&gt; Optional[T]:\n        \"\"\"Get an item from the registry by name.\"\"\"\n        # Implementation\n</code></pre>"},{"location":"development_guide/#documentation-guidelines","title":"Documentation Guidelines","text":""},{"location":"development_guide/#docstrings","title":"Docstrings","text":"<ul> <li>Use Google-style docstrings for all classes, methods, and functions</li> <li>Include a brief description, parameters, return values, and exceptions</li> <li>Add examples for complex functions</li> <li>Document all public APIs</li> </ul> <p>Example:</p> <pre><code>def apply_dynamic_decorators(text: str) -&gt; str:\n    \"\"\"\n    Apply all dynamic decorators found in the text.\n\n    This function extracts decorator annotations from the text, applies\n    the corresponding transformations, and returns the modified text.\n\n    Args:\n        text: The input text containing decorator annotations.\n\n    Returns:\n        The transformed text with decorators applied and annotations removed.\n\n    Raises:\n        DecoratorNotFoundError: If a referenced decorator is not registered.\n\n    Example:\n        &gt;&gt;&gt; apply_dynamic_decorators(\"+++StepByStep(numbered=true)\\\\nExplain quantum computing.\")\n        \"Please break down your explanation into numbered steps.\\\\n\\\\nExplain quantum computing.\"\n    \"\"\"\n    # Implementation\n</code></pre>"},{"location":"development_guide/#code-comments","title":"Code Comments","text":"<ul> <li>Use comments to explain complex logic or non-obvious design decisions</li> <li>Avoid redundant comments that simply restate the code</li> <li>Use TODO, FIXME, or NOTE comments for future work</li> </ul>"},{"location":"development_guide/#error-handling","title":"Error Handling","text":"<ul> <li>Use custom exception classes for specific error cases</li> <li>Provide clear error messages with context</li> <li>Handle exceptions at appropriate levels</li> <li>Use context managers for resource cleanup</li> </ul> <p>Example:</p> <pre><code>class DecoratorNotFoundError(Exception):\n    \"\"\"Raised when a referenced decorator is not found in the registry.\"\"\"\n    pass\n\ndef get_decorator(name: str) -&gt; DecoratorBase:\n    \"\"\"Get a decorator from the registry by name.\"\"\"\n    if name not in _registry:\n        raise DecoratorNotFoundError(f\"Decorator '{name}' not found in registry\")\n    return _registry[name]\n</code></pre>"},{"location":"development_guide/#testing-guidelines","title":"Testing Guidelines","text":""},{"location":"development_guide/#test-organization","title":"Test Organization","text":"<ul> <li>Organize tests to mirror the package structure</li> <li>Use descriptive test names that explain what's being tested</li> <li>Group related tests in classes</li> </ul>"},{"location":"development_guide/#writing-tests","title":"Writing Tests","text":"<ul> <li>Use pytest for unit and integration tests</li> <li>Write test cases for normal operation, edge cases, and error conditions</li> <li>Use fixtures for common setup</li> <li>Use parametrized tests for testing multiple inputs</li> <li>Aim for high test coverage</li> </ul> <p>Example:</p> <pre><code>import pytest\nfrom prompt_decorators import apply_dynamic_decorators, register_decorator, DecoratorDefinition\n\n@pytest.fixture\ndef example_decorator():\n    \"\"\"Fixture that provides a test decorator.\"\"\"\n    decorator_def = DecoratorDefinition(\n        name=\"Example\",\n        description=\"Example decorator for testing\",\n        category=\"Test\",\n        parameters=[\n            {\n                \"name\": \"prefix\",\n                \"type\": \"string\",\n                \"description\": \"Text to prepend\",\n                \"default\": \"Prefix: \"\n            }\n        ],\n        transform_function=\"return prefix + text;\"\n    )\n    register_decorator(decorator_def)\n    return decorator_def\n\ndef test_apply_dynamic_decorators(example_decorator):\n    \"\"\"Test that decorators are correctly applied to text.\"\"\"\n    # Arrange\n    prompt = \"\"\"\n    +++Example(prefix=\"Test: \")\n    This is a test\n    \"\"\"\n\n    # Act\n    result = apply_dynamic_decorators(prompt)\n\n    # Assert\n    assert result.strip() == \"Test: This is a test\"\n</code></pre>"},{"location":"development_guide/#mocking-and-test-doubles","title":"Mocking and Test Doubles","text":"<ul> <li>Use <code>unittest.mock</code> or <code>pytest-mock</code> for mocking</li> <li>Create test doubles (mocks, stubs, fakes) for external dependencies</li> <li>Use mocking judiciously, preferring integration tests when possible</li> </ul>"},{"location":"development_guide/#performance-considerations","title":"Performance Considerations","text":"<ul> <li>Minimize JavaScript evaluation overhead</li> <li>Cache expensive operations when appropriate</li> <li>Profile code to identify bottlenecks</li> <li>Be mindful of memory usage with large prompts</li> </ul>"},{"location":"development_guide/#working-with-javascript","title":"Working with JavaScript","text":"<p>The Prompt Decorators framework uses JavaScript for transform functions. Here are some guidelines:</p>"},{"location":"development_guide/#writing-transform-functions","title":"Writing Transform Functions","text":"<ul> <li>Keep transform functions simple and focused</li> <li>Avoid complex logic that is difficult to debug</li> <li>Use ES6 syntax (template literals, arrow functions, etc.)</li> <li>Test with multiple inputs, including edge cases</li> </ul>"},{"location":"development_guide/#javascript-best-practices","title":"JavaScript Best Practices","text":"<ul> <li>Avoid using <code>eval</code> in transform functions</li> <li>Use template literals for string concatenation</li> <li>Handle potential errors (e.g., missing parameters)</li> <li>Keep functions pure when possible</li> </ul> <p>Example:</p> <pre><code>// Good\nconst result = `${prefix}${text}${suffix}`;\n\n// Avoid\nconst result = prefix + text + suffix;\n</code></pre>"},{"location":"development_guide/#security-considerations","title":"Security Considerations","text":"<ul> <li>Validate inputs before executing transform functions</li> <li>Sanitize user inputs to prevent injection attacks</li> <li>Implement timeout mechanisms for complex transforms</li> <li>Avoid exposing sensitive information in transform functions</li> </ul>"},{"location":"development_guide/#working-with-decorators","title":"Working with Decorators","text":""},{"location":"development_guide/#creating-decorators","title":"Creating Decorators","text":"<ul> <li>Choose clear, descriptive names</li> <li>Define sensible default parameter values</li> <li>Include comprehensive descriptions</li> <li>Use appropriate parameter types</li> <li>Test with various inputs and combinations</li> </ul>"},{"location":"development_guide/#decorator-categories","title":"Decorator Categories","text":"<ul> <li>Assign decorators to appropriate categories</li> <li>Document category-specific behavior</li> <li>Consider compatibility between decorators in the same category</li> </ul>"},{"location":"development_guide/#decorator-registry","title":"Decorator Registry","text":"<ul> <li>Register decorators at an appropriate time (import vs. runtime)</li> <li>Handle versioning and deprecation appropriately</li> <li>Document decorator dependencies</li> </ul>"},{"location":"development_guide/#continuous-integration","title":"Continuous Integration","text":""},{"location":"development_guide/#github-actions","title":"GitHub Actions","text":"<p>We use GitHub Actions for continuous integration:</p> <ul> <li>Test Workflow: Runs tests on multiple Python versions</li> <li>Lint Workflow: Checks code style and typing</li> <li>Docs Workflow: Builds and validates documentation</li> <li>Release Workflow: Publishes packages to PyPI</li> </ul>"},{"location":"development_guide/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>We use pre-commit hooks to ensure code quality:</p> <ul> <li>ruff: Checks formatting and linting</li> <li>mypy: Verifies type annotations</li> <li>pytest: Runs tests</li> <li>doc8: Validates documentation</li> </ul>"},{"location":"development_guide/#release-process","title":"Release Process","text":""},{"location":"development_guide/#version-numbering","title":"Version Numbering","text":"<p>We follow Semantic Versioning:</p> <ul> <li>MAJOR: Incompatible API changes</li> <li>MINOR: Backwards-compatible feature additions</li> <li>PATCH: Backwards-compatible bug fixes</li> </ul>"},{"location":"development_guide/#release-checklist","title":"Release Checklist","text":"<ol> <li>Update version in <code>pyproject.toml</code></li> <li>Update <code>CHANGELOG.md</code> with changes</li> <li>Create a release commit and tag</li> <li>Push to GitHub</li> <li>Create a GitHub release</li> <li>Build and publish to PyPI</li> </ol>"},{"location":"development_guide/#changelog-maintenance","title":"Changelog Maintenance","text":"<ul> <li>Organize changes by type (Added, Changed, Deprecated, Removed, Fixed, Security)</li> <li>Include contributor acknowledgements</li> <li>Link to relevant issues and pull requests</li> </ul>"},{"location":"development_guide/#advanced-development-topics","title":"Advanced Development Topics","text":""},{"location":"development_guide/#adding-a-new-integration","title":"Adding a New Integration","text":"<ol> <li>Create a new directory in <code>prompt_decorators/integrations/</code></li> <li>Implement the integration with clear interfaces</li> <li>Add tests in <code>tests/integrations/</code></li> <li>Document the integration in <code>docs/integrations/</code></li> <li>Update <code>README.md</code> with the new integration</li> </ol>"},{"location":"development_guide/#creating-custom-tools","title":"Creating Custom Tools","text":"<ol> <li>Define the tool's purpose and interface</li> <li>Implement the tool in an appropriate module</li> <li>Add tests for the tool</li> <li>Document the tool's usage</li> <li>Integrate with the main package if appropriate</li> </ol>"},{"location":"development_guide/#performance-optimization","title":"Performance Optimization","text":"<ol> <li>Profile code to identify bottlenecks</li> <li>Optimize critical paths</li> <li>Add benchmarks to measure improvements</li> <li>Document performance considerations</li> </ol>"},{"location":"development_guide/#troubleshooting-development-issues","title":"Troubleshooting Development Issues","text":""},{"location":"development_guide/#common-issues","title":"Common Issues","text":""},{"location":"development_guide/#decorator-not-found","title":"Decorator Not Found","text":"<pre><code>DecoratorNotFoundError: Decorator 'ExampleDecorator' not found in registry\n</code></pre> <ul> <li>Ensure the decorator is registered before use</li> <li>Check for typos in the decorator name</li> <li>Verify the import order</li> </ul>"},{"location":"development_guide/#javascript-errors","title":"JavaScript Errors","text":"<pre><code>JavaScriptError: Unexpected token in transform_function\n</code></pre> <ul> <li>Check JavaScript syntax in the transform function</li> <li>Ensure all variables are defined</li> <li>Test the transform function with different inputs</li> </ul>"},{"location":"development_guide/#type-checking-errors","title":"Type Checking Errors","text":"<pre><code>mypy: error: Argument 1 to \"apply_decorator\" has incompatible type \"str\"; expected \"DecoratorBase\"\n</code></pre> <ul> <li>Fix type annotations</li> <li>Update signature to match implementation</li> <li>Add appropriate type casts</li> </ul>"},{"location":"development_guide/#debugging-strategies","title":"Debugging Strategies","text":"<ul> <li>Use logging to trace execution flow</li> <li>Add debug prints for complex operations</li> <li>Use a debugger for step-by-step execution</li> <li>Isolate issues with minimal reproducible examples</li> </ul>"},{"location":"development_guide/#additional-resources","title":"Additional Resources","text":"<ul> <li>Python Documentation Style Guide</li> <li>JavaScript Best Practices</li> <li>Effective Pull Request Reviews</li> <li>Semantic Versioning</li> <li>GitHub Actions Documentation</li> </ul>"},{"location":"development_guide/#next-steps","title":"Next Steps","text":"<ul> <li>Explore the core concepts to understand the framework's architecture</li> <li>Check the API Reference for detailed reference</li> <li>Read the tutorials for practical examples</li> </ul> <p>For detailed API documentation, see the API Reference.</p>"},{"location":"documentation_checklist/","title":"Documentation Verification Checklist","text":"<p>Important Note: Always use <code>docs/generate_docs.py</code> to generate documentation for the prompt-decorators project. Any other documentation generators found in the codebase are deprecated and will be removed in future releases.</p> <p>This checklist helps ensure that the documentation for the prompt-decorators project is complete, accurate, and helpful for users. Use this checklist when reviewing documentation changes or conducting regular documentation audits.</p>"},{"location":"documentation_checklist/#navigation-structure","title":"Navigation Structure","text":"<ul> <li> All important sections are accessible from the navigation</li> <li> The navigation hierarchy makes logical sense</li> <li> Section titles are clear and descriptive</li> <li> Breadcrumbs work correctly</li> <li> Table of contents is accurate and complete</li> </ul>"},{"location":"documentation_checklist/#content-quality","title":"Content Quality","text":"<ul> <li> Documentation is clear and well-written</li> <li> Examples are accurate and helpful</li> <li> Terminology is consistent throughout</li> <li> Code examples are up-to-date with the current API</li> <li> All code examples are runnable without modification</li> <li> Complex concepts are explained with appropriate detail</li> <li> No spelling or grammatical errors</li> </ul>"},{"location":"documentation_checklist/#visual-appearance","title":"Visual Appearance","text":"<ul> <li> Documentation renders correctly on desktop browsers</li> <li> Documentation renders correctly on mobile devices</li> <li> Code blocks are properly formatted with syntax highlighting</li> <li> Images and diagrams are clear and relevant</li> <li> Dark/light mode switching works correctly (if applicable)</li> <li> Tables are formatted correctly and readable</li> </ul>"},{"location":"documentation_checklist/#user-experience","title":"User Experience","text":"<ul> <li> Search functionality works correctly</li> <li> Documentation is easy to navigate</li> <li> Related content is properly linked</li> <li> External links open in new tabs</li> <li> No broken links or 404 errors</li> <li> Page load times are reasonable</li> </ul>"},{"location":"documentation_checklist/#api-documentation","title":"API Documentation","text":"<ul> <li> All public classes, methods, and functions are documented</li> <li> Parameter descriptions are clear and accurate</li> <li> Return value descriptions are clear and accurate</li> <li> Exception information is included where relevant</li> <li> Type annotations match the documentation</li> <li> Examples demonstrate common use cases</li> <li> Deprecated features are clearly marked</li> </ul>"},{"location":"documentation_checklist/#registry-documentation","title":"Registry Documentation","text":"<ul> <li> All decorators in the registry have corresponding documentation</li> <li> Decorator parameters are clearly documented</li> <li> Decorator examples show typical usage patterns</li> <li> Compatibility information is included</li> <li> Version information is accurate</li> </ul>"},{"location":"documentation_checklist/#getting-started","title":"Getting Started","text":"<ul> <li> Installation instructions are clear and work for all supported platforms</li> <li> Quick start guide provides a simple, working example</li> <li> Prerequisites are clearly stated</li> <li> Common pitfalls are addressed</li> </ul>"},{"location":"documentation_checklist/#tutorials-and-guides","title":"Tutorials and Guides","text":"<ul> <li> Tutorials cover key use cases</li> <li> Step-by-step instructions are clear and accurate</li> <li> Advanced usage scenarios are documented</li> <li> Integration with other tools/libraries is explained where relevant</li> </ul>"},{"location":"documentation_checklist/#feedback-and-improvement","title":"Feedback and Improvement","text":"<ul> <li> Documentation includes a way for users to provide feedback</li> <li> Issues identified in previous reviews have been addressed</li> <li> Recent API changes are reflected in the documentation</li> <li> Documentation is reviewed for accuracy before each release</li> </ul>"},{"location":"documentation_checklist/#accessibility","title":"Accessibility","text":"<ul> <li> Documentation meets basic accessibility standards</li> <li> Images have alt text</li> <li> Color contrast is sufficient</li> <li> Navigation is keyboard-accessible</li> </ul>"},{"location":"documentation_checklist/#notes","title":"Notes","text":"<p>Use this section to record any issues found during the review and plans for addressing them:</p> <p>1. 2. 3.</p>"},{"location":"documentation_checklist/#review-information","title":"Review Information","text":"<ul> <li>Reviewer:</li> <li>Date:</li> <li>Version Reviewed:</li> </ul>"},{"location":"documentation_workflow/","title":"Documentation Workflow","text":"<p>This document explains the workflow for generating and maintaining documentation for the Prompt Decorators project.</p>"},{"location":"documentation_workflow/#overview","title":"Overview","text":"<p>The documentation for Prompt Decorators consists of:</p> <ol> <li>API Reference: Automatically generated from docstrings, type annotations, and registry data</li> <li>User Guides: Manually written Markdown files</li> <li>Examples: Code examples with explanations</li> <li>Tutorials: Step-by-step guides for common tasks</li> </ol> <p>We use MkDocs with the Material theme to build the documentation website.</p>"},{"location":"documentation_workflow/#documentation-generation-process","title":"Documentation Generation Process","text":"<p>The documentation generation process involves two main steps:</p> <ol> <li>Generate API Reference: Extract information from code and registry to create Markdown files</li> <li>Build Documentation Website: Use MkDocs to build a static website from all Markdown files</li> </ol>"},{"location":"documentation_workflow/#step-1-generate-api-reference","title":"Step 1: Generate API Reference","text":"<p>To generate the API reference documentation, use the <code>generate_docs.py</code> script in the <code>docs</code> directory:</p> <pre><code># Generate documentation\ncd docs\npython generate_docs.py\n\n# Enable debug mode for verbose output\npython generate_docs.py --debug\n</code></pre> <p>This script: - Extracts docstrings and type annotations from the code - Loads decorator definitions from the registry - Generates comprehensive documentation for all modules and decorators - Creates well-organized Markdown files in the <code>docs/api</code> directory - Automatically categorizes decorators by their functional domain</p> <p>Important: <code>docs/generate_docs.py</code> is the sole official documentation generator for the Prompt Decorators project. Any other documentation generators found in the codebase (such as <code>doc_gen.py</code>, <code>generate_api_docs.py</code>, or scripts in the <code>scripts/</code> directory that generate documentation) are deprecated and should not be used. These deprecated files will be removed in future releases.</p>"},{"location":"documentation_workflow/#step-2-build-documentation-website","title":"Step 2: Build Documentation Website","text":"<p>To build the documentation website, use MkDocs:</p> <pre><code># Serve documentation locally (with live reload)\nmkdocs serve\n\n# Build documentation\nmkdocs build\n\n# Deploy documentation to GitHub Pages\nmkdocs gh-deploy\n</code></pre>"},{"location":"documentation_workflow/#documentation-structure","title":"Documentation Structure","text":"<p>The documentation is organized as follows:</p> <ul> <li><code>docs/</code>: Root directory for documentation</li> <li><code>api/</code>: API reference documentation (auto-generated)<ul> <li><code>modules/</code>: Module documentation</li> <li><code>decorators/</code>: Decorator documentation</li> </ul> </li> <li><code>examples/</code>: Code examples with explanations</li> <li><code>guide/</code>: User guides</li> <li><code>tutorials/</code>: Step-by-step tutorials</li> <li><code>project_summaries/</code>: Project overview and summaries</li> <li><code>guides/</code>: Domain-specific guides</li> </ul>"},{"location":"documentation_workflow/#maintaining-documentation","title":"Maintaining Documentation","text":""},{"location":"documentation_workflow/#updating-api-reference","title":"Updating API Reference","text":"<p>When you make changes to the code:</p> <ol> <li>Update docstrings and type annotations in the code</li> <li>Run <code>python docs/generate_docs.py</code> to regenerate the API reference</li> <li>Run <code>mkdocs serve</code> to preview the changes</li> <li>Commit the changes to the repository</li> </ol>"},{"location":"documentation_workflow/#adding-new-decorators","title":"Adding New Decorators","text":"<p>When adding new decorators to the registry:</p> <ol> <li>Create the JSON definition file in the appropriate registry directory</li> <li>Run <code>python docs/generate_docs.py</code> to generate documentation for the new decorator</li> <li>The documentation will automatically include the decorator in the appropriate category</li> <li>Verify the generated documentation with <code>mkdocs serve</code></li> </ol>"},{"location":"documentation_workflow/#adding-new-documentation","title":"Adding New Documentation","text":"<p>To add new documentation:</p> <ol> <li>Create a new Markdown file in the appropriate directory</li> <li>Add the file to the navigation in <code>mkdocs.yml</code></li> <li>Run <code>mkdocs serve</code> to preview the changes</li> <li>Commit the changes to the repository</li> </ol>"},{"location":"documentation_workflow/#documentation-standards","title":"Documentation Standards","text":"<p>Please follow these standards when writing documentation:</p> <ol> <li>Docstrings: Use Google-style docstrings (see DOCSTRING_STANDARDS.md)</li> <li>Markdown: Use consistent formatting and structure</li> <li>Examples: Include runnable examples that demonstrate key features</li> <li>Links: Ensure all links are valid and point to the correct location</li> </ol>"},{"location":"documentation_workflow/#troubleshooting","title":"Troubleshooting","text":""},{"location":"documentation_workflow/#broken-links","title":"Broken Links","text":"<p>If you encounter broken links in the documentation:</p> <ol> <li>Run <code>mkdocs build</code> to see warnings about broken links</li> <li>Fix the broken links in the source files</li> <li>Regenerate the API reference if necessary</li> <li>Run <code>mkdocs serve</code> to verify the fixes</li> </ol>"},{"location":"documentation_workflow/#missing-documentation","title":"Missing Documentation","text":"<p>If you notice missing documentation:</p> <ol> <li>Check if the code has proper docstrings and type annotations</li> <li>Ensure the module or class is included in the documentation generation process</li> <li>Update the docstrings and regenerate the API reference</li> <li>Update the navigation in <code>mkdocs.yml</code> if necessary</li> </ol>"},{"location":"extensions/","title":"Prompt Decorators Extension System","text":"<p>This document describes the current extension capabilities and future plans for the prompt-decorators extension system.</p>"},{"location":"extensions/#current-extension-capabilities","title":"Current Extension Capabilities","text":"<p>The prompt-decorators system currently supports extensions in the following ways:</p>"},{"location":"extensions/#1-registry-extensions","title":"1. Registry Extensions","text":"<p>Extensions can be added to the registry in the <code>registry/extensions/</code> directory. These extensions are loaded at runtime when the decorator registry is initialized.</p> <p>Current extension directories include: - <code>registry/extensions/code_generation/</code> - <code>registry/extensions/devops_and_infrastructure/</code> - <code>registry/extensions/implementation-focused/</code> - <code>registry/extensions/testing_and_debugging/</code></p>"},{"location":"extensions/#2-extension-package-format","title":"2. Extension Package Format","text":"<p>Extensions follow the registry entry schema format as defined in <code>schemas/registry-entry.schema.json</code>. Each extension must include:</p> <ul> <li><code>decoratorName</code>: The name of the decorator</li> <li><code>version</code>: Semantic versioning</li> <li><code>description</code>: What the decorator does</li> <li><code>parameters</code>: Configuration parameters</li> <li><code>transformationTemplate</code>: How the decorator transforms prompts</li> </ul>"},{"location":"extensions/#3-loading-extensions","title":"3. Loading Extensions","text":"<p>Extensions in the registry are automatically loaded when the <code>DynamicDecorator</code> class is initialized. The current implementation scans the registry directory and loads all decorator definitions.</p> <p>Example of loading extensions:</p> <pre><code>from prompt_decorators.core.dynamic_decorator import DynamicDecorator\n\n# Load all decorators from the registry\nDynamicDecorator.load_registry()\n\n# Now extensions are available\ncode_review = DynamicDecorator(\"CodeReview\", focus=\"security\")\n</code></pre>"},{"location":"extensions/#limitations-and-future-plans","title":"Limitations and Future Plans","text":""},{"location":"extensions/#current-limitations","title":"Current Limitations","text":"<ol> <li> <p>No Remote Loading: The current implementation does not support loading extensions from remote URLs as described in the specification.</p> </li> <li> <p>No Dynamic Extension Discovery: Extensions must be included in the registry directory at package installation time.</p> </li> <li> <p>Limited Extension Validation: While extension schemas are validated, there's limited validation of compatibility between extensions.</p> </li> <li> <p>No Extension Marketplace: There's no centralized repository for discovering and sharing extensions.</p> </li> </ol>"},{"location":"extensions/#future-extension-capabilities","title":"Future Extension Capabilities","text":"<p>The following capabilities are planned for future releases:</p>"},{"location":"extensions/#1-remote-extension-loading","title":"1. Remote Extension Loading","text":"<p>Future versions will support loading extensions from remote URLs as described in the specification:</p> <pre><code>+++Extension(source=https://decorator-registry.ai/scientific-pack.json)\n+++ScientificReasoning(discipline=physics)\n</code></pre> <p>This will: - Securely load extension definitions from verified URLs - Validate extensions against the registry schema - Cache extensions locally for performance</p>"},{"location":"extensions/#2-extension-discovery-service","title":"2. Extension Discovery Service","text":"<p>A central registry service is planned to allow: - Publishing extensions to a central repository - Discovering extensions through a web interface - Rating and reviewing extensions - Searching for extensions by category, name, or function</p>"},{"location":"extensions/#3-enhanced-compatibility-checking","title":"3. Enhanced Compatibility Checking","text":"<p>Future versions will provide more robust compatibility checking: - Verifying that extensions don't conflict with core decorators - Checking for compatibility between extensions - Validating required dependencies</p>"},{"location":"extensions/#4-extension-configuration","title":"4. Extension Configuration","text":"<p>More advanced extension configuration options are planned: - Per-environment configuration - Model-specific optimizations - User preference support</p>"},{"location":"extensions/#working-with-extensions-today","title":"Working with Extensions Today","text":""},{"location":"extensions/#creating-a-custom-extension","title":"Creating a Custom Extension","text":"<p>To create a custom extension today:</p> <ol> <li>Create a new JSON file in the <code>registry/extensions/</code> directory</li> <li>Follow the registry entry schema format</li> <li>Include all required fields (decoratorName, version, etc.)</li> <li>Define parameters and transformation templates</li> <li>Validate using the validation tools</li> </ol> <p>Example of a minimal extension:</p> <pre><code>{\n  \"decoratorName\": \"CustomExtension\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A custom decorator extension\",\n  \"parameters\": [\n    {\n      \"name\": \"level\",\n      \"type\": \"enum\",\n      \"description\": \"Level of detail\",\n      \"enum\": [\"basic\", \"detailed\", \"comprehensive\"],\n      \"default\": \"detailed\"\n    }\n  ],\n  \"transformationTemplate\": {\n    \"instruction\": \"Apply custom processing to this prompt.\",\n    \"parameterMapping\": {\n      \"level\": {\n        \"valueMap\": {\n          \"basic\": \"Use minimal processing.\",\n          \"detailed\": \"Apply standard processing.\",\n          \"comprehensive\": \"Use extensive processing.\"\n        }\n      }\n    },\n    \"placement\": \"prepend\",\n    \"compositionBehavior\": \"accumulate\"\n  }\n}\n</code></pre>"},{"location":"extensions/#using-extensions","title":"Using Extensions","text":"<p>To use extensions in your code:</p> <pre><code>from prompt_decorators import transform_prompt\n\n# Use an extension\nprompt = \"\"\"\n+++CustomExtension(level=comprehensive)\nExplain quantum computing.\n\"\"\"\n\ntransformed = transform_prompt(prompt)\n</code></pre>"},{"location":"extensions/#contributing-extensions","title":"Contributing Extensions","text":"<p>Contributions of new extensions are welcome! To contribute:</p> <ol> <li>Review the existing extensions for patterns and examples</li> <li>Create your extension following the registry entry schema</li> <li>Add comprehensive documentation and examples</li> <li>Include tests for your extension</li> <li>Submit a pull request</li> </ol> <p>All contributed extensions should be domain-specific and provide clear value beyond the core decorators.</p>"},{"location":"faq/","title":"Frequently Asked Questions","text":"<p>This document answers common questions about the Prompt Decorators framework.</p>"},{"location":"faq/#general-questions","title":"General Questions","text":""},{"location":"faq/#what-is-prompt-decorators","title":"What is Prompt Decorators?","text":"<p>Prompt Decorators is a Python framework for enhancing prompts sent to Large Language Models (LLMs). It provides a standardized way to modify how AI models process and respond to requests using a decorator pattern.</p>"},{"location":"faq/#how-does-it-work","title":"How does it work?","text":"<p>The framework uses a simple syntax where decorators are prefixed with <code>+++</code> followed by a decorator name and optional parameters. These decorators are transformed into natural language instructions that LLMs can understand.</p>"},{"location":"faq/#what-problem-does-it-solve","title":"What problem does it solve?","text":"<p>Prompt Decorators addresses several challenges:</p> <ol> <li>Consistency: Provides a standardized way to enhance prompts across different LLMs</li> <li>Reusability: Allows prompt enhancements to be reused across projects</li> <li>Composability: Enables combining multiple enhancements for complex behaviors</li> <li>Maintainability: Makes prompt engineering more structured and maintainable</li> </ol>"},{"location":"faq/#which-llm-providers-are-supported","title":"Which LLM providers are supported?","text":"<p>The framework is designed to work with any LLM provider, including:</p> <ul> <li>OpenAI (gpt-4, gpt-4o, etc.)</li> <li>Anthropic Claude</li> <li>Google Gemini</li> <li>Mistral AI</li> <li>Hugging Face models</li> <li>Local models</li> </ul>"},{"location":"faq/#is-it-open-source","title":"Is it open source?","text":"<p>Yes, Prompt Decorators is open source under the MIT License, which allows for both personal and commercial use.</p>"},{"location":"faq/#installation-and-setup","title":"Installation and Setup","text":""},{"location":"faq/#how-do-i-install-prompt-decorators","title":"How do I install Prompt Decorators?","text":"<p>Install using pip:</p> <pre><code>pip install prompt-decorators\n</code></pre> <p>For additional features, you can install with extras:</p> <pre><code># For MCP integration\npip install \"prompt-decorators[mcp]\"\n\n# For development\npip install \"prompt-decorators[dev,test,docs]\"\n</code></pre>"},{"location":"faq/#what-are-the-system-requirements","title":"What are the system requirements?","text":"<ul> <li>Python 3.11 or higher</li> <li>No special hardware requirements</li> <li>Works on Windows, macOS, and Linux</li> </ul>"},{"location":"faq/#how-do-i-verify-my-installation","title":"How do I verify my installation?","text":"<pre><code>import prompt_decorators\nprint(prompt_decorators.__version__)\n</code></pre>"},{"location":"faq/#do-i-need-api-keys-for-llm-providers","title":"Do I need API keys for LLM providers?","text":"<p>Yes, you'll need API keys for any LLM providers you want to use. The framework itself doesn't provide access to LLMs.</p>"},{"location":"faq/#using-decorators","title":"Using Decorators","text":""},{"location":"faq/#how-do-i-use-decorators-in-my-prompts","title":"How do I use decorators in my prompts?","text":"<p>Use the inline syntax directly in your prompts:</p> <pre><code>prompt = \"\"\"\n+++StepByStep(numbered=true)\n+++Audience(level=\"beginner\")\nExplain quantum computing.\n\"\"\"\n\nfrom prompt_decorators import apply_dynamic_decorators\ntransformed_prompt = apply_dynamic_decorators(prompt)\n</code></pre>"},{"location":"faq/#can-i-use-decorators-programmatically","title":"Can I use decorators programmatically?","text":"<p>Yes, you can create and use decorator instances in your code:</p> <pre><code>from prompt_decorators import create_decorator_instance\n\nstep_by_step = create_decorator_instance(\"StepByStep\", numbered=True)\naudience = create_decorator_instance(\"Audience\", level=\"beginner\")\n\noriginal_prompt = \"Explain quantum computing.\"\ntransformed_prompt = step_by_step(audience(original_prompt))\n</code></pre>"},{"location":"faq/#how-do-i-combine-multiple-decorators","title":"How do I combine multiple decorators?","text":"<p>You can stack decorators either inline:</p> <pre><code>+++Persona(role=\"scientist\")\n+++StepByStep(numbered=true)\n+++Audience(level=\"beginner\")\nExplain quantum computing.\n</code></pre> <p>Or programmatically:</p> <pre><code>persona = create_decorator_instance(\"Persona\", role=\"scientist\")\nstep_by_step = create_decorator_instance(\"StepByStep\", numbered=True)\naudience = create_decorator_instance(\"Audience\", level=\"beginner\")\n\ntransformed_prompt = persona(step_by_step(audience(original_prompt)))\n</code></pre>"},{"location":"faq/#what-happens-if-decorators-conflict","title":"What happens if decorators conflict?","text":"<p>When decorators have conflicting behaviors, the later decorator in the sequence takes precedence. For example, if you use both <code>Concise</code> and <code>Detailed</code>, the one that appears later will have more influence on the result.</p>"},{"location":"faq/#how-many-decorators-can-i-use-at-once","title":"How many decorators can I use at once?","text":"<p>There's no hard limit on the number of decorators you can use, but consider:</p> <ol> <li>Token Usage: Each decorator adds instructions that count toward token limits</li> <li>Clarity: Too many decorators might create conflicting or confusing instructions</li> <li>Performance: More decorators mean more processing time</li> </ol> <p>A practical limit is typically 3-5 decorators per prompt.</p>"},{"location":"faq/#available-decorators","title":"Available Decorators","text":""},{"location":"faq/#what-decorators-are-included","title":"What decorators are included?","text":"<p>The framework includes over 140 pre-defined decorators in categories such as:</p> <ul> <li>Reasoning: Enhance logical thinking and problem-solving</li> <li>Format: Control output format and structure</li> <li>Style: Modify tone, voice, and writing style</li> <li>Audience: Target specific audiences</li> <li>Persona: Adopt specific roles or personalities</li> <li>Domain: Focus on specific knowledge domains</li> <li>Length: Control response length</li> </ul>"},{"location":"faq/#how-do-i-see-all-available-decorators","title":"How do I see all available decorators?","text":"<pre><code>from prompt_decorators import get_available_decorators\n\ndecorators = get_available_decorators()\nfor decorator in decorators:\n    print(f\"{decorator.name}: {decorator.description}\")\n</code></pre>"},{"location":"faq/#what-are-the-most-commonly-used-decorators","title":"What are the most commonly used decorators?","text":"<p>Some of the most popular decorators include:</p> <ul> <li><code>StepByStep</code>: Breaks down responses into sequential steps</li> <li><code>Reasoning</code>: Enhances logical reasoning in responses</li> <li><code>Audience</code>: Adapts content for specific audience levels</li> <li><code>Persona</code>: Adopts a specific role or personality</li> <li><code>OutputFormat</code>: Controls the format of the output (markdown, JSON, etc.)</li> <li><code>Concise</code>: Creates brief, to-the-point responses</li> <li><code>Detailed</code>: Provides comprehensive, detailed responses</li> </ul>"},{"location":"faq/#custom-decorators","title":"Custom Decorators","text":""},{"location":"faq/#can-i-create-my-own-decorators","title":"Can I create my own decorators?","text":"<p>Yes, you can create custom decorators using the <code>DecoratorDefinition</code> class:</p> <pre><code>from prompt_decorators import DecoratorDefinition, register_decorator\n\nmy_decorator_def = DecoratorDefinition(\n    name=\"MyCustomDecorator\",\n    description=\"A custom decorator that adds a prefix and suffix\",\n    category=\"Custom\",\n    parameters=[\n        {\"name\": \"prefix\", \"type\": \"string\", \"description\": \"Text to add before\", \"default\": \"START: \"},\n        {\"name\": \"suffix\", \"type\": \"string\", \"description\": \"Text to add after\", \"default\": \" :END\"}\n    ],\n    transform_function=\"return prefix + text + suffix;\"\n)\n\nregister_decorator(my_decorator_def)\n</code></pre>"},{"location":"faq/#what-language-are-transform-functions-written-in","title":"What language are transform functions written in?","text":"<p>Transform functions are written in JavaScript, which is executed in a sandboxed environment.</p>"},{"location":"faq/#can-i-share-my-custom-decorators","title":"Can I share my custom decorators?","text":"<p>Yes, you can share custom decorators by:</p> <ol> <li>Creating a Python package with your decorator definitions</li> <li>Sharing JSON files containing decorator definitions</li> <li>Contributing to the main project</li> </ol>"},{"location":"faq/#how-do-i-validate-my-custom-decorators","title":"How do I validate my custom decorators?","text":"<p>Use the validator tool to check your decorators:</p> <pre><code>python -m prompt_decorators.tools.validator validate my_decorator.json\n</code></pre> <p>You can also use the more comprehensive unified validator script:</p> <pre><code># Validate decorator syntax in a prompt\npython scripts/prompt_validator.py syntax -t \"+++Reasoning(depth=comprehensive)\\nExplain quantum computing.\"\n\n# Validate a decorator schema file\npython scripts/prompt_validator.py schema -f registry/core/reasoning/deductive.json\n</code></pre>"},{"location":"faq/#integrations","title":"Integrations","text":""},{"location":"faq/#how-do-i-use-prompt-decorators-with-claude-desktop","title":"How do I use Prompt Decorators with Claude Desktop?","text":"<ol> <li> <p>Install the MCP integration:    <pre><code>pip install \"prompt-decorators[mcp]\"\n</code></pre></p> </li> <li> <p>Run the Claude Desktop integration:    <pre><code>python -m prompt_decorators.integrations.mcp.claude_desktop\n</code></pre></p> </li> <li> <p>In Claude Desktop, you'll see new tools available for working with decorators.</p> </li> </ol>"},{"location":"faq/#what-is-mcp","title":"What is MCP?","text":"<p>MCP (Model Context Protocol) is a protocol for integrating tools with LLM clients. Prompt Decorators provides an MCP integration that allows any MCP-compatible client to use decorators.</p>"},{"location":"faq/#can-i-use-prompt-decorators-in-a-web-application","title":"Can I use Prompt Decorators in a web application?","text":"<p>Yes, you can integrate Prompt Decorators into web applications:</p> <pre><code>from fastapi import FastAPI, Request\nfrom prompt_decorators import apply_dynamic_decorators\n\napp = FastAPI()\n\n@app.post(\"/generate\")\nasync def generate(request: Request):\n    data = await request.json()\n    prompt = data.get(\"prompt\", \"\")\n\n    # Apply decorators\n    transformed_prompt = apply_dynamic_decorators(prompt)\n\n    # Send to LLM (implementation depends on your LLM client)\n    response = your_llm_client.generate(transformed_prompt)\n\n    return {\"response\": response}\n</code></pre>"},{"location":"faq/#performance-and-limitations","title":"Performance and Limitations","text":""},{"location":"faq/#what-is-the-performance-impact","title":"What is the performance impact?","text":"<p>The framework adds minimal overhead to prompt processing:</p> <ul> <li>Parsing decorators: microseconds to milliseconds</li> <li>Executing transform functions: milliseconds</li> <li>Overall impact: negligible compared to LLM API call time</li> </ul>"},{"location":"faq/#are-there-token-limits","title":"Are there token limits?","text":"<p>The framework itself doesn't impose token limits, but:</p> <ol> <li>Each decorator adds instructions that count toward your LLM's token limits</li> <li>More complex decorators add more tokens</li> <li>Consider the token limits of your LLM provider</li> </ol>"},{"location":"faq/#can-decorators-access-external-resources","title":"Can decorators access external resources?","text":"<p>No, transform functions run in a sandboxed JavaScript environment and cannot access external resources like files, networks, or databases.</p>"},{"location":"faq/#is-there-a-rate-limit","title":"Is there a rate limit?","text":"<p>The framework itself doesn't impose rate limits, but your LLM provider might have rate limits on API calls.</p>"},{"location":"faq/#troubleshooting","title":"Troubleshooting","text":""},{"location":"faq/#why-isnt-my-decorator-being-applied","title":"Why isn't my decorator being applied?","text":"<p>Common issues include:</p> <ol> <li>Syntax Errors: Check that your decorator syntax is correct (<code>+++DecoratorName(param=value)</code>)</li> <li>Missing Registration: Ensure the decorator is registered before use</li> <li>Name Typos: Verify the decorator name is spelled correctly (case-sensitive)</li> <li>Parameter Errors: Check that parameter names and values are correct</li> </ol>"},{"location":"faq/#how-do-i-debug-decorator-transformations","title":"How do I debug decorator transformations?","text":"<p>Print the transformed prompt to see what's happening:</p> <pre><code>from prompt_decorators import apply_dynamic_decorators\n\nprompt = \"\"\"\n+++StepByStep(numbered=true)\nExplain quantum computing.\n\"\"\"\n\ntransformed_prompt = apply_dynamic_decorators(prompt)\nprint(\"Original prompt:\", prompt)\nprint(\"Transformed prompt:\", transformed_prompt)\n</code></pre>"},{"location":"faq/#why-am-i-getting-a-decorator-not-found-error","title":"Why am I getting a \"Decorator not found\" error?","text":"<p>This error occurs when you reference a decorator that isn't registered. Ensure:</p> <ol> <li>You've imported the decorator correctly</li> <li>The decorator name is spelled correctly (case-sensitive)</li> <li>Any custom decorators are registered before use</li> </ol>"},{"location":"faq/#how-do-i-fix-javascript-errors-in-transform-functions","title":"How do I fix JavaScript errors in transform functions?","text":"<p>If you're getting JavaScript errors in your transform functions:</p> <ol> <li>Check the syntax of your JavaScript code</li> <li>Ensure all variables used in the function are defined</li> <li>Verify that the function returns a string</li> <li>Test the function with different inputs</li> </ol>"},{"location":"faq/#contributing-and-support","title":"Contributing and Support","text":""},{"location":"faq/#how-can-i-contribute-to-the-project","title":"How can I contribute to the project?","text":"<p>You can contribute by:</p> <ol> <li>Submitting bug reports and feature requests on GitHub</li> <li>Creating pull requests with bug fixes or new features</li> <li>Improving documentation</li> <li>Creating and sharing custom decorators</li> <li>Helping answer questions in the community</li> </ol>"},{"location":"faq/#where-can-i-get-help","title":"Where can I get help?","text":"<ul> <li>Documentation: https://synaptiai.github.io/prompt-decorators/</li> <li>GitHub Issues: https://github.com/synaptiai/prompt-decorators/issues</li> <li>Discussions: https://github.com/synaptiai/prompt-decorators/discussions</li> </ul>"},{"location":"faq/#is-there-commercial-support-available","title":"Is there commercial support available?","text":"<p>For commercial support, please contact the maintainers through GitHub.</p>"},{"location":"faq/#how-do-i-report-a-bug","title":"How do I report a bug?","text":"<p>Report bugs on GitHub:</p> <ol> <li>Go to https://github.com/synaptiai/prompt-decorators/issues</li> <li>Click \"New Issue\"</li> <li>Select \"Bug Report\"</li> <li>Fill in the template with details about the bug</li> <li>Submit the issue</li> </ol>"},{"location":"faq/#advanced-topics","title":"Advanced Topics","text":""},{"location":"faq/#can-i-use-prompt-decorators-with-streaming-responses","title":"Can I use Prompt Decorators with streaming responses?","text":"<p>Yes, since the decorators are applied to the prompt before sending it to the LLM, streaming responses work normally.</p>"},{"location":"faq/#how-do-i-handle-versioning-of-decorators","title":"How do I handle versioning of decorators?","text":"<p>For versioning custom decorators:</p> <ol> <li>Include version information in decorator names or descriptions</li> <li>Use semantic versioning for your decorator packages</li> <li>Document compatibility between versions</li> </ol>"},{"location":"faq/#can-i-use-prompt-decorators-in-production","title":"Can I use Prompt Decorators in production?","text":"<p>Yes, the framework is designed for production use:</p> <ol> <li>It's well-tested and has a comprehensive test suite</li> <li>It follows best practices for security and performance</li> <li>It's used in production by multiple organizations</li> </ol>"},{"location":"faq/#how-do-i-optimize-token-usage","title":"How do I optimize token usage?","text":"<p>To minimize token usage:</p> <ol> <li>Use concise decorators that add minimal instructions</li> <li>Combine related decorators into custom composite decorators</li> <li>Use parameter defaults when possible</li> <li>Consider creating specialized decorators for your specific needs</li> </ol>"},{"location":"glossary/","title":"Glossary","text":"<p>This glossary defines key terms and concepts used in the Prompt Decorators framework.</p>"},{"location":"glossary/#a","title":"A","text":""},{"location":"glossary/#annotation","title":"Annotation","text":"<p>The syntax used to apply a decorator to a prompt, consisting of the decorator prefix (<code>+++</code>), the decorator name, and optional parameters.</p> <p>Example: <code>+++StepByStep(numbered=true)</code></p>"},{"location":"glossary/#apply","title":"Apply","text":"<p>The process of transforming a prompt by executing the decorator's transform function.</p>"},{"location":"glossary/#c","title":"C","text":""},{"location":"glossary/#category","title":"Category","text":"<p>A grouping of decorators with similar functionality or purpose, such as \"Reasoning\", \"Format\", or \"Style\".</p>"},{"location":"glossary/#claude-desktop","title":"Claude Desktop","text":"<p>A desktop application for interacting with Anthropic's Claude AI model. Prompt Decorators integrates with Claude Desktop through the MCP protocol.</p>"},{"location":"glossary/#composite-decorator","title":"Composite Decorator","text":"<p>A decorator that internally uses multiple other decorators to create a more complex transformation.</p>"},{"location":"glossary/#conflict","title":"Conflict","text":"<p>A situation where two or more decorators have incompatible behaviors or modify the same aspect of a prompt in contradictory ways.</p>"},{"location":"glossary/#d","title":"D","text":""},{"location":"glossary/#decorator","title":"Decorator","text":"<p>A reusable component that modifies a prompt to enhance how an LLM processes and responds to it.</p>"},{"location":"glossary/#decorator-definition","title":"Decorator Definition","text":"<p>A specification of a decorator, including its name, description, category, parameters, and transform function.</p>"},{"location":"glossary/#decorator-instance","title":"Decorator Instance","text":"<p>A specific instance of a decorator with particular parameter values.</p>"},{"location":"glossary/#decorator-pattern","title":"Decorator Pattern","text":"<p>A design pattern where objects (decorators) wrap around other objects (prompts) to modify their behavior without changing their structure.</p>"},{"location":"glossary/#decorator-registry","title":"Decorator Registry","text":"<p>A catalog of available decorators that can be looked up by name.</p>"},{"location":"glossary/#dynamic-decorator","title":"Dynamic Decorator","text":"<p>A decorator that is defined and loaded at runtime rather than being generated as code.</p>"},{"location":"glossary/#dynamic-implementation","title":"Dynamic Implementation","text":"<p>The approach used in Prompt Decorators v0.3.0+ where decorators are loaded directly from definitions at runtime, without code generation.</p>"},{"location":"glossary/#i","title":"I","text":""},{"location":"glossary/#inline-syntax","title":"Inline Syntax","text":"<p>The syntax for including decorators directly in prompt text using the <code>+++</code> prefix.</p> <p>Example: <pre><code>+++StepByStep(numbered=true)\nExplain quantum computing.\n</code></pre></p>"},{"location":"glossary/#integration","title":"Integration","text":"<p>A connection between the Prompt Decorators framework and another system, such as an LLM provider or client application.</p>"},{"location":"glossary/#j","title":"J","text":""},{"location":"glossary/#javascript","title":"JavaScript","text":"<p>The language used for writing transform functions in decorator definitions.</p>"},{"location":"glossary/#l","title":"L","text":""},{"location":"glossary/#large-language-model-llm","title":"Large Language Model (LLM)","text":"<p>An AI model trained on vast amounts of text data that can generate human-like text based on prompts.</p>"},{"location":"glossary/#m","title":"M","text":""},{"location":"glossary/#mcp-model-context-protocol","title":"MCP (Model Context Protocol)","text":"<p>A protocol for integrating tools with LLM clients, allowing them to extend the capabilities of the LLM.</p>"},{"location":"glossary/#mcp-integration","title":"MCP Integration","text":"<p>The component of Prompt Decorators that implements the Model Context Protocol, enabling integration with MCP-compatible clients like Claude Desktop.</p>"},{"location":"glossary/#mcp-server","title":"MCP Server","text":"<p>A server that implements the Model Context Protocol and exposes Prompt Decorators functionality as MCP tools.</p>"},{"location":"glossary/#p","title":"P","text":""},{"location":"glossary/#parameter","title":"Parameter","text":"<p>A configurable option for a decorator that affects its behavior.</p> <p>Example: In <code>StepByStep(numbered=true)</code>, <code>numbered</code> is a parameter with the value <code>true</code>.</p>"},{"location":"glossary/#parameter-type","title":"Parameter Type","text":"<p>The data type of a parameter, which can be <code>string</code>, <code>number</code>, <code>boolean</code>, or <code>enum</code>.</p>"},{"location":"glossary/#precedence","title":"Precedence","text":"<p>The rule determining which decorator takes effect when multiple decorators conflict. In Prompt Decorators, later decorators take precedence over earlier ones.</p>"},{"location":"glossary/#prompt","title":"Prompt","text":"<p>The input text sent to an LLM to generate a response.</p>"},{"location":"glossary/#prompt-engineering","title":"Prompt Engineering","text":"<p>The practice of crafting prompts to effectively communicate with and get desired outputs from LLMs.</p>"},{"location":"glossary/#r","title":"R","text":""},{"location":"glossary/#registry","title":"Registry","text":"<p>See Decorator Registry.</p>"},{"location":"glossary/#s","title":"S","text":""},{"location":"glossary/#sandboxed-environment","title":"Sandboxed Environment","text":"<p>A restricted execution environment where JavaScript transform functions run, preventing access to external resources for security.</p>"},{"location":"glossary/#stacking","title":"Stacking","text":"<p>The practice of applying multiple decorators to a single prompt, either inline or programmatically.</p>"},{"location":"glossary/#t","title":"T","text":""},{"location":"glossary/#token","title":"Token","text":"<p>The basic unit of text that LLMs process. Tokens are typically word fragments, with a word consisting of one or more tokens.</p>"},{"location":"glossary/#token-limit","title":"Token Limit","text":"<p>The maximum number of tokens that an LLM can process in a single request, including both the prompt and the response.</p>"},{"location":"glossary/#transform-function","title":"Transform Function","text":"<p>A JavaScript function that defines how a decorator modifies a prompt. It takes the input text and parameter values and returns the transformed text.</p>"},{"location":"glossary/#transformation","title":"Transformation","text":"<p>The process of modifying a prompt by applying one or more decorators.</p>"},{"location":"glossary/#v","title":"V","text":""},{"location":"glossary/#validator","title":"Validator","text":"<p>A tool for checking decorator definitions against the framework's specifications and identifying potential issues.</p>"},{"location":"glossary/#common-decorator-categories","title":"Common Decorator Categories","text":""},{"location":"glossary/#audience-decorators","title":"Audience Decorators","text":"<p>Decorators that adapt content for specific audience expertise levels.</p> <p>Examples: <code>Audience</code>, <code>ELI5</code>, <code>Technical</code></p>"},{"location":"glossary/#domain-decorators","title":"Domain Decorators","text":"<p>Decorators that focus on specific knowledge domains or fields.</p> <p>Examples: <code>Scientific</code>, <code>Legal</code>, <code>Medical</code></p>"},{"location":"glossary/#format-decorators","title":"Format Decorators","text":"<p>Decorators that control the structure and format of the output.</p> <p>Examples: <code>OutputFormat</code>, <code>Bullet</code>, <code>TableFormat</code></p>"},{"location":"glossary/#length-decorators","title":"Length Decorators","text":"<p>Decorators that control the verbosity or conciseness of responses.</p> <p>Examples: <code>Concise</code>, <code>Detailed</code>, <code>Summary</code></p>"},{"location":"glossary/#persona-decorators","title":"Persona Decorators","text":"<p>Decorators that adopt specific roles, personalities, or expertise.</p> <p>Examples: <code>Persona</code>, <code>AsExpert</code>, <code>Professional</code></p>"},{"location":"glossary/#reasoning-decorators","title":"Reasoning Decorators","text":"<p>Decorators that enhance logical thinking and problem-solving.</p> <p>Examples: <code>Reasoning</code>, <code>StepByStep</code>, <code>TreeOfThought</code></p>"},{"location":"glossary/#style-decorators","title":"Style Decorators","text":"<p>Decorators that modify tone, voice, and writing style.</p> <p>Examples: <code>Tone</code>, <code>Academic</code>, <code>Creative</code></p>"},{"location":"glossary/#common-decorator-parameters","title":"Common Decorator Parameters","text":""},{"location":"glossary/#depth","title":"depth","text":"<p>Controls the level of detail or thoroughness in a response.</p> <p>Possible values: <code>basic</code>, <code>moderate</code>, <code>comprehensive</code></p>"},{"location":"glossary/#format","title":"format","text":"<p>Specifies the output format for structured responses.</p> <p>Possible values: <code>markdown</code>, <code>json</code>, <code>html</code>, <code>csv</code>, etc.</p>"},{"location":"glossary/#level","title":"level","text":"<p>Indicates the expertise level for audience adaptation.</p> <p>Possible values: <code>beginner</code>, <code>intermediate</code>, <code>expert</code></p>"},{"location":"glossary/#numbered","title":"numbered","text":"<p>Determines whether steps or items should be numbered.</p> <p>Possible values: <code>true</code>, <code>false</code></p>"},{"location":"glossary/#role","title":"role","text":"<p>Specifies the role or persona to adopt.</p> <p>Possible values: Various roles like <code>teacher</code>, <code>scientist</code>, <code>lawyer</code>, etc.</p>"},{"location":"glossary/#style","title":"style","text":"<p>Defines the writing or communication style.</p> <p>Possible values: <code>formal</code>, <code>casual</code>, <code>technical</code>, <code>creative</code>, etc.</p>"},{"location":"implementation-status/","title":"Prompt Decorators Implementation Status","text":"<p>This document tracks the implementation status of features described in the Prompt Decorators Specification.</p>"},{"location":"implementation-status/#implementation-phases","title":"Implementation Phases","text":"<p>The specification outlines a phased implementation approach. Current progress:</p> <ul> <li>Phase 1 (Core Support): \u2705 Complete</li> <li>Core decorators are implemented</li> <li>Basic transformation functionality works</li> <li> <p>Parameter validation is operational</p> </li> <li> <p>Phase 2 (Extended Support): \ud83d\udd04 In Progress</p> </li> <li>Reasoning Process Decorators: \u2705 Complete</li> <li>Output Structure Decorators: \u2705 Complete</li> <li>Tone and Style Decorators: \u2705 Complete</li> <li>Verification and Quality Decorators: \u2705 Complete</li> <li> <p>Meta-Decorators: \ud83d\udd04 Partially Complete</p> </li> <li> <p>Phase 3 (Full Support): \ud83d\udd52 Planned</p> </li> <li>Complete implementation of all standard decorators</li> <li>Comprehensive error handling</li> <li> <p>Enhanced composition strategies</p> </li> <li> <p>Phase 4 (Extensions): \ud83d\udd52 Planned</p> </li> <li>Extension loading mechanism</li> <li>Domain-specific extensions</li> <li>Extension discovery service</li> </ul>"},{"location":"implementation-status/#feature-implementation-status","title":"Feature Implementation Status","text":"Feature Status Notes Core Decorator Syntax \u2705 Complete The core <code>+++Decorator(params)</code> syntax is fully implemented Parameter Types \u2705 Complete All parameter types (string, number, boolean, enum, array) are supported Decorator Placement \u2705 Complete Decorators can be placed at the beginning or on new lines Versioning Syntax \ud83d\udd04 Partial Basic versioning works but version ranges aren't fully implemented Error Handling \u2705 Complete Implementations ignore syntax errors and proceed with processing JSON Schema Definitions \u2705 Complete All schemas are defined and used for validation Core Decorators \u2705 Complete All core decorators are implemented Reasoning Process Decorators \u2705 Complete All reasoning decorators are implemented Output Structure Decorators \u2705 Complete All output structure decorators are implemented Decorator Conflicts/Compatibility \ud83d\udd04 Partial Basic conflict resolution works but compatibility checking is limited Tone and Style Decorators \u2705 Complete All tone and style decorators are implemented Verification and Quality Decorators \u2705 Complete All verification decorators are implemented Meta-Decorators \ud83d\udd04 Partial Basic meta-decorators work but some advanced features are pending Registry and Discovery \ud83d\udd04 Partial Registry structure exists but discovery service is pending Extension Mechanism \ud83d\udd52 Planned Extension loading from URLs is planned for future releases Standardization Process \ud83d\udd04 In Progress Specification is defined but feedback integration is ongoing Security Considerations \ud83d\udd04 Partial Basic input validation is implemented Testing and Validation \ud83d\udd04 Partial Unit tests exist but comprehensive test suite is in development"},{"location":"implementation-status/#decorator-implementation-status","title":"Decorator Implementation Status","text":"Decorator Status Notes Reasoning \u2705 Complete Core decorator for reasoning processes StepByStep \u2705 Complete Core decorator for step-by-step instructions Socratic \u2705 Complete Question-based exploration Debate \u2705 Complete Multiple viewpoint analysis FirstPrinciples \u2705 Complete Breaking down to fundamental truths RootCause \u2705 Complete Systematic analysis to identify underlying causes TreeOfThought \u2705 Complete Explore multiple reasoning branches Analogical \u2705 Complete Use analogies for reasoning and explanation ForcedAnalogy \u2705 Complete Compare concepts through specific analogical domains Inductive \u2705 Complete Pattern-based reasoning from specific to general Deductive \u2705 Complete Logical reasoning from general to specific Abductive \u2705 Complete Generate best explanations from limited information RedTeam \u2705 Complete Challenge assumptions with adversarial analysis BlindSpots \u2705 Complete Identify hidden assumptions and risks Contrarian \u2705 Complete Generate counterarguments to test perspectives NegativeSpace \u2705 Complete Uncover what isn't explicitly stated DeepDive \u2705 Complete Multi-layered, progressively deeper analysis PerspectiveCascade \u2705 Complete Systematically explores a topic through a sequence of diverse, interconnected viewpoints TemporalResonance \u2705 Complete Analyzes topics across multiple time horizons to identify patterns and principles"},{"location":"implementation-status/#validation-tools","title":"Validation Tools","text":"<p>The specification mentions several validation tools. Their implementation status:</p> Tool Status Current Implementation Decorator Validator \ud83d\udd04 Partial Basic validation in <code>scripts/validate_decorators.py</code> Behavior Test Framework \ud83d\udd04 Partial Some behavior tests in <code>tests/</code> directory Compatibility Scanner \ud83d\udd52 Planned Pending implementation"},{"location":"implementation-status/#test-suite","title":"Test Suite","text":"<p>The specification references a dedicated test suite repository. Current status:</p> <ul> <li>Dedicated Repository: \ud83d\udd52 Planned</li> <li>Current Tests: \ud83d\udd04 In Progress</li> <li>Located in the <code>tests/</code> directory of the main repository</li> <li>Includes test cases for core decorators</li> <li>Includes basic composition tests</li> <li>Missing comprehensive error handling tests</li> <li>Missing performance benchmarks</li> </ul>"},{"location":"implementation-status/#next-steps","title":"Next Steps","text":"<ol> <li>Complete remaining Phase 2 components</li> <li>\u2705 Implement a unified validation CLI tool (completed in <code>scripts/prompt_validator.py</code>)</li> <li>Expand test coverage</li> <li>\u2705 Document extension capabilities clearly (completed in <code>docs/extensions.md</code>)</li> <li>Begin work on Extension Mechanism for Phase 4</li> </ol>"},{"location":"implementation-status/#compatibility-notes","title":"Compatibility Notes","text":"<p>Currently, the implementation fully supports: - Python 3.8+ - All major operating systems - All LLM providers via the standardized API</p>"},{"location":"implementation-status/#reporting-issues","title":"Reporting Issues","text":"<p>If you notice discrepancies between this status document and the actual implementation, please file an issue in the repository.</p>"},{"location":"installation/","title":"Installation","text":"<p>This guide provides step-by-step instructions for installing the Prompt Decorators package.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11 or higher</li> <li>pip (Python package installer)</li> </ul>"},{"location":"installation/#installation-methods","title":"Installation Methods","text":""},{"location":"installation/#using-pip-recommended","title":"Using pip (Recommended)","text":"<p>The simplest way to install Prompt Decorators is using pip:</p> <pre><code>pip install prompt-decorators\n</code></pre>"},{"location":"installation/#using-poetry","title":"Using Poetry","text":"<p>If you're using Poetry for dependency management:</p> <pre><code>poetry add prompt-decorators\n</code></pre>"},{"location":"installation/#development-installation","title":"Development Installation","text":"<p>For development purposes, you can install the package from source:</p> <pre><code># Clone the repository\ngit clone https://github.com/synaptiai/prompt-decorators.git\ncd prompt-decorators\n\n# Install in development mode\npip install -e .\n</code></pre> <p>For development with all optional dependencies:</p> <pre><code>pip install -e \".[dev,test,docs]\"\n</code></pre>"},{"location":"installation/#verifying-installation","title":"Verifying Installation","text":"<p>You can verify your installation by running:</p> <pre><code>import prompt_decorators\nprint(prompt_decorators.__version__)\n</code></pre> <p>You should see the version number printed to the console.</p>"},{"location":"installation/#environment-setup","title":"Environment Setup","text":""},{"location":"installation/#configuration","title":"Configuration","text":"<p>The Prompt Decorators package has minimal configuration requirements. However, when using specific integrations, additional configuration may be needed.</p> <p>For example, if you're using the OpenAI integration, you'll need to set up your API key:</p> <pre><code>import os\nos.environ[\"OPENAI_API_KEY\"] = \"your-api-key\"\n</code></pre> <p>Alternatively, you can create a <code>.env</code> file in your project directory:</p> <pre><code>OPENAI_API_KEY=your-api-key\n</code></pre> <p>And then use a library like <code>python-dotenv</code> to load it:</p> <pre><code>from dotenv import load_dotenv\nload_dotenv()\n</code></pre>"},{"location":"installation/#mcp-integration-installation","title":"MCP Integration Installation","text":"<p>If you plan to use the Model Context Protocol (MCP) integration:</p> <pre><code>pip install \"prompt-decorators[mcp]\"\n</code></pre> <p>This will install the MCP dependencies required for using Prompt Decorators with any MCP-compatible client.</p>"},{"location":"installation/#optional-dependencies","title":"Optional Dependencies","text":"<p>The package supports several optional dependency groups:</p> <ul> <li><code>dev</code>: Development dependencies</li> <li><code>test</code>: Testing dependencies</li> <li><code>docs</code>: Documentation dependencies</li> <li><code>mcp</code>: Model Context Protocol integration</li> </ul> <p>You can install any combination:</p> <pre><code># Install with MCP and testing dependencies\npip install \"prompt-decorators[mcp,test]\"\n</code></pre>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"installation/#common-installation-issues","title":"Common Installation Issues","text":""},{"location":"installation/#package-not-found","title":"Package Not Found","text":"<p>If you see \"Package not found\" errors, ensure that: - You're using the correct package name (<code>prompt-decorators</code>) - Your PyPI or pip configuration is correct - Your internet connection is stable</p>"},{"location":"installation/#version-conflicts","title":"Version Conflicts","text":"<p>If you encounter version conflicts with dependencies:</p> <pre><code># Install with a specific version\npip install prompt-decorators==0.3.0\n\n# Or resolve dependencies explicitly\npip install --upgrade pip setuptools wheel\npip install prompt-decorators\n</code></pre>"},{"location":"installation/#permission-errors","title":"Permission Errors","text":"<p>If you encounter permission errors:</p> <pre><code># Use the --user flag\npip install --user prompt-decorators\n\n# Or use a virtual environment (recommended)\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\npip install prompt-decorators\n</code></pre>"},{"location":"installation/#next-steps","title":"Next Steps","text":"<p>After installation, proceed to the Quick Start guide to begin using the package.</p>"},{"location":"navigation/","title":"Documentation Navigation","text":"<p>This guide helps you navigate the Prompt Decorators documentation to find the information you need quickly.</p>"},{"location":"navigation/#documentation-structure","title":"Documentation Structure","text":"<p>The Prompt Decorators documentation is organized into several main sections:</p> <ol> <li>Getting Started: Basic information to get up and running</li> <li>Tutorials: Step-by-step guides for common tasks</li> <li>Integrations: Information about connecting with other systems</li> <li>Contributing: Guidelines for contributing to the project</li> <li>Project Documentation: Technical details about the project</li> <li>Tools: Documentation for utility tools</li> </ol>"},{"location":"navigation/#finding-what-you-need","title":"Finding What You Need","text":""},{"location":"navigation/#if-youre-new-to-prompt-decorators","title":"If you're new to Prompt Decorators:","text":"<ol> <li>Start with the Home page for an overview</li> <li>Read the Installation guide to set up the package</li> <li>Follow the Quick Start guide for basic usage</li> <li>Explore Core Concepts to understand the framework</li> </ol>"},{"location":"navigation/#if-you-want-to-create-decorators","title":"If you want to create decorators:","text":"<ol> <li>Read Creating Decorators for a comprehensive guide</li> <li>Follow the Creating Custom Decorators tutorial</li> <li>Check the Validator Tool documentation to validate your decorators</li> </ol>"},{"location":"navigation/#if-you-want-to-use-decorators-with-specific-llms","title":"If you want to use decorators with specific LLMs:","text":"<ol> <li>Read Compatibility for LLM-specific information</li> <li>Explore the MCP Integration for Claude and other LLMs</li> <li>Check Claude Desktop for Claude-specific setup</li> </ol>"},{"location":"navigation/#if-you-want-to-contribute-to-the-project","title":"If you want to contribute to the project:","text":"<ol> <li>Read the Contributing Guidelines</li> <li>Set up your environment using the Development Setup guide</li> <li>Follow the Development Guide for best practices</li> <li>Review the Documentation Workflow for documentation contributions</li> </ol>"},{"location":"navigation/#if-you-need-technical-details","title":"If you need technical details:","text":"<ol> <li>Read the Architecture document for system design</li> <li>Check the Specification for detailed protocol information</li> <li>Explore the Code Quality Integration for quality standards</li> </ol>"},{"location":"navigation/#documentation-map","title":"Documentation Map","text":"<p>``` mermaid graph TD     A[Home] --&gt; B[Getting Started]     A --&gt; C[Tutorials]     A --&gt; D[Integrations]     A --&gt; E[Contributing]     A --&gt; F[Project Documentation]     A --&gt; G[Tools]</p> <pre><code>B --&gt; B1[Installation]\nB --&gt; B2[Quick Start]\nB --&gt; B3[Core Concepts]\nB --&gt; B4[Creating Decorators]\nB --&gt; B5[Compatibility]\n\nC --&gt; C1[Creating Custom Decorators]\nC --&gt; C2[Combining Decorators]\nC --&gt; C3[Extension Development]\n\nD --&gt; D1[Overview]\nD --&gt; D2[Model Context Protocol]\nD2 --&gt; D2A[MCP Server]\nD2 --&gt; D2B[Claude Desktop]\n\nE --&gt; E1[Guidelines]\nE --&gt; E2[Development Setup]\nE --&gt; E3[Development Guide]\nE --&gt; E4[Documentation]\nE --&gt; E5[Documentation Standards]\nE --&gt; E6[Decorator Registry]\n\nF --&gt; F1[Roadmap]\nF --&gt; F2[Architecture]\nF --&gt; F3[Specification]\nF --&gt; F4[Code Quality Integration]\nF --&gt; F5[FAQ]\nF --&gt; F6[Glossary]\nF --&gt; F7[Navigation]\n\nG --&gt; G1[Validator Tool]\nG --&gt; G2[MCP Server]\nG --&gt; G3[Claude Desktop]\nG --&gt; G4[Demoing the Prompt Decorators]\n</code></pre> <p>```</p>"},{"location":"navigation/#quick-reference","title":"Quick Reference","text":""},{"location":"navigation/#getting-started","title":"Getting Started","text":"<ul> <li>Installation: How to install the package</li> <li>Quick Start: Basic usage examples</li> <li>Core Concepts: Key concepts and design philosophy</li> <li>Creating Decorators: How to create custom decorators</li> <li>Compatibility: LLM provider compatibility information</li> </ul>"},{"location":"navigation/#tutorials","title":"Tutorials","text":"<ul> <li>Creating Custom Decorators: Step-by-step guide to creating decorators</li> <li>Combining Decorators: How to combine multiple decorators</li> <li>Extension Development: Creating decorator extension packages</li> </ul>"},{"location":"navigation/#integrations","title":"Integrations","text":"<ul> <li>Integrations Overview: Overview of available integrations</li> <li>Model Context Protocol (MCP): MCP integration details</li> <li>MCP Server: Running the MCP server</li> <li>Claude Desktop: Using with Claude Desktop</li> </ul>"},{"location":"navigation/#contributing","title":"Contributing","text":"<ul> <li>Guidelines: Contribution guidelines</li> <li>Development Setup: Setting up your development environment</li> <li>Development Guide: Development best practices</li> <li>Documentation: Documentation contribution workflow</li> <li>Documentation Standards: Standards for documentation</li> <li>Decorator Registry: Information about the decorator registry</li> </ul>"},{"location":"navigation/#project-documentation","title":"Project Documentation","text":"<ul> <li>Roadmap: Future development plans</li> <li>Architecture: System architecture and design</li> <li>Specification: Detailed technical specification</li> <li>Code Quality Integration: Code quality tools and processes</li> <li>FAQ: Frequently asked questions</li> <li>Glossary: Definitions of key terms</li> <li>Navigation: This navigation guide</li> </ul>"},{"location":"navigation/#tools","title":"Tools","text":"<ul> <li>Validator Tool: Tool for validating decorator definitions</li> <li>MCP Server: MCP server documentation</li> <li>Claude Desktop: Claude Desktop integration</li> <li>Demoing the Prompt Decorators: Demo tools and examples</li> </ul>"},{"location":"navigation/#search-tips","title":"Search Tips","text":"<p>The documentation includes a search feature that can help you find specific information:</p> <ol> <li>Use the search box in the top navigation bar</li> <li>Enter keywords related to what you're looking for</li> <li>Press Enter to see search results</li> <li>Click on a result to navigate to that page</li> </ol> <p>Effective search terms include: - Decorator names (e.g., \"StepByStep\", \"Reasoning\") - Concepts (e.g., \"parameters\", \"transform function\") - Tasks (e.g., \"create decorator\", \"combine decorators\") - Integration names (e.g., \"Claude\", \"MCP\")</p>"},{"location":"navigation/#additional-resources","title":"Additional Resources","text":"<ul> <li>GitHub Repository: Source code and issue tracking</li> <li>PyPI Package: Package information</li> <li>Release Notes: Version history and changes</li> </ul>"},{"location":"navigation/#feedback","title":"Feedback","text":"<p>If you can't find what you're looking for or have suggestions for improving the documentation:</p> <ol> <li>Open an issue on GitHub</li> <li>Specify what information you were looking for</li> <li>Suggest where you would expect to find it</li> </ol> <p>Your feedback helps us improve the documentation for everyone!</p>"},{"location":"prompt-decorators-specification-v1.0/","title":"Prompt Decorators Specification","text":""},{"location":"prompt-decorators-specification-v1.0/#abstract","title":"Abstract","text":"<p>This document proposes a standardized framework for \"Prompt Decorators\" \u2013 a system of annotated instructions that modify the behavior and output formatting of Large Language Models (LLMs). Building on concepts from software design patterns, particularly the Decorator pattern in object-oriented programming, this standard creates a structured, extensible approach to prompt engineering. The proposed system enables consistent, reusable interaction paradigms across different AI implementations, reducing cognitive load on users while increasing the utility, reliability, and standardization of AI interactions.</p>"},{"location":"prompt-decorators-specification-v1.0/#executive-summary","title":"Executive Summary","text":"<p>Prompt Decorators address the growing complexity of AI interactions by providing a standardized syntax for modifying AI behavior. By prefixing prompts with <code>+++</code> followed by descriptive directives like <code>Reasoning</code>, <code>StepByStep</code>, or <code>CiteSources</code>, users can consistently control how AI models process and respond to requests across different platforms and implementations. This standard defines a comprehensive set of decorators, implementation patterns, compatibility considerations, and evolution mechanisms to create a robust ecosystem for structured AI interactions.</p> <p>Key benefits include: - Reduced Cognitive Load: Users can employ shorter, standardized instructions - Consistency: More standardized behavior across compatible AI systems - Composability: Decorators can be combined for complex behavior - Extensibility: The framework allows for domain-specific extensions - Efficiency: More structured prompts can lead to more efficient interactions</p> <p>Implementations have demonstrated improvements in content quality, user satisfaction, and workflow efficiency across various domains. This standard aims to provide a foundation for more reliable, effective human-AI collaboration that can evolve with advances in AI capabilities.</p>"},{"location":"prompt-decorators-specification-v1.0/#1-introduction-and-scope","title":"1. Introduction and Scope","text":""},{"location":"prompt-decorators-specification-v1.0/#11-purpose","title":"1.1 Purpose","text":"<p>This standard defines a framework for \"Prompt Decorators\" that:</p> <ol> <li>MUST provide a consistent syntax for modifying AI behavior</li> <li>SHOULD work across different LLM implementations when supported</li> <li>SHOULD reduce prompt engineering complexity</li> <li>SHOULD enable composition of multiple behavioral modifications</li> <li>MAY be extended for domain-specific applications</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#12-scope","title":"1.2 Scope","text":"<p>This standard covers:</p> <ul> <li>Core decorator syntax and grammar</li> <li>Standard decorator definitions and behavior</li> <li>Implementation guidelines for LLM providers, application developers, and end users</li> <li>Extension mechanisms for specialized decorators</li> <li>Versioning and evolution processes</li> </ul> <p>This standard does not cover:</p> <ul> <li>Internal implementation of LLM reasoning or processing</li> <li>Model-specific optimizations or capabilities</li> <li>User interface design for decorator application</li> <li>Dataset creation or model training techniques</li> </ul>"},{"location":"prompt-decorators-specification-v1.0/#13-conformance","title":"1.3 Conformance","text":"<p>Implementations claiming conformance to this standard:</p> <ol> <li>MUST support the core syntax defined in Section 3</li> <li>MUST implement at least the minimal set of decorators defined in Section 4.1</li> <li>SHOULD implement the full set of decorators defined in Section 4</li> <li>MUST handle unsupported decorators gracefully according to Section 5.4</li> <li>SHOULD provide documentation on supported and unsupported decorators</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#14-background-and-motivation","title":"1.4 Background and Motivation","text":"<p>As Large Language Models become increasingly integrated into workflows across industries, the need for standardized, consistent ways to interact with these systems has become apparent. Current prompt engineering approaches are largely ad-hoc, requiring extensive documentation, reinvention, and significant cognitive overhead when switching between systems or use cases.</p> <p>Prompt Decorators address this challenge by providing a systematic approach to modifying AI behavior through simple, composable annotations. Inspired by the Decorator pattern in programming and Python's function decorators, they serve as a layer of abstraction that decouples the core prompt from instructions about how to process and present the response.</p>"},{"location":"prompt-decorators-specification-v1.0/#15-current-challenges-in-prompt-engineering","title":"1.5 Current Challenges in Prompt Engineering","text":"<p>Current prompt engineering suffers from several limitations:</p> <ul> <li>Inconsistency: Instructions vary widely between users, platforms, and models</li> <li>Verbosity: Detailed instructions consume token context that could be used for content</li> <li>Cognitive Overhead: Users must remember or document specific prompting techniques</li> <li>Lack of Composability: Combining different instruction paradigms is cumbersome</li> <li>Undocumented Behavior: Expected model behavior is often implicit rather than explicit</li> </ul>"},{"location":"prompt-decorators-specification-v1.0/#16-benefits-of-prompt-decorators","title":"1.6 Benefits of Prompt Decorators","text":"<p>The proposed standard addresses these challenges through:</p> <ul> <li>Standardization: Common vocabulary and syntax across platforms and models</li> <li>Efficiency: Concise annotations that reduce token consumption</li> <li>Reusability: Consistent behaviors that can be reused across different contexts</li> <li>Composability: Ability to combine decorators for complex interaction patterns</li> <li>Explicit Behavior: Clear documentation of expected model responses</li> <li>Reduced Cognitive Load: Simple annotations instead of lengthy instructions</li> </ul>"},{"location":"prompt-decorators-specification-v1.0/#2-core-principles-and-design-philosophy","title":"2. Core Principles and Design Philosophy","text":""},{"location":"prompt-decorators-specification-v1.0/#21-guiding-principles","title":"2.1 Guiding Principles","text":"<p>The Prompt Decorator standard is designed around these core principles:</p> <ol> <li>Simplicity: Decorators should be easy to learn, remember, and apply</li> <li>Consistency: Behavior should be predictable across different models and contexts</li> <li>Composability: Decorators should work together without conflicts</li> <li>Extensibility: The framework should allow for new decorators as needs evolve</li> <li>Minimalism: Decorators should use minimal syntax and tokens</li> <li>Model Agnosticism: Standards should apply across different LLM implementations</li> <li>Human Readability: Syntax should be comprehensible to humans, not just machines</li> <li>Graceful Degradation: Unrecognized decorators should be handled sensibly</li> <li>Versioning Support: The standard should accommodate evolution over time</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#22-design-choices","title":"2.2 Design Choices","text":"<p>The standard employs the following design patterns:</p> <ul> <li>Triple Plus Prefix (<code>+++</code>) to clearly demarcate decorators from regular text</li> <li>Parameter Encapsulation using parentheses with explicit parameter names</li> <li>Categorization to organize decorators by function and purpose</li> <li>Hierarchical Structure allowing for general and specific decorator types</li> </ul>"},{"location":"prompt-decorators-specification-v1.0/#3-syntax-specification","title":"3. Syntax Specification","text":""},{"location":"prompt-decorators-specification-v1.0/#31-basic-syntax","title":"3.1 Basic Syntax","text":"<p>The canonical syntax for a Prompt Decorator MUST follow this pattern:</p> <pre><code>+++&lt;DecoratorName&gt;[(parameter1=value1[, parameter2=value2, ...])]\n</code></pre> <p>Where: - <code>+++</code> is the decorator prefix that MUST be used to identify a decorator - <code>&lt;DecoratorName&gt;</code> is the case-sensitive name of the decorator - Parameters are OPTIONAL and enclosed in parentheses - Multiple parameters MUST be separated by commas - Parameter names and values MUST be separated by equals signs - String values MAY be enclosed in quotes for clarity, especially when containing spaces</p>"},{"location":"prompt-decorators-specification-v1.0/#32-parameter-types","title":"3.2 Parameter Types","text":"<p>Parameters MUST use one of the following types:</p> <ol> <li>String values: <code>parameter=\"value\"</code> or <code>parameter=value</code></li> <li>Numeric values: <code>parameter=42</code> or <code>parameter=3.14</code></li> <li>Boolean values: <code>parameter=true</code> or <code>parameter=false</code></li> <li>Enumerated values: <code>parameter=option1</code> (from a predefined set)</li> <li>Arrays: <code>parameter=[item1,item2,item3]</code></li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#33-decorator-placement-and-composition","title":"3.3 Decorator Placement and Composition","text":"<ol> <li>Decorators MUST appear at the beginning of a prompt or on a new line</li> <li>Multiple decorators MAY be stacked, with each decorator on a new line</li> <li>When multiple decorators are used, they MUST be applied in the order they appear</li> <li>The <code>+++Version</code> decorator, if present, MUST be the first decorator</li> </ol> <p>Example of proper composition:</p> <pre><code>+++Version(standard=1.0.0)\n+++Reasoning(depth=comprehensive)\n+++CiteSources(style=APA)\nWhat are the environmental impacts of electric vehicles?\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#34-versioning-syntax","title":"3.4 Versioning Syntax","text":"<p>To specify versions of individual decorators:</p> <pre><code>+++&lt;DecoratorName&gt;:v&lt;VersionNumber&gt;(parameters)\n</code></pre> <p>Example: <pre><code>+++Reasoning:v2(depth=comprehensive)\n</code></pre></p>"},{"location":"prompt-decorators-specification-v1.0/#35-error-handling","title":"3.5 Error Handling","text":"<ol> <li>Implementations MUST ignore syntax errors in decorators rather than failing</li> <li>Implementations SHOULD provide warnings for malformed decorators</li> <li>Implementations MUST proceed with processing the rest of the prompt when encountering errors</li> <li>Implementations SHOULD document their error handling behavior</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#36-json-schema-definitions","title":"3.6 JSON Schema Definitions","text":"<p>The standard provides formal JSON Schema definitions for validating decorator implementations. These schemas are available in the <code>/schemas</code> directory:</p> <ol> <li>Base Decorator Schema (<code>decorator.schema.json</code>):</li> <li>Defines the structure of individual decorators</li> <li>Validates decorator names, versions, and parameters</li> <li>Includes metadata for documentation and deprecation</li> <li> <p>Required for all decorator implementations</p> </li> <li> <p>API Request Schema (<code>api-request.schema.json</code>):</p> </li> <li>Defines the structure of API requests using decorators</li> <li>Includes prompt text, decorator list, and metadata</li> <li>References the base decorator schema for validation</li> <li> <p>Used by LLM providers implementing the standard</p> </li> <li> <p>Registry Entry Schema (<code>registry-entry.schema.json</code>):</p> </li> <li>Defines how decorators are registered in the central registry</li> <li>Includes detailed metadata, documentation, and compatibility info</li> <li>Used for publishing decorators to the registry</li> <li> <p>Ensures consistent documentation and versioning</p> </li> <li> <p>Extension Package Schema (<code>extension-package.schema.json</code>):</p> </li> <li>Defines how decorator extensions are packaged</li> <li>Includes dependency management and configuration</li> <li>References the registry entry schema for decorator definitions</li> <li>Used for distributing collections of related decorators</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#361-schema-usage","title":"3.6.1 Schema Usage","text":"<p>Implementations MUST validate their decorator implementations against these schemas:</p> <pre><code># Using ajv-cli\nnpx ajv-cli validate -s decorator.schema.json -d your-decorator.json\n\n# Using python-jsonschema\njsonschema -i your-decorator.json decorator.schema.json\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#362-schema-versioning","title":"3.6.2 Schema Versioning","text":"<p>The JSON schemas follow semantic versioning: - Major version changes indicate breaking changes - Minor version changes add features in a backward-compatible manner - Patch version changes fix issues in a backward-compatible manner</p>"},{"location":"prompt-decorators-specification-v1.0/#363-schema-references","title":"3.6.3 Schema References","text":"<p>JSON files can reference these schemas using the <code>$schema</code> property:</p> <pre><code>{\n  \"$schema\": \"https://raw.githubusercontent.com/prompt-decorators/spec/main/schemas/decorator.schema.json\",\n  \"name\": \"YourDecorator\",\n  \"version\": \"1.0.0\",\n  ...\n}\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#4-categories-of-prompt-decorators","title":"4. Categories of Prompt Decorators","text":"<p>Based on an analysis of common interaction patterns and effective prompt techniques, the following comprehensive set of decorators has been organized into functional categories.</p>"},{"location":"prompt-decorators-specification-v1.0/#41-core-decorators","title":"4.1 Core Decorators","text":"<p>These decorators form the minimal conforming implementation and MUST be supported by any implementation claiming compliance with this standard:</p> Decorator Description Parameters <code>+++Reasoning</code> Explicit reasoning path before conclusion <code>depth=[basic\\|moderate\\|comprehensive]</code> <code>+++StepByStep</code> Sequential problem-solving with labeled steps <code>numbered=[true\\|false]</code> <code>+++OutputFormat</code> Specify output format <code>format=[json\\|markdown\\|yaml\\|xml\\|plaintext]</code> <code>+++Tone</code> Overall tone adjustment <code>style=[formal\\|casual\\|friendly\\|technical\\|humorous]</code> <code>+++Version</code> Specify standard version compatibility <code>standard=[semver]</code>"},{"location":"prompt-decorators-specification-v1.0/#42-reasoning-process-decorators","title":"4.2 Reasoning Process Decorators","text":"<p>These decorators modify how the AI approaches reasoning about a problem.</p> Decorator Description Parameters <code>+++Reasoning</code> Explicit reasoning path before conclusion <code>depth=[basic\\|moderate\\|comprehensive]</code> <code>+++StepByStep</code> Sequential problem-solving with labeled steps <code>numbered=[true\\|false]</code> <code>+++Socratic</code> Question-based exploration of the topic <code>iterations=[1-5]</code> <code>+++Debate</code> Multiple viewpoint analysis <code>perspectives=[2-5]</code> <code>+++FirstPrinciples</code> Break down to fundamental truths <code>depth=[1-5]</code> <code>+++RootCause</code> Systematic analysis to identify underlying causes <code>method=[fivewhys\\|fishbone\\|pareto]</code> <code>+++TreeOfThought</code> Explore multiple reasoning branches <code>branches=[2-5]</code>, <code>depth=[1-5]</code> <code>+++Analogical</code> Use analogies for reasoning and explanation <code>domain=[general\\|specified]</code> <code>+++ForcedAnalogy</code> Compare concepts through specific analogical domains <code>source=[sports\\|nature\\|cooking\\|etc]</code> <code>+++Inductive</code> Pattern-based reasoning from specific to general - <code>+++Deductive</code> Logical reasoning from general to specific - <code>+++Abductive</code> Generate best explanations from limited information <code>hypotheses=[2-5]</code> <code>+++RedTeam</code> Challenge assumptions with adversarial analysis <code>strength=[moderate\\|aggressive\\|steelman]</code> <code>+++BlindSpots</code> Identify hidden assumptions and risks <code>focus=[assumptions\\|risks\\|biases\\|all]</code> <code>+++Contrarian</code> Generate counterarguments to test perspectives <code>approach=[outsider\\|skeptic\\|devil's-advocate]</code> <code>+++NegativeSpace</code> Uncover what isn't explicitly stated <code>focus=[implications\\|missing\\|unstated]</code> <code>+++DeepDive</code> Multi-layered, progressively deeper analysis <code>layers=[3-5]</code>, <code>focus=[nuance\\|examples\\|implications]</code>"},{"location":"prompt-decorators-specification-v1.0/#43-output-structure-decorators","title":"4.3 Output Structure Decorators","text":"<p>These decorators specify the structure and format of the AI's response.</p> Decorator Description Parameters <code>+++OutputFormat</code> Specify output format <code>format=[json\\|markdown\\|yaml\\|xml\\|csv\\|plaintext]</code> <code>+++Schema</code> Define custom structure <code>schema=[schemaDefinition]</code> <code>+++TableFormat</code> Present data in tables <code>columns=[col1,col2,...]</code>, <code>format=[markdown\\|ascii\\|csv]</code> <code>+++Summary</code> Provide condensed summary <code>length=[short\\|medium\\|long]</code>, <code>wordCount=[number]</code> <code>+++Outline</code> Structured outline format <code>depth=[1-5]</code>, <code>style=[numeric\\|bullet\\|roman]</code> <code>+++Nested</code> Hierarchical organization <code>depth=[1-5]</code>, <code>style=[bullet\\|numbered\\|mixed]</code> <code>+++Bullet</code> Bullet point format <code>style=[dash\\|dot\\|arrow\\|star]</code> <code>+++Timeline</code> Chronological structure <code>granularity=[day\\|month\\|year\\|era]</code> <code>+++Comparison</code> Direct comparison structure <code>aspects=[aspect1,aspect2,...]</code>, <code>format=[table\\|prose\\|bullets]</code> <code>+++MECE</code> Mutually exclusive, collectively exhaustive framework <code>dimensions=[2-5]</code> <code>+++DecisionMatrix</code> Structured decision-making format <code>options=[option1,option2,...]</code>, <code>criteria=[criterion1,criterion2,...]</code> <code>+++Alternatives</code> Generate multiple distinct alternatives <code>count=[2-10]</code>, <code>diversity=[low\\|medium\\|high]</code> <code>+++Layered</code> Present at multiple explanation depths <code>levels=[sentence\\|paragraph\\|page]</code>, <code>count=[2-5]</code> <code>+++Constraints</code> Apply specific limitations to the output <code>wordCount=[number]</code>, <code>budget=[number]</code>, <code>timeframe=[spec]</code> <code>+++Prioritize</code> Rank items based on specified criteria <code>criteria=[impact\\|feasibility\\|cost\\|etc]</code>, <code>count=[number]</code>"},{"location":"prompt-decorators-specification-v1.0/#44-decorator-conflicts-and-compatibility","title":"4.4 Decorator Conflicts and Compatibility","text":"<p>Some decorators may have incompatible behaviors. Implementations MUST resolve conflicts according to these rules:</p> <ol> <li>When decorators have fundamentally incompatible requirements (e.g., <code>+++ELI5</code> and <code>+++Technical</code>), the later decorator in the sequence takes precedence</li> <li>When facing a parameter conflict between decorators, the parameter in the later decorator takes precedence</li> <li>Implementations SHOULD provide documentation on known decorator conflicts</li> <li>Implementations MAY provide warnings when detecting incompatible decorator combinations</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#441-known-incompatibilities","title":"4.4.1 Known Incompatibilities","text":"Decorator Incompatible With Reason <code>+++ELI5</code> <code>+++Technical</code>, <code>+++Academic</code> Contradictory audience adaptation <code>+++Concise</code> <code>+++Detailed</code> Contradictory verbosity goals <code>+++Inductive</code> <code>+++Deductive</code> Contradictory reasoning methods <code>+++Bullet</code> <code>+++OutputFormat(format=json)</code> Structural conflict"},{"location":"prompt-decorators-specification-v1.0/#45-tone-and-style-decorators","title":"4.5 Tone and Style Decorators","text":"<p>These decorators modify the linguistic style and tone of the AI's response.</p> Decorator Description Parameters <code>+++Tone</code> Overall tone adjustment <code>style=[formal\\|casual\\|friendly\\|technical\\|humorous]</code> <code>+++Audience</code> Adjust for audience expertise <code>level=[beginner\\|intermediate\\|expert\\|technical]</code> <code>+++ELI5</code> Explain like I'm 5 years old <code>strictness=[true\\|false]</code> <code>+++Academic</code> Scholarly style <code>style=[humanities\\|scientific\\|legal]</code>, <code>format=[APA\\|MLA\\|Chicago]</code> <code>+++Professional</code> Business-oriented language <code>industry=[general\\|industry]</code> <code>+++Creative</code> Creative writing style <code>genre=[narrative\\|poetry\\|dialogic]</code> <code>+++Concise</code> Brief and to-the-point <code>maxWords=[number]</code> <code>+++Detailed</code> Comprehensive and thorough <code>depth=[moderate\\|comprehensive\\|exhaustive]</code> <code>+++Narrative</code> Story-based delivery <code>structure=[classic\\|nonlinear\\|case-study]</code> <code>+++Motivational</code> Encouraging, inspiring tone <code>intensity=[mild\\|moderate\\|high]</code> <code>+++AsExpert</code> Respond from specific expert role <code>role=[title]</code>, <code>experience=[junior\\|senior\\|leading]</code> <code>+++Persona</code> Adopt specific stakeholder viewpoint <code>role=[customer\\|executive\\|skeptic\\|etc]</code> <code>+++StyleShift</code> Modify persuasion tactics or urgency <code>aspect=[urgency\\|persuasion\\|formality]</code>, <code>level=[1-5]</code> <code>+++Remix</code> Reframe content for different contexts <code>target=[audience]</code>, <code>context=[setting]</code> <code>+++Extremes</code> Present radical and minimal versions <code>versions=[radical\\|minimal\\|both]</code>"},{"location":"prompt-decorators-specification-v1.0/#46-verification-and-quality-decorators","title":"4.6 Verification and Quality Decorators","text":"<p>These decorators focus on ensuring the accuracy, balance, and quality of the AI's response.</p> Decorator Description Parameters <code>+++CiteSources</code> Reference backing for claims <code>style=[inline\\|footnote\\|endnote]</code>, <code>format=[APA\\|MLA\\|Chicago]</code> <code>+++FactCheck</code> Verification of claims <code>confidence=[true\\|false]</code>, <code>uncertain=[mark\\|exclude]</code> <code>+++Limitations</code> Explicit statement of limitations <code>detail=[brief\\|comprehensive]</code>, <code>position=[beginning\\|end]</code> <code>+++Confidence</code> Indicate confidence in answers <code>scale=[percent\\|qualitative\\|stars]</code> <code>+++Balanced</code> Ensure equal coverage of viewpoints <code>perspectives=[2-5]</code> <code>+++Steelman</code> Present strongest version of arguments <code>sides=[1-5]</code> <code>+++PeerReview</code> Self-critique as in academic review <code>criteria=[accuracy\\|methodology\\|limitations\\|all]</code> <code>+++Precision</code> Focus on exactness and accuracy <code>level=[moderate\\|high\\|maximum]</code> <code>+++Uncertainty</code> Highlight areas of uncertainty <code>format=[inline\\|section\\|confidence]</code> <code>+++QualityMetrics</code> Apply specific quality metrics <code>metrics=[metric1,metric2,...]</code> <code>+++StressTest</code> Identify potential failure points <code>scenarios=[3-5]</code>, <code>severity=[mild\\|moderate\\|extreme]</code> <code>+++BreakAndBuild</code> Criticize then reconstruct an idea <code>breakdown=[weaknesses\\|assumptions\\|risks]</code> <code>+++FindGaps</code> Identify missing elements in an idea <code>aspects=[questions\\|resources\\|stakeholders\\|etc]</code>"},{"location":"prompt-decorators-specification-v1.0/#47-meta-decorators","title":"4.7 Meta-Decorators","text":"<p>These decorators modify the behavior of other decorators or provide higher-level control.</p> Decorator Description Parameters <code>+++Refine</code> Multiple improvement iterations <code>iterations=[2-5]</code>, <code>focus=[clarity\\|accuracy\\|conciseness]</code> <code>+++Combine</code> Use multiple decorators <code>decorators=[D1,D2,...]</code> <code>+++Conditional</code> Conditional application <code>if=[condition]</code>, <code>then=[decorator]</code>, <code>else=[decorator]</code> <code>+++Priority</code> Prioritized application <code>decorators=[D1,D2,...]</code> <code>+++Custom</code> User-defined decorator behavior <code>rules=[ruleDefinition]</code> <code>+++Override</code> Override default behaviors <code>default=[decorator]</code> <code>+++Context</code> Domain-specific adaptation <code>domain=[domain]</code> <code>+++Extension</code> Extensibility mechanism <code>source=[URI]</code> <code>+++Version</code> Version specification <code>v=[semver]</code> <code>+++Compatibility</code> Model compatibility <code>models=[M1,M2,...]</code> <code>+++Chain</code> Define multi-step response process <code>steps=[step1,step2,...]</code>, <code>showAll=[true\\|false]</code> <code>+++BuildOn</code> Reference previous context <code>reference=[last\\|specific]</code>, <code>approach=[extend\\|refine\\|contrast]</code>"},{"location":"prompt-decorators-specification-v1.0/#5-implementation-considerations","title":"5. Implementation Considerations","text":""},{"location":"prompt-decorators-specification-v1.0/#51-for-llm-providers","title":"5.1 For LLM Providers","text":"<p>LLM providers can implement this standard by:</p> <ol> <li>Pre-processing: Detecting decorators and modifying the prompt programmatically</li> <li>Fine-tuning: Training models to recognize and respond to decorators</li> <li>Documentation: Providing clear guidance on supported decorators</li> <li>Fallback Mechanisms: Handling unrecognized decorators gracefully</li> <li>Efficiency: Optimizing implementation to minimize token usage</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#511-reference-implementation","title":"5.1.1 Reference Implementation","text":"<p>A reference implementation for processing decorators in a provider API might look like:</p> <pre><code>def process_decorators(user_prompt):\n    decorators = []\n    cleaned_prompt = user_prompt\n\n    # Extract decorator patterns\n    decorator_pattern = r'\\+\\+\\+([A-Za-z]+)(?:\\(([^)]+)\\))?'\n    matches = re.findall(decorator_pattern, user_prompt)\n\n    for match in matches:\n        decorator_name = match[0]\n        params_str = match[1] if len(match) &gt; 1 else \"\"\n\n        # Parse parameters\n        params = {}\n        if params_str:\n            param_pairs = params_str.split(',')\n            for pair in param_pairs:\n                if '=' in pair:\n                    key, value = pair.split('=', 1)\n                    params[key.strip()] = value.strip()\n\n        decorators.append({\n            \"name\": decorator_name,\n            \"parameters\": params\n        })\n\n        # Remove decorator from prompt\n        pattern_to_remove = f\"+++{decorator_name}\" + (f\"({params_str})\" if params_str else \"\")\n        cleaned_prompt = cleaned_prompt.replace(pattern_to_remove, \"\", 1)\n\n    return {\n        \"decorators\": decorators,\n        \"cleaned_prompt\": cleaned_prompt.strip()\n    }\n\ndef generate_system_prompt(decorators):\n    \"\"\"Generate model instructions based on recognized decorators\"\"\"\n    system_prompt = \"You are a helpful assistant. \"\n\n    for decorator in decorators:\n        if decorator[\"name\"] == \"Reasoning\":\n            system_prompt += \"Provide detailed reasoning before giving your final answer. \"\n        elif decorator[\"name\"] == \"StepByStep\":\n            system_prompt += \"Break down your response into clearly labeled steps. \"\n        # Add more decorator handling...\n\n    return system_prompt\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#52-for-application-developers","title":"5.2 For Application Developers","text":"<p>Application developers integrating LLMs should consider:</p> <ol> <li>UI Integration: Providing interfaces for applying decorators</li> <li>Template Libraries: Creating reusable templates with decorators</li> <li>Validation: Ensuring decorators are used correctly</li> <li>Conflict Resolution: Handling potential conflicts between decorators</li> <li>Analytics: Tracking decorator effectiveness</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#521-implementation-pattern-for-applications","title":"5.2.1 Implementation Pattern for Applications","text":"<p>For client applications, decorator implementation could follow this pattern:</p> <pre><code>// Example decorator implementation in a UI application\nclass PromptDecoratorManager {\n  constructor() {\n    this.availableDecorators = {\n      \"Reasoning\": {\n        description: \"Provides detailed reasoning process\",\n        parameters: [\"depth\"],\n        defaults: { depth: \"moderate\" }\n      },\n      \"StepByStep\": {\n        description: \"Breaks response into sequential steps\",\n        parameters: [\"numbered\"],\n        defaults: { numbered: \"true\" }\n      },\n      // More decorators...\n    };\n\n    this.activeDecorators = [];\n  }\n\n  addDecorator(name, parameters = {}) {\n    if (!this.availableDecorators[name]) {\n      throw new Error(`Unknown decorator: ${name}`);\n    }\n\n    // Apply default parameters where not specified\n    const decorator = {\n      name,\n      parameters: { ...this.availableDecorators[name].defaults, ...parameters }\n    };\n\n    this.activeDecorators.push(decorator);\n    return this;\n  }\n\n  applyToPrompt(userPrompt) {\n    let decoratedPrompt = userPrompt;\n\n    // Prepend decorators to prompt\n    for (const decorator of this.activeDecorators) {\n      const paramString = Object.entries(decorator.parameters)\n        .map(([key, value]) =&gt; `${key}=${value}`)\n        .join(',');\n\n      const decoratorString = paramString\n        ? `+++${decorator.name}(${paramString})\\n`\n        : `+++${decorator.name}\\n`;\n\n      decoratedPrompt = decoratorString + decoratedPrompt;\n    }\n\n    return decoratedPrompt;\n  }\n}\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#53-for-end-users","title":"5.3 For End Users","text":"<p>End users can benefit from decorators through:</p> <ol> <li>Personal Libraries: Building collections of effective decorators</li> <li>Workflow Integration: Incorporating decorators into standard workflows</li> <li>Experimentation: Testing different decorators for specific tasks</li> <li>Sharing: Exchanging effective decorator configurations</li> <li>Feedback: Providing input on decorator effectiveness</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#531-model-instructions-for-decorator-recognition","title":"5.3.1 Model Instructions for Decorator Recognition","text":"<p>When working with models that don't natively support decorators, users can include the following in their system prompt or initial conversation:</p> <pre><code>A \"Prompt Decorator\" is an instruction added to a prompt to modify the output or influence how the response is generated.\n\nWhen you see text starting with +++ followed by a decorator name (like +++Reasoning), apply the following modifications to your response:\n\n- +++Reasoning: Begin your response with detailed explanation of your reasoning process before providing conclusions.\n- +++StepByStep: Structure your response as a sequence of clearly labeled steps.\n- +++Debate: Present multiple perspectives on the topic before reaching a conclusion.\n- +++CiteSources: Include references or citations to support your claims.\n- +++FactCheck: Verify factual accuracy and indicate uncertainty when appropriate.\n- +++OutputFormat(format=X): Structure your response in the specified format (JSON, markdown, etc.).\n- +++Tone(style=X): Adjust your response tone to match the specified style.\n\nSome decorators may include parameters in parentheses, like +++Refine(iterations=3), which modify how the decorator is applied.\n\nThese definitions must always be followed when the corresponding decorator is present in a prompt. Please retain them in memory, as I will use them in future interactions.\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#54-cross-model-compatibility-and-fallbacks","title":"5.4 Cross-Model Compatibility and Fallbacks","text":"<p>Different language models will have varying capabilities for implementing decorator behaviors. Implementation should include fallback mechanisms:</p>"},{"location":"prompt-decorators-specification-v1.0/#541-capability-detection","title":"5.4.1 Capability Detection","text":"<p>Before applying decorators, applications should detect model capabilities:</p> <pre><code>def detect_model_capabilities(model_id):\n    # Model capability database (would be more extensive in practice)\n    model_capabilities = {\n        \"gpt-4o\": {\n            \"reasoning\": True,\n            \"step_by_step\": True,\n            \"fact_check\": True,\n            \"debate\": True,\n            \"output_formats\": [\"json\", \"markdown\", \"yaml\", \"xml\"]\n        },\n        \"gpt-4-turbo\": {\n            \"reasoning\": True,\n            \"step_by_step\": True,\n            \"fact_check\": False,\n            \"debate\": True,\n            \"output_formats\": [\"json\", \"markdown\"]\n        },\n        \"text-bison\": {\n            \"reasoning\": False,\n            \"step_by_step\": True,\n            \"fact_check\": False,\n            \"debate\": False,\n            \"output_formats\": [\"json\"]\n        }\n    }\n\n    return model_capabilities.get(model_id, {\n        \"reasoning\": False,\n        \"step_by_step\": False,\n        \"fact_check\": False,\n        \"debate\": False,\n        \"output_formats\": []\n    })\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#542-fallback-strategies","title":"5.4.2 Fallback Strategies","text":"<p>When a model doesn't support a decorator behavior:</p> <ol> <li>Notification: Inform users when a decorator can't be applied</li> <li>Approximate Implementation: Use available capabilities to approximate the desired behavior</li> <li>Model Switching: Switch to a more capable model when critical decorators are requested</li> <li>Hybrid Approach: Process part of the decorator functionality in middleware</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#55-alternative-syntax-options","title":"5.5 Alternative Syntax Options","text":"<p>While the <code>+++Decorator</code> syntax is recommended for its visibility and compatibility, implementations MUST support the JSON format and MAY support additional formats:</p>"},{"location":"prompt-decorators-specification-v1.0/#551-json-format-required","title":"5.5.1 JSON Format (Required)","text":"<p>For API-centric applications or when working with structured data, implementations MUST support the JSON format as defined in <code>api-request.schema.json</code>:</p> <pre><code>{\n  \"$schema\": \"https://raw.githubusercontent.com/prompt-decorators/spec/main/schemas/api-request.schema.json\",\n  \"prompt\": \"Explain how nuclear fusion works\",\n  \"decorators\": [\n    {\n      \"name\": \"Reasoning\",\n      \"version\": \"1.0.0\",\n      \"parameters\": {\n        \"depth\": \"comprehensive\"\n      },\n      \"metadata\": {\n        \"description\": \"Provides detailed reasoning before conclusions\",\n        \"category\": \"reasoning\"\n      }\n    },\n    {\n      \"name\": \"StepByStep\",\n      \"version\": \"1.0.0\",\n      \"parameters\": {\n        \"numbered\": true\n      }\n    }\n  ],\n  \"metadata\": {\n    \"model\": \"gpt-4o\",\n    \"version\": \"1.0.0\",\n    \"temperature\": 0.7\n  }\n}\n</code></pre> <p>The JSON format MUST be validated against the provided schemas to ensure compatibility.</p>"},{"location":"prompt-decorators-specification-v1.0/#552-markdown-style-format-optional","title":"5.5.2 Markdown-Style Format (Optional)","text":"<p>For documentation or text-heavy environments, implementations MAY support a Markdown-style format:</p> <pre><code>&lt;!-- @Reasoning depth=comprehensive --&gt;\n&lt;!-- @StepByStep numbered=true --&gt;\n\nExplain how nuclear fusion works\n</code></pre> <p>When using the Markdown format, implementations MUST convert it to the canonical JSON format internally for processing.</p>"},{"location":"prompt-decorators-specification-v1.0/#553-yaml-configuration-optional","title":"5.5.3 YAML Configuration (Optional)","text":"<p>For configuration-based systems, implementations MAY support YAML format:</p> <pre><code>prompt: Explain how nuclear fusion works\ndecorators:\n  - name: Reasoning\n    version: 1.0.0\n    parameters:\n      depth: comprehensive\n    metadata:\n      description: Provides detailed reasoning before conclusions\n      category: reasoning\n  - name: StepByStep\n    version: 1.0.0\n    parameters:\n      numbered: true\nmetadata:\n  model: gpt-4o\n  version: 1.0.0\n  temperature: 0.7\n</code></pre> <p>When using YAML format, implementations MUST convert it to the canonical JSON format and validate against the provided schemas.</p>"},{"location":"prompt-decorators-specification-v1.0/#554-format-conversion","title":"5.5.4 Format Conversion","text":"<p>Implementations that support multiple formats MUST:</p> <ol> <li>Convert all formats to the canonical JSON format internally</li> <li>Validate the converted format against the appropriate JSON schema</li> <li>Handle conversion errors gracefully with appropriate error messages</li> <li>Preserve all metadata and parameters during conversion</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#56-decorator-transformation-implementation","title":"5.6 Decorator Transformation Implementation","text":"<p>Implementations of prompt decorators MUST provide a mechanism for transforming the original prompt according to the decorator's intended behavior. This section describes the standard approach to prompt transformation.</p>"},{"location":"prompt-decorators-specification-v1.0/#561-transformation-models","title":"5.6.1 Transformation Models","text":"<p>The transformation model for prompt decorators follows these principles:</p> <ol> <li>Decorator's Purpose: Each decorator defines a specific modification to the prompt or response behavior.</li> <li>Instruction-Based Implementation: Decorators primarily work by adding specific instructions to the prompt.</li> <li>Parameter-Specific Variations: Parameters modify the instructions according to their values.</li> <li>Composition Logic: Multiple decorators combine in a predictable way.</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#562-standard-implementation-pattern","title":"5.6.2 Standard Implementation Pattern","text":"<p>A compliant implementation of decorator transformation behavior MUST follow this pattern:</p> <pre><code>def apply_decorator(prompt, decorator_name, parameters):\n    \"\"\"\n    Apply a decorator transformation to a prompt.\n\n    Args:\n        prompt: Original prompt text\n        decorator_name: Name of the decorator to apply\n        parameters: Dictionary of parameters\n\n    Returns:\n        Transformed prompt text\n    \"\"\"\n    # Base implementation for Reasoning decorator\n    if decorator_name == \"Reasoning\":\n        depth = parameters.get(\"depth\", \"moderate\")\n\n        # Base instruction\n        instruction = \"Please provide detailed reasoning in your response. Show your thought process before reaching a conclusion.\"\n\n        # Parameter-specific modifications\n        if depth == \"comprehensive\":\n            instruction += \" Provide a very thorough and detailed analysis with multiple perspectives.\"\n        elif depth == \"basic\":\n            instruction += \" Focus on the most important logical steps.\"\n\n        # Apply transformation (usually prepending)\n        return f\"{instruction}\\n\\n{prompt}\"\n\n    # Implementations for other decorators...\n\n    # Default fallback\n    return prompt\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#563-transformation-templates","title":"5.6.3 Transformation Templates","text":"<p>For consistent behavior across implementations, each decorator SHOULD define a transformation template consisting of:</p> <ol> <li>Base Instruction: The standard instruction text that implements the decorator's behavior.</li> <li>Parameter Mappings: How each parameter and its possible values modify the instruction.</li> <li>Placement Strategy: How the transformed content is positioned (typically prepended).</li> </ol> <p>Decorators MAY define this information in their registry entries using the <code>transformationTemplate</code> property as defined in the registry-entry schema:</p> <pre><code>{\n  \"transformationTemplate\": {\n    \"instruction\": \"Please provide detailed reasoning in your response. Show your thought process before reaching a conclusion.\",\n    \"parameterMapping\": {\n      \"depth\": {\n        \"valueMap\": {\n          \"basic\": \"Focus on the most important logical steps.\",\n          \"moderate\": \"Balance detail with clarity in your reasoning.\",\n          \"comprehensive\": \"Provide a very thorough and detailed analysis with multiple perspectives.\"\n        }\n      }\n    },\n    \"placement\": \"prepend\",\n    \"compositionBehavior\": \"accumulate\"\n  }\n}\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#564-composition-rules","title":"5.6.4 Composition Rules","text":"<p>When applying multiple decorators, implementations MUST follow these rules:</p> <ol> <li>Order of Application: Apply decorators in the order they appear in the prompt or decorator list.</li> <li>Accumulation: Instructions from multiple decorators accumulate unless they explicitly override each other.</li> <li>Coherence: The combined instructions must form a coherent set of directives.</li> <li>Conflict Resolution: If decorators have contradictory instructions, the later decorator takes precedence.</li> </ol> <p>Example of composition:</p> <pre><code>Original:\n+++Reasoning(depth=comprehensive)\n+++Audience(level=beginner)\nExplain quantum computing.\n\nTransformed:\nPlease provide detailed reasoning in your response with thorough analysis.\nPlease tailor your response for a beginner audience with minimal technical jargon.\n\nExplain quantum computing.\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#565-implementation-requirements","title":"5.6.5 Implementation Requirements","text":"<p>A compliant decorator implementation MUST:</p> <ol> <li>Parse Decorators: Correctly extract decorators and their parameters from prompts.</li> <li>Apply Transformations: Transform the prompt according to the decorator's template.</li> <li>Support Composition: Handle multiple decorators correctly.</li> <li>Provide Fallbacks: Gracefully handle unsupported decorators.</li> <li>Document Behavior: Clearly document the transformation behavior for each supported decorator.</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#566-testing-and-validation","title":"5.6.6 Testing and Validation","text":"<p>Implementations SHOULD include tests that validate:</p> <ol> <li>Correct transformation of prompts for each supported decorator.</li> <li>Proper handling of all parameter combinations.</li> <li>Consistent behavior when composing multiple decorators.</li> <li>Correct fallback behavior for unsupported decorators or parameters.</li> </ol> <p>Implementations MAY use the <code>implementationGuidance.examples</code> property in the registry entry to define test cases for validation:</p> <pre><code>{\n  \"implementationGuidance\": {\n    \"examples\": [\n      {\n        \"context\": \"Standard use case\",\n        \"originalPrompt\": \"What are the environmental impacts of electric vehicles?\",\n        \"transformedPrompt\": \"Please provide detailed reasoning in your response. Show your thought process before reaching a conclusion. Provide a very thorough and detailed analysis with multiple perspectives.\\n\\nWhat are the environmental impacts of electric vehicles?\"\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#6-use-cases-and-examples","title":"6. Use Cases and Examples","text":""},{"location":"prompt-decorators-specification-v1.0/#61-research-and-analysis","title":"6.1 Research and Analysis","text":"<pre><code>+++FirstPrinciples\n+++CiteSources(style=inline, format=APA)\n+++Limitations(position=end)\nAnalyze the potential impact of quantum computing on cryptography over the next decade.\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#62-education-and-learning","title":"6.2 Education and Learning","text":"<pre><code>+++ELI5(strictness=true)\n+++StepByStep(numbered=true)\n+++Analogical(domain=everyday)\nExplain how nuclear fusion works.\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#63-decision-support","title":"6.3 Decision Support","text":"<pre><code>+++DecisionMatrix(options=on-prem,hybrid,cloud-native, criteria=cost,security,scalability,complexity)\n+++StressTest(scenarios=3)\n+++FindGaps(aspects=stakeholders,resources,timeline)\nShould our company migrate our infrastructure to a cloud-native architecture?\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#64-creative-writing","title":"6.4 Creative Writing","text":"<pre><code>+++Creative(genre=narrative)\n+++Tone(style=humorous)\n+++Extremes(versions=both)\nWrite a short story about a robot learning to understand human emotions.\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#65-technical-documentation","title":"6.5 Technical Documentation","text":"<pre><code>+++Professional(industry=software)\n+++Audience(level=intermediate)\n+++Layered(levels=overview,detailed,examples)\n+++OutputFormat(format=markdown)\nCreate documentation for a RESTful API that manages user authentication.\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#66-strategic-analysis","title":"6.6 Strategic Analysis","text":"<pre><code>+++RedTeam(strength=steelman)\n+++BlindSpots(focus=all)\n+++BreakAndBuild\nOur company is planning to enter the sustainable energy market with a new battery technology.\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#67-multi-step-problem-solving","title":"6.7 Multi-step Problem Solving","text":"<pre><code>+++Chain(steps=summarize,critique,improve,actionize, showAll=true)\n+++DeepDive(layers=3, focus=nuance)\nHere's our current marketing strategy for launching in the European market...\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#7-versioning-and-evolution","title":"7. Versioning and Evolution","text":""},{"location":"prompt-decorators-specification-v1.0/#71-decorator-evolution-strategy","title":"7.1 Decorator Evolution Strategy","text":"<p>The standard includes mechanisms for decorator evolution while maintaining backward compatibility:</p>"},{"location":"prompt-decorators-specification-v1.0/#711-decorator-versioning","title":"7.1.1 Decorator Versioning","text":"<p>Individual decorators can specify versions:</p> <pre><code>+++Reasoning:v2(depth=comprehensive)\n</code></pre> <p>Implementations should interpret versioned decorators according to their specifications, with the following guidelines:</p> <ol> <li>Default Version: When no version is specified, the latest stable version is assumed</li> <li>Version Ranges: Implementations may specify supported version ranges</li> <li>Deprecation: Implementations should support deprecated versions with appropriate warnings</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#712-standard-versioning","title":"7.1.2 Standard Versioning","text":"<p>The overall standard follows semantic versioning:</p> <pre><code>+++Version(standard=1.2.0)\n</code></pre> <p>This decorator indicates compliance with a specific version of the standard and should be the first decorator in a sequence if used.</p>"},{"location":"prompt-decorators-specification-v1.0/#713-feature-detection","title":"7.1.3 Feature Detection","text":"<p>Implementations can use the following pattern to detect supported features:</p> <pre><code>+++FeatureDetect(reasoning, stepByStep, outputFormat)\n</code></pre> <p>This allows applications to programmatically determine which decorators a particular model or implementation supports.</p>"},{"location":"prompt-decorators-specification-v1.0/#72-community-and-ecosystem-development","title":"7.2 Community and Ecosystem Development","text":""},{"location":"prompt-decorators-specification-v1.0/#721-registry-and-discovery","title":"7.2.1 Registry and Discovery","text":"<p>A central registry for standard and community decorators facilitates discovery and adoption. All registry entries MUST conform to the <code>registry-entry.schema.json</code> schema:</p> <pre><code>{\n  \"$schema\": \"https://raw.githubusercontent.com/prompt-decorators/spec/main/schemas/registry-entry.schema.json\",\n  \"decoratorName\": \"ScientificReasoning\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Applies scientific method reasoning process\",\n  \"author\": {\n    \"name\": \"Scientific AI Consortium\",\n    \"email\": \"contact@example.org\",\n    \"url\": \"https://example.org\"\n  },\n  \"parameters\": [\n    {\n      \"name\": \"discipline\",\n      \"type\": \"enum\",\n      \"description\": \"Scientific discipline context\",\n      \"enum\": [\"physics\", \"biology\", \"chemistry\", \"general\"],\n      \"default\": \"general\",\n      \"required\": false\n    },\n    {\n      \"name\": \"rigor\",\n      \"type\": \"enum\",\n      \"description\": \"Level of scientific rigor\",\n      \"enum\": [\"academic\", \"educational\", \"popular\"],\n      \"default\": \"educational\",\n      \"required\": false\n    }\n  ],\n  \"examples\": [\n    {\n      \"description\": \"Basic scientific analysis of a physics problem\",\n      \"usage\": \"+++ScientificReasoning(discipline=physics, rigor=academic)\",\n      \"result\": \"Analyzes the problem using formal physics methodology and academic rigor\"\n    }\n  ],\n  \"compatibility\": {\n    \"requires\": [\"Reasoning\"],\n    \"conflicts\": [\"ELI5\"],\n    \"minStandardVersion\": \"1.0.0\",\n    \"maxStandardVersion\": \"2.0.0\",\n    \"models\": [\n      \"gpt-4o\",\n      \"gpt-4-turbo\"\n    ]\n  }\n}\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#722-extension-mechanism","title":"7.2.2 Extension Mechanism","text":"<p>The <code>+++Extension</code> decorator enables loading of community-defined decorators. Extension packages MUST conform to the <code>extension-package.schema.json</code> schema:</p> <pre><code>{\n  \"$schema\": \"https://raw.githubusercontent.com/prompt-decorators/spec/main/schemas/extension-package.schema.json\",\n  \"name\": \"scientific-reasoning-pack\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A collection of decorators for scientific reasoning and analysis\",\n  \"author\": {\n    \"name\": \"Scientific AI Consortium\",\n    \"email\": \"contact@example.org\",\n    \"url\": \"https://example.org\"\n  },\n  \"license\": \"Apache 2.0\",\n  \"keywords\": [\"science\", \"reasoning\", \"analysis\"],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/example/scientific-reasoning-pack\"\n  },\n  \"decorators\": [\n    {\n      \"decoratorName\": \"ScientificReasoning\",\n      \"version\": \"1.0.0\",\n      \"description\": \"Applies scientific method reasoning process\",\n      \"parameters\": [\n        {\n          \"name\": \"discipline\",\n          \"type\": \"enum\",\n          \"description\": \"Scientific discipline context\",\n          \"enum\": [\"physics\", \"biology\", \"chemistry\", \"general\"],\n          \"default\": \"general\"\n        }\n      ]\n    }\n  ],\n  \"dependencies\": {\n    \"standard\": {\n      \"version\": \"1.0.0\"\n    },\n    \"extensions\": [\n      {\n        \"name\": \"core-reasoning\",\n        \"version\": \"1.0.0\"\n      }\n    ]\n  }\n}\n</code></pre> <p>Usage example: <pre><code>+++Extension(source=https://decorator-registry.ai/scientific-pack.json)\n+++ScientificReasoning(discipline=physics)\n</code></pre></p>"},{"location":"prompt-decorators-specification-v1.0/#723-schema-evolution","title":"7.2.3 Schema Evolution","text":"<p>The JSON schemas for the registry and extensions follow these principles:</p> <ol> <li>Backward Compatibility: Schema changes MUST maintain backward compatibility within major versions</li> <li>Version Alignment: Schema versions MUST align with the standard version</li> <li>Migration Support: Major version changes MUST include migration guides</li> <li>Validation Tools: The community MUST maintain tools for schema validation</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#724-governance-model","title":"7.2.4 Governance Model","text":"<p>The governance of the Prompt Decorator standard includes:</p> <ol> <li>Technical Committee: Oversees standard evolution and core decorator definitions</li> <li>Community Working Groups: Develop specialized decorator sets for specific domains</li> <li>Public Review Process: Ensures new proposals receive adequate review and feedback</li> <li>Versioning Policy: Establishes guidelines for backward compatibility and deprecation</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#73-standardization-process","title":"7.3 Standardization Process","text":"<ol> <li>Community Feedback: Gathering input from AI practitioners and users</li> <li>Formal Specification: Developing a comprehensive technical specification</li> <li>Reference Implementation: Creating open-source implementation examples</li> <li>Compatibility Testing: Ensuring consistent behavior across platforms</li> <li>Standards Body: Establishing governance for ongoing development</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#74-extensions-and-enhancements","title":"7.4 Extensions and Enhancements","text":"<ol> <li>Model-Specific Decorators: Optimizations for specific LLM architectures</li> <li>Domain-Specific Decorators: Specialized decorators for fields like medicine, law, etc.</li> <li>Interoperability: Standards for decorator translation between systems</li> <li>Metadata Integration: Linking decorators with metadata about responses</li> <li>Learning Mechanisms: Systems that learn effective decorator patterns from usage</li> <li>Automated Decorator Selection: AI-assisted decorator recommendation based on query intent</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#8-security-and-privacy-considerations","title":"8. Security and Privacy Considerations","text":""},{"location":"prompt-decorators-specification-v1.0/#81-security-considerations","title":"8.1 Security Considerations","text":"<p>Implementations of Prompt Decorators should consider these security aspects:</p> <ol> <li>Input Validation: Implementations MUST validate decorator syntax to prevent injection attacks</li> <li>Resource Limitations: Implementations SHOULD enforce limits on decorator complexity to prevent denial-of-service attacks</li> <li>Authorization Controls: Implementations MAY restrict access to certain decorators based on user permissions</li> <li>Sandbox Execution: When implementing custom decorators, execution SHOULD be sandboxed</li> <li>Audit Logging: Implementations SHOULD log decorator usage for security monitoring</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#82-privacy-considerations","title":"8.2 Privacy Considerations","text":"<p>Implementations should address these privacy concerns:</p> <ol> <li>Data Minimization: Decorators SHOULD NOT require unnecessary personal information</li> <li>Purpose Limitation: Implementations SHOULD document how decorator information is used</li> <li>User Control: Users SHOULD have the ability to disable or limit decorator tracking</li> <li>Transparency: Documentation SHOULD disclose how decorator usage data might be collected or analyzed</li> <li>Persistent Storage: Implementations SHOULD clarify if and how decorator preferences are stored</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#83-ethical-considerations","title":"8.3 Ethical Considerations","text":"<p>Implementers should consider these ethical aspects:</p> <ol> <li>Accessibility: Decorators SHOULD be designed to work with assistive technologies</li> <li>Bias Mitigation: Implementations SHOULD test decorators with diverse inputs to identify potential biases</li> <li>Transparency: The effect of decorators SHOULD be made clear to users</li> <li>User Agency: Users SHOULD be able to understand and control decorator effects</li> <li>Documentation: Implementations SHOULD document limitations and potential issues</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#9-testing-and-validation","title":"9. Testing and Validation","text":""},{"location":"prompt-decorators-specification-v1.0/#91-conformance-testing","title":"9.1 Conformance Testing","text":"<p>Implementations claiming conformance with this standard SHOULD implement these test procedures:</p> <ol> <li>Syntax Validation: Test parsing and recognition of all core decorators</li> <li>Behavior Validation: Test that each supported decorator produces the expected behavioral change</li> <li>Composition Testing: Test combinations of decorators for expected interaction</li> <li>Error Handling: Test handling of malformed decorators</li> <li>Edge Cases: Test boundary conditions for parameter values</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#10-references","title":"10. References","text":"<ol> <li>Gamma, E., Helm, R., Johnson, R., &amp; Vlissides, J. (1994). Design Patterns: Elements of Reusable Object-Oriented Software.</li> <li>Python Software Foundation. (2021). PEP 318 \u2013 Decorators for Functions and Methods.</li> <li>Wei, J., Wang, X., Schuurmans, D., Bosma, M., et al. (2022). Chain of Thought Prompting Elicits Reasoning in Large Language Models.</li> <li>Yao, S., Yu, D., Zhao, J., Shafran, I., et al. (2023). Tree of Thoughts: Deliberate Problem Solving with Large Language Models.</li> <li>White, J., Fu, Q., Hays, S., Sandborn, M., et al. (2023). A Prompt Pattern Catalog to Enhance Prompt Engineering with ChatGPT.</li> <li>Kojima, T., Gu, S.S., Reid, M., Matsuo, Y., &amp; Iwasawa, Y. (2022). Large Language Models are Zero-Shot Reasoners.</li> <li>Liu, P., Yuan, W., Fu, J., Jiang, Z., et al. (2023). Pre-train, Prompt, and Predict: A Systematic Survey of Prompting Methods in Natural Language Processing.</li> <li>Reynolds, L., &amp; McDonell, K. (2021). Prompt Programming for Large Language Models: Beyond the Few-Shot Paradigm.</li> </ol>"},{"location":"quickstart/","title":"Quick Start","text":"<p>This guide will help you get started with Prompt Decorators quickly, showing the most common usage patterns.</p>"},{"location":"quickstart/#basic-usage","title":"Basic Usage","text":""},{"location":"quickstart/#1-import-the-package","title":"1. Import the Package","text":"<pre><code>from prompt_decorators import apply_dynamic_decorators, create_decorator_instance\n</code></pre>"},{"location":"quickstart/#2-using-inline-decorator-syntax","title":"2. Using Inline Decorator Syntax","text":"<p>The simplest way to use prompt decorators is with the inline syntax directly in your prompts:</p> <pre><code># Create a prompt with decorators using inline syntax\nprompt = \"\"\"\n+++StepByStep(numbered=true)\nExplain how photosynthesis works.\n\"\"\"\n\n# Apply the decorators to transform the prompt\ntransformed_prompt = apply_dynamic_decorators(prompt)\n\n# Send the transformed prompt to any LLM\n# response = your_llm_function(transformed_prompt)\nprint(transformed_prompt)\n</code></pre>"},{"location":"quickstart/#3-using-decorator-instances","title":"3. Using Decorator Instances","text":"<p>You can also create and use decorator instances programmatically:</p> <pre><code># Create a decorator instance\nstep_by_step = create_decorator_instance(\"StepByStep\", numbered=True)\n\n# Apply the decorator to a prompt\noriginal_prompt = \"Explain how photosynthesis works.\"\ntransformed_prompt = step_by_step(original_prompt)\n\n# Send to your LLM\n# response = your_llm_function(transformed_prompt)\nprint(transformed_prompt)\n</code></pre>"},{"location":"quickstart/#4-combining-multiple-decorators","title":"4. Combining Multiple Decorators","text":"<p>You can stack multiple decorators either inline or programmatically:</p> <pre><code># Inline stacking\nprompt = \"\"\"\n+++Persona(role=\"scientist\")\n+++StepByStep(numbered=true)\n+++Audience(level=\"beginner\")\nExplain how photosynthesis works.\n\"\"\"\ntransformed_prompt = apply_dynamic_decorators(prompt)\n\n# Or programmatically\npersona = create_decorator_instance(\"Persona\", role=\"scientist\")\nstep_by_step = create_decorator_instance(\"StepByStep\", numbered=True)\naudience = create_decorator_instance(\"Audience\", level=\"beginner\")\n\noriginal_prompt = \"Explain how photosynthesis works.\"\ntransformed_prompt = persona(step_by_step(audience(original_prompt)))\n</code></pre>"},{"location":"quickstart/#working-with-decorators","title":"Working with Decorators","text":""},{"location":"quickstart/#listing-available-decorators","title":"Listing Available Decorators","text":"<p>You can list all available decorators:</p> <pre><code>from prompt_decorators import get_available_decorators\n\ndecorators = get_available_decorators()\nfor decorator in decorators:\n    print(f\"{decorator.name}: {decorator.description}\")\n</code></pre>"},{"location":"quickstart/#getting-decorator-details","title":"Getting Decorator Details","text":"<p>To get detailed information about a specific decorator:</p> <pre><code># Find a specific decorator by name\ndecorators = get_available_decorators()\nreasoning_decorator = next((d for d in decorators if d.name == \"Reasoning\"), None)\n\nif reasoning_decorator:\n    print(f\"Name: {reasoning_decorator.name}\")\n    print(f\"Description: {reasoning_decorator.description}\")\n    print(f\"Category: {reasoning_decorator.category}\")\n    print(\"Parameters:\")\n    for param in reasoning_decorator.parameters:\n        print(f\"  - {param.name}: {param.description}\")\n        if hasattr(param, 'default'):\n            print(f\"    Default: {param.default}\")\n</code></pre>"},{"location":"quickstart/#validating-decorator-syntax","title":"Validating Decorator Syntax","text":"<p>You can validate decorator syntax using the validation tools:</p> <pre><code># Validate decorator syntax in a prompt\npython scripts/prompt_validator.py syntax -t \"+++Reasoning(depth=comprehensive)\\nExplain quantum computing.\"\n\n# Validate a decorator schema file\npython scripts/prompt_validator.py schema -f registry/core/reasoning/deductive.json\n\n# Validate all files in a directory\npython scripts/prompt_validator.py directory -d registry/core -s registry\n</code></pre> <p>You can also validate syntax programmatically:</p> <pre><code>from prompt_decorators.core.dynamic_decorator import extract_decorators\n\n# Extract and validate decorators from a prompt\nprompt = \"\"\"\n+++Reasoning(depth=comprehensive)\n+++StepByStep(numbered=true)\nExplain quantum computing.\n\"\"\"\n\ndecorators, cleaned_text = extract_decorators(prompt)\nfor decorator in decorators:\n    print(f\"Found decorator: {decorator.name} with parameters: {decorator.parameters}\")\n</code></pre>"},{"location":"quickstart/#integration-with-llm-providers","title":"Integration with LLM Providers","text":""},{"location":"quickstart/#using-with-openai","title":"Using with OpenAI","text":"<pre><code>import openai\nfrom prompt_decorators import apply_dynamic_decorators\n\n# Set up OpenAI API key\nopenai.api_key = \"your-api-key-here\"\n\n# Create and transform a prompt\nprompt = \"\"\"\n+++StepByStep(numbered=true)\n+++Audience(level=\"beginner\")\nExplain quantum computing.\n\"\"\"\ntransformed_prompt = apply_dynamic_decorators(prompt)\n\n# Send to OpenAI\nresponse = openai.chat.completions.create(\n    model=\"gpt-4o\",\n    messages=[\n        {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n        {\"role\": \"user\", \"content\": transformed_prompt}\n    ],\n    temperature=0.7,\n    max_tokens=1000\n)\n\n# Print the response\nprint(response.choices[0].message.content)\n</code></pre>"},{"location":"quickstart/#using-with-anthropic-claude","title":"Using with Anthropic Claude","text":"<pre><code>import anthropic\nfrom prompt_decorators import apply_dynamic_decorators\n\n# Set up Anthropic client\nclient = anthropic.Anthropic(api_key=\"your-anthropic-api-key\")\n\n# Create and transform a prompt\nprompt = \"\"\"\n+++StepByStep(numbered=true)\n+++Persona(role=\"teacher\")\nExplain the water cycle.\n\"\"\"\ntransformed_prompt = apply_dynamic_decorators(prompt)\n\n# Send to Anthropic Claude\nmessage = client.messages.create(\n    model=\"claude-3-opus-20240229\",\n    max_tokens=1000,\n    temperature=0.7,\n    messages=[\n        {\"role\": \"user\", \"content\": transformed_prompt}\n    ]\n)\n\n# Print the response\nprint(message.content[0].text)\n</code></pre>"},{"location":"quickstart/#mcp-integration","title":"MCP Integration","text":"<p>Prompt Decorators integrates with the Model Context Protocol (MCP) to provide decoration functionality to any MCP-compatible client:</p> <pre><code># Run the MCP server (general use)\npython -m prompt_decorators.integrations.mcp\n\n# For Claude Desktop integration\npython -m prompt_decorators.integrations.mcp.claude_desktop\n</code></pre> <p>For detailed MCP integration instructions, see the MCP Integration Guide.</p>"},{"location":"quickstart/#creating-custom-decorators","title":"Creating Custom Decorators","text":"<p>You can create your own decorators:</p> <pre><code>from prompt_decorators import (\n    DecoratorDefinition,\n    register_decorator,\n    create_decorator_instance\n)\n\n# Define a custom decorator\nmy_decorator_def = DecoratorDefinition(\n    name=\"MyCustomDecorator\",\n    description=\"A custom decorator that adds a prefix and suffix\",\n    category=\"Custom\",\n    parameters=[\n        {\"name\": \"prefix\", \"type\": \"string\", \"description\": \"Text to add before\", \"default\": \"START: \"},\n        {\"name\": \"suffix\", \"type\": \"string\", \"description\": \"Text to add after\", \"default\": \" :END\"}\n    ],\n    transform_function=\"return prefix + text + suffix;\"\n)\n\n# Register it for use\nregister_decorator(my_decorator_def)\n\n# Use your custom decorator\nmy_decorator = create_decorator_instance(\"MyCustomDecorator\", prefix=\"BEGINNING: \", suffix=\" :COMPLETE\")\nresult = my_decorator(\"This is my text\")\nprint(result)  # Output: \"BEGINNING: This is my text :COMPLETE\"\n</code></pre> <p>For more examples of how to create custom decorators, see the Creating Custom Decorators Tutorial.</p>"},{"location":"quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Explore Core Concepts to understand the design principles behind the framework</li> <li>Learn about Creating Decorators to build your own custom decorators</li> <li>Check out the Tutorials for step-by-step examples</li> <li>See the MCP Integration for using decorators with Claude and other LLMs</li> </ul>"},{"location":"roadmap/","title":"Roadmap","text":"<p>This page outlines the future development plans for the Prompt Decorators framework.</p>"},{"location":"roadmap/#implementation-phases","title":"Implementation Phases","text":"<p>For a detailed breakdown of implementation status, see our Implementation Status document.</p>"},{"location":"roadmap/#core-framework-enhancements","title":"Core Framework Enhancements","text":"<ul> <li>Performance Optimization: Improve the efficiency of decorator application for large prompts</li> <li>Expanded Decorator Library: Add 10+ new decorators covering additional prompt engineering techniques</li> <li>Enhanced Compatibility Checking: Develop more sophisticated compatibility rules between decorators</li> <li>Improved Error Handling: Add better error messages and recovery mechanisms</li> </ul>"},{"location":"roadmap/#documentation-and-examples","title":"Documentation and Examples","text":"<ul> <li>Interactive Documentation: Create an interactive web-based playground for trying decorators</li> <li>Video Tutorials: Produce a series of tutorial videos demonstrating key features</li> <li>Case Studies: Document real-world use cases and success stories</li> <li>Expanded Examples: Add more complex examples showing advanced usage patterns</li> </ul>"},{"location":"roadmap/#testing-and-quality-assurance","title":"Testing and Quality Assurance","text":"<ul> <li>Expanded Test Coverage: Achieve 95%+ test coverage across the codebase</li> <li>Benchmark Suite: Develop benchmarks for measuring decorator performance</li> <li>Compatibility Testing: Test with a wider range of LLM providers and models</li> <li>Security Audit: Conduct a comprehensive security review</li> </ul>"},{"location":"roadmap/#advanced-features","title":"Advanced Features","text":"<ul> <li>Decorator Marketplace: Create a central repository for sharing community-created decorators</li> <li>Visual Decorator Builder: Develop a GUI tool for creating and configuring decorators</li> <li>Adaptive Decorators: Implement decorators that adapt based on the prompt content or context</li> <li>Multilingual Support: Enhance decorators to work effectively with multiple languages</li> <li>Versioned Registry: Support multiple versions of decorators in the registry</li> </ul>"},{"location":"roadmap/#integration-and-ecosystem","title":"Integration and Ecosystem","text":"<ul> <li>LangChain Integration: Develop deeper integration with the LangChain ecosystem</li> <li>Hugging Face Integration: Create specialized adapters for Hugging Face models</li> <li>Web Framework Plugins: Build plugins for popular web frameworks (Flask, FastAPI, Django)</li> <li>Vector Database Connectors: Add support for retrieving decorators from vector databases</li> <li>Prompt Management System: Develop a system for managing and versioning decorated prompts</li> </ul>"},{"location":"roadmap/#analytics-and-monitoring","title":"Analytics and Monitoring","text":"<ul> <li>Decorator Analytics: Add tools for tracking decorator usage and effectiveness</li> <li>Performance Monitoring: Implement monitoring for decorator application time and token usage</li> <li>A/B Testing Framework: Create tools for comparing different decorator combinations</li> <li>Quality Metrics: Develop metrics for evaluating the quality of decorated prompts</li> </ul>"},{"location":"roadmap/#advanced-ai-capabilities","title":"Advanced AI Capabilities","text":"<ul> <li>Auto-Decorator Selection: Use AI to automatically select optimal decorators for a given prompt</li> <li>Self-Optimizing Decorators: Implement decorators that learn and improve based on usage patterns</li> <li>Context-Aware Decorators: Develop decorators that adapt based on conversation history</li> <li>Multimodal Decorators: Extend the framework to support multimodal prompts (text + images)</li> <li>Decorator Synthesis: Generate new decorators based on natural language descriptions</li> </ul>"},{"location":"roadmap/#enterprise-features","title":"Enterprise Features","text":"<ul> <li>Role-Based Access Control: Add permissions for decorator creation and usage</li> <li>Audit Logging: Implement comprehensive logging for compliance and security</li> <li>Enterprise Deployment Tools: Create tools for deploying in enterprise environments</li> <li>High Availability: Ensure the framework can operate in high-availability environments</li> <li>SLA Monitoring: Add tools for monitoring service level agreements</li> </ul>"},{"location":"roadmap/#research-and-innovation","title":"Research and Innovation","text":"<ul> <li>Academic Partnerships: Collaborate with academic institutions on prompt engineering research</li> <li>Published Research: Publish papers on the effectiveness of different decorator approaches</li> <li>Novel Prompt Techniques: Research and implement cutting-edge prompt engineering techniques</li> <li>Cross-Model Optimization: Develop techniques for optimizing prompts across different LLM architectures</li> <li>Prompt Efficiency Research: Research methods for reducing token usage while maintaining effectiveness</li> </ul>"},{"location":"roadmap/#community-and-ecosystem","title":"Community and Ecosystem","text":"<ul> <li>Open Governance Model: Establish an open governance model for the project</li> <li>Community Events: Host regular community events, hackathons, and challenges</li> <li>Training and Certification: Develop training materials and certification programs</li> <li>Extended Plugin System: Create a more robust plugin system for community extensions</li> <li>Integration Ecosystem: Build a broader ecosystem of integrations with other AI tools</li> </ul>"},{"location":"roadmap/#how-to-contribute","title":"How to Contribute","text":"<p>We welcome contributions to help us achieve these roadmap goals! Here's how you can get involved:</p> <ol> <li>Feature Development: Pick an item from the roadmap and submit a pull request</li> <li>Bug Fixes: Help us address issues in the issue tracker</li> <li>Documentation: Improve our documentation or create tutorials</li> <li>Testing: Help us test the framework with different LLMs and use cases</li> <li>Feedback: Share your ideas and suggestions for the roadmap</li> </ol> <p>See our Contributing Guide for more details on how to contribute.</p>"},{"location":"roadmap/#feedback","title":"Feedback","text":"<p>This roadmap is a living document and will evolve based on community feedback and changing priorities. If you have suggestions or feedback on the roadmap, please:</p> <ul> <li>Open an issue on our GitHub repository</li> <li>Discuss in our community forums</li> <li>Reach out to the maintainers directly</li> </ul> <p>We value your input in shaping the future of the Prompt Decorators framework!</p>"},{"location":"validator_tool/","title":"Validator Tool","text":"<p>The Prompt Decorators Validator Tool is a utility for validating decorator definitions, ensuring they conform to the framework's specifications, and helping detect issues before they affect your applications.</p>"},{"location":"validator_tool/#overview","title":"Overview","text":"<p>The validator tool performs several key functions:</p> <ol> <li>Schema Validation: Ensures decorator definitions match the expected schema</li> <li>Parameter Validation: Verifies parameter types, names, and defaults</li> <li>Transform Function Analysis: Checks for syntax errors and potential issues</li> <li>Compatibility Checking: Identifies potential conflicts between decorators</li> <li>Performance Analysis: Evaluates transform functions for efficiency concerns</li> </ol>"},{"location":"validator_tool/#installation","title":"Installation","text":"<p>The validator tool is included with the prompt-decorators package:</p> <pre><code>pip install prompt-decorators\n</code></pre> <p>For the command-line interface, install with the CLI extras:</p> <pre><code>pip install \"prompt-decorators[cli]\"\n</code></pre>"},{"location":"validator_tool/#using-the-validator-cli","title":"Using the Validator CLI","text":"<p>The validator can be used from the command line:</p> <pre><code># Validate a single decorator JSON file\nprompt-decorators validate my_decorator.json\n\n# Validate all decorators in a directory\nprompt-decorators validate --directory path/to/decorators\n</code></pre>"},{"location":"validator_tool/#using-the-prompt_validatorpy-script","title":"Using the prompt_validator.py Script","text":"<p>For direct validation without installing the CLI, you can use the <code>prompt_validator.py</code> script:</p> <pre><code># Validate decorator syntax in a prompt\npython scripts/prompt_validator.py syntax -t \"+++Reasoning(depth=comprehensive)\\nExplain quantum computing.\"\n\n# Validate a decorator schema file\npython scripts/prompt_validator.py schema -f registry/core/reasoning/deductive.json\n\n# Validate all files in a directory against registry schema\npython scripts/prompt_validator.py directory -d registry/core -s registry\n</code></pre> <p>This script provides a unified interface for validating different aspects of prompt decorators, including syntax validation, schema validation, and directory validation.</p> <pre><code># Get help on available commands\npython scripts/prompt_validator.py --help\n</code></pre>"},{"location":"validator_tool/#validate-a-decorator-defined-in-python-code","title":"Validate a decorator defined in Python code","text":"<p>prompt-decorators validate --module my_package.decorators</p>"},{"location":"validator_tool/#generate-a-report","title":"Generate a report","text":"<p>prompt-decorators validate --report report.html path/to/decorators <pre><code>### Available Commands\n\n- `validate`: Validate decorator definitions\n- `check-conflicts`: Check for conflicts between decorators\n- `analyze`: Analyze transform functions for performance issues\n- `verify`: Verify that decorators work with various LLM providers\n\n### Options\n\n- `--directory`, `-d`: Directory containing decorator definitions\n- `--recursive`, `-r`: Recursively search directories\n- `--module`, `-m`: Python module containing decorator definitions\n- `--format`, `-f`: Output format (text, json, html)\n- `--report`: Generate a detailed report file\n- `--verbose`, `-v`: Show detailed validation information\n- `--fix`: Attempt to fix issues automatically\n\n## Using the Validator in Code\n\nYou can also use the validator programmatically in your Python code:\n\n```python\nfrom prompt_decorators.tools.validator import (\n    validate_decorator_definition,\n    validate_transform_function,\n    check_decorator_conflicts\n)\n\n# Validate a decorator definition\nfrom prompt_decorators import DecoratorDefinition\n\nmy_decorator = DecoratorDefinition(\n    name=\"MyDecorator\",\n    description=\"A sample decorator\",\n    category=\"Custom\",\n    parameters=[\n        {\n            \"name\": \"param1\",\n            \"type\": \"string\",\n            \"description\": \"A parameter\",\n            \"default\": \"default value\"\n        }\n    ],\n    transform_function=\"return 'Modified: ' + text;\"\n)\n\n# Validate against schema\nvalidation_result = validate_decorator_definition(my_decorator)\nif validation_result.is_valid:\n    print(\"Decorator is valid!\")\nelse:\n    print(f\"Validation errors: {validation_result.errors}\")\n\n# Validate transform function specifically\ntransform_result = validate_transform_function(my_decorator.transform_function)\nif transform_result.is_valid:\n    print(\"Transform function is valid!\")\nelse:\n    print(f\"Transform function errors: {transform_result.errors}\")\n\n# Check for conflicts with existing decorators\nconflicts = check_decorator_conflicts(my_decorator)\nif conflicts:\n    print(f\"Potential conflicts with: {', '.join(conflicts)}\")\n</code></pre></p>"},{"location":"validator_tool/#validation-checks","title":"Validation Checks","text":"<p>The validator performs these checks:</p>"},{"location":"validator_tool/#schema-validation","title":"Schema Validation","text":"<ul> <li>Ensures required fields are present (name, description, etc.)</li> <li>Validates structure conforms to the JSON schema</li> <li>Checks field types and formats</li> </ul>"},{"location":"validator_tool/#parameter-validation","title":"Parameter Validation","text":"<ul> <li>Verifies parameter names are unique</li> <li>Ensures enum parameters have valid options</li> <li>Checks default values match parameter types</li> <li>Validates parameter descriptions</li> </ul>"},{"location":"validator_tool/#transform-function-analysis","title":"Transform Function Analysis","text":"<ul> <li>Checks JavaScript syntax</li> <li>Verifies all parameters are used correctly</li> <li>Ensures function returns a string value</li> <li>Warns about potential security issues</li> </ul>"},{"location":"validator_tool/#compatibility-analysis","title":"Compatibility Analysis","text":"<ul> <li>Identifies conflicting parameter names</li> <li>Detects overlapping functionality</li> <li>Warns about parameters with similar names but different types</li> </ul>"},{"location":"validator_tool/#creating-a-custom-validator","title":"Creating a Custom Validator","text":"<p>You can extend the validator for your specific needs:</p> <pre><code>from prompt_decorators.tools.validator import DecoratorValidator, ValidationRule\n\n# Create a custom validation rule\nclass CustomParameterRule(ValidationRule):\n    \"\"\"Rule that requires parameters to follow a naming convention.\"\"\"\n\n    def validate(self, decorator_def):\n        \"\"\"Check that all parameters follow snake_case convention.\"\"\"\n        issues = []\n\n        for param in decorator_def.parameters:\n            name = param.get(\"name\", \"\")\n            if not name.islower() or \" \" in name:\n                issues.append(f\"Parameter '{name}' should use snake_case\")\n\n        return issues\n\n# Create a custom validator with your rule\nclass CustomValidator(DecoratorValidator):\n    def __init__(self):\n        super().__init__()\n        self.add_rule(CustomParameterRule())\n\n# Use your custom validator\nvalidator = CustomValidator()\nresult = validator.validate(my_decorator)\n</code></pre>"},{"location":"validator_tool/#continuous-integration","title":"Continuous Integration","text":"<p>The validator tool can be integrated into your CI/CD pipeline:</p> <pre><code># GitHub Actions example\nname: Validate Decorators\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  validate:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - name: Set up Python\n      uses: actions/setup-python@v2\n      with:\n        python-version: '3.11'\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install prompt-decorators[cli]\n    - name: Validate decorators\n      run: |\n        prompt-decorators validate --directory ./decorators --report validation-report.html\n    - name: Upload validation report\n      uses: actions/upload-artifact@v2\n      with:\n        name: validation-report\n        path: validation-report.html\n</code></pre>"},{"location":"validator_tool/#common-validation-issues-and-solutions","title":"Common Validation Issues and Solutions","text":""},{"location":"validator_tool/#issue-missing-required-fields","title":"Issue: Missing Required Fields","text":"<pre><code>Error: Missing required field 'description' in decorator 'MyDecorator'\n</code></pre> <p>Solution: Add the missing field to your decorator definition.</p>"},{"location":"validator_tool/#issue-invalid-parameter-type","title":"Issue: Invalid Parameter Type","text":"<pre><code>Error: Parameter 'count' has invalid type 'integer'. Valid types are: string, number, boolean, enum\n</code></pre> <p>Solution: Change the parameter type to one of the supported types. Use <code>\"type\": \"number\"</code> instead of <code>\"type\": \"integer\"</code>.</p>"},{"location":"validator_tool/#issue-transform-function-syntax-error","title":"Issue: Transform Function Syntax Error","text":"<pre><code>Error: Syntax error in transform function: Unexpected token 'return'\n</code></pre> <p>Solution: Fix the JavaScript syntax in your transform function. Make sure you're using valid JavaScript.</p>"},{"location":"validator_tool/#issue-missing-parameter-in-transform-function","title":"Issue: Missing Parameter in Transform Function","text":"<pre><code>Warning: Parameter 'format' is defined but not used in the transform function\n</code></pre> <p>Solution: Either use the parameter in your transform function or remove it from the parameter definitions.</p>"},{"location":"validator_tool/#issue-potential-security-issue","title":"Issue: Potential Security Issue","text":"<pre><code>Warning: Transform function uses 'eval', which can be a security risk\n</code></pre> <p>Solution: Avoid using <code>eval</code> or other unsafe JavaScript constructs in your transform functions.</p>"},{"location":"validator_tool/#performance-optimization","title":"Performance Optimization","text":"<p>The validator can help identify performance issues in your decorators:</p> <pre><code>prompt-decorators analyze --performance my_decorator.json\n</code></pre> <p>This will analyze your transform functions for performance issues such as:</p> <ul> <li>Inefficient string concatenations</li> <li>Complex loops or recursion</li> <li>Excessive memory usage</li> <li>Potential performance bottlenecks</li> </ul>"},{"location":"validator_tool/#best-practices","title":"Best Practices","text":"<ol> <li>Validate Early and Often: Run validation during development, not just before release</li> <li>Automate Validation: Include validation in your CI/CD pipeline</li> <li>Fix All Errors: Resolve all validation errors before using decorators in production</li> <li>Review Warnings: Warnings may indicate future problems</li> <li>Use Reports: Generate and review comprehensive validation reports</li> </ol>"},{"location":"validator_tool/#related-tools","title":"Related Tools","text":"<ul> <li>Schema Generator: Generate JSON schema files for your decorators</li> <li>Documentation Generator: Create documentation from decorator definitions</li> <li>Test Generator: Generate test cases for your decorators</li> </ul>"},{"location":"validator_tool/#next-steps","title":"Next Steps","text":"<ul> <li>Learn how to create your own decorators</li> <li>Explore custom decorators in the tutorials</li> <li>Check out the decorator specification</li> </ul>"},{"location":"workflow-rules/","title":"Cursor Workflow Rules","text":"<p>This project has been updated to use the auto rule generator from cursor-auto-rules-agile-workflow.</p> <p>Note: This script can be safely re-run at any time to update the template rules to their latest versions. It will not impact or overwrite any custom rules you've created.</p>"},{"location":"workflow-rules/#core-features","title":"Core Features","text":"<ul> <li>Automated rule generation</li> <li>Standardized documentation formats</li> <li>Code quality and workflow optimization</li> <li>Flexible integration options for various development scenarios</li> </ul>"},{"location":"workflow-rules/#available-rules","title":"Available Rules","text":"<p>The following rules are currently installed in <code>.cursor/rules/</code>:</p>"},{"location":"workflow-rules/#core-standards-0xx","title":"Core Standards (0XX)","text":"<ul> <li><code>000-cursor-rules.mdc</code> - Meta-rules for creating and updating Cursor rules</li> <li><code>050-careful-code-modification.mdc</code> - Guidelines for careful code modifications</li> <li><code>060-coding-patterns.mdc</code> - Standards for maintaining coding patterns</li> <li><code>070-workflow-preferences.mdc</code> - Development discipline and workflow preferences</li> </ul>"},{"location":"workflow-rules/#documentation-standards-4xx","title":"Documentation Standards (4XX)","text":"<ul> <li><code>400-md-docs.mdc</code> - Markdown documentation standards and formatting</li> </ul>"},{"location":"workflow-rules/#templates-and-specialized-rules-9xx","title":"Templates and Specialized Rules (9XX)","text":"<ul> <li><code>900-software-dev-decorators.mdc</code> - Software Development Prompt Decorators for enhanced code generation</li> </ul>"},{"location":"workflow-rules/#software-development-prompt-decorators","title":"Software Development Prompt Decorators","text":"<p>The <code>900-software-dev-decorators.mdc</code> rule incorporates a powerful set of over 40 specialized prompt decorators designed specifically for software development tasks. These decorators allow you to guide the AI's responses for specific coding scenarios.</p>"},{"location":"workflow-rules/#key-decorator-categories","title":"Key Decorator Categories:","text":"<ol> <li>Code Generation &amp; Algorithms</li> <li><code>+++Algorithm</code> - Implement algorithms with specific complexity and approach</li> <li><code>+++CodeGen</code> - Generate code with configurable style and documentation</li> <li> <p><code>+++DesignPattern</code> - Implement software design patterns</p> </li> <li> <p>Architecture &amp; Design</p> </li> <li><code>+++Architecture</code> - Design software architecture with specific patterns</li> <li><code>+++APIDesign</code> - Design API interfaces with specific qualities</li> <li><code>+++DataModel</code> - Design data models with appropriate structures</li> <li> <p><code>+++SystemDiagram</code> - Create visual representations of system architecture</p> </li> <li> <p>Code Quality &amp; Review</p> </li> <li><code>+++CodeReview</code> - Provide feedback on code quality following defined standards</li> <li><code>+++BestPractices</code> - Apply domain-specific best practices</li> <li><code>+++SecurityAudit</code> - Analyze code for security vulnerabilities</li> <li> <p><code>+++Refactor</code> - Improve existing code structure without changing behavior</p> </li> <li> <p>Debugging &amp; Troubleshooting</p> </li> <li><code>+++BugDiagnosis</code> - Systematically diagnose software bugs</li> <li><code>+++DebugStrategy</code> - Outline systematic approach to debugging</li> <li><code>+++RootCauseAnalysis</code> - Identify underlying causes of problems</li> <li> <p><code>+++ErrorDiagnosis</code> - Analyze error patterns with systematic troubleshooting</p> </li> <li> <p>DevOps &amp; Infrastructure</p> </li> <li><code>+++CICD</code> - Create or explain CI/CD pipelines</li> <li><code>+++Deployment</code> - Generate deployment approaches</li> <li><code>+++Infrastructure</code> - Generate infrastructure as code templates</li> <li><code>+++Monitoring</code> - Design monitoring solutions</li> </ol>"},{"location":"workflow-rules/#workflow-integration-options","title":"Workflow Integration Options","text":""},{"location":"workflow-rules/#1-automatic-rule-application-recommended","title":"1. Automatic Rule Application (Recommended)","text":"<p>The core workflow rules are automatically installed in <code>.cursor/rules/</code>: - <code>901-prd.mdc</code> - Product Requirements Document standards - <code>902-arch.mdc</code> - Architecture documentation standards - <code>903-story.mdc</code> - User story standards - <code>801-workflow-agile.mdc</code> - Complete Agile workflow (optional)</p> <p>These rules are automatically applied when working with corresponding file types.</p>"},{"location":"workflow-rules/#2-notepad-based-workflow","title":"2. Notepad-Based Workflow","text":"<p>For a more flexible approach, use the templates in <code>xnotes/</code>: 1. Enable Notepads in Cursor options 2. Create a new notepad (e.g., \"agile\") 3. Copy contents from <code>xnotes/workflow-agile.md</code> 4. Use `@notepad-name` in conversations</p> <p>\ud83d\udca1 Tip: The Notepad approach is ideal for: - Initial project setup - Story implementation - Focused development sessions - Reducing context overhead</p>"},{"location":"workflow-rules/#getting-started","title":"Getting Started","text":"<ol> <li>Review the templates in `xnotes/`</li> <li>Choose your preferred workflow approach</li> <li>Start using the AI with confidence!</li> </ol> <p>For demos and tutorials, visit: BMad Code Videos</p>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>API Structure</li> <li>Modules<ul> <li>Core Modules</li> <li>Schema Modules</li> <li>Utility Modules</li> <li>Integration Modules</li> <li>Other Modules</li> </ul> </li> <li>Decorators<ul> <li>Minimal</li> <li>Reasoning Process Decorators</li> <li>Output Structure Decorators</li> <li>Tone</li> <li>Verification</li> </ul> </li> <li>Usage Example</li> </ul>"},{"location":"api/#overview","title":"Overview","text":"<p>This section contains the API reference for the Prompt Decorators package. It provides detailed documentation for all modules, classes, functions, and properties in the package.</p>"},{"location":"api/#api-structure","title":"API Structure","text":"<p>The API is organized into the following sections:</p>"},{"location":"api/#modules","title":"Modules","text":"<ul> <li>Modules: Documentation for all Python modules in the package</li> <li>Core Modules: Core functionality of prompt decorators</li> <li>Schema Modules: Data models and schemas</li> <li>Utility Modules: Helper functions and utilities</li> <li>Integration Modules: Integrations with other systems</li> </ul>"},{"location":"api/#decorators","title":"Decorators","text":"<ul> <li>Decorators: Documentation for all available prompt decorators</li> <li>Minimal Decorators: Essential decorators for basic functionality</li> <li>Reasoning Process Decorators: Decorators for controlling reasoning processes</li> <li>Output Structure Decorators: Decorators for controlling output structure</li> <li>And more...</li> </ul>"},{"location":"api/#usage-example","title":"Usage Example","text":"<pre><code>from prompt_decorators import transform_prompt\n\n# Transform a prompt using decorators\ntransformed_prompt = transform_prompt(\n    \"What are the environmental impacts of electric vehicles?\",\n    [\"+++StepByStep(numbered=true)\", \"+++Reasoning(depth=comprehensive)\"]\n)\n</code></pre> <p>For more examples, see the Quick Start guide.</p>"},{"location":"api/decorators/","title":"Decorator API Reference","text":"<p>This section provides API reference for all available decorators in the Prompt Decorators package.</p>"},{"location":"api/decorators/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Minimal</li> <li>Reasoning Process Decorators</li> <li>Output Structure Decorators</li> <li>Architecture And Design</li> <li>Code Generation</li> <li>Developer Education</li> <li>Developer Workflow</li> <li>Devops And Infrastructure</li> <li>Implementation-Focused</li> <li>Meta</li> <li>Systematic Debugging</li> <li>Testing And Debugging</li> <li>Tone</li> <li>Verification</li> </ul>"},{"location":"api/decorators/#decorators-by-category","title":"Decorators by Category","text":""},{"location":"api/decorators/#minimal","title":"Minimal","text":"<ul> <li>OutputFormat</li> <li>Reasoning</li> <li>StepByStep</li> <li>Tone</li> <li>Version</li> </ul>"},{"location":"api/decorators/#reasoning-process-decorators","title":"Reasoning Process Decorators","text":"<p>Decorators that control or influence the reasoning process used in prompt responses.</p> <ul> <li>Abductive</li> <li>Analogical</li> <li>BlindSpots</li> <li>Contrarian</li> <li>Debate</li> <li>Deductive</li> <li>FirstPrinciples</li> <li>ForcedAnalogy</li> <li>Inductive</li> <li>NegativeSpace</li> <li>PerspectiveCascade</li> <li>RedTeam</li> <li>RootCause</li> <li>Socratic</li> <li>TemporalResonance</li> <li>TreeOfThought</li> </ul>"},{"location":"api/decorators/#output-structure-decorators","title":"Output Structure Decorators","text":"<p>Decorators that control the structure of the output generated from prompts.</p> <ul> <li>Alternatives</li> <li>Bullet</li> <li>Comparison</li> <li>Constraints</li> <li>DecisionMatrix</li> <li>Layered</li> <li>MECE</li> <li>Nested</li> <li>Outline</li> <li>Prioritize</li> <li>Schema</li> <li>Summary</li> <li>TableFormat</li> <li>Timeline</li> </ul>"},{"location":"api/decorators/#architecture-and-design","title":"Architecture And Design","text":"<ul> <li>APIDesign</li> <li>Architecture</li> <li>DataModel</li> <li>Migration</li> <li>Scalability</li> <li>SystemDiagram</li> <li>TechStack</li> <li>Tradeoffs</li> </ul>"},{"location":"api/decorators/#code-generation","title":"Code Generation","text":"<ul> <li>Algorithm</li> <li>AsyncPattern</li> <li>CodeGen</li> <li>DesignPattern</li> <li>Interface</li> <li>Optimize</li> <li>Refactor</li> <li>TypeDefinition</li> </ul>"},{"location":"api/decorators/#developer-education","title":"Developer Education","text":"<ul> <li>Antipatterns</li> <li>BestPractices</li> <li>CodeWalkthrough</li> <li>Compare</li> <li>ConceptModel</li> <li>Explain</li> <li>LearningPath</li> <li>TechDebt</li> </ul>"},{"location":"api/decorators/#developer-workflow","title":"Developer Workflow","text":"<ul> <li>CodeStandards</li> <li>CommitMessage</li> <li>Documentation</li> <li>Estimation</li> <li>PostMortem</li> <li>PullRequest</li> <li>ReleaseNotes</li> <li>Roadmap</li> </ul>"},{"location":"api/decorators/#devops-and-infrastructure","title":"Devops And Infrastructure","text":"<ul> <li>Backup</li> <li>CICD</li> <li>Deployment</li> <li>Infrastructure</li> <li>Monitoring</li> <li>Performance</li> <li>SRE</li> <li>Troubleshoot</li> </ul>"},{"location":"api/decorators/#implementation-focused","title":"Implementation-Focused","text":"<ul> <li>CodeContext</li> <li>ComplexityLevel</li> <li>ErrorStrategy</li> <li>ExtendCode</li> <li>ImplPhase</li> <li>ImplementationStrategy</li> <li>IncrementalBuild</li> <li>Iterate</li> <li>MemoryConstraint</li> <li>StepByStepImpl</li> <li>SystemIntegration</li> <li>TechDebtControl</li> </ul>"},{"location":"api/decorators/#meta","title":"Meta","text":"<ul> <li>BuildOn</li> <li>Chain</li> <li>Compatibility</li> <li>Conditional</li> <li>Context</li> <li>Custom</li> <li>Extension</li> <li>Override</li> <li>Priority</li> <li>Refine</li> </ul>"},{"location":"api/decorators/#systematic-debugging","title":"Systematic Debugging","text":"<ul> <li>ChangeVerification</li> <li>CodeAudit</li> <li>DebugStrategy</li> <li>DependencyAnalysis</li> <li>ErrorDiagnosis</li> <li>LoggingStrategy</li> <li>OptimizationFocus</li> <li>PreciseModification</li> <li>RootCauseAnalysis</li> <li>TaskBreakdown</li> </ul>"},{"location":"api/decorators/#testing-and-debugging","title":"Testing And Debugging","text":"<ul> <li>BugDiagnosis</li> <li>CodeReview</li> <li>EdgeCases</li> <li>MockData</li> <li>Reproduce</li> <li>SecurityAudit</li> <li>TestCases</li> <li>TestStrategy</li> </ul>"},{"location":"api/decorators/#tone","title":"Tone","text":"<ul> <li>Academic</li> <li>AsExpert</li> <li>Audience</li> <li>Concise</li> <li>Creative</li> <li>Detailed</li> <li>ELI5</li> <li>Extremes</li> <li>Motivational</li> <li>Narrative</li> <li>Persona</li> <li>Professional</li> <li>Remix</li> <li>StyleShift</li> </ul>"},{"location":"api/decorators/#verification","title":"Verification","text":"<ul> <li>Balanced</li> <li>BreakAndBuild</li> <li>CiteSources</li> <li>Confidence</li> <li>FactCheck</li> <li>FindGaps</li> <li>Limitations</li> <li>PeerReview</li> <li>Precision</li> <li>QualityMetrics</li> <li>Steelman</li> <li>StressTest</li> <li>Uncertainty</li> </ul>"},{"location":"api/decorators/APIDesign/","title":"APIDesign Decorator","text":"<p>Designs API interfaces focusing on specific qualities.</p> <p>Category: Architecture And Design</p>"},{"location":"api/decorators/APIDesign/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>style</code> <code>enum</code> API architectural style <code>rest</code> <code>focus</code> <code>enum</code> Design priority <code>developer-experience</code> <code>documentation</code> <code>enum</code> Documentation approach <code>style-appropriate</code>"},{"location":"api/decorators/APIDesign/#style-options","title":"Style Options","text":"<ul> <li><code>rest</code>: Design a RESTful API with appropriate resource-oriented endpoints, HTTP methods, and status codes.</li> <li><code>graphql</code>: Design a GraphQL API with a well-structured schema, queries, mutations, and resolvers.</li> <li><code>grpc</code>: Design a gRPC API with efficient protocol buffers and service definitions.</li> <li><code>soap</code>: Design a SOAP API with appropriate XML schemas and WSDL definitions.</li> <li><code>websocket</code>: Design a WebSocket API for real-time bidirectional communication.</li> <li><code>webhook</code>: Design a webhook-based API for event-driven architectures.</li> </ul>"},{"location":"api/decorators/APIDesign/#focus-options","title":"Focus Options","text":"<ul> <li><code>consistency</code>: Prioritize consistency in naming conventions, response formats, and error handling across all endpoints.</li> <li><code>performance</code>: Optimize for performance with efficient data transfer, pagination, and caching strategies.</li> <li><code>developer-experience</code>: Prioritize developer experience with intuitive endpoints, comprehensive documentation, and helpful error messages.</li> <li><code>backward-compatibility</code>: Ensure backward compatibility through careful versioning and deprecation strategies.</li> </ul>"},{"location":"api/decorators/APIDesign/#documentation-options","title":"Documentation Options","text":"<ul> <li><code>openapi</code>: Document the API using OpenAPI/Swagger specifications.</li> <li><code>graphql-schema</code>: Document the API using GraphQL schema language and introspection.</li> <li><code>protobuf</code>: Document the API using Protocol Buffer definitions.</li> <li><code>custom</code>: Create custom documentation that clearly explains all endpoints, parameters, and responses.</li> <li><code>style-appropriate</code>: Use the documentation format most appropriate for the chosen API style.</li> </ul>"},{"location":"api/decorators/APIDesign/#examples","title":"Examples","text":""},{"location":"api/decorators/APIDesign/#designing-a-graphql-api-for-a-content-management-system","title":"Designing a GraphQL API for a content management system","text":"<pre><code>+++APIDesign(style=graphql, focus=developer-experience, documentation=graphql-schema)\nDesign a GraphQL API for a content management system that prioritizes a great developer experience.\n</code></pre> <p>A comprehensive GraphQL API design for a CMS with a focus on developer experience, including schema definitions, query/mutation examples, and GraphQL-specific documentation.</p>"},{"location":"api/decorators/APIDesign/#designing-a-rest-api-focused-on-performance","title":"Designing a REST API focused on performance","text":"<pre><code>+++APIDesign(style=rest, focus=performance)\nDesign an API for a high-traffic e-commerce platform.\n</code></pre> <p>A RESTful API design optimized for performance, with caching strategies, pagination, and efficient data transfer patterns.</p>"},{"location":"api/decorators/APIDesign/#designing-a-grpc-api-with-backward-compatibility","title":"Designing a gRPC API with backward compatibility","text":"<pre><code>+++APIDesign(style=grpc, focus=backward-compatibility, documentation=protobuf)\nDesign an API for a microservice architecture that needs to maintain compatibility with existing clients.\n</code></pre> <p>A gRPC API design with Protocol Buffer definitions that emphasizes versioning strategies and backward compatibility approaches.</p>"},{"location":"api/decorators/APIDesign/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/APIDesign/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Design an API following these specific requirements: {style} architecture, focusing on {focus}, with {documentation} documentation approach. Consider endpoints, data formats, error handling, and authentication.</p> <p>Notes: Simplified instruction for models with more limited context windows.</p>"},{"location":"api/decorators/APIDesign/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/APIDesign/#designing-a-rest-api-for-a-content-management-system","title":"Designing a REST API for a content management system","text":"<p>Original Prompt: <pre><code>Design an API for a content management system.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Design an API that follows best practices and industry standards. Consider the interface design, endpoint structure, data formats, error handling, and authentication mechanisms. Design a RESTful API with appropriate resource-oriented endpoints, HTTP methods, and status codes. Prioritize developer experience with intuitive endpoints, comprehensive documentation, and helpful error messages. Use the documentation format most appropriate for the chosen API style.\n\nDesign an API for a content management system.\n</code></pre></p> <p>Notes: The decorator adds specific guidance for REST API design with a focus on developer experience.</p>"},{"location":"api/decorators/APIDesign/#designing-a-graphql-api-with-performance-focus","title":"Designing a GraphQL API with performance focus","text":"<p>Original Prompt: <pre><code>Create an API for an e-commerce platform.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Design an API that follows best practices and industry standards. Consider the interface design, endpoint structure, data formats, error handling, and authentication mechanisms. Design a GraphQL API with a well-structured schema, queries, mutations, and resolvers. Optimize for performance with efficient data transfer, pagination, and caching strategies. Document the API using GraphQL schema language and introspection.\n\nCreate an API for an e-commerce platform.\n</code></pre></p> <p>Notes: The decorator adds specific guidance for GraphQL API design with a focus on performance and appropriate documentation.</p>"},{"location":"api/decorators/APIDesign/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Design an API that follows best practices and industry standards. Consider the interface design, endpoint structure, data formats, error handling, and authentication mechanisms.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>style</code>:</li> <li>When set to <code>rest</code>: Design a RESTful API with appropriate resource-oriented endpoints, HTTP methods, and status codes.</li> <li>When set to <code>graphql</code>: Design a GraphQL API with a well-structured schema, queries, mutations, and resolvers.</li> <li>When set to <code>grpc</code>: Design a gRPC API with efficient protocol buffers and service definitions.</li> <li>When set to <code>soap</code>: Design a SOAP API with appropriate XML schemas and WSDL definitions.</li> <li>When set to <code>websocket</code>: Design a WebSocket API for real-time bidirectional communication.</li> <li> <p>When set to <code>webhook</code>: Design a webhook-based API for event-driven architectures.</p> </li> <li> <p><code>focus</code>:</p> </li> <li>When set to <code>consistency</code>: Prioritize consistency in naming conventions, response formats, and error handling across all endpoints.</li> <li>When set to <code>performance</code>: Optimize for performance with efficient data transfer, pagination, and caching strategies.</li> <li>When set to <code>developer-experience</code>: Prioritize developer experience with intuitive endpoints, comprehensive documentation, and helpful error messages.</li> <li> <p>When set to <code>backward-compatibility</code>: Ensure backward compatibility through careful versioning and deprecation strategies.</p> </li> <li> <p><code>documentation</code>:</p> </li> <li>When set to <code>openapi</code>: Document the API using OpenAPI/Swagger specifications.</li> <li>When set to <code>graphql-schema</code>: Document the API using GraphQL schema language and introspection.</li> <li>When set to <code>protobuf</code>: Document the API using Protocol Buffer definitions.</li> <li>When set to <code>custom</code>: Create custom documentation that clearly explains all endpoints, parameters, and responses.</li> <li>When set to <code>style-appropriate</code>: Use the documentation format most appropriate for the chosen API style.</li> </ul>"},{"location":"api/decorators/APIDesign/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, claude-instant</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/APIDesign/#related-decorators","title":"Related Decorators","text":"<ul> <li>SystemDesign: Enhances APIDesign APIDesign works well with SystemDesign by focusing on the API layer of a larger system architecture.</li> <li>DatabaseDesign: Enhances APIDesign APIDesign can be combined with DatabaseDesign to create a complete data access solution.</li> </ul>"},{"location":"api/decorators/Abductive/","title":"Abductive Decorator","text":"<p>Structures the response using abductive reasoning, developing the most likely explanations for observations or phenomena. This decorator emphasizes inference to the best explanation and hypothetical reasoning to address incomplete information.</p> <p>Category: Reasoning</p>"},{"location":"api/decorators/Abductive/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>hypotheses</code> <code>number</code> Number of alternative hypotheses or explanations to generate <code>3</code> <code>criteria</code> <code>array</code> Specific criteria to evaluate hypotheses against (e.g., simplicity, explanatory power) `` <code>rank</code> <code>boolean</code> Whether to explicitly rank hypotheses by likelihood <code>True</code>"},{"location":"api/decorators/Abductive/#examples","title":"Examples","text":""},{"location":"api/decorators/Abductive/#basic-abductive-reasoning-with-multiple-hypotheses","title":"Basic abductive reasoning with multiple hypotheses","text":"<pre><code>+++Abductive\nWhy have bee populations been declining globally?\n</code></pre> <p>Presents observed facts about bee population decline, generates three possible explanations, and identifies the most likely causes based on available evidence</p>"},{"location":"api/decorators/Abductive/#detailed-abductive-reasoning-with-specific-evaluation-criteria","title":"Detailed abductive reasoning with specific evaluation criteria","text":"<pre><code>+++Abductive(hypotheses=4, criteria=[comprehensiveness,simplicity,novelty,testability], rank=true)\nWhat might explain the Fermi Paradox?\n</code></pre> <p>Develops four hypotheses explaining the Fermi Paradox, evaluates each against the specified criteria, and ranks them from most to least likely explanation</p>"},{"location":"api/decorators/Abductive/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Abductive/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Develop {hypotheses} possible explanations for this phenomenon. For each explanation: 1) Describe the hypothesis, 2) Connect it to the observed evidence, 3) Evaluate it against {criteria}, 4) Discuss its strengths and limitations. {rank} Present your reasoning clearly, acknowledging that we're working with incomplete information.</p> <p>Notes: This model may sometimes need reminders to avoid conflating abductive reasoning with deductive or inductive approaches</p>"},{"location":"api/decorators/Abductive/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Abductive/#basic-abductive-reasoning-about-bee-population-decline","title":"Basic abductive reasoning about bee population decline","text":"<p>Original Prompt: <pre><code>Why have bee populations been declining globally?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please use abductive reasoning to develop the most likely explanations for the observations or phenomena described. Focus on inferring the best explanation from limited information, clearly presenting hypotheses that could account for the available evidence. Generate exactly 3 distinct alternative hypotheses or explanations that could account for the observations. Explicitly rank the hypotheses from most to least likely based on how well they explain the observations and meet the evaluation criteria.\n\nWhy have bee populations been declining globally?\n</code></pre></p>"},{"location":"api/decorators/Abductive/#detailed-abductive-reasoning-about-the-fermi-paradox","title":"Detailed abductive reasoning about the Fermi Paradox","text":"<p>Original Prompt: <pre><code>What might explain the Fermi Paradox?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please use abductive reasoning to develop the most likely explanations for the observations or phenomena described. Focus on inferring the best explanation from limited information, clearly presenting hypotheses that could account for the available evidence. Generate exactly 4 distinct alternative hypotheses or explanations that could account for the observations. Evaluate each hypothesis against these specific criteria: [comprehensiveness,simplicity,novelty,testability]. For each criterion, explain how well the hypothesis satisfies it. Explicitly rank the hypotheses from most to least likely based on how well they explain the observations and meet the evaluation criteria.\n\nWhat might explain the Fermi Paradox?\n</code></pre></p>"},{"location":"api/decorators/Abductive/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please use abductive reasoning to develop the most likely explanations for the observations or phenomena described. Focus on inferring the best explanation from limited information, clearly presenting hypotheses that could account for the available evidence.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>hypotheses</code>:</li> <li> <p>Format: Generate exactly {value} distinct alternative hypotheses or explanations that could account for the observations.</p> </li> <li> <p><code>criteria</code>:</p> </li> <li> <p>Format: Evaluate each hypothesis against these specific criteria: {value}. For each criterion, explain how well the hypothesis satisfies it.</p> </li> <li> <p><code>rank</code>:</p> </li> <li>When set to <code>true</code>: Explicitly rank the hypotheses from most to least likely based on how well they explain the observations and meet the evaluation criteria.</li> <li>When set to <code>false</code>: Present the hypotheses without explicit ranking, focusing on the strengths and limitations of each potential explanation.</li> </ul>"},{"location":"api/decorators/Abductive/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Abductive/#related-decorators","title":"Related Decorators","text":"<ul> <li>FindGaps: Enhances Abductive FindGaps helps identify missing information that could strengthen or challenge the abductive hypotheses</li> <li>Uncertainty: Enhances Abductive Uncertainty pairs well with Abductive to acknowledge the probabilistic nature of inferential explanations</li> <li>Limitations: Enhances Abductive Limitations helps clarify the constraints of each abductive hypothesis and the overall analysis</li> </ul>"},{"location":"api/decorators/Academic/","title":"Academic Decorator","text":"<p>Adapts the response to follow scholarly writing conventions appropriate for academic publications. This decorator generates responses with formal language, structured argumentation, and proper citations following established academic citation styles.</p> <p>Category: Tone</p>"},{"location":"api/decorators/Academic/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>style</code> <code>enum</code> The academic discipline style to follow <code>scientific</code> <code>format</code> <code>enum</code> The citation format to use for references <code>APA</code>"},{"location":"api/decorators/Academic/#style-options","title":"Style Options","text":"<ul> <li><code>humanities</code>: Use conventions typical of humanities scholarship, including interpretive analysis, theoretical frameworks, and engagement with cultural, historical, or philosophical contexts.</li> <li><code>scientific</code>: Follow scientific writing conventions, including clear methodology descriptions, evidence-based claims, objective tone, and precise technical terminology.</li> <li><code>legal</code>: Adopt legal academic writing style, including careful statutory interpretation, case analysis, precedent citation, and attention to doctrinal frameworks.</li> </ul>"},{"location":"api/decorators/Academic/#format-options","title":"Format Options","text":"<ul> <li><code>APA</code>: Format all citations and references according to APA (American Psychological Association) style, 7th edition.</li> <li><code>MLA</code>: Format all citations and references according to MLA (Modern Language Association) style, 9th edition.</li> <li><code>Chicago</code>: Format all citations and references according to Chicago style (Chicago Manual of Style), 17th edition.</li> <li><code>Harvard</code>: Format all citations and references according to Harvard referencing style.</li> <li><code>IEEE</code>: Format all citations and references according to IEEE citation style used in engineering and computer science.</li> </ul>"},{"location":"api/decorators/Academic/#examples","title":"Examples","text":""},{"location":"api/decorators/Academic/#scientific-academic-response-with-apa-citations","title":"Scientific academic response with APA citations","text":"<pre><code>+++Academic\nDiscuss the evidence for climate change.\n</code></pre> <p>Produces a scholarly analysis of climate change evidence using formal scientific language and proper APA citations</p>"},{"location":"api/decorators/Academic/#humanities-focused-academic-response-with-mla-citations","title":"Humanities-focused academic response with MLA citations","text":"<pre><code>+++Academic(style=humanities, format=MLA)\nAnalyze the themes in Shakespeare's Hamlet.\n</code></pre> <p>Provides a literary analysis of Hamlet using humanities-appropriate terminology and MLA citation format</p>"},{"location":"api/decorators/Academic/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Academic/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Write this response as a scholarly {style} academic paper with formal language, precise terminology, and proper structure (introduction, literature review, analysis/discussion, conclusion). Use {format} citations for all factual claims. Include appropriate academic vocabulary, transitional phrases, and maintain an objective, analytical stance.</p> <p>Notes: This model sometimes needs more explicit guidance to maintain consistent academic tone and proper citation formats throughout</p>"},{"location":"api/decorators/Academic/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Academic/#scientific-academic-response-with-apa-citations_1","title":"Scientific academic response with APA citations","text":"<p>Original Prompt: <pre><code>Discuss the evidence for climate change.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please structure your response following scholarly writing conventions appropriate for academic publications, using formal language, structured argumentation, and proper citations. Follow scientific writing conventions, including clear methodology descriptions, evidence-based claims, objective tone, and precise technical terminology. Format all citations and references according to APA (American Psychological Association) style, 7th edition.\n\nDiscuss the evidence for climate change.\n</code></pre></p>"},{"location":"api/decorators/Academic/#humanities-academic-response-with-mla-citations","title":"Humanities academic response with MLA citations","text":"<p>Original Prompt: <pre><code>Analyze the themes in Shakespeare's Hamlet.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please structure your response following scholarly writing conventions appropriate for academic publications, using formal language, structured argumentation, and proper citations. Use conventions typical of humanities scholarship, including interpretive analysis, theoretical frameworks, and engagement with cultural, historical, or philosophical contexts. Format all citations and references according to MLA (Modern Language Association) style, 9th edition.\n\nAnalyze the themes in Shakespeare's Hamlet.\n</code></pre></p>"},{"location":"api/decorators/Academic/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please structure your response following scholarly writing conventions appropriate for academic publications, using formal language, structured argumentation, and proper citations.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>style</code>:</li> <li>When set to <code>humanities</code>: Use conventions typical of humanities scholarship, including interpretive analysis, theoretical frameworks, and engagement with cultural, historical, or philosophical contexts.</li> <li>When set to <code>scientific</code>: Follow scientific writing conventions, including clear methodology descriptions, evidence-based claims, objective tone, and precise technical terminology.</li> <li> <p>When set to <code>legal</code>: Adopt legal academic writing style, including careful statutory interpretation, case analysis, precedent citation, and attention to doctrinal frameworks.</p> </li> <li> <p><code>format</code>:</p> </li> <li>When set to <code>APA</code>: Format all citations and references according to APA (American Psychological Association) style, 7th edition.</li> <li>When set to <code>MLA</code>: Format all citations and references according to MLA (Modern Language Association) style, 9th edition.</li> <li>When set to <code>Chicago</code>: Format all citations and references according to Chicago style (Chicago Manual of Style), 17th edition.</li> <li>When set to <code>Harvard</code>: Format all citations and references according to Harvard referencing style.</li> <li>When set to <code>IEEE</code>: Format all citations and references according to IEEE citation style used in engineering and computer science.</li> </ul>"},{"location":"api/decorators/Academic/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: ELI5, Creative, Motivational</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Academic/#related-decorators","title":"Related Decorators","text":"<ul> <li>CiteSources: Enhances Academic CiteSources complements Academic by ensuring thorough citation practices consistent with academic standards</li> <li>ELI5: Conflicts with Academic ELI5's simplified language directly conflicts with Academic's scholarly language requirements</li> <li>Creative: Conflicts with Academic Creative's artistic expression conflicts with Academic's formal scholarly conventions</li> <li>PeerReview: Enhances Academic PeerReview pairs well with Academic to simulate scholarly publication review processes</li> </ul>"},{"location":"api/decorators/Algorithm/","title":"Algorithm Decorator","text":"<p>Implements specific algorithms with the desired complexity characteristics.</p> <p>Category: Code Generation</p>"},{"location":"api/decorators/Algorithm/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>type</code> <code>enum</code> Algorithm category <code>context-dependent</code> <code>complexity</code> <code>enum</code> Desired time complexity <code>best-available</code> <code>approach</code> <code>enum</code> Algorithm design approach <code>most-appropriate</code>"},{"location":"api/decorators/Algorithm/#type-options","title":"Type Options","text":"<ul> <li><code>sorting</code>: Use a sorting algorithm such as merge sort, quick sort, or bubble sort.</li> <li><code>search</code>: Implement a search algorithm such as binary search, linear search, or depth-first search.</li> <li><code>graph</code>: Use a graph algorithm such as Dijkstra's, BFS, DFS, or minimum spanning tree.</li> <li><code>string</code>: Implement a string processing algorithm such as KMP, Rabin-Karp, or regex matching.</li> <li><code>numeric</code>: Use a numeric algorithm such as GCD, prime factorization, or numerical integration.</li> <li><code>ml</code>: Implement a machine learning algorithm such as linear regression, k-means, or neural networks.</li> <li><code>crypto</code>: Use a cryptographic algorithm such as RSA, AES, or hashing functions.</li> </ul>"},{"location":"api/decorators/Algorithm/#complexity-options","title":"Complexity Options","text":"<ul> <li><code>constant</code>: The algorithm should have O(1) time complexity.</li> <li><code>logarithmic</code>: The algorithm should have O(log n) time complexity.</li> <li><code>linear</code>: The algorithm should have O(n) time complexity.</li> <li><code>linearithmic</code>: The algorithm should have O(n log n) time complexity.</li> <li><code>quadratic</code>: The algorithm should have O(n\u00b2) time complexity.</li> <li><code>polynomial</code>: The algorithm should have polynomial time complexity.</li> <li><code>exponential</code>: The algorithm may have exponential time complexity if necessary.</li> </ul>"},{"location":"api/decorators/Algorithm/#approach-options","title":"Approach Options","text":"<ul> <li><code>recursive</code>: Implement the algorithm using a recursive approach.</li> <li><code>iterative</code>: Implement the algorithm using an iterative approach.</li> <li><code>divide-conquer</code>: Use a divide and conquer strategy for the implementation.</li> <li><code>dynamic</code>: Implement the algorithm using dynamic programming techniques.</li> <li><code>greedy</code>: Use a greedy algorithm approach for the implementation.</li> </ul>"},{"location":"api/decorators/Algorithm/#examples","title":"Examples","text":""},{"location":"api/decorators/Algorithm/#implementing-a-graph-algorithm-with-linear-complexity-using-an-iterative-approach","title":"Implementing a graph algorithm with linear complexity using an iterative approach","text":"<pre><code>+++Algorithm(type=graph, complexity=linear, approach=iterative)\nImplement an algorithm to find the shortest path between two nodes in an unweighted graph.\n</code></pre> <p>The model will implement a breadth-first search algorithm for finding the shortest path in an unweighted graph, using an iterative approach with O(n) time complexity.</p>"},{"location":"api/decorators/Algorithm/#implementing-a-sorting-algorithm-with-optimal-complexity","title":"Implementing a sorting algorithm with optimal complexity","text":"<pre><code>+++Algorithm(type=sorting, complexity=linearithmic)\nImplement a stable sorting algorithm for an array of integers.\n</code></pre> <p>The model will implement a merge sort algorithm, which is stable and has O(n log n) time complexity.</p>"},{"location":"api/decorators/Algorithm/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Algorithm/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Write code for an algorithm with these specifications:</p> <p>Notes: This model may need more explicit instructions about algorithm implementation details.</p>"},{"location":"api/decorators/Algorithm/#gpt-4o","title":"gpt-4o","text":"<p>Instruction: Implement an algorithm with the following characteristics:</p> <p>Notes: This model can handle more abstract algorithm descriptions and infer appropriate implementations.</p>"},{"location":"api/decorators/Algorithm/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Algorithm/#graph-algorithm-implementation","title":"Graph algorithm implementation","text":"<p>Original Prompt: <pre><code>Implement an algorithm to find the shortest path between two nodes in an unweighted graph.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Implement an algorithm with the following characteristics:\nUse a graph algorithm such as Dijkstra's, BFS, DFS, or minimum spanning tree.\nThe algorithm should have O(n) time complexity.\nImplement the algorithm using an iterative approach.\n\nImplement an algorithm to find the shortest path between two nodes in an unweighted graph.\n</code></pre></p> <p>Notes: For unweighted graphs, BFS is typically the most appropriate algorithm with linear time complexity.</p>"},{"location":"api/decorators/Algorithm/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Implement an algorithm with the following characteristics:</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>type</code>:</li> <li>When set to <code>sorting</code>: Use a sorting algorithm such as merge sort, quick sort, or bubble sort.</li> <li>When set to <code>search</code>: Implement a search algorithm such as binary search, linear search, or depth-first search.</li> <li>When set to <code>graph</code>: Use a graph algorithm such as Dijkstra's, BFS, DFS, or minimum spanning tree.</li> <li>When set to <code>string</code>: Implement a string processing algorithm such as KMP, Rabin-Karp, or regex matching.</li> <li>When set to <code>numeric</code>: Use a numeric algorithm such as GCD, prime factorization, or numerical integration.</li> <li>When set to <code>ml</code>: Implement a machine learning algorithm such as linear regression, k-means, or neural networks.</li> <li> <p>When set to <code>crypto</code>: Use a cryptographic algorithm such as RSA, AES, or hashing functions.</p> </li> <li> <p><code>complexity</code>:</p> </li> <li>When set to <code>constant</code>: The algorithm should have O(1) time complexity.</li> <li>When set to <code>logarithmic</code>: The algorithm should have O(log n) time complexity.</li> <li>When set to <code>linear</code>: The algorithm should have O(n) time complexity.</li> <li>When set to <code>linearithmic</code>: The algorithm should have O(n log n) time complexity.</li> <li>When set to <code>quadratic</code>: The algorithm should have O(n\u00b2) time complexity.</li> <li>When set to <code>polynomial</code>: The algorithm should have polynomial time complexity.</li> <li> <p>When set to <code>exponential</code>: The algorithm may have exponential time complexity if necessary.</p> </li> <li> <p><code>approach</code>:</p> </li> <li>When set to <code>recursive</code>: Implement the algorithm using a recursive approach.</li> <li>When set to <code>iterative</code>: Implement the algorithm using an iterative approach.</li> <li>When set to <code>divide-conquer</code>: Use a divide and conquer strategy for the implementation.</li> <li>When set to <code>dynamic</code>: Implement the algorithm using dynamic programming techniques.</li> <li>When set to <code>greedy</code>: Use a greedy algorithm approach for the implementation.</li> </ul>"},{"location":"api/decorators/Algorithm/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Algorithm/#related-decorators","title":"Related Decorators","text":"<ul> <li>CodeStyle: Enhances Algorithm CodeStyle can be used to specify the coding style for the algorithm implementation.</li> <li>Language: Enhances Algorithm Language can be used to specify the programming language for the algorithm implementation.</li> </ul>"},{"location":"api/decorators/Alternatives/","title":"Alternatives Decorator","text":"<p>Presents multiple distinct options, approaches, or solutions to a question or problem. This decorator encourages exploring different paths or perspectives rather than providing a single definitive answer.</p> <p>Category: Structure</p>"},{"location":"api/decorators/Alternatives/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>count</code> <code>number</code> Number of alternative options or approaches to generate <code>3</code> <code>diversity</code> <code>enum</code> How different or varied the alternatives should be from each other <code>medium</code> <code>comparison</code> <code>boolean</code> Whether to include a comparative analysis of the alternatives <code>False</code>"},{"location":"api/decorators/Alternatives/#diversity-options","title":"Diversity Options","text":"<ul> <li><code>low</code>: Generate alternatives that are variations on the same fundamental approach with different implementations or emphases.</li> <li><code>medium</code>: Generate alternatives that offer substantively different approaches while still being practical and conventional.</li> <li><code>high</code>: Generate alternatives that are radically different from each other, exploring unconventional approaches and diverse paradigms.</li> </ul>"},{"location":"api/decorators/Alternatives/#examples","title":"Examples","text":""},{"location":"api/decorators/Alternatives/#basic-alternative-approaches-to-a-problem","title":"Basic alternative approaches to a problem","text":"<pre><code>+++Alternatives\nHow can I improve my public speaking skills?\n</code></pre> <p>Provides three distinct approaches to improving public speaking skills, each with its own methodology and focus</p>"},{"location":"api/decorators/Alternatives/#highly-diverse-alternatives-with-comparative-analysis","title":"Highly diverse alternatives with comparative analysis","text":"<pre><code>+++Alternatives(count=5, diversity=high, comparison=true)\nWhat are some ways to reduce carbon emissions in urban areas?\n</code></pre> <p>Presents five highly diverse approaches to reducing urban carbon emissions, followed by a comparative analysis of their effectiveness, cost, and implementation challenges</p>"},{"location":"api/decorators/Alternatives/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Alternatives/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Generate {count} significantly different approaches to address this question. Each approach should be distinct and labeled clearly. Make sure these alternatives are {diversity} in terms of their fundamental strategy. {comparison}</p> <p>Notes: This model sometimes needs more explicit instructions about maintaining meaningful differences between alternatives</p>"},{"location":"api/decorators/Alternatives/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Alternatives/#basic-alternative-approaches-to-improving-public-speaking","title":"Basic alternative approaches to improving public speaking","text":"<p>Original Prompt: <pre><code>How can I improve my public speaking skills?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please provide multiple distinct options, approaches, or solutions to this question or problem rather than a single definitive answer. Present exactly 3 different alternatives. Generate alternatives that offer substantively different approaches while still being practical and conventional. Present each alternative independently without explicitly comparing them to each other.\n\nHow can I improve my public speaking skills?\n</code></pre></p>"},{"location":"api/decorators/Alternatives/#diverse-alternatives-for-reducing-carbon-emissions-with-comparative-analysis","title":"Diverse alternatives for reducing carbon emissions with comparative analysis","text":"<p>Original Prompt: <pre><code>What are some ways to reduce carbon emissions in urban areas?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please provide multiple distinct options, approaches, or solutions to this question or problem rather than a single definitive answer. Present exactly 5 different alternatives. Generate alternatives that are radically different from each other, exploring unconventional approaches and diverse paradigms. After presenting all alternatives, include a comparative analysis that evaluates their relative strengths, weaknesses, and suitability for different contexts or priorities.\n\nWhat are some ways to reduce carbon emissions in urban areas?\n</code></pre></p>"},{"location":"api/decorators/Alternatives/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please provide multiple distinct options, approaches, or solutions to this question or problem rather than a single definitive answer.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>count</code>:</li> <li> <p>Format: Present exactly {value} different alternatives.</p> </li> <li> <p><code>diversity</code>:</p> </li> <li>When set to <code>low</code>: Generate alternatives that are variations on the same fundamental approach with different implementations or emphases.</li> <li>When set to <code>medium</code>: Generate alternatives that offer substantively different approaches while still being practical and conventional.</li> <li> <p>When set to <code>high</code>: Generate alternatives that are radically different from each other, exploring unconventional approaches and diverse paradigms.</p> </li> <li> <p><code>comparison</code>:</p> </li> <li>When set to <code>true</code>: After presenting all alternatives, include a comparative analysis that evaluates their relative strengths, weaknesses, and suitability for different contexts or priorities.</li> <li>When set to <code>false</code>: Present each alternative independently without explicitly comparing them to each other.</li> </ul>"},{"location":"api/decorators/Alternatives/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Alternatives/#related-decorators","title":"Related Decorators","text":"<ul> <li>Comparison: Enhances Alternatives When used with comparison=true, the Comparison decorator can provide additional structure to the comparative analysis</li> <li>DecisionMatrix: Enhances Alternatives DecisionMatrix works well with Alternatives to evaluate the different options against criteria</li> <li>Debate: Enhances Alternatives Debate can add dialectical consideration of the pros and cons of different alternatives</li> </ul>"},{"location":"api/decorators/Analogical/","title":"Analogical Decorator","text":"<p>Enhances explanations through the use of analogies and metaphors. This decorator helps make complex or abstract concepts more accessible by systematically comparing them to more familiar domains or experiences.</p> <p>Category: Reasoning</p>"},{"location":"api/decorators/Analogical/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>domain</code> <code>string</code> Specific domain or context to draw analogies from (if not specified, will choose appropriate domains) <code>general</code> <code>count</code> <code>number</code> Number of distinct analogies to provide <code>1</code> <code>depth</code> <code>enum</code> Level of detail in developing the analogy <code>moderate</code>"},{"location":"api/decorators/Analogical/#depth-options","title":"Depth Options","text":"<ul> <li><code>brief</code>: Keep each analogy concise, covering only the most essential mappings between the concept and the analogy.</li> <li><code>moderate</code>: Develop each analogy with balanced detail, explaining key mappings and their relevance.</li> <li><code>extended</code>: Elaborate each analogy thoroughly, exploring multiple aspects of the mapping and their implications in detail.</li> </ul>"},{"location":"api/decorators/Analogical/#examples","title":"Examples","text":""},{"location":"api/decorators/Analogical/#single-analogy-from-a-specific-domain","title":"Single analogy from a specific domain","text":"<pre><code>+++Analogical(domain=sports)\nExplain how the immune system works.\n</code></pre> <p>Explains the immune system using extended sports analogies, comparing immune cells to players, pathogens to opponents, etc.</p>"},{"location":"api/decorators/Analogical/#multiple-brief-analogies-from-different-domains","title":"Multiple brief analogies from different domains","text":"<pre><code>+++Analogical(count=3, depth=brief)\nDescribe how blockchain technology functions.\n</code></pre> <p>Provides three different brief analogies for blockchain from different domains (perhaps physical ledgers, chain of custody, and distributed networks)</p>"},{"location":"api/decorators/Analogical/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Analogical/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Explain this concept through {count} analogy(ies) that compare it to something from {domain}. For each analogy, establish clear mappings between elements of the original concept and the analogy. Make the analogy {depth} in detail to help readers understand the concept through familiar comparisons.</p> <p>Notes: This model sometimes generates analogies that are too superficial and may need explicit guidance to develop deeper mappings</p>"},{"location":"api/decorators/Analogical/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Analogical/#single-sports-analogy-for-the-immune-system","title":"Single sports analogy for the immune system","text":"<p>Original Prompt: <pre><code>Explain how the immune system works.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please explain the concepts using analogies and metaphors that compare them to more familiar domains or experiences. Draw your analogies specifically from the domain of sports. Develop each analogy with balanced detail, explaining key mappings and their relevance.\n\nExplain how the immune system works.\n</code></pre></p>"},{"location":"api/decorators/Analogical/#multiple-brief-analogies-for-blockchain","title":"Multiple brief analogies for blockchain","text":"<p>Original Prompt: <pre><code>Describe how blockchain technology functions.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please explain the concepts using analogies and metaphors that compare them to more familiar domains or experiences. Provide exactly 3 distinct analogies to illustrate the concept. Keep each analogy concise, covering only the most essential mappings between the concept and the analogy.\n\nDescribe how blockchain technology functions.\n</code></pre></p>"},{"location":"api/decorators/Analogical/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please explain the concepts using analogies and metaphors that compare them to more familiar domains or experiences.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>domain</code>:</li> <li> <p>Format: Draw your analogies specifically from the domain of {value}.</p> </li> <li> <p><code>count</code>:</p> </li> <li> <p>Format: Provide exactly {value} distinct analogies to illustrate the concept.</p> </li> <li> <p><code>depth</code>:</p> </li> <li>When set to <code>brief</code>: Keep each analogy concise, covering only the most essential mappings between the concept and the analogy.</li> <li>When set to <code>moderate</code>: Develop each analogy with balanced detail, explaining key mappings and their relevance.</li> <li>When set to <code>extended</code>: Elaborate each analogy thoroughly, exploring multiple aspects of the mapping and their implications in detail.</li> </ul>"},{"location":"api/decorators/Analogical/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Analogical/#related-decorators","title":"Related Decorators","text":"<ul> <li>ELI5: Enhances Analogical Analogical reasoning pairs exceptionally well with ELI5 to create child-friendly explanations through familiar comparisons</li> <li>ForcedAnalogy: Enhances Analogical ForcedAnalogy can direct the analogical reasoning to specific predefined domains for creative comparisons</li> <li>Precision: Conflicts with Analogical Precision's focus on exactness may conflict with the inherent approximations in analogical reasoning</li> </ul>"},{"location":"api/decorators/Antipatterns/","title":"Antipatterns Decorator","text":"<p>Identifies common mistakes and how to avoid them.</p> <p>Category: Developer Education</p>"},{"location":"api/decorators/Antipatterns/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>domain</code> <code>enum</code> Problem area <code>context-dependent</code> <code>severity</code> <code>enum</code> Issue importance filter <code>major</code> <code>format</code> <code>enum</code> Presentation style <code>examples</code>"},{"location":"api/decorators/Antipatterns/#domain-options","title":"Domain Options","text":"<ul> <li><code>architecture</code>: Focus on architectural antipatterns such as monolithic systems, tight coupling, and design flaws.</li> <li><code>code</code>: Focus on code-level antipatterns such as code smells, anti-patterns in programming practices, and implementation issues.</li> <li><code>database</code>: Focus on database antipatterns such as poor schema design, inefficient queries, and data integrity issues.</li> <li><code>process</code>: Focus on process antipatterns such as inefficient workflows, communication issues, and development methodology problems.</li> <li><code>security</code>: Focus on security antipatterns such as insecure coding practices, authentication flaws, and vulnerability patterns.</li> </ul>"},{"location":"api/decorators/Antipatterns/#severity-options","title":"Severity Options","text":"<ul> <li><code>all</code>: Include all antipatterns regardless of their severity or impact.</li> <li><code>major</code>: Focus on significant antipatterns that can cause substantial problems but may not be immediately critical.</li> <li><code>critical</code>: Focus only on the most severe antipatterns that pose immediate risks or significant technical debt.</li> </ul>"},{"location":"api/decorators/Antipatterns/#format-options","title":"Format Options","text":"<ul> <li><code>examples</code>: Provide concrete examples of each antipattern with code or design snippets that illustrate the problem.</li> <li><code>explanation</code>: Provide detailed explanations of each antipattern, including why it's problematic and its potential impacts.</li> <li><code>refactoring-guide</code>: Structure the response as a step-by-step guide for identifying and refactoring each antipattern.</li> </ul>"},{"location":"api/decorators/Antipatterns/#examples","title":"Examples","text":""},{"location":"api/decorators/Antipatterns/#identifying-database-antipatterns","title":"Identifying database antipatterns","text":"<pre><code>+++Antipatterns(domain=database, severity=critical, format=examples)\nIdentify common antipatterns in MongoDB schema design and how to avoid them.\n</code></pre> <p>The response will identify critical antipatterns in MongoDB schema design with concrete examples of each problem pattern.</p>"},{"location":"api/decorators/Antipatterns/#security-code-review","title":"Security code review","text":"<pre><code>+++Antipatterns(domain=security, severity=all, format=refactoring-guide)\nReview this authentication code for potential issues.\n</code></pre> <p>The response will provide a comprehensive refactoring guide for identifying and fixing all security antipatterns in authentication code.</p>"},{"location":"api/decorators/Antipatterns/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Antipatterns/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Identify and explain common antipatterns and mistakes to avoid. For each antipattern, explain: 1) What it is, 2) Why it's problematic, 3) How to identify it, and 4) How to fix or avoid it.</p> <p>Notes: More structured instruction helps smaller models organize their response effectively.</p>"},{"location":"api/decorators/Antipatterns/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Antipatterns/#database-design-review","title":"Database design review","text":"<p>Original Prompt: <pre><code>Review my MongoDB schema design.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Identify common antipatterns in MongoDB schema design. Focus on critical issues that pose immediate risks or significant technical debt. Provide concrete examples of each antipattern with code or design snippets that illustrate the problem. Then review my MongoDB schema design.\n</code></pre></p> <p>Notes: The decorator adds specific guidance to look for antipatterns before performing the requested review.</p>"},{"location":"api/decorators/Antipatterns/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Identify common antipatterns and mistakes in the specified domain. Focus on how to recognize these issues and provide guidance on how to avoid or fix them.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>domain</code>:</li> <li>When set to <code>architecture</code>: Focus on architectural antipatterns such as monolithic systems, tight coupling, and design flaws.</li> <li>When set to <code>code</code>: Focus on code-level antipatterns such as code smells, anti-patterns in programming practices, and implementation issues.</li> <li>When set to <code>database</code>: Focus on database antipatterns such as poor schema design, inefficient queries, and data integrity issues.</li> <li>When set to <code>process</code>: Focus on process antipatterns such as inefficient workflows, communication issues, and development methodology problems.</li> <li> <p>When set to <code>security</code>: Focus on security antipatterns such as insecure coding practices, authentication flaws, and vulnerability patterns.</p> </li> <li> <p><code>severity</code>:</p> </li> <li>When set to <code>all</code>: Include all antipatterns regardless of their severity or impact.</li> <li>When set to <code>major</code>: Focus on significant antipatterns that can cause substantial problems but may not be immediately critical.</li> <li> <p>When set to <code>critical</code>: Focus only on the most severe antipatterns that pose immediate risks or significant technical debt.</p> </li> <li> <p><code>format</code>:</p> </li> <li>When set to <code>examples</code>: Provide concrete examples of each antipattern with code or design snippets that illustrate the problem.</li> <li>When set to <code>explanation</code>: Provide detailed explanations of each antipattern, including why it's problematic and its potential impacts.</li> <li>When set to <code>refactoring-guide</code>: Structure the response as a step-by-step guide for identifying and refactoring each antipattern.</li> </ul>"},{"location":"api/decorators/Antipatterns/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, claude-instant</li> <li>Standard Version: 1.0.0 - 1.0.0</li> </ul>"},{"location":"api/decorators/Antipatterns/#related-decorators","title":"Related Decorators","text":"<ul> <li>BestPractices: Enhances Antipatterns Antipatterns works well with BestPractices, as one identifies what to avoid while the other identifies what to do.</li> <li>CodeReview: Enhances Antipatterns Antipatterns can enhance CodeReview by specifically focusing on problematic patterns.</li> </ul>"},{"location":"api/decorators/Architecture/","title":"Architecture Decorator","text":"<p>Generates architectural designs based on requirements and constraints.</p> <p>Category: Architecture And Design</p>"},{"location":"api/decorators/Architecture/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>style</code> <code>enum</code> Architectural pattern <code>requirements-dependent</code> <code>detail</code> <code>enum</code> Level of design detail <code>component</code> <code>focus</code> <code>enum</code> Design emphasis <code>balanced</code>"},{"location":"api/decorators/Architecture/#style-options","title":"Style Options","text":"<ul> <li><code>microservices</code>: Design using a microservices architecture with loosely coupled, independently deployable services.</li> <li><code>monolith</code>: Design using a monolithic architecture with a unified codebase and deployment unit.</li> <li><code>serverless</code>: Design using a serverless architecture with function-as-a-service components.</li> <li><code>event-driven</code>: Design using an event-driven architecture with asynchronous communication patterns.</li> <li><code>layered</code>: Design using a layered architecture with clear separation of concerns between layers.</li> <li><code>hexagonal</code>: Design using a hexagonal (ports and adapters) architecture to separate business logic from external concerns.</li> <li><code>ddd</code>: Design using Domain-Driven Design principles with bounded contexts and a ubiquitous language.</li> </ul>"},{"location":"api/decorators/Architecture/#detail-options","title":"Detail Options","text":"<ul> <li><code>overview</code>: Provide a high-level architectural overview with major components and their relationships.</li> <li><code>component</code>: Detail the component-level design including interfaces, responsibilities, and interactions.</li> <li><code>detailed</code>: Create a detailed design including data structures, APIs, deployment considerations, and implementation guidance.</li> </ul>"},{"location":"api/decorators/Architecture/#focus-options","title":"Focus Options","text":"<ul> <li><code>scalability</code>: Optimize the architecture for scalability, ensuring it can handle increasing loads and users.</li> <li><code>maintainability</code>: Optimize the architecture for maintainability, ensuring it can be easily understood and modified.</li> <li><code>performance</code>: Optimize the architecture for performance, minimizing latency and maximizing throughput.</li> <li><code>security</code>: Optimize the architecture for security, protecting against threats and vulnerabilities.</li> <li><code>cost</code>: Optimize the architecture for cost-efficiency, minimizing resource usage and operational expenses.</li> <li><code>balanced</code>: Balance all quality attributes including scalability, maintainability, performance, security, and cost.</li> </ul>"},{"location":"api/decorators/Architecture/#examples","title":"Examples","text":""},{"location":"api/decorators/Architecture/#microservices-architecture-for-a-video-streaming-platform","title":"Microservices architecture for a video streaming platform","text":"<pre><code>+++Architecture(style=microservices, detail=component, focus=scalability)\nDesign an architecture for a video streaming platform that needs to support millions of concurrent users.\n</code></pre> <p>A component-level microservices architecture optimized for scalability, with separate services for user management, content delivery, recommendation engine, and analytics.</p>"},{"location":"api/decorators/Architecture/#serverless-architecture-for-an-e-commerce-application","title":"Serverless architecture for an e-commerce application","text":"<pre><code>+++Architecture(style=serverless, detail=detailed, focus=cost)\nDesign an architecture for an e-commerce platform that processes orders and manages inventory.\n</code></pre> <p>A detailed serverless architecture optimized for cost efficiency, using functions for order processing, inventory updates, and payment handling with appropriate data stores and API gateways.</p>"},{"location":"api/decorators/Architecture/#event-driven-architecture-for-a-financial-system","title":"Event-driven architecture for a financial system","text":"<pre><code>+++Architecture(style=event-driven, detail=overview, focus=security)\nDesign an architecture for a banking system that handles transactions and account management.\n</code></pre> <p>A high-level overview of an event-driven architecture optimized for security, showing event flows between account management, transaction processing, and notification components with security controls.</p>"},{"location":"api/decorators/Architecture/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Architecture/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Create an architectural design diagram and explanation for the following requirements. Consider the architectural style, level of detail, and focus areas specified.</p> <p>Notes: For models with more limited context, simplify the architectural descriptions and focus on key components.</p>"},{"location":"api/decorators/Architecture/#gpt-4o","title":"gpt-4o","text":"<p>Instruction: Generate a comprehensive architectural design that addresses the requirements and constraints. Include diagrams, component descriptions, interaction patterns, and justifications for your design decisions.</p> <p>Notes: gpt-4o can handle more complex architectural descriptions and provide more detailed diagrams and rationales.</p>"},{"location":"api/decorators/Architecture/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Architecture/#web-application-architecture","title":"Web application architecture","text":"<p>Original Prompt: <pre><code>Design an architecture for a video streaming platform that needs to support millions of concurrent users.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Generate an architectural design that addresses the requirements and constraints. Consider trade-offs and justify your design decisions. Design using a microservices architecture with loosely coupled, independently deployable services. Detail the component-level design including interfaces, responsibilities, and interactions. Optimize the architecture for scalability, ensuring it can handle increasing loads and users.\n\nDesign an architecture for a video streaming platform that needs to support millions of concurrent users.\n</code></pre></p> <p>Notes: The decorator adds specific architectural guidance focusing on microservices, component-level detail, and scalability optimization.</p>"},{"location":"api/decorators/Architecture/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Generate an architectural design that addresses the requirements and constraints. Consider trade-offs and justify your design decisions.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>style</code>:</li> <li>When set to <code>microservices</code>: Design using a microservices architecture with loosely coupled, independently deployable services.</li> <li>When set to <code>monolith</code>: Design using a monolithic architecture with a unified codebase and deployment unit.</li> <li>When set to <code>serverless</code>: Design using a serverless architecture with function-as-a-service components.</li> <li>When set to <code>event-driven</code>: Design using an event-driven architecture with asynchronous communication patterns.</li> <li>When set to <code>layered</code>: Design using a layered architecture with clear separation of concerns between layers.</li> <li>When set to <code>hexagonal</code>: Design using a hexagonal (ports and adapters) architecture to separate business logic from external concerns.</li> <li> <p>When set to <code>ddd</code>: Design using Domain-Driven Design principles with bounded contexts and a ubiquitous language.</p> </li> <li> <p><code>detail</code>:</p> </li> <li>When set to <code>overview</code>: Provide a high-level architectural overview with major components and their relationships.</li> <li>When set to <code>component</code>: Detail the component-level design including interfaces, responsibilities, and interactions.</li> <li> <p>When set to <code>detailed</code>: Create a detailed design including data structures, APIs, deployment considerations, and implementation guidance.</p> </li> <li> <p><code>focus</code>:</p> </li> <li>When set to <code>scalability</code>: Optimize the architecture for scalability, ensuring it can handle increasing loads and users.</li> <li>When set to <code>maintainability</code>: Optimize the architecture for maintainability, ensuring it can be easily understood and modified.</li> <li>When set to <code>performance</code>: Optimize the architecture for performance, minimizing latency and maximizing throughput.</li> <li>When set to <code>security</code>: Optimize the architecture for security, protecting against threats and vulnerabilities.</li> <li>When set to <code>cost</code>: Optimize the architecture for cost-efficiency, minimizing resource usage and operational expenses.</li> <li>When set to <code>balanced</code>: Balance all quality attributes including scalability, maintainability, performance, security, and cost.</li> </ul>"},{"location":"api/decorators/Architecture/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, claude-instant</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Architecture/#related-decorators","title":"Related Decorators","text":"<ul> <li>SystemDesign: Enhances Architecture Architecture decorator provides more specific architectural guidance that complements the broader system design approach.</li> <li>TechnicalSpecification: Enhances Architecture Architecture decorator can be used before TechnicalSpecification to establish the high-level design before detailing specifications.</li> </ul>"},{"location":"api/decorators/AsExpert/","title":"AsExpert Decorator","text":"<p>Generates responses from the perspective of a specified domain expert or specialist. This decorator provides authoritative content that reflects the knowledge, terminology, and analytical approach of an expert in the specified field.</p> <p>Category: Tone</p>"},{"location":"api/decorators/AsExpert/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>domain</code> <code>string</code> The specific field or discipline the expert specializes in <code>Required</code> <code>experience</code> <code>enum</code> The experience level of the expert <code>senior</code> <code>technical</code> <code>boolean</code> Whether to use highly technical language and domain-specific terminology <code>True</code>"},{"location":"api/decorators/AsExpert/#experience-options","title":"Experience Options","text":"<ul> <li><code>junior</code>: Adopt the perspective of a junior expert with foundational training and some practical experience in the field.</li> <li><code>senior</code>: Adopt the perspective of a senior expert with extensive experience and deep knowledge of the field's established principles and practices.</li> <li><code>leading</code>: Adopt the perspective of a leading authority in the field with comprehensive expertise and recognition for significant contributions.</li> <li><code>pioneering</code>: Adopt the perspective of a pioneering innovator in the field who is at the cutting edge of new developments and paradigm-shifting approaches.</li> </ul>"},{"location":"api/decorators/AsExpert/#examples","title":"Examples","text":""},{"location":"api/decorators/AsExpert/#basic-response-as-a-domain-expert","title":"Basic response as a domain expert","text":"<pre><code>+++AsExpert(domain=neuroscience)\nExplain how memories are formed in the brain.\n</code></pre> <p>Provides an explanation of memory formation from the perspective of a senior neuroscientist, using appropriate terminology and references to relevant research</p>"},{"location":"api/decorators/AsExpert/#highly-technical-response-as-pioneering-expert","title":"Highly technical response as pioneering expert","text":"<pre><code>+++AsExpert(domain=cryptography, experience=pioneering, technical=true)\nAssess the security implications of quantum computing for current encryption standards.\n</code></pre> <p>Delivers a technically sophisticated assessment of quantum computing's encryption impacts from the perspective of a pioneering cryptography expert, using advanced terminology and nuanced analysis</p>"},{"location":"api/decorators/AsExpert/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/AsExpert/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Adopt the perspective of a {experience} expert in {domain}. Use your specialized knowledge to provide an authoritative response that demonstrates deep expertise. {technical} Make sure to incorporate relevant frameworks, methodologies, and current understandings from the field.</p> <p>Notes: This model sometimes needs stronger prompting to maintain consistent expert perspective and appropriate level of technical terminology</p>"},{"location":"api/decorators/AsExpert/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/AsExpert/#senior-neuroscientist-explanation-of-memory-formation","title":"Senior neuroscientist explanation of memory formation","text":"<p>Original Prompt: <pre><code>Explain how memories are formed in the brain.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please respond from the perspective of a domain expert in the specified field, providing authoritative content that reflects expert knowledge, terminology, and analytical approach. Respond as a specialist in neuroscience, incorporating field-specific knowledge, methodologies, and frameworks. Adopt the perspective of a senior expert with extensive experience and deep knowledge of the field's established principles and practices. Use domain-specific terminology, technical language, and specialized concepts appropriate for communication between experts in the field.\n\nExplain how memories are formed in the brain.\n</code></pre></p>"},{"location":"api/decorators/AsExpert/#pioneering-cryptography-expert-on-quantum-computing-implications","title":"Pioneering cryptography expert on quantum computing implications","text":"<p>Original Prompt: <pre><code>Assess the security implications of quantum computing for current encryption standards.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please respond from the perspective of a domain expert in the specified field, providing authoritative content that reflects expert knowledge, terminology, and analytical approach. Respond as a specialist in cryptography, incorporating field-specific knowledge, methodologies, and frameworks. Adopt the perspective of a pioneering innovator in the field who is at the cutting edge of new developments and paradigm-shifting approaches. Use domain-specific terminology, technical language, and specialized concepts appropriate for communication between experts in the field.\n\nAssess the security implications of quantum computing for current encryption standards.\n</code></pre></p>"},{"location":"api/decorators/AsExpert/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please respond from the perspective of a domain expert in the specified field, providing authoritative content that reflects expert knowledge, terminology, and analytical approach.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>domain</code>:</li> <li> <p>Format: Respond as a specialist in {value}, incorporating field-specific knowledge, methodologies, and frameworks.</p> </li> <li> <p><code>experience</code>:</p> </li> <li>When set to <code>junior</code>: Adopt the perspective of a junior expert with foundational training and some practical experience in the field.</li> <li>When set to <code>senior</code>: Adopt the perspective of a senior expert with extensive experience and deep knowledge of the field's established principles and practices.</li> <li>When set to <code>leading</code>: Adopt the perspective of a leading authority in the field with comprehensive expertise and recognition for significant contributions.</li> <li> <p>When set to <code>pioneering</code>: Adopt the perspective of a pioneering innovator in the field who is at the cutting edge of new developments and paradigm-shifting approaches.</p> </li> <li> <p><code>technical</code>:</p> </li> <li>When set to <code>true</code>: Use domain-specific terminology, technical language, and specialized concepts appropriate for communication between experts in the field.</li> <li>When set to <code>false</code>: Use more accessible language while maintaining accuracy, minimizing technical jargon but preserving the essential expert insights.</li> </ul>"},{"location":"api/decorators/AsExpert/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: ELI5</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/AsExpert/#related-decorators","title":"Related Decorators","text":"<ul> <li>ELI5: Conflicts with AsExpert AsExpert (especially with technical=true) directly conflicts with ELI5's simplified approach</li> <li>Academic: Enhances AsExpert Academic complements AsExpert by adding scholarly conventions to expert knowledge</li> <li>Technical: Enhances AsExpert Technical works well with AsExpert to emphasize precision and deep domain terminology</li> </ul>"},{"location":"api/decorators/AsyncPattern/","title":"AsyncPattern Decorator","text":"<p>Handles asynchronous operations with appropriate patterns for the language and environment.</p> <p>Category: Code Generation</p>"},{"location":"api/decorators/AsyncPattern/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>approach</code> <code>enum</code> Asynchronous programming model to use <code>language-appropriate</code> <code>error-handling</code> <code>enum</code> Error handling strategy <code>approach-appropriate</code> <code>cancellation</code> <code>enum</code> Support for operation cancellation <code>none</code>"},{"location":"api/decorators/AsyncPattern/#approach-options","title":"Approach Options","text":"<ul> <li><code>promises</code>: Implement using Promise-based patterns for asynchronous operations.</li> <li><code>async-await</code>: Use async/await syntax for cleaner asynchronous code.</li> <li><code>observables</code>: Implement using Observable patterns for reactive asynchronous streams.</li> <li><code>callbacks</code>: Use callback functions to handle asynchronous operations.</li> <li><code>streams</code>: Implement using stream-based asynchronous processing.</li> <li><code>events</code>: Use event-based asynchronous programming model.</li> </ul>"},{"location":"api/decorators/AsyncPattern/#error-handling-options","title":"Error-Handling Options","text":"<ul> <li><code>try-catch</code>: Handle errors using try/catch blocks around asynchronous operations.</li> <li><code>error-first-callbacks</code>: Follow the error-first callback pattern where the first parameter is an error object.</li> <li><code>promise-rejection</code>: Use promise rejection handling with .catch() or try/catch with async/await.</li> <li><code>error-streams</code>: Handle errors through dedicated error streams or channels.</li> </ul>"},{"location":"api/decorators/AsyncPattern/#cancellation-options","title":"Cancellation Options","text":"<ul> <li><code>none</code>: No cancellation mechanism is required.</li> <li><code>manual</code>: Implement manual cancellation through boolean flags or state tracking.</li> <li><code>timeout</code>: Include timeout-based cancellation for asynchronous operations.</li> <li><code>signal</code>: Use AbortController or similar signal-based cancellation mechanisms.</li> </ul>"},{"location":"api/decorators/AsyncPattern/#examples","title":"Examples","text":""},{"location":"api/decorators/AsyncPattern/#javascript-asyncawait-with-trycatch-and-abortcontroller","title":"JavaScript async/await with try/catch and AbortController","text":"<pre><code>+++AsyncPattern(approach=async-await, error-handling=try-catch, cancellation=signal)\nCreate a function that fetches user data from multiple APIs in parallel and combines the results.\n</code></pre> <p>The model will generate JavaScript code using async/await syntax, with try/catch blocks for error handling, and accepting an AbortSignal parameter to support cancellation.</p>"},{"location":"api/decorators/AsyncPattern/#nodejs-callback-based-approach","title":"Node.js callback-based approach","text":"<pre><code>+++AsyncPattern(approach=callbacks, error-handling=error-first-callbacks)\nCreate a function that reads multiple files and processes their contents.\n</code></pre> <p>The model will generate Node.js code using callback functions with the error-first pattern for handling asynchronous file operations.</p>"},{"location":"api/decorators/AsyncPattern/#reactive-programming-with-observables","title":"Reactive programming with observables","text":"<pre><code>+++AsyncPattern(approach=observables, error-handling=error-streams, cancellation=manual)\nCreate a service that monitors real-time data from multiple sources.\n</code></pre> <p>The model will generate code using Observable patterns (like RxJS) with error streams for error handling and manual subscription management for cancellation.</p>"},{"location":"api/decorators/AsyncPattern/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/AsyncPattern/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Generate code that handles asynchronous operations using the specified pattern. For approach={approach}, use error handling with {error-handling} and implement {cancellation} cancellation support.</p> <p>Notes: This model may need more explicit instructions about the specific patterns to use.</p>"},{"location":"api/decorators/AsyncPattern/#gpt-4o","title":"gpt-4o","text":"<p>Instruction: When implementing asynchronous operations in the code, use the specified asynchronous pattern and error handling approach. Use {approach} as the primary asynchronous pattern. Implement {error-handling} for error handling. Support {cancellation} cancellation for asynchronous operations.</p> <p>Notes: gpt-4o has better understanding of advanced asynchronous patterns and can implement them more reliably.</p>"},{"location":"api/decorators/AsyncPattern/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/AsyncPattern/#javascripttypescript","title":"JavaScript/TypeScript","text":"<p>Original Prompt: <pre><code>Create a function that fetches user data from multiple APIs in parallel and combines the results.\n</code></pre></p> <p>Transformed Prompt: <pre><code>When implementing asynchronous operations in the code, use the specified asynchronous pattern and error handling approach. Use async/await as the primary asynchronous pattern. Implement try/catch for error handling. Support signal cancellation for asynchronous operations.\n\nCreate a function that fetches user data from multiple APIs in parallel and combines the results.\n</code></pre></p> <p>Notes: The implementation uses async/await with Promise.all for parallel fetching, try/catch blocks for error handling, and accepts an AbortSignal parameter for cancellation.</p>"},{"location":"api/decorators/AsyncPattern/#python","title":"Python","text":"<p>Original Prompt: <pre><code>Create a function that fetches user data from multiple APIs in parallel and combines the results.\n</code></pre></p> <p>Transformed Prompt: <pre><code>When implementing asynchronous operations in the code, use the specified asynchronous pattern and error handling approach. Use async/await as the primary asynchronous pattern. Implement try/catch for error handling. Support signal cancellation for asynchronous operations.\n\nCreate a function that fetches user data from multiple APIs in parallel and combines the results.\n</code></pre></p> <p>Notes: The implementation uses Python's asyncio with async/await, try/except blocks, and cancellation tokens from asyncio.</p>"},{"location":"api/decorators/AsyncPattern/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: When implementing asynchronous operations in the code, use the specified asynchronous pattern and error handling approach.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>approach</code>:</li> <li>When set to <code>promises</code>: Implement using Promise-based patterns for asynchronous operations.</li> <li>When set to <code>async-await</code>: Use async/await syntax for cleaner asynchronous code.</li> <li>When set to <code>observables</code>: Implement using Observable patterns for reactive asynchronous streams.</li> <li>When set to <code>callbacks</code>: Use callback functions to handle asynchronous operations.</li> <li>When set to <code>streams</code>: Implement using stream-based asynchronous processing.</li> <li>When set to <code>events</code>: Use event-based asynchronous programming model.</li> <li> <p>Format: Use {value} as the primary asynchronous pattern.</p> </li> <li> <p><code>error-handling</code>:</p> </li> <li>When set to <code>try-catch</code>: Handle errors using try/catch blocks around asynchronous operations.</li> <li>When set to <code>error-first-callbacks</code>: Follow the error-first callback pattern where the first parameter is an error object.</li> <li>When set to <code>promise-rejection</code>: Use promise rejection handling with .catch() or try/catch with async/await.</li> <li>When set to <code>error-streams</code>: Handle errors through dedicated error streams or channels.</li> <li> <p>Format: Implement {value} for error handling.</p> </li> <li> <p><code>cancellation</code>:</p> </li> <li>When set to <code>none</code>: No cancellation mechanism is required.</li> <li>When set to <code>manual</code>: Implement manual cancellation through boolean flags or state tracking.</li> <li>When set to <code>timeout</code>: Include timeout-based cancellation for asynchronous operations.</li> <li>When set to <code>signal</code>: Use AbortController or similar signal-based cancellation mechanisms.</li> <li>Format: Support {value} cancellation for asynchronous operations.</li> </ul>"},{"location":"api/decorators/AsyncPattern/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, claude-instant</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/AsyncPattern/#related-decorators","title":"Related Decorators","text":"<ul> <li>LanguageSpecific: Enhances AsyncPattern LanguageSpecific can provide context for language-appropriate async patterns.</li> <li>ErrorHandling: Enhances AsyncPattern ErrorHandling can provide more detailed error handling strategies that complement the async error handling approach.</li> </ul>"},{"location":"api/decorators/Audience/","title":"Audience Decorator","text":"<p>Adapts the response for a specific audience expertise level. This decorator ensures content is appropriately tailored to the knowledge, vocabulary, and needs of different audience types, from beginners to technical experts.</p> <p>Category: Tone</p>"},{"location":"api/decorators/Audience/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>level</code> <code>enum</code> The expertise level of the target audience <code>intermediate</code> <code>domain</code> <code>string</code> Specific knowledge domain or field for domain-specific terminology adaptation <code>general</code> <code>examples</code> <code>boolean</code> Whether to include additional examples for clarity <code>True</code>"},{"location":"api/decorators/Audience/#level-options","title":"Level Options","text":"<ul> <li><code>beginner</code>: Write for beginners with no prior knowledge of the subject. Use simple language, avoid jargon, and explain all technical terms. Start with fundamental concepts.</li> <li><code>intermediate</code>: Write for an audience with basic familiarity of the subject. You can use some field-specific terms, but explain more advanced concepts.</li> <li><code>expert</code>: Write for a knowledgeable audience with extensive experience in the field. You can use specialized terminology and discuss advanced concepts directly.</li> <li><code>technical</code>: Write for technical professionals who need precise, detailed information. Use proper technical terminology, reference standards, and provide implementation details where relevant.</li> </ul>"},{"location":"api/decorators/Audience/#examples","title":"Examples","text":""},{"location":"api/decorators/Audience/#technical-explanation-for-experts-in-a-specific-field","title":"Technical explanation for experts in a specific field","text":"<pre><code>+++Audience(level=technical, domain=cybersecurity)\nExplain zero-knowledge proofs.\n</code></pre> <p>Provides an in-depth technical explanation of zero-knowledge proofs using cybersecurity-specific terminology and concepts</p>"},{"location":"api/decorators/Audience/#beginner-friendly-explanation-with-examples","title":"Beginner-friendly explanation with examples","text":"<pre><code>+++Audience(level=beginner, examples=true)\nHow does machine learning work?\n</code></pre> <p>Explains machine learning concepts in simple terms with multiple illustrative examples suitable for complete beginners</p>"},{"location":"api/decorators/Audience/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Audience/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Adapt your language, terminology, and examples for a specific audience:</p> <p>Notes: This model benefits from more direct instructions about audience adaptation</p>"},{"location":"api/decorators/Audience/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Audience/#technical-audience-in-cybersecurity","title":"Technical audience in cybersecurity","text":"<p>Original Prompt: <pre><code>Explain zero-knowledge proofs.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please tailor your response for a specific audience expertise level. Write for technical professionals who need precise, detailed information. Use proper technical terminology, reference standards, and provide implementation details where relevant. The audience has specific interest in the cybersecurity field, so use appropriate concepts and examples from this domain. Include multiple concrete examples to illustrate key points and enhance understanding.\n\nExplain zero-knowledge proofs.\n</code></pre></p>"},{"location":"api/decorators/Audience/#beginner-audience-with-examples","title":"Beginner audience with examples","text":"<p>Original Prompt: <pre><code>How does machine learning work?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please tailor your response for a specific audience expertise level. Write for beginners with no prior knowledge of the subject. Use simple language, avoid jargon, and explain all technical terms. Start with fundamental concepts. The audience has specific interest in the general field, so use appropriate concepts and examples from this domain. Include multiple concrete examples to illustrate key points and enhance understanding.\n\nHow does machine learning work?\n</code></pre></p>"},{"location":"api/decorators/Audience/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please tailor your response for a specific audience expertise level.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>level</code>:</li> <li>When set to <code>beginner</code>: Write for beginners with no prior knowledge of the subject. Use simple language, avoid jargon, and explain all technical terms. Start with fundamental concepts.</li> <li>When set to <code>intermediate</code>: Write for an audience with basic familiarity of the subject. You can use some field-specific terms, but explain more advanced concepts.</li> <li>When set to <code>expert</code>: Write for a knowledgeable audience with extensive experience in the field. You can use specialized terminology and discuss advanced concepts directly.</li> <li> <p>When set to <code>technical</code>: Write for technical professionals who need precise, detailed information. Use proper technical terminology, reference standards, and provide implementation details where relevant.</p> </li> <li> <p><code>domain</code>:</p> </li> <li> <p>Format: The audience has specific interest in the {value} field, so use appropriate concepts and examples from this domain.</p> </li> <li> <p><code>examples</code>:</p> </li> <li>When set to <code>true</code>: Include multiple concrete examples to illustrate key points and enhance understanding.</li> <li>When set to <code>false</code>: Focus on clear explanations without requiring numerous examples.</li> </ul>"},{"location":"api/decorators/Audience/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Audience/#related-decorators","title":"Related Decorators","text":"<ul> <li>ELI5: Conflicts with Audience ELI5 targets a specific audience level that may contradict the level specified in Audience</li> <li>Technical: Enhances Audience Technical can be combined with Audience when level=technical for enhanced technical details</li> </ul>"},{"location":"api/decorators/Backup/","title":"Backup Decorator","text":"<p>Designs backup and recovery strategies.</p> <p>Category: Devops And Infrastructure</p>"},{"location":"api/decorators/Backup/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>criticality</code> <code>enum</code> Data importance level <code>high</code> <code>rpo</code> <code>enum</code> Recovery Point Objective <code>hours</code> <code>rto</code> <code>enum</code> Recovery Time Objective <code>hours</code>"},{"location":"api/decorators/Backup/#criticality-options","title":"Criticality Options","text":"<ul> <li><code>low</code>: The data has low criticality. Basic backup measures are sufficient.</li> <li><code>medium</code>: The data has medium criticality. Standard backup practices should be implemented.</li> <li><code>high</code>: The data has high criticality. Robust backup solutions are required.</li> <li><code>mission-critical</code>: The data is mission-critical. Implement enterprise-grade backup and recovery solutions with redundancy.</li> </ul>"},{"location":"api/decorators/Backup/#rpo-options","title":"Rpo Options","text":"<ul> <li><code>minutes</code>: Recovery Point Objective (RPO): Minutes - Data loss must be limited to minutes or less.</li> <li><code>hours</code>: Recovery Point Objective (RPO): Hours - Data loss of up to a few hours is acceptable.</li> <li><code>days</code>: Recovery Point Objective (RPO): Days - Data loss of up to a few days is acceptable.</li> <li><code>custom</code>: Recovery Point Objective (RPO): Custom - Consider specific business requirements for acceptable data loss.</li> </ul>"},{"location":"api/decorators/Backup/#rto-options","title":"Rto Options","text":"<ul> <li><code>minutes</code>: Recovery Time Objective (RTO): Minutes - Systems must be restored within minutes after failure.</li> <li><code>hours</code>: Recovery Time Objective (RTO): Hours - Systems can be down for a few hours during recovery.</li> <li><code>days</code>: Recovery Time Objective (RTO): Days - Systems can be down for a few days during recovery.</li> <li><code>custom</code>: Recovery Time Objective (RTO): Custom - Consider specific business requirements for acceptable downtime.</li> </ul>"},{"location":"api/decorators/Backup/#examples","title":"Examples","text":""},{"location":"api/decorators/Backup/#mission-critical-financial-system-backup-strategy","title":"Mission-critical financial system backup strategy","text":"<pre><code>+++Backup(criticality=mission-critical, rpo=minutes, rto=minutes)\nDesign a backup and disaster recovery strategy for our financial transaction database.\n</code></pre> <p>Produces a comprehensive backup strategy for financial data with zero data loss tolerance and immediate recovery capabilities.</p>"},{"location":"api/decorators/Backup/#standard-backup-for-development-environment","title":"Standard backup for development environment","text":"<pre><code>+++Backup(criticality=low, rpo=days, rto=days)\nWhat backup strategy should we use for our development environment?\n</code></pre> <p>Provides a cost-effective backup approach for non-critical development systems.</p>"},{"location":"api/decorators/Backup/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Backup/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Create a detailed backup and recovery strategy considering these requirements:</p> <p>Notes: For smaller models, more explicit instructions about backup components may be needed.</p>"},{"location":"api/decorators/Backup/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Backup/#financial-database-backup-planning","title":"Financial database backup planning","text":"<p>Original Prompt: <pre><code>Design a backup and disaster recovery strategy for our financial transaction database.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Design a backup and recovery strategy with the following requirements:\n\nThe data is mission-critical. Implement enterprise-grade backup and recovery solutions with redundancy.\nRecovery Point Objective (RPO): Minutes - Data loss must be limited to minutes or less.\nRecovery Time Objective (RTO): Minutes - Systems must be restored within minutes after failure.\n\nDesign a backup and disaster recovery strategy for our financial transaction database.\n</code></pre></p> <p>Notes: For financial systems, the decorator automatically applies the highest levels of protection and fastest recovery times.</p>"},{"location":"api/decorators/Backup/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Design a backup and recovery strategy with the following requirements:</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>criticality</code>:</li> <li>When set to <code>low</code>: The data has low criticality. Basic backup measures are sufficient.</li> <li>When set to <code>medium</code>: The data has medium criticality. Standard backup practices should be implemented.</li> <li>When set to <code>high</code>: The data has high criticality. Robust backup solutions are required.</li> <li> <p>When set to <code>mission-critical</code>: The data is mission-critical. Implement enterprise-grade backup and recovery solutions with redundancy.</p> </li> <li> <p><code>rpo</code>:</p> </li> <li>When set to <code>minutes</code>: Recovery Point Objective (RPO): Minutes - Data loss must be limited to minutes or less.</li> <li>When set to <code>hours</code>: Recovery Point Objective (RPO): Hours - Data loss of up to a few hours is acceptable.</li> <li>When set to <code>days</code>: Recovery Point Objective (RPO): Days - Data loss of up to a few days is acceptable.</li> <li> <p>When set to <code>custom</code>: Recovery Point Objective (RPO): Custom - Consider specific business requirements for acceptable data loss.</p> </li> <li> <p><code>rto</code>:</p> </li> <li>When set to <code>minutes</code>: Recovery Time Objective (RTO): Minutes - Systems must be restored within minutes after failure.</li> <li>When set to <code>hours</code>: Recovery Time Objective (RTO): Hours - Systems can be down for a few hours during recovery.</li> <li>When set to <code>days</code>: Recovery Time Objective (RTO): Days - Systems can be down for a few days during recovery.</li> <li>When set to <code>custom</code>: Recovery Time Objective (RTO): Custom - Consider specific business requirements for acceptable downtime.</li> </ul>"},{"location":"api/decorators/Backup/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Backup/#related-decorators","title":"Related Decorators","text":"<ul> <li>DisasterRecovery: Enhances Backup The Backup decorator works well with DisasterRecovery to create comprehensive data protection strategies.</li> <li>CloudMigration: Enhances Backup Can be used to ensure proper backup strategies are included in cloud migration plans.</li> </ul>"},{"location":"api/decorators/Balanced/","title":"Balanced Decorator","text":"<p>Ensures equal representation of different perspectives or viewpoints on a topic. This decorator promotes fairness and comprehensiveness by giving proportional attention to multiple sides of an issue, avoiding bias toward any particular position.</p> <p>Category: Verification</p>"},{"location":"api/decorators/Balanced/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>perspectives</code> <code>number</code> Number of different perspectives to include <code>2</code> <code>structure</code> <code>enum</code> How to structure the different perspectives <code>sequential</code> <code>equal</code> <code>boolean</code> Whether to strictly enforce equal word count for each perspective <code>True</code>"},{"location":"api/decorators/Balanced/#structure-options","title":"Structure Options","text":"<ul> <li><code>alternating</code>: Present the different perspectives in an alternating point-by-point format, addressing the same aspects from each viewpoint before moving to the next aspect.</li> <li><code>sequential</code>: Present each perspective fully and separately in sequence, with clear sections for each viewpoint.</li> <li><code>comparative</code>: Present the perspectives in a side-by-side comparative analysis, highlighting agreements and differences across specific dimensions.</li> </ul>"},{"location":"api/decorators/Balanced/#examples","title":"Examples","text":""},{"location":"api/decorators/Balanced/#basic-balanced-view-of-a-controversial-topic","title":"Basic balanced view of a controversial topic","text":"<pre><code>+++Balanced\nDiscuss the pros and cons of nuclear energy.\n</code></pre> <p>Presents the benefits and drawbacks of nuclear energy with equal attention and detail given to both perspectives</p>"},{"location":"api/decorators/Balanced/#balanced-presentation-of-multiple-perspectives-in-comparative-structure","title":"Balanced presentation of multiple perspectives in comparative structure","text":"<pre><code>+++Balanced(perspectives=4, structure=comparative, equal=true)\nWhat are the different views on artificial intelligence regulation?\n</code></pre> <p>Provides a balanced side-by-side comparison of four different perspectives on AI regulation, with equal word count allocated to each viewpoint</p>"},{"location":"api/decorators/Balanced/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Balanced/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Present multiple perspectives on this topic, giving equal attention to each viewpoint. Avoid showing bias toward any particular position. Make sure to address the strongest arguments from each perspective.</p> <p>Notes: This model may need more explicit reminders about maintaining balance throughout the response</p>"},{"location":"api/decorators/Balanced/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Balanced/#basic-balanced-view-with-two-perspectives","title":"Basic balanced view with two perspectives","text":"<p>Original Prompt: <pre><code>Discuss the pros and cons of nuclear energy.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please ensure your response presents a balanced view with equal representation of different perspectives on the topic. Include 2 different perspectives or viewpoints on this topic. Present each perspective fully and separately in sequence, with clear sections for each viewpoint. Ensure that each perspective receives equal attention, detail, and word count in your response.\n\nDiscuss the pros and cons of nuclear energy.\n</code></pre></p>"},{"location":"api/decorators/Balanced/#comparative-analysis-of-multiple-perspectives","title":"Comparative analysis of multiple perspectives","text":"<p>Original Prompt: <pre><code>What are the different views on artificial intelligence regulation?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please ensure your response presents a balanced view with equal representation of different perspectives on the topic. Include 4 different perspectives or viewpoints on this topic. Present the perspectives in a side-by-side comparative analysis, highlighting agreements and differences across specific dimensions. Ensure that each perspective receives equal attention, detail, and word count in your response.\n\nWhat are the different views on artificial intelligence regulation?\n</code></pre></p>"},{"location":"api/decorators/Balanced/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please ensure your response presents a balanced view with equal representation of different perspectives on the topic.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>perspectives</code>:</li> <li> <p>Format: Include {value} different perspectives or viewpoints on this topic.</p> </li> <li> <p><code>structure</code>:</p> </li> <li>When set to <code>alternating</code>: Present the different perspectives in an alternating point-by-point format, addressing the same aspects from each viewpoint before moving to the next aspect.</li> <li>When set to <code>sequential</code>: Present each perspective fully and separately in sequence, with clear sections for each viewpoint.</li> <li> <p>When set to <code>comparative</code>: Present the perspectives in a side-by-side comparative analysis, highlighting agreements and differences across specific dimensions.</p> </li> <li> <p><code>equal</code>:</p> </li> <li>When set to <code>true</code>: Ensure that each perspective receives equal attention, detail, and word count in your response.</li> <li>When set to <code>false</code>: Each perspective should be adequately represented, but strict equality in length is not required.</li> </ul>"},{"location":"api/decorators/Balanced/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Balanced/#related-decorators","title":"Related Decorators","text":"<ul> <li>Debate: Enhances Balanced Balanced pairs well with Debate to ensure fair representation in dialectical formats</li> <li>Steelman: Enhances Balanced Balanced ensures equal representation while Steelman strengthens the quality of each perspective</li> </ul>"},{"location":"api/decorators/BestPractices/","title":"BestPractices Decorator","text":"<p>Summarizes best practices for specific technologies or processes.</p> <p>Category: Developer Education</p>"},{"location":"api/decorators/BestPractices/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>for</code> <code>string</code> Practice domain <code>context-dependent</code> <code>context</code> <code>enum</code> Implementation environment <code>enterprise</code> <code>format</code> <code>enum</code> Output structure <code>detailed</code>"},{"location":"api/decorators/BestPractices/#context-options","title":"Context Options","text":"<ul> <li><code>startup</code>: Focus on agile, cost-effective, and scalable approaches suitable for startup environments.</li> <li><code>enterprise</code>: Emphasize enterprise-grade solutions with focus on security, compliance, and integration with existing systems.</li> <li><code>personal</code>: Prioritize simplicity, ease of maintenance, and individual productivity.</li> <li><code>open-source</code>: Consider community standards, contribution guidelines, and collaborative development practices.</li> </ul>"},{"location":"api/decorators/BestPractices/#format-options","title":"Format Options","text":"<ul> <li><code>list</code>: Present the best practices as a concise, numbered list of key points.</li> <li><code>detailed</code>: Provide detailed explanations for each best practice with rationale and implementation considerations.</li> <li><code>examples</code>: Include concrete code examples or implementation scenarios for each best practice.</li> <li><code>cookbook</code>: Structure the response as a step-by-step guide with practical recipes for implementation.</li> </ul>"},{"location":"api/decorators/BestPractices/#examples","title":"Examples","text":""},{"location":"api/decorators/BestPractices/#getting-best-practices-for-nodejs-in-an-enterprise-context-with-examples","title":"Getting best practices for Node.js in an enterprise context with examples","text":"<pre><code>+++BestPractices(for=node.js, context=enterprise, format=examples)\nProvide best practices for building production-ready Node.js microservices.\n</code></pre> <p>The response will include best practices for Node.js development specifically tailored for enterprise environments, with concrete code examples for each practice.</p>"},{"location":"api/decorators/BestPractices/#getting-best-practices-for-cloud-security-as-a-concise-list","title":"Getting best practices for cloud security as a concise list","text":"<pre><code>+++BestPractices(for=\"AWS cloud security\", format=list)\nWhat should I know about securing AWS resources?\n</code></pre> <p>The response will provide a numbered list of key best practices for AWS cloud security.</p>"},{"location":"api/decorators/BestPractices/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/BestPractices/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Summarize industry best practices for {for} in a {format} format, optimized for {context} environments.</p> <p>Notes: Simplified instruction for models with less context capacity.</p>"},{"location":"api/decorators/BestPractices/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/BestPractices/#nodejs-development","title":"Node.js Development","text":"<p>Original Prompt: <pre><code>How should I structure my Node.js project?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Provide a comprehensive summary of best practices for Node.js project structure. Emphasize enterprise-grade solutions with focus on security, compliance, and integration with existing systems. Provide detailed explanations for each best practice with rationale and implementation considerations.\n\nHow should I structure my Node.js project?\n</code></pre></p> <p>Notes: The decorator adds specific guidance for the LLM to focus on best practices in the enterprise context with detailed explanations.</p>"},{"location":"api/decorators/BestPractices/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Provide a comprehensive summary of best practices for {for}.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>for</code>:</li> <li> <p>Format: Provide a comprehensive summary of best practices for {value}.</p> </li> <li> <p><code>context</code>:</p> </li> <li>When set to <code>startup</code>: Focus on agile, cost-effective, and scalable approaches suitable for startup environments.</li> <li>When set to <code>enterprise</code>: Emphasize enterprise-grade solutions with focus on security, compliance, and integration with existing systems.</li> <li>When set to <code>personal</code>: Prioritize simplicity, ease of maintenance, and individual productivity.</li> <li> <p>When set to <code>open-source</code>: Consider community standards, contribution guidelines, and collaborative development practices.</p> </li> <li> <p><code>format</code>:</p> </li> <li>When set to <code>list</code>: Present the best practices as a concise, numbered list of key points.</li> <li>When set to <code>detailed</code>: Provide detailed explanations for each best practice with rationale and implementation considerations.</li> <li>When set to <code>examples</code>: Include concrete code examples or implementation scenarios for each best practice.</li> <li>When set to <code>cookbook</code>: Structure the response as a step-by-step guide with practical recipes for implementation.</li> </ul>"},{"location":"api/decorators/BestPractices/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: ELI5</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 1.5.0</li> </ul>"},{"location":"api/decorators/BestPractices/#related-decorators","title":"Related Decorators","text":"<ul> <li>CodeExamples: Enhances BestPractices BestPractices works well with CodeExamples to provide practical implementations of the recommended practices.</li> <li>Concise: Conflicts with BestPractices When format=detailed or format=cookbook, this conflicts with the Concise decorator's goal of brevity.</li> </ul>"},{"location":"api/decorators/BlindSpots/","title":"BlindSpots Decorator","text":"<p>Identifies potential cognitive blind spots, unstated assumptions, and overlooked perspectives in the response. This decorator helps mitigate bias by explicitly acknowledging the limitations of one's thinking and analysis.</p> <p>Category: Reasoning</p>"},{"location":"api/decorators/BlindSpots/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>categories</code> <code>array</code> Specific categories of blind spots to check for (e.g., cultural, temporal, confirmation bias) `` <code>depth</code> <code>enum</code> How thoroughly to analyze for blind spots <code>thorough</code> <code>position</code> <code>enum</code> Where to place the blind spots analysis <code>after</code>"},{"location":"api/decorators/BlindSpots/#depth-options","title":"Depth Options","text":"<ul> <li><code>basic</code>: Provide a basic assessment of key blind spots, focusing on the most significant limitations without extensive elaboration.</li> <li><code>thorough</code>: Conduct a thorough analysis of blind spots, with substantial attention to underlying assumptions and alternative perspectives.</li> <li><code>comprehensive</code>: Perform a comprehensive examination of blind spots, including detailed exploration of subtle biases, edge cases, and interconnected limitations.</li> </ul>"},{"location":"api/decorators/BlindSpots/#position-options","title":"Position Options","text":"<ul> <li><code>after</code>: Present your main analysis first, then follow it with a separate section that identifies blind spots and limitations in your reasoning.</li> <li><code>before</code>: Begin with an acknowledgment of potential blind spots and limitations that might affect your analysis, then proceed with your main response.</li> <li><code>integrated</code>: Integrate the identification of blind spots throughout your analysis, pointing out limitations and alternative perspectives as they become relevant to each aspect of the topic.</li> </ul>"},{"location":"api/decorators/BlindSpots/#examples","title":"Examples","text":""},{"location":"api/decorators/BlindSpots/#basic-blind-spots-analysis-after-a-response","title":"Basic blind spots analysis after a response","text":"<pre><code>+++BlindSpots\nWhat factors drive economic growth?\n</code></pre> <p>Provides an analysis of economic growth factors, followed by identification of unstated assumptions and potential blind spots in the analysis</p>"},{"location":"api/decorators/BlindSpots/#comprehensive-blind-spots-analysis-integrated-throughout","title":"Comprehensive blind spots analysis integrated throughout","text":"<pre><code>+++BlindSpots(categories=[cultural,historical,methodological], depth=comprehensive, position=integrated)\nEvaluate the impact of social media on society.\n</code></pre> <p>Delivers an evaluation of social media's societal impact with comprehensive blind spot analysis woven throughout, specifically addressing cultural, historical, and methodological blind spots</p>"},{"location":"api/decorators/BlindSpots/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/BlindSpots/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: When analyzing this topic, be vigilant about identifying {depth} blind spots such as {categories}. Consider what assumptions you're making, what perspectives might be missing, and what biases could be influencing your thinking. {position} Challenge your own conclusions and consider alternative viewpoints that might contradict your initial analysis.</p> <p>Notes: This model sometimes needs explicit prompting to avoid defaulting to surface-level blind spot analysis that merely acknowledges limitations without substantive exploration</p>"},{"location":"api/decorators/BlindSpots/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/BlindSpots/#basic-blind-spots-analysis-after-economic-growth-factors","title":"Basic blind spots analysis after economic growth factors","text":"<p>Original Prompt: <pre><code>What factors drive economic growth?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please identify potential cognitive blind spots, unstated assumptions, and overlooked perspectives in your response. Explicitly acknowledge the limitations and biases that might affect your analysis of the topic. Conduct a thorough analysis of blind spots, with substantial attention to underlying assumptions and alternative perspectives. Present your main analysis first, then follow it with a separate section that identifies blind spots and limitations in your reasoning.\n\nWhat factors drive economic growth?\n</code></pre></p>"},{"location":"api/decorators/BlindSpots/#comprehensive-integrated-blind-spots-analysis-of-social-media-impact","title":"Comprehensive integrated blind spots analysis of social media impact","text":"<p>Original Prompt: <pre><code>Evaluate the impact of social media on society.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please identify potential cognitive blind spots, unstated assumptions, and overlooked perspectives in your response. Explicitly acknowledge the limitations and biases that might affect your analysis of the topic. Focus specifically on identifying these categories of blind spots: [cultural,historical,methodological]. For each category, explain how it might influence the analysis. Perform a comprehensive examination of blind spots, including detailed exploration of subtle biases, edge cases, and interconnected limitations. Integrate the identification of blind spots throughout your analysis, pointing out limitations and alternative perspectives as they become relevant to each aspect of the topic.\n\nEvaluate the impact of social media on society.\n</code></pre></p>"},{"location":"api/decorators/BlindSpots/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please identify potential cognitive blind spots, unstated assumptions, and overlooked perspectives in your response. Explicitly acknowledge the limitations and biases that might affect your analysis of the topic.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>categories</code>:</li> <li> <p>Format: Focus specifically on identifying these categories of blind spots: {value}. For each category, explain how it might influence the analysis.</p> </li> <li> <p><code>depth</code>:</p> </li> <li>When set to <code>basic</code>: Provide a basic assessment of key blind spots, focusing on the most significant limitations without extensive elaboration.</li> <li>When set to <code>thorough</code>: Conduct a thorough analysis of blind spots, with substantial attention to underlying assumptions and alternative perspectives.</li> <li> <p>When set to <code>comprehensive</code>: Perform a comprehensive examination of blind spots, including detailed exploration of subtle biases, edge cases, and interconnected limitations.</p> </li> <li> <p><code>position</code>:</p> </li> <li>When set to <code>after</code>: Present your main analysis first, then follow it with a separate section that identifies blind spots and limitations in your reasoning.</li> <li>When set to <code>before</code>: Begin with an acknowledgment of potential blind spots and limitations that might affect your analysis, then proceed with your main response.</li> <li>When set to <code>integrated</code>: Integrate the identification of blind spots throughout your analysis, pointing out limitations and alternative perspectives as they become relevant to each aspect of the topic.</li> </ul>"},{"location":"api/decorators/BlindSpots/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/BlindSpots/#related-decorators","title":"Related Decorators","text":"<ul> <li>Limitations: Enhances BlindSpots BlindSpots focuses on cognitive biases and unstated assumptions while Limitations addresses known constraints of the analysis</li> <li>RedTeam: Enhances BlindSpots RedTeam challenges the content through adversarial analysis while BlindSpots identifies underlying cognitive biases</li> <li>Balanced: Enhances BlindSpots Balanced ensures equal coverage of viewpoints while BlindSpots helps identify perspectives that might be overlooked entirely</li> </ul>"},{"location":"api/decorators/BreakAndBuild/","title":"BreakAndBuild Decorator","text":"<p>Structures responses in two distinct phases: first critically analyzing and 'breaking down' an idea by identifying flaws, assumptions, and weaknesses, then 'building it back up' with improvements, refinements, and solutions. This decorator enhances critical thinking while maintaining constructive output.</p> <p>Category: Verification</p>"},{"location":"api/decorators/BreakAndBuild/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>breakdown</code> <code>enum</code> Primary approach for the critical breakdown phase <code>comprehensive</code> <code>intensity</code> <code>enum</code> How thorough and challenging the breakdown phase should be <code>thorough</code> <code>buildRatio</code> <code>number</code> Approximate ratio of build-up content to breakdown content (e.g., 2 means twice as much reconstruction as critique) <code>1</code>"},{"location":"api/decorators/BreakAndBuild/#breakdown-options","title":"Breakdown Options","text":"<ul> <li><code>weaknesses</code>: In the breakdown phase, focus primarily on identifying functional weaknesses, operational gaps, and practical limitations.</li> <li><code>assumptions</code>: In the breakdown phase, focus primarily on identifying and questioning underlying assumptions, unstated premises, and taken-for-granted elements.</li> <li><code>risks</code>: In the breakdown phase, focus primarily on identifying potential risks, failure modes, and negative scenarios.</li> <li><code>comprehensive</code>: In the breakdown phase, conduct a comprehensive critique that addresses weaknesses, assumptions, risks, and any other relevant vulnerabilities.</li> </ul>"},{"location":"api/decorators/BreakAndBuild/#intensity-options","title":"Intensity Options","text":"<ul> <li><code>mild</code>: Keep the breakdown phase constructive and moderate in tone, highlighting issues without overly aggressive critique.</li> <li><code>thorough</code>: Make the breakdown phase thorough and substantial, with detailed examination of significant issues.</li> <li><code>intense</code>: Make the breakdown phase rigorous and challenging, with incisive critique that explores fundamental flaws and serious concerns.</li> </ul>"},{"location":"api/decorators/BreakAndBuild/#examples","title":"Examples","text":""},{"location":"api/decorators/BreakAndBuild/#basic-break-and-build-analysis-of-a-business-concept","title":"Basic break and build analysis of a business concept","text":"<pre><code>+++BreakAndBuild\nEvaluate this startup idea: a subscription service for plant care.\n</code></pre> <p>First thoroughly critiques the plant care subscription concept by identifying weaknesses and risks, then reconstructs it with improvements and solutions of equal depth</p>"},{"location":"api/decorators/BreakAndBuild/#intense-breakdown-of-assumptions-with-substantial-rebuilding","title":"Intense breakdown of assumptions with substantial rebuilding","text":"<pre><code>+++BreakAndBuild(breakdown=assumptions, intensity=intense, buildRatio=2)\nAnalyze this public policy proposal for reducing urban congestion.\n</code></pre> <p>Delivers an intense critique focused specifically on the assumptions underlying the urban congestion proposal, followed by twice as much content reconstructing it with stronger foundations and improvements</p>"},{"location":"api/decorators/BreakAndBuild/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/BreakAndBuild/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Analyze this idea in two clear sections: 1. BREAK: {intensity} critique focusing on {breakdown}. Be specific about what doesn't work and why. 2. BUILD: Create an improved version that addresses all the problems you identified. Make this section approximately {buildRatio}x longer than the BREAK section.</p> <p>Clearly separate these sections with headings.</p> <p>Notes: This model may need explicit reminders to ensure that the build phase directly addresses the specific issues identified in the breakdown phase</p>"},{"location":"api/decorators/BreakAndBuild/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/BreakAndBuild/#basic-break-and-build-for-plant-care-subscription","title":"Basic break and build for plant care subscription","text":"<p>Original Prompt: <pre><code>Evaluate this startup idea: a subscription service for plant care.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please structure your response in two distinct phases: first, critically analyze and break down the idea by identifying flaws, assumptions, and weaknesses; then, build it back up with improvements, refinements, and solutions that address the identified issues. In the breakdown phase, conduct a comprehensive critique that addresses weaknesses, assumptions, risks, and any other relevant vulnerabilities. Make the breakdown phase thorough and substantial, with detailed examination of significant issues. Allocate approximately 1 times as much content to the constructive building phase as to the critical breakdown phase.\n\nEvaluate this startup idea: a subscription service for plant care.\n</code></pre></p>"},{"location":"api/decorators/BreakAndBuild/#intense-assumption-focused-analysis-of-urban-congestion-policy","title":"Intense assumption-focused analysis of urban congestion policy","text":"<p>Original Prompt: <pre><code>Analyze this public policy proposal for reducing urban congestion.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please structure your response in two distinct phases: first, critically analyze and break down the idea by identifying flaws, assumptions, and weaknesses; then, build it back up with improvements, refinements, and solutions that address the identified issues. In the breakdown phase, focus primarily on identifying and questioning underlying assumptions, unstated premises, and taken-for-granted elements. Make the breakdown phase rigorous and challenging, with incisive critique that explores fundamental flaws and serious concerns. Allocate approximately 2 times as much content to the constructive building phase as to the critical breakdown phase.\n\nAnalyze this public policy proposal for reducing urban congestion.\n</code></pre></p>"},{"location":"api/decorators/BreakAndBuild/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please structure your response in two distinct phases: first, critically analyze and break down the idea by identifying flaws, assumptions, and weaknesses; then, build it back up with improvements, refinements, and solutions that address the identified issues.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>breakdown</code>:</li> <li>When set to <code>weaknesses</code>: In the breakdown phase, focus primarily on identifying functional weaknesses, operational gaps, and practical limitations.</li> <li>When set to <code>assumptions</code>: In the breakdown phase, focus primarily on identifying and questioning underlying assumptions, unstated premises, and taken-for-granted elements.</li> <li>When set to <code>risks</code>: In the breakdown phase, focus primarily on identifying potential risks, failure modes, and negative scenarios.</li> <li> <p>When set to <code>comprehensive</code>: In the breakdown phase, conduct a comprehensive critique that addresses weaknesses, assumptions, risks, and any other relevant vulnerabilities.</p> </li> <li> <p><code>intensity</code>:</p> </li> <li>When set to <code>mild</code>: Keep the breakdown phase constructive and moderate in tone, highlighting issues without overly aggressive critique.</li> <li>When set to <code>thorough</code>: Make the breakdown phase thorough and substantial, with detailed examination of significant issues.</li> <li> <p>When set to <code>intense</code>: Make the breakdown phase rigorous and challenging, with incisive critique that explores fundamental flaws and serious concerns.</p> </li> <li> <p><code>buildRatio</code>:</p> </li> <li>Format: Allocate approximately {value} times as much content to the constructive building phase as to the critical breakdown phase.</li> </ul>"},{"location":"api/decorators/BreakAndBuild/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/BreakAndBuild/#related-decorators","title":"Related Decorators","text":"<ul> <li>RedTeam: Enhances BreakAndBuild RedTeam can strengthen the breakdown phase while BreakAndBuild ensures a constructive rebuilding follows the critique</li> <li>Steelman: Enhances BreakAndBuild Steelman can be applied to the build phase to create the strongest possible version after breaking down the original</li> <li>Prioritize: Enhances BreakAndBuild Prioritize can help focus both the breakdown and build phases on the most important aspects of the topic</li> </ul>"},{"location":"api/decorators/BugDiagnosis/","title":"BugDiagnosis Decorator","text":"<p>Diagnoses issues from error messages, logs, or behavioral symptoms.</p> <p>Category: Testing And Debugging</p>"},{"location":"api/decorators/BugDiagnosis/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>from</code> <code>enum</code> Source of diagnostic information <code>input-dependent</code> <code>depth</code> <code>enum</code> Thoroughness of analysis <code>comprehensive</code> <code>output</code> <code>enum</code> Type of output desired <code>both</code>"},{"location":"api/decorators/BugDiagnosis/#from-options","title":"From Options","text":"<ul> <li><code>stacktrace</code>: Focus your analysis on the provided stack trace to identify the error source.</li> <li><code>behavior</code>: Analyze the described unexpected behavior to determine what's causing it.</li> <li><code>logs</code>: Examine the log entries to identify patterns or anomalies that indicate the issue.</li> <li><code>core-dump</code>: Analyze the core dump information to identify memory issues or crashes.</li> <li><code>screenshot</code>: Examine the visual evidence to identify UI/UX issues or rendering problems.</li> <li><code>reproduction</code>: Analyze the steps to reproduce to identify where the process is failing.</li> </ul>"},{"location":"api/decorators/BugDiagnosis/#depth-options","title":"Depth Options","text":"<ul> <li><code>quick</code>: Provide a rapid assessment focusing on the most likely cause and solution.</li> <li><code>comprehensive</code>: Conduct a thorough analysis considering multiple potential causes and solutions, with detailed explanations.</li> </ul>"},{"location":"api/decorators/BugDiagnosis/#output-options","title":"Output Options","text":"<ul> <li><code>explanation</code>: Focus on explaining what's causing the issue and why it's happening.</li> <li><code>fix</code>: Focus on providing concrete steps to fix the issue.</li> <li><code>both</code>: Provide both a detailed explanation of the cause and specific steps to fix the issue.</li> </ul>"},{"location":"api/decorators/BugDiagnosis/#examples","title":"Examples","text":""},{"location":"api/decorators/BugDiagnosis/#diagnosing-a-javascript-typeerror-from-a-stack-trace","title":"Diagnosing a JavaScript TypeError from a stack trace","text":"<pre><code>+++BugDiagnosis(from=stacktrace, depth=comprehensive, output=both)\nI'm getting this error in production - \"TypeError: Cannot read property 'settings' of undefined\" at UserProfile.js:143.\n</code></pre> <p>The model will analyze the stack trace, provide a comprehensive explanation of why the TypeError is occurring (likely because an object is undefined when its 'settings' property is being accessed), and suggest specific fixes like adding null checks or ensuring the object is properly initialized.</p>"},{"location":"api/decorators/BugDiagnosis/#quick-diagnosis-of-unexpected-behavior","title":"Quick diagnosis of unexpected behavior","text":"<pre><code>+++BugDiagnosis(from=behavior, depth=quick, output=fix)\nWhen users click the submit button, the form clears but no confirmation message appears and the data isn't saved.\n</code></pre> <p>The model will provide a quick assessment focusing on the most likely causes for the form submission issue and offer specific code fixes or troubleshooting steps to resolve it.</p>"},{"location":"api/decorators/BugDiagnosis/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/BugDiagnosis/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: You are a debugging expert. Analyze this error or issue carefully and provide a diagnosis. Look for the root cause and suggest fixes.</p> <p>Notes: Less capable models may need more explicit instructions to perform thorough debugging analysis.</p>"},{"location":"api/decorators/BugDiagnosis/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/BugDiagnosis/#javascript-error-diagnosis","title":"JavaScript error diagnosis","text":"<p>Original Prompt: <pre><code>I'm getting this error in production - \"TypeError: Cannot read property 'settings' of undefined\" at UserProfile.js:143.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Analyze the provided information and diagnose the bug or issue. Focus your analysis on the provided stack trace to identify the error source. Conduct a thorough analysis considering multiple potential causes and solutions, with detailed explanations. Provide both a detailed explanation of the cause and specific steps to fix the issue.\n\nI'm getting this error in production - \"TypeError: Cannot read property 'settings' of undefined\" at UserProfile.js:143.\n</code></pre></p> <p>Notes: The decorator adds specific instructions for analyzing a JavaScript TypeError based on a stack trace.</p>"},{"location":"api/decorators/BugDiagnosis/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Analyze the provided information and diagnose the bug or issue. Identify the root cause and potential solutions.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>from</code>:</li> <li>When set to <code>stacktrace</code>: Focus your analysis on the provided stack trace to identify the error source.</li> <li>When set to <code>behavior</code>: Analyze the described unexpected behavior to determine what's causing it.</li> <li>When set to <code>logs</code>: Examine the log entries to identify patterns or anomalies that indicate the issue.</li> <li>When set to <code>core-dump</code>: Analyze the core dump information to identify memory issues or crashes.</li> <li>When set to <code>screenshot</code>: Examine the visual evidence to identify UI/UX issues or rendering problems.</li> <li> <p>When set to <code>reproduction</code>: Analyze the steps to reproduce to identify where the process is failing.</p> </li> <li> <p><code>depth</code>:</p> </li> <li>When set to <code>quick</code>: Provide a rapid assessment focusing on the most likely cause and solution.</li> <li> <p>When set to <code>comprehensive</code>: Conduct a thorough analysis considering multiple potential causes and solutions, with detailed explanations.</p> </li> <li> <p><code>output</code>:</p> </li> <li>When set to <code>explanation</code>: Focus on explaining what's causing the issue and why it's happening.</li> <li>When set to <code>fix</code>: Focus on providing concrete steps to fix the issue.</li> <li>When set to <code>both</code>: Provide both a detailed explanation of the cause and specific steps to fix the issue.</li> </ul>"},{"location":"api/decorators/BugDiagnosis/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: Simplify</li> <li>Compatible Models: gpt-4o, gpt-4-turbo, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/BugDiagnosis/#related-decorators","title":"Related Decorators","text":"<ul> <li>CodeReview: Enhances BugDiagnosis BugDiagnosis works well after CodeReview to first review code quality then diagnose specific issues.</li> <li>Simplify: Conflicts with BugDiagnosis Simplify may reduce the technical details needed for proper bug diagnosis.</li> </ul>"},{"location":"api/decorators/BuildOn/","title":"BuildOn Decorator","text":"<p>A meta-decorator that builds upon previous context or responses rather than starting from scratch. This enables continuity across interactions, allowing refinement, extension, or alteration of previous outputs in a coherent manner.</p> <p>Category: Meta</p>"},{"location":"api/decorators/BuildOn/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>reference</code> <code>enum</code> What to build upon from the previous context <code>last</code> <code>approach</code> <code>enum</code> How to build upon the referenced content <code>extend</code> <code>preserveStructure</code> <code>boolean</code> Whether to maintain the structure of the referenced content <code>True</code>"},{"location":"api/decorators/BuildOn/#reference-options","title":"Reference Options","text":"<ul> <li><code>last</code>: Build specifically upon the most recent response or context provided.</li> <li><code>specific</code>: Build upon the specific part of the previous context mentioned in the current prompt.</li> <li><code>all</code>: Consider all previous exchanges in the conversation when building your response.</li> </ul>"},{"location":"api/decorators/BuildOn/#approach-options","title":"Approach Options","text":"<ul> <li><code>extend</code>: Add new information, examples, or dimensions that extend and complement the existing content.</li> <li><code>refine</code>: Improve, correct, or enhance the existing content while preserving its core message.</li> <li><code>contrast</code>: Provide alternative perspectives or approaches that contrast with those in the existing content.</li> <li><code>synthesize</code>: Combine and integrate ideas from the existing content into a new cohesive whole.</li> </ul>"},{"location":"api/decorators/BuildOn/#examples","title":"Examples","text":""},{"location":"api/decorators/BuildOn/#basic-extension-of-the-previous-response","title":"Basic extension of the previous response","text":"<pre><code>+++BuildOn\nAdd more detail about implementation challenges.\n</code></pre> <p>Extends the previous response by adding more detailed information about implementation challenges while maintaining continuity</p>"},{"location":"api/decorators/BuildOn/#specific-refinement-with-structural-changes","title":"Specific refinement with structural changes","text":"<pre><code>+++BuildOn(reference=specific, approach=refine, preserveStructure=false)\nImprove the section on risk analysis with more quantitative measures.\n</code></pre> <p>Refines specifically the risk analysis section from the previous content with more quantitative measures, potentially restructuring it</p>"},{"location":"api/decorators/BuildOn/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/BuildOn/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Continue from {reference} response, building on what was already said. {approach} the existing content while {preserveStructure}. Make sure your response feels like a natural continuation rather than starting over.</p> <p>Notes: This model sometimes needs explicit reminders to fully incorporate previous context</p>"},{"location":"api/decorators/BuildOn/#gpt-4o","title":"gpt-4o","text":"<p>Instruction: Treating the {reference} as your foundation, please {approach} that content. {preserveStructure} Ensure your response maintains continuity with what came before.</p> <p>Notes: This model handles contextual building well but benefits from clear instructions about which aspects to preserve</p>"},{"location":"api/decorators/BuildOn/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/BuildOn/#basic-extension-of-previous-response","title":"Basic extension of previous response","text":"<p>Original Prompt: <pre><code>Add more detail about implementation challenges.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please build upon the previous context or response rather than starting from scratch, maintaining continuity across the interaction. Build specifically upon the most recent response or context provided. Add new information, examples, or dimensions that extend and complement the existing content. Maintain the same organizational structure, format, and overall framework as the referenced content.\n\nAdd more detail about implementation challenges.\n</code></pre></p>"},{"location":"api/decorators/BuildOn/#specific-refinement-with-structural-changes_1","title":"Specific refinement with structural changes","text":"<p>Original Prompt: <pre><code>Improve the section on risk analysis with more quantitative measures.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please build upon the previous context or response rather than starting from scratch, maintaining continuity across the interaction. Build upon the specific part of the previous context mentioned in the current prompt. Improve, correct, or enhance the existing content while preserving its core message. Feel free to reorganize or restructure the content in a new way that better serves the current purpose.\n\nImprove the section on risk analysis with more quantitative measures.\n</code></pre></p>"},{"location":"api/decorators/BuildOn/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please build upon the previous context or response rather than starting from scratch, maintaining continuity across the interaction.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>reference</code>:</li> <li>When set to <code>last</code>: Build specifically upon the most recent response or context provided.</li> <li>When set to <code>specific</code>: Build upon the specific part of the previous context mentioned in the current prompt.</li> <li> <p>When set to <code>all</code>: Consider all previous exchanges in the conversation when building your response.</p> </li> <li> <p><code>approach</code>:</p> </li> <li>When set to <code>extend</code>: Add new information, examples, or dimensions that extend and complement the existing content.</li> <li>When set to <code>refine</code>: Improve, correct, or enhance the existing content while preserving its core message.</li> <li>When set to <code>contrast</code>: Provide alternative perspectives or approaches that contrast with those in the existing content.</li> <li> <p>When set to <code>synthesize</code>: Combine and integrate ideas from the existing content into a new cohesive whole.</p> </li> <li> <p><code>preserveStructure</code>:</p> </li> <li>When set to <code>true</code>: Maintain the same organizational structure, format, and overall framework as the referenced content.</li> <li>When set to <code>false</code>: Feel free to reorganize or restructure the content in a new way that better serves the current purpose.</li> </ul>"},{"location":"api/decorators/BuildOn/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/BuildOn/#related-decorators","title":"Related Decorators","text":"<ul> <li>Refine: Enhances BuildOn BuildOn and Refine can work together to iteratively improve content over multiple interactions</li> <li>Contrast: Enhances BuildOn When using the contrast approach, BuildOn works well with decorators that provide multiple perspectives</li> </ul>"},{"location":"api/decorators/Bullet/","title":"Bullet Decorator","text":"<p>Formats the response as a bulleted list, making information easier to scan and digest. This decorator is ideal for presenting sequential steps, key points, or collections of related items in a clean, concise format.</p> <p>Category: Structure</p>"},{"location":"api/decorators/Bullet/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>style</code> <code>enum</code> The visual marker used for bullet points <code>dash</code> <code>indented</code> <code>boolean</code> Whether to allow nested, indented bullet points <code>True</code> <code>compact</code> <code>boolean</code> Whether to keep bullet points short and concise (true) or allow longer, more detailed points (false) <code>False</code>"},{"location":"api/decorators/Bullet/#style-options","title":"Style Options","text":"<ul> <li><code>dash</code>: Use dash markers (- ) for all bullet points.</li> <li><code>dot</code>: Use dot markers (\u2022 ) for all bullet points.</li> <li><code>arrow</code>: Use arrow markers (\u2192 ) for all bullet points.</li> <li><code>star</code>: Use star markers (\u2605 ) for all bullet points.</li> <li><code>plus</code>: Use plus markers (+ ) for all bullet points.</li> </ul>"},{"location":"api/decorators/Bullet/#examples","title":"Examples","text":""},{"location":"api/decorators/Bullet/#basic-bulleted-list-of-key-points","title":"Basic bulleted list of key points","text":"<pre><code>+++Bullet\nWhat are the main factors to consider when buying a laptop?\n</code></pre> <p>Presents key laptop purchasing factors as a bulleted list with dash markers</p>"},{"location":"api/decorators/Bullet/#compact-star-bullets-with-nesting-disabled","title":"Compact star bullets with nesting disabled","text":"<pre><code>+++Bullet(style=star, indented=false, compact=true)\nList the benefits of regular exercise.\n</code></pre> <p>Provides a flat list of concise, star-bulleted points about exercise benefits, with no nested sub-points</p>"},{"location":"api/decorators/Bullet/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Bullet/#standard-dash-bullets-with-indentation","title":"Standard dash bullets with indentation","text":"<p>Original Prompt: <pre><code>What are the main factors to consider when buying a laptop?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please format your response as a bulleted list to make the information easy to scan and digest. Use dash markers (- ) for all bullet points. Use hierarchical, indented sub-points where appropriate to show relationships between ideas. Allow detailed explanations in each bullet point when necessary.\n\nWhat are the main factors to consider when buying a laptop?\n</code></pre></p>"},{"location":"api/decorators/Bullet/#compact-star-bullets-with-no-indentation","title":"Compact star bullets with no indentation","text":"<p>Original Prompt: <pre><code>List the benefits of regular exercise.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please format your response as a bulleted list to make the information easy to scan and digest. Use star markers (\u2605 ) for all bullet points. Use a flat list structure with no indentation or sub-points. Keep each bullet point concise - ideally one line per point.\n\nList the benefits of regular exercise.\n</code></pre></p>"},{"location":"api/decorators/Bullet/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please format your response as a bulleted list to make the information easy to scan and digest.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>style</code>:</li> <li>When set to <code>dash</code>: Use dash markers (- ) for all bullet points.</li> <li>When set to <code>dot</code>: Use dot markers (\u2022 ) for all bullet points.</li> <li>When set to <code>arrow</code>: Use arrow markers (\u2192 ) for all bullet points.</li> <li>When set to <code>star</code>: Use star markers (\u2605 ) for all bullet points.</li> <li> <p>When set to <code>plus</code>: Use plus markers (+ ) for all bullet points.</p> </li> <li> <p><code>indented</code>:</p> </li> <li>When set to <code>true</code>: Use hierarchical, indented sub-points where appropriate to show relationships between ideas.</li> <li> <p>When set to <code>false</code>: Use a flat list structure with no indentation or sub-points.</p> </li> <li> <p><code>compact</code>:</p> </li> <li>When set to <code>true</code>: Keep each bullet point concise - ideally one line per point.</li> <li>When set to <code>false</code>: Allow detailed explanations in each bullet point when necessary.</li> </ul>"},{"location":"api/decorators/Bullet/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: OutputFormat</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Bullet/#related-decorators","title":"Related Decorators","text":"<ul> <li>OutputFormat: Conflicts with Bullet OutputFormat may specify a structure incompatible with bullet points</li> <li>Outline: Conflicts with Bullet Outline has its own structured format that conflicts with bullet points</li> </ul>"},{"location":"api/decorators/CICD/","title":"CICD Decorator","text":"<p>Designs continuous integration and delivery pipelines.</p> <p>Category: Devops And Infrastructure</p>"},{"location":"api/decorators/CICD/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>tool</code> <code>enum</code> CI/CD platform or tool <code>github-actions</code> <code>complexity</code> <code>enum</code> Pipeline sophistication <code>standard</code> <code>focus</code> <code>enum</code> Pipeline emphasis <code>balanced</code>"},{"location":"api/decorators/CICD/#tool-options","title":"Tool Options","text":"<ul> <li><code>github-actions</code>: Option: github-actions</li> <li><code>jenkins</code>: Option: jenkins</li> <li><code>gitlab-ci</code>: Option: gitlab-ci</li> <li><code>azure-devops</code>: Option: azure-devops</li> <li><code>circle-ci</code>: Option: circle-ci</li> <li><code>argocd</code>: Option: argocd</li> </ul>"},{"location":"api/decorators/CICD/#complexity-options","title":"Complexity Options","text":"<ul> <li><code>basic</code>: Create a simple pipeline with essential build and deploy steps.</li> <li><code>standard</code>: Implement a standard pipeline with testing, building, and deployment stages.</li> <li><code>comprehensive</code>: Design a comprehensive pipeline with extensive testing, security scanning, and multi-environment deployments.</li> <li><code>enterprise</code>: Architect an enterprise-grade pipeline with advanced features including canary deployments, automated rollbacks, and detailed compliance reporting.</li> </ul>"},{"location":"api/decorators/CICD/#focus-options","title":"Focus Options","text":"<ul> <li><code>speed</code>: Optimize the pipeline for fast feedback and rapid deployments.</li> <li><code>reliability</code>: Prioritize reliability with robust testing and validation steps.</li> <li><code>security</code>: Emphasize security with thorough scanning, vulnerability checks, and secure deployment practices.</li> <li><code>compliance</code>: Ensure compliance with industry standards and regulations through appropriate checks and documentation.</li> <li><code>balanced</code>: Balance speed, reliability, security, and compliance considerations.</li> </ul>"},{"location":"api/decorators/CICD/#examples","title":"Examples","text":""},{"location":"api/decorators/CICD/#basic-github-actions-pipeline-for-a-web-application","title":"Basic GitHub Actions pipeline for a web application","text":"<pre><code>+++CICD(tool=github-actions, complexity=basic, focus=speed)\n</code></pre> <p>Generates a simple GitHub Actions workflow optimized for quick feedback and deployment.</p>"},{"location":"api/decorators/CICD/#comprehensive-security-focused-jenkins-pipeline","title":"Comprehensive security-focused Jenkins pipeline","text":"<pre><code>+++CICD(tool=jenkins, complexity=comprehensive, focus=security)\n</code></pre> <p>Creates a detailed Jenkins pipeline configuration with extensive security scanning and testing.</p>"},{"location":"api/decorators/CICD/#enterprise-grade-gitlab-ci-pipeline-with-compliance-focus","title":"Enterprise-grade GitLab CI pipeline with compliance focus","text":"<pre><code>+++CICD(tool=gitlab-ci, complexity=enterprise, focus=compliance)\n</code></pre> <p>Designs an advanced GitLab CI/CD configuration with detailed compliance reporting and validation.</p>"},{"location":"api/decorators/CICD/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/CICD/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Create a CI/CD pipeline with these requirements:</p> <p>Notes: Simplified instruction for models with more limited context windows.</p>"},{"location":"api/decorators/CICD/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/CICD/#web-application-development","title":"Web application development","text":"<p>Original Prompt: <pre><code>Design a CI/CD pipeline for a financial services application with security scanning and compliance checks.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Design a CI/CD pipeline with the following specifications:\nUsing github-actions as the CI/CD platform\nDesign a comprehensive pipeline with extensive testing, security scanning, and multi-environment deployments.\nEmphasize security with thorough scanning, vulnerability checks, and secure deployment practices.\n\nDesign a CI/CD pipeline for a financial services application with security scanning and compliance checks.\n</code></pre></p> <p>Notes: The decorator adds specific CI/CD tool information and emphasizes security aspects for financial applications.</p>"},{"location":"api/decorators/CICD/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Design a CI/CD pipeline with the following specifications:</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>tool</code>:</li> <li> <p>Format: Using {value} as the CI/CD platform</p> </li> <li> <p><code>complexity</code>:</p> </li> <li>When set to <code>basic</code>: Create a simple pipeline with essential build and deploy steps.</li> <li>When set to <code>standard</code>: Implement a standard pipeline with testing, building, and deployment stages.</li> <li>When set to <code>comprehensive</code>: Design a comprehensive pipeline with extensive testing, security scanning, and multi-environment deployments.</li> <li> <p>When set to <code>enterprise</code>: Architect an enterprise-grade pipeline with advanced features including canary deployments, automated rollbacks, and detailed compliance reporting.</p> </li> <li> <p><code>focus</code>:</p> </li> <li>When set to <code>speed</code>: Optimize the pipeline for fast feedback and rapid deployments.</li> <li>When set to <code>reliability</code>: Prioritize reliability with robust testing and validation steps.</li> <li>When set to <code>security</code>: Emphasize security with thorough scanning, vulnerability checks, and secure deployment practices.</li> <li>When set to <code>compliance</code>: Ensure compliance with industry standards and regulations through appropriate checks and documentation.</li> <li>When set to <code>balanced</code>: Balance speed, reliability, security, and compliance considerations.</li> </ul>"},{"location":"api/decorators/CICD/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/CICD/#related-decorators","title":"Related Decorators","text":"<ul> <li>SecurityRequirements: Enhances CICD SecurityRequirements can provide detailed security specifications that complement the CICD decorator's security focus.</li> <li>ComplianceFramework: Enhances CICD ComplianceFramework can specify regulatory requirements that the CI/CD pipeline should address.</li> </ul>"},{"location":"api/decorators/Chain/","title":"Chain Decorator","text":"<p>A meta-decorator that applies multiple decorators in sequence, with each decorator processing the output of the previous one. This enables complex transformations by combining multiple simpler decorators in a pipeline.</p> <p>Category: Meta</p>"},{"location":"api/decorators/Chain/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>decorators</code> <code>array</code> Ordered list of decorators to apply in sequence <code>Required</code> <code>showSteps</code> <code>boolean</code> Whether to show intermediate outputs after each decorator in the chain <code>False</code> <code>stopOnFailure</code> <code>boolean</code> Whether to stop the chain if a decorator fails to apply correctly <code>True</code>"},{"location":"api/decorators/Chain/#examples","title":"Examples","text":""},{"location":"api/decorators/Chain/#basic-sequential-application-of-decorators","title":"Basic sequential application of decorators","text":"<pre><code>+++Chain(decorators=[StepByStep,Concise])\nExplain how neural networks learn.\n</code></pre> <p>First generates a step-by-step explanation of neural network learning, then applies conciseness to that output</p>"},{"location":"api/decorators/Chain/#complex-decorator-chain-with-visible-intermediate-steps","title":"Complex decorator chain with visible intermediate steps","text":"<pre><code>+++Chain(decorators=[Socratic,Academic,TreeOfThought], showSteps=true, stopOnFailure=false)\nDiscuss the ethics of autonomous weapons.\n</code></pre> <p>Shows the progression of applying Socratic questioning, then academic tone, then tree-of-thought reasoning to discuss autonomous weapons ethics</p>"},{"location":"api/decorators/Chain/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Chain/#gpt-4o","title":"gpt-4o","text":"<p>Instruction: Apply these decorators in sequence: {decorators}. Each decorator processes the output of the previous one. {showSteps} {stopOnFailure}</p> <p>Notes: This model handles decorator chains well, but benefits from clear instructions about showing steps or handling failures</p>"},{"location":"api/decorators/Chain/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Process this request through a series of steps. For each step, apply one of these decorators in this exact order: {decorators}. Make sure to follow the exact order and treat each output as input to the next decorator. {showSteps} {stopOnFailure}</p> <p>Notes: This model may need more explicit instructions to maintain the correct sequence of decorators</p>"},{"location":"api/decorators/Chain/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Chain/#sequential-application-of-step-by-step-and-concise-decorators","title":"Sequential application of step-by-step and concise decorators","text":"<p>Original Prompt: <pre><code>Explain how neural networks learn.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please process this request through a series of transformations, applying each decorator in sequence. Apply the following decorators in this exact order: StepByStep, Concise. Each decorator should process the output of the previous one. Only show the final output after all decorators have been applied. If any decorator in the chain cannot be applied correctly, stop the processing and explain the issue.\n\nExplain how neural networks learn.\n</code></pre></p>"},{"location":"api/decorators/Chain/#complex-decorator-chain-with-visible-intermediate-steps_1","title":"Complex decorator chain with visible intermediate steps","text":"<p>Original Prompt: <pre><code>Discuss the ethics of autonomous weapons.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please process this request through a series of transformations, applying each decorator in sequence. Apply the following decorators in this exact order: Socratic, Academic, TreeOfThought. Each decorator should process the output of the previous one. Show the intermediate outputs after each decorator in the chain, clearly labeling each step. Continue processing even if some decorators cannot be fully applied, making best efforts for each step.\n\nDiscuss the ethics of autonomous weapons.\n</code></pre></p>"},{"location":"api/decorators/Chain/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please process this request through a series of transformations, applying each decorator in sequence.</p> <p>Placement: prepend</p> <p>Composition Behavior: override</p> <p>Parameter Effects:</p> <ul> <li><code>decorators</code>:</li> <li> <p>Format: Apply the following decorators in this exact order: {value}. Each decorator should process the output of the previous one.</p> </li> <li> <p><code>showSteps</code>:</p> </li> <li>When set to <code>true</code>: Show the intermediate outputs after each decorator in the chain, clearly labeling each step.</li> <li> <p>When set to <code>false</code>: Only show the final output after all decorators have been applied.</p> </li> <li> <p><code>stopOnFailure</code>:</p> </li> <li>When set to <code>true</code>: If any decorator in the chain cannot be applied correctly, stop the processing and explain the issue.</li> <li>When set to <code>false</code>: Continue processing even if some decorators cannot be fully applied, making best efforts for each step.</li> </ul>"},{"location":"api/decorators/Chain/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Chain/#related-decorators","title":"Related Decorators","text":"<ul> <li>All: Enhances Chain Chain can work with any decorators, as it's designed to combine them in sequence</li> <li>Priority: Conflicts with Chain Priority and Chain represent different approaches to handling multiple decorators (parallel vs. sequential)</li> </ul>"},{"location":"api/decorators/ChangeVerification/","title":"ChangeVerification Decorator","text":"<p>Focuses on verifying that changes have the intended effect and don't introduce regressions.</p> <p>Category: Systematic Debugging</p>"},{"location":"api/decorators/ChangeVerification/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>type</code> <code>enum</code> Verification type <code>functionality</code> <code>method</code> <code>enum</code> Verification method <code>manual-testing</code> <code>coverage</code> <code>enum</code> Verification coverage <code>dependent-areas</code>"},{"location":"api/decorators/ChangeVerification/#type-options","title":"Type Options","text":"<ul> <li><code>functionality</code>: Focus on verifying the functional behavior of the changes.</li> <li><code>visual</code>: Focus on verifying the visual appearance and UI elements affected by the changes.</li> <li><code>performance</code>: Focus on verifying the performance impact of the changes.</li> <li><code>security</code>: Focus on verifying the security implications of the changes.</li> </ul>"},{"location":"api/decorators/ChangeVerification/#method-options","title":"Method Options","text":"<ul> <li><code>manual-testing</code>: Use manual testing procedures to verify the changes.</li> <li><code>automated-tests</code>: Use automated tests to verify the changes.</li> <li><code>dom-inspection</code>: Inspect the DOM structure to verify the changes.</li> <li><code>logging</code>: Use logging and debug output to verify the changes.</li> </ul>"},{"location":"api/decorators/ChangeVerification/#coverage-options","title":"Coverage Options","text":"<ul> <li><code>changed-only</code>: Verify only the specific components that were changed.</li> <li><code>dependent-areas</code>: Verify the changed components and any dependent areas that might be affected.</li> <li><code>comprehensive</code>: Perform a comprehensive verification across the entire system.</li> </ul>"},{"location":"api/decorators/ChangeVerification/#examples","title":"Examples","text":""},{"location":"api/decorators/ChangeVerification/#verifying-ui-updates-after-implementing-sorting-functionality","title":"Verifying UI updates after implementing sorting functionality","text":"<pre><code>+++ChangeVerification(type=functionality, method=dom-inspection, coverage=dependent-areas)\nVerify that the UI updates properly after implementing the sorting functionality. Check all elements that should respond to the sort action.\n</code></pre> <p>The model will provide guidance on how to verify the UI updates after implementing sorting functionality, focusing on functional aspects using DOM inspection and checking both the changed components and dependent areas.</p>"},{"location":"api/decorators/ChangeVerification/#verifying-performance-impact-of-database-query-optimization","title":"Verifying performance impact of database query optimization","text":"<pre><code>+++ChangeVerification(type=performance, method=automated-tests, coverage=comprehensive)\nVerify the performance impact of the new database query optimization.\n</code></pre> <p>The model will provide guidance on how to verify the performance impact of database query optimization using automated tests across the entire system.</p>"},{"location":"api/decorators/ChangeVerification/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/ChangeVerification/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Please verify that the changes work as expected and don't cause any problems. Check for {type} issues using {method} and focus on {coverage} areas.</p> <p>Notes: Simplified instruction for models with more limited context windows.</p>"},{"location":"api/decorators/ChangeVerification/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/ChangeVerification/#web-development","title":"Web development","text":"<p>Original Prompt: <pre><code>How should I test the new sorting feature?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Verify the changes to ensure they have the intended effect and don't introduce regressions. Focus on verifying the functional behavior of the changes. Use manual testing procedures to verify the changes. Verify the changed components and any dependent areas that might be affected.\n\nHow should I test the new sorting feature?\n</code></pre></p> <p>Notes: The decorator adds specific verification instructions based on the parameters.</p>"},{"location":"api/decorators/ChangeVerification/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Verify the changes to ensure they have the intended effect and don't introduce regressions.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>type</code>:</li> <li>When set to <code>functionality</code>: Focus on verifying the functional behavior of the changes.</li> <li>When set to <code>visual</code>: Focus on verifying the visual appearance and UI elements affected by the changes.</li> <li>When set to <code>performance</code>: Focus on verifying the performance impact of the changes.</li> <li> <p>When set to <code>security</code>: Focus on verifying the security implications of the changes.</p> </li> <li> <p><code>method</code>:</p> </li> <li>When set to <code>manual-testing</code>: Use manual testing procedures to verify the changes.</li> <li>When set to <code>automated-tests</code>: Use automated tests to verify the changes.</li> <li>When set to <code>dom-inspection</code>: Inspect the DOM structure to verify the changes.</li> <li> <p>When set to <code>logging</code>: Use logging and debug output to verify the changes.</p> </li> <li> <p><code>coverage</code>:</p> </li> <li>When set to <code>changed-only</code>: Verify only the specific components that were changed.</li> <li>When set to <code>dependent-areas</code>: Verify the changed components and any dependent areas that might be affected.</li> <li>When set to <code>comprehensive</code>: Perform a comprehensive verification across the entire system.</li> </ul>"},{"location":"api/decorators/ChangeVerification/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/ChangeVerification/#related-decorators","title":"Related Decorators","text":"<ul> <li>TestingStrategy: Enhances ChangeVerification ChangeVerification works well with TestingStrategy by focusing on verification aspects while TestingStrategy provides the overall testing approach.</li> <li>BugReport: Enhances ChangeVerification ChangeVerification can help identify issues that might need to be reported using BugReport.</li> </ul>"},{"location":"api/decorators/CiteSources/","title":"CiteSources Decorator","text":"<p>Structures the response to include citations for claims and information. This decorator enhances credibility by providing references to source material, enabling fact verification and further exploration of topics.</p> <p>Category: Verification</p>"},{"location":"api/decorators/CiteSources/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>style</code> <code>enum</code> The placement and format of citations within the response <code>inline</code> <code>format</code> <code>enum</code> The citation format to use <code>APA</code> <code>comprehensive</code> <code>boolean</code> Whether to cite every claim (true) or only major claims (false) <code>False</code>"},{"location":"api/decorators/CiteSources/#style-options","title":"Style Options","text":"<ul> <li><code>inline</code>: Add citations directly in the text using parenthetical references.</li> <li><code>footnote</code>: Use numbered footnotes for citations, with footnotes appearing at the bottom of relevant sections.</li> <li><code>endnote</code>: Use numbered endnotes for citations, with all notes appearing in a References section at the end.</li> </ul>"},{"location":"api/decorators/CiteSources/#format-options","title":"Format Options","text":"<ul> <li><code>APA</code>: Format citations according to APA style guidelines.</li> <li><code>MLA</code>: Format citations according to MLA style guidelines.</li> <li><code>Chicago</code>: Format citations according to Chicago Manual of Style guidelines.</li> <li><code>Harvard</code>: Format citations according to Harvard referencing style guidelines.</li> <li><code>IEEE</code>: Format citations according to IEEE citation style guidelines.</li> </ul>"},{"location":"api/decorators/CiteSources/#examples","title":"Examples","text":""},{"location":"api/decorators/CiteSources/#basic-inline-citations-for-a-scientific-topic","title":"Basic inline citations for a scientific topic","text":"<pre><code>+++CiteSources\nExplain the evidence for climate change.\n</code></pre> <p>Explains climate change with inline citations to scientific sources in APA format</p>"},{"location":"api/decorators/CiteSources/#comprehensive-footnote-citations-in-chicago-style","title":"Comprehensive footnote citations in Chicago style","text":"<pre><code>+++CiteSources(style=footnote, format=Chicago, comprehensive=true)\nDescribe the major events of World War II.\n</code></pre> <p>Delivers a detailed account of WWII with comprehensive footnote citations in Chicago style for all factual claims</p>"},{"location":"api/decorators/CiteSources/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/CiteSources/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Your response should include citations for the claims you make. For each significant fact or statistic, provide a citation to a credible source.</p> <p>Notes: This model may need more explicit instructions about proper citation formatting</p>"},{"location":"api/decorators/CiteSources/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/CiteSources/#standard-implementation-with-apa-inline-citations","title":"Standard implementation with APA inline citations","text":"<p>Original Prompt: <pre><code>Explain the evidence for climate change.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please include citations for factual claims in your response to enhance credibility and enable verification. Add citations directly in the text using parenthetical references. Format citations according to APA style guidelines. Only cite major claims, specialized knowledge, statistics, and direct quotes.\n\nExplain the evidence for climate change.\n</code></pre></p>"},{"location":"api/decorators/CiteSources/#comprehensive-chicago-footnotes","title":"Comprehensive Chicago footnotes","text":"<p>Original Prompt: <pre><code>Describe the major events of World War II.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please include citations for factual claims in your response to enhance credibility and enable verification. Use numbered footnotes for citations, with footnotes appearing at the bottom of relevant sections. Format citations according to Chicago Manual of Style guidelines. Cite every factual claim, including commonly known facts.\n\nDescribe the major events of World War II.\n</code></pre></p>"},{"location":"api/decorators/CiteSources/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please include citations for factual claims in your response to enhance credibility and enable verification.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>style</code>:</li> <li>When set to <code>inline</code>: Add citations directly in the text using parenthetical references.</li> <li>When set to <code>footnote</code>: Use numbered footnotes for citations, with footnotes appearing at the bottom of relevant sections.</li> <li> <p>When set to <code>endnote</code>: Use numbered endnotes for citations, with all notes appearing in a References section at the end.</p> </li> <li> <p><code>format</code>:</p> </li> <li>When set to <code>APA</code>: Format citations according to APA style guidelines.</li> <li>When set to <code>MLA</code>: Format citations according to MLA style guidelines.</li> <li>When set to <code>Chicago</code>: Format citations according to Chicago Manual of Style guidelines.</li> <li>When set to <code>Harvard</code>: Format citations according to Harvard referencing style guidelines.</li> <li> <p>When set to <code>IEEE</code>: Format citations according to IEEE citation style guidelines.</p> </li> <li> <p><code>comprehensive</code>:</p> </li> <li>When set to <code>true</code>: Cite every factual claim, including commonly known facts.</li> <li>When set to <code>false</code>: Only cite major claims, specialized knowledge, statistics, and direct quotes.</li> </ul>"},{"location":"api/decorators/CiteSources/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/CiteSources/#related-decorators","title":"Related Decorators","text":"<ul> <li>FactCheck: Enhances CiteSources CiteSources pairs well with FactCheck for highly reliable information</li> <li>Concise: Conflicts with CiteSources Comprehensive citations may conflict with concise output requirements</li> </ul>"},{"location":"api/decorators/CodeAudit/","title":"CodeAudit Decorator","text":"<p>Requests an audit of existing code to identify issues before making changes.</p> <p>Category: Systematic Debugging</p>"},{"location":"api/decorators/CodeAudit/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>scope</code> <code>enum</code> Audit scope <code>component</code> <code>focus</code> <code>enum</code> Audit focus areas <code>all</code> <code>output</code> <code>enum</code> Audit output format <code>detailed</code>"},{"location":"api/decorators/CodeAudit/#scope-options","title":"Scope Options","text":"<ul> <li><code>function</code>: Focus your audit on the specific function provided.</li> <li><code>component</code>: Examine the entire component for issues.</li> <li><code>module</code>: Conduct a thorough audit of the complete module.</li> <li><code>system</code>: Perform a system-wide audit to identify issues across all components.</li> <li><code>specific-issue</code>: Focus your audit specifically on the issue described.</li> </ul>"},{"location":"api/decorators/CodeAudit/#focus-options","title":"Focus Options","text":"<ul> <li><code>bugs</code>: Concentrate on identifying logical errors, edge cases, and potential runtime exceptions.</li> <li><code>performance</code>: Analyze for performance bottlenecks, inefficient algorithms, and resource usage issues.</li> <li><code>security</code>: Identify security vulnerabilities, injection risks, and data protection concerns.</li> <li><code>maintainability</code>: Evaluate code quality, documentation, and adherence to best practices.</li> <li><code>all</code>: Examine all aspects including bugs, performance, security, and maintainability.</li> </ul>"},{"location":"api/decorators/CodeAudit/#output-options","title":"Output Options","text":"<ul> <li><code>summary</code>: Provide a concise summary of the key issues found.</li> <li><code>detailed</code>: Deliver a comprehensive report with detailed explanations of each issue.</li> <li><code>categorized</code>: Organize findings by category (bugs, performance, security, etc.).</li> <li><code>prioritized</code>: Present issues in order of importance, with critical issues first.</li> </ul>"},{"location":"api/decorators/CodeAudit/#examples","title":"Examples","text":""},{"location":"api/decorators/CodeAudit/#basic-code-audit-for-a-payment-module","title":"Basic code audit for a payment module","text":"<pre><code>+++CodeAudit(scope=module, focus=bugs, output=prioritized)\nAudit the payment processing module to identify potential bugs and issues. Provide a prioritized list of problems found.\n</code></pre> <p>The model will perform a thorough audit of the payment processing module, focusing specifically on bugs and logical errors, and will present the findings as a prioritized list with the most critical issues first.</p>"},{"location":"api/decorators/CodeAudit/#security-focused-audit-of-a-component","title":"Security-focused audit of a component","text":"<pre><code>+++CodeAudit(scope=component, focus=security, output=detailed)\nReview this authentication component for security vulnerabilities.\n</code></pre> <p>The model will examine the authentication component with a focus on security vulnerabilities, providing a detailed report of all potential security issues found.</p>"},{"location":"api/decorators/CodeAudit/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/CodeAudit/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Analyze this code carefully before suggesting any changes. Look for issues related to {focus} within the {scope} and provide a {output} report.</p> <p>Notes: Simplified instruction for models with more limited context windows.</p>"},{"location":"api/decorators/CodeAudit/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/CodeAudit/#code-review-for-a-payment-processing-system","title":"Code review for a payment processing system","text":"<p>Original Prompt: <pre><code>Refactor this payment processing code to improve performance.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Before making any changes, please perform a code audit to identify potential issues. Conduct a thorough audit of the complete module. Analyze for performance bottlenecks, inefficient algorithms, and resource usage issues. Deliver a comprehensive report with detailed explanations of each issue.\n\nRefactor this payment processing code to improve performance.\n</code></pre></p> <p>Notes: The decorator adds instructions to first audit the code before proceeding with the requested refactoring.</p>"},{"location":"api/decorators/CodeAudit/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Before making any changes, please perform a code audit to identify potential issues.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>scope</code>:</li> <li>When set to <code>function</code>: Focus your audit on the specific function provided.</li> <li>When set to <code>component</code>: Examine the entire component for issues.</li> <li>When set to <code>module</code>: Conduct a thorough audit of the complete module.</li> <li>When set to <code>system</code>: Perform a system-wide audit to identify issues across all components.</li> <li> <p>When set to <code>specific-issue</code>: Focus your audit specifically on the issue described.</p> </li> <li> <p><code>focus</code>:</p> </li> <li>When set to <code>bugs</code>: Concentrate on identifying logical errors, edge cases, and potential runtime exceptions.</li> <li>When set to <code>performance</code>: Analyze for performance bottlenecks, inefficient algorithms, and resource usage issues.</li> <li>When set to <code>security</code>: Identify security vulnerabilities, injection risks, and data protection concerns.</li> <li>When set to <code>maintainability</code>: Evaluate code quality, documentation, and adherence to best practices.</li> <li> <p>When set to <code>all</code>: Examine all aspects including bugs, performance, security, and maintainability.</p> </li> <li> <p><code>output</code>:</p> </li> <li>When set to <code>summary</code>: Provide a concise summary of the key issues found.</li> <li>When set to <code>detailed</code>: Deliver a comprehensive report with detailed explanations of each issue.</li> <li>When set to <code>categorized</code>: Organize findings by category (bugs, performance, security, etc.).</li> <li>When set to <code>prioritized</code>: Present issues in order of importance, with critical issues first.</li> </ul>"},{"location":"api/decorators/CodeAudit/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: QuickFix</li> <li>Compatible Models: gpt-4o, gpt-4-turbo, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/CodeAudit/#related-decorators","title":"Related Decorators","text":"<ul> <li>CodeRefactor: Enhances CodeAudit CodeAudit works well before CodeRefactor to ensure issues are identified before making changes.</li> <li>QuickFix: Conflicts with CodeAudit CodeAudit's thorough analysis approach conflicts with QuickFix's rapid solution focus.</li> </ul>"},{"location":"api/decorators/CodeContext/","title":"CodeContext Decorator","text":"<p>Provides information about the existing codebase context to ensure proper integration.</p> <p>Category: Implementation-Focused</p>"},{"location":"api/decorators/CodeContext/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>project</code> <code>string</code> Project type or framework <code>inferred</code> <code>patterns</code> <code>string</code> Established code patterns to follow <code>inferred</code> <code>conventions</code> <code>enum</code> Naming and style conventions <code>language-standard</code>"},{"location":"api/decorators/CodeContext/#conventions-options","title":"Conventions Options","text":"<ul> <li><code>camelCase</code>: Use camelCase naming convention (e.g., myVariable, calculateTotal)</li> <li><code>snake_case</code>: Use snake_case naming convention (e.g., my_variable, calculate_total)</li> <li><code>PascalCase</code>: Use PascalCase naming convention (e.g., MyVariable, CalculateTotal)</li> <li><code>kebab-case</code>: Use kebab-case naming convention (e.g., my-variable, calculate-total)</li> <li><code>custom</code>: Follow the custom naming conventions established in the project</li> </ul>"},{"location":"api/decorators/CodeContext/#examples","title":"Examples","text":""},{"location":"api/decorators/CodeContext/#react-hooks-implementation-with-camelcase-convention","title":"React hooks implementation with camelCase convention","text":"<pre><code>+++CodeContext(project=react, patterns=hooks, conventions=camelCase)\nImplement a shopping cart hook that matches our existing custom hooks pattern.\n</code></pre> <p>The model will implement a React hook using camelCase naming conventions and following standard React hooks patterns.</p>"},{"location":"api/decorators/CodeContext/#python-backend-with-snake_case-convention","title":"Python backend with snake_case convention","text":"<pre><code>+++CodeContext(project=django, patterns=MVT, conventions=snake_case)\nCreate a view for user authentication.\n</code></pre> <p>The model will implement a Django view following the Model-View-Template pattern with snake_case naming conventions.</p>"},{"location":"api/decorators/CodeContext/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/CodeContext/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Please follow these code context guidelines for your implementation:</p> <p>Notes: More explicit instruction for models with less context understanding.</p>"},{"location":"api/decorators/CodeContext/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/CodeContext/#react-application","title":"React application","text":"<p>Original Prompt: <pre><code>Implement a shopping cart hook that matches our existing custom hooks pattern.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Consider the following code context when implementing the solution:\nProject/Framework: react\nDesign Patterns: hooks\nNaming Convention: Use camelCase naming convention (e.g., myVariable, calculateTotal)\n\nImplement a shopping cart hook that matches our existing custom hooks pattern.\n</code></pre></p> <p>Notes: The decorator adds context about the React framework, hooks pattern, and camelCase convention to guide the implementation.</p>"},{"location":"api/decorators/CodeContext/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Consider the following code context when implementing the solution:</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>project</code>:</li> <li> <p>Format: Project/Framework: {value}</p> </li> <li> <p><code>patterns</code>:</p> </li> <li> <p>Format: Design Patterns: {value}</p> </li> <li> <p><code>conventions</code>:</p> </li> <li>When set to <code>camelCase</code>: Use camelCase naming convention (e.g., myVariable, calculateTotal)</li> <li>When set to <code>snake_case</code>: Use snake_case naming convention (e.g., my_variable, calculate_total)</li> <li>When set to <code>PascalCase</code>: Use PascalCase naming convention (e.g., MyVariable, CalculateTotal)</li> <li>When set to <code>kebab-case</code>: Use kebab-case naming convention (e.g., my-variable, calculate-total)</li> <li>When set to <code>custom</code>: Follow the custom naming conventions established in the project</li> <li>Format: Naming Convention: {value}</li> </ul>"},{"location":"api/decorators/CodeContext/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/CodeContext/#related-decorators","title":"Related Decorators","text":"<ul> <li>CodeReview: Enhances CodeContext CodeContext provides the baseline standards that CodeReview can check against.</li> <li>LanguageSpecific: Enhances CodeContext CodeContext complements language-specific guidance by providing project-level conventions.</li> </ul>"},{"location":"api/decorators/CodeGen/","title":"CodeGen Decorator","text":"<p>Generates code snippets or complete solutions with configurable style and documentation level.</p> <p>Category: Code Generation</p>"},{"location":"api/decorators/CodeGen/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>language</code> <code>enum</code> Programming language to generate code in <code>inferred</code> <code>style</code> <code>enum</code> Programming paradigm or coding style to use <code>oop</code> <code>comments</code> <code>enum</code> Level of code documentation to include <code>moderate</code> <code>error_handling</code> <code>enum</code> Level of error handling to include <code>basic</code>"},{"location":"api/decorators/CodeGen/#language-options","title":"Language Options","text":"<ul> <li><code>python</code>: Option: python</li> <li><code>javascript</code>: Option: javascript</li> <li><code>typescript</code>: Option: typescript</li> <li><code>java</code>: Option: java</li> <li><code>csharp</code>: Option: csharp</li> <li><code>go</code>: Option: go</li> <li><code>rust</code>: Option: rust</li> </ul>"},{"location":"api/decorators/CodeGen/#style-options","title":"Style Options","text":"<ul> <li><code>functional</code>: Write the code using functional programming principles, emphasizing immutability and pure functions.</li> <li><code>oop</code>: Structure the code using object-oriented programming principles with appropriate classes and inheritance.</li> <li><code>procedural</code>: Write procedural code with a focus on sequential operations and procedures.</li> <li><code>reactive</code>: Implement using reactive programming patterns with event streams and observers.</li> <li><code>declarative</code>: Use a declarative approach focusing on what the program should accomplish rather than how.</li> </ul>"},{"location":"api/decorators/CodeGen/#comments-options","title":"Comments Options","text":"<ul> <li><code>minimal</code>: Include only essential comments for complex logic.</li> <li><code>moderate</code>: Add comments for functions, classes, and non-obvious logic.</li> <li><code>extensive</code>: Provide comprehensive documentation including function descriptions, parameter explanations, and implementation details.</li> </ul>"},{"location":"api/decorators/CodeGen/#error_handling-options","title":"Error_Handling Options","text":"<ul> <li><code>none</code>: Focus on the happy path without explicit error handling.</li> <li><code>basic</code>: Include basic error handling for common edge cases.</li> <li><code>comprehensive</code>: Implement thorough error handling, input validation, and appropriate error messages.</li> </ul>"},{"location":"api/decorators/CodeGen/#examples","title":"Examples","text":""},{"location":"api/decorators/CodeGen/#generate-typescript-code-with-functional-programming-style","title":"Generate TypeScript code with functional programming style","text":"<pre><code>+++CodeGen(language=typescript, style=functional, comments=moderate)\n</code></pre> <p>Produces TypeScript code using functional programming paradigms with moderate documentation.</p>"},{"location":"api/decorators/CodeGen/#generate-python-code-with-comprehensive-error-handling","title":"Generate Python code with comprehensive error handling","text":"<pre><code>+++CodeGen(language=python, error_handling=comprehensive)\n</code></pre> <p>Produces Python code with thorough error handling, input validation, and appropriate error messages.</p>"},{"location":"api/decorators/CodeGen/#generate-java-code-with-minimal-comments","title":"Generate Java code with minimal comments","text":"<pre><code>+++CodeGen(language=java, comments=minimal)\n</code></pre> <p>Produces Java code with only essential comments for complex logic.</p>"},{"location":"api/decorators/CodeGen/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/CodeGen/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Write code to solve this problem. Use {language} and follow {style} programming style with {comments} comments and {error_handling} error handling.</p> <p>Notes: Simplified instruction format works better with gpt-4 Turbo's context window limitations.</p>"},{"location":"api/decorators/CodeGen/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/CodeGen/#typescript-function-implementation","title":"TypeScript function implementation","text":"<p>Original Prompt: <pre><code>Create a utility function that calculates the total price of items in a shopping cart with discounts applied.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Generate code that solves the following problem. Make sure the solution is correct, efficient, and follows best practices. Use typescript as the programming language. Write the code using functional programming principles, emphasizing immutability and pure functions. Add comments for functions, classes, and non-obvious logic. Include basic error handling for common edge cases.\n\nCreate a utility function that calculates the total price of items in a shopping cart with discounts applied.\n</code></pre></p> <p>Notes: The decorator adds specific instructions about language, style, comments, and error handling before the original prompt.</p>"},{"location":"api/decorators/CodeGen/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Generate code that solves the following problem. Make sure the solution is correct, efficient, and follows best practices.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>language</code>:</li> <li> <p>Format: Use {value} as the programming language.</p> </li> <li> <p><code>style</code>:</p> </li> <li>When set to <code>functional</code>: Write the code using functional programming principles, emphasizing immutability and pure functions.</li> <li>When set to <code>oop</code>: Structure the code using object-oriented programming principles with appropriate classes and inheritance.</li> <li>When set to <code>procedural</code>: Write procedural code with a focus on sequential operations and procedures.</li> <li>When set to <code>reactive</code>: Implement using reactive programming patterns with event streams and observers.</li> <li> <p>When set to <code>declarative</code>: Use a declarative approach focusing on what the program should accomplish rather than how.</p> </li> <li> <p><code>comments</code>:</p> </li> <li>When set to <code>minimal</code>: Include only essential comments for complex logic.</li> <li>When set to <code>moderate</code>: Add comments for functions, classes, and non-obvious logic.</li> <li> <p>When set to <code>extensive</code>: Provide comprehensive documentation including function descriptions, parameter explanations, and implementation details.</p> </li> <li> <p><code>error_handling</code>:</p> </li> <li>When set to <code>none</code>: Focus on the happy path without explicit error handling.</li> <li>When set to <code>basic</code>: Include basic error handling for common edge cases.</li> <li>When set to <code>comprehensive</code>: Implement thorough error handling, input validation, and appropriate error messages.</li> </ul>"},{"location":"api/decorators/CodeGen/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 1.5.0</li> </ul>"},{"location":"api/decorators/CodeGen/#related-decorators","title":"Related Decorators","text":"<ul> <li>Reasoning: Enhances CodeGen Using Reasoning before CodeGen can help break down complex problems before code implementation.</li> <li>Concise: Conflicts with CodeGen Concise may reduce the level of comments and documentation that CodeGen is instructed to produce.</li> </ul>"},{"location":"api/decorators/CodeReview/","title":"CodeReview Decorator","text":"<p>Performs a review of code quality, identifying issues and suggesting improvements.</p> <p>Category: Testing And Debugging</p>"},{"location":"api/decorators/CodeReview/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>focus</code> <code>enum</code> Aspects to focus on during review <code>all</code> <code>strictness</code> <code>enum</code> Level of scrutiny <code>standard</code> <code>format</code> <code>enum</code> Review output format <code>detailed</code>"},{"location":"api/decorators/CodeReview/#focus-options","title":"Focus Options","text":"<ul> <li><code>security</code>: Focus specifically on security vulnerabilities, input validation, authentication issues, and potential exploits.</li> <li><code>performance</code>: Focus specifically on performance bottlenecks, inefficient algorithms, and optimization opportunities.</li> <li><code>best-practices</code>: Focus specifically on adherence to coding standards, design patterns, and industry best practices.</li> <li><code>maintainability</code>: Focus specifically on code readability, documentation, modularity, and long-term maintenance concerns.</li> <li><code>all</code>: Review all aspects including security, performance, best practices, and maintainability.</li> </ul>"},{"location":"api/decorators/CodeReview/#strictness-options","title":"Strictness Options","text":"<ul> <li><code>relaxed</code>: Apply a relaxed level of scrutiny, focusing only on major issues.</li> <li><code>standard</code>: Apply a standard level of scrutiny, balancing thoroughness with pragmatism.</li> <li><code>strict</code>: Apply a strict level of scrutiny, identifying all potential issues regardless of severity.</li> </ul>"},{"location":"api/decorators/CodeReview/#format-options","title":"Format Options","text":"<ul> <li><code>comment-style</code>: Present the review as code comments that could be directly added to the source.</li> <li><code>summary</code>: Present a concise summary of findings with key points only.</li> <li><code>detailed</code>: Present a comprehensive review with sections for different types of issues and detailed explanations.</li> <li><code>inline</code>: Present the review as inline comments within the code itself.</li> </ul>"},{"location":"api/decorators/CodeReview/#examples","title":"Examples","text":""},{"location":"api/decorators/CodeReview/#security-focused-code-review-with-strict-scrutiny","title":"Security-focused code review with strict scrutiny","text":"<pre><code>+++CodeReview(focus=security, strictness=strict, format=detailed)\nReview this authentication controller for security issues.\n</code></pre> <p>A detailed security-focused code review that identifies potential vulnerabilities, authentication issues, and security best practices violations with a high level of scrutiny.</p>"},{"location":"api/decorators/CodeReview/#performance-review-with-standard-scrutiny-and-summary-format","title":"Performance review with standard scrutiny and summary format","text":"<pre><code>+++CodeReview(focus=performance, strictness=standard, format=summary)\nReview this data processing function for performance issues.\n</code></pre> <p>A summary of performance-related issues in the code, including potential bottlenecks and optimization opportunities with a balanced level of scrutiny.</p>"},{"location":"api/decorators/CodeReview/#comprehensive-code-review-with-default-parameters","title":"Comprehensive code review with default parameters","text":"<pre><code>+++CodeReview\nReview this utility class implementation.\n</code></pre> <p>A detailed review covering all aspects (security, performance, best practices, maintainability) with standard scrutiny level.</p>"},{"location":"api/decorators/CodeReview/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/CodeReview/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: You are a code reviewer. Analyze the following code and provide feedback according to these guidelines:</p> <p>Notes: For smaller models, more explicit instructions about the review process may be needed.</p>"},{"location":"api/decorators/CodeReview/#claude-3-7-sonnet-latest","title":"claude-3-7-sonnet-latest","text":"<p>Instruction: Perform a thorough code review on the provided code. Identify issues and suggest improvements based on the following criteria:</p> <p>Notes: Claude models may benefit from more structured review instructions.</p>"},{"location":"api/decorators/CodeReview/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/CodeReview/#security-review-of-authentication-code","title":"Security review of authentication code","text":"<p>Original Prompt: <pre><code>Review this authentication controller code:\n\nfunction login(username, password) {\n  if(username === 'admin' &amp;&amp; password === 'password123') {\n    return generateToken(username);\n  }\n  return null;\n}\n</code></pre></p> <p>Transformed Prompt: <pre><code>Perform a code review on the provided code. Identify issues and suggest improvements. Focus specifically on security vulnerabilities, input validation, authentication issues, and potential exploits. Apply a strict level of scrutiny, identifying all potential issues regardless of severity. Present a comprehensive review with sections for different types of issues and detailed explanations.\n\nReview this authentication controller code:\n\nfunction login(username, password) {\n  if(username === 'admin' &amp;&amp; password === 'password123') {\n    return generateToken(username);\n  }\n  return null;\n}\n</code></pre></p> <p>Notes: The decorator adds specific instructions for a security-focused code review with strict scrutiny and detailed output format.</p>"},{"location":"api/decorators/CodeReview/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Perform a code review on the provided code. Identify issues and suggest improvements.</p> <p>Placement: prepend</p> <p>Composition Behavior: override</p> <p>Parameter Effects:</p> <ul> <li><code>focus</code>:</li> <li>When set to <code>security</code>: Focus specifically on security vulnerabilities, input validation, authentication issues, and potential exploits.</li> <li>When set to <code>performance</code>: Focus specifically on performance bottlenecks, inefficient algorithms, and optimization opportunities.</li> <li>When set to <code>best-practices</code>: Focus specifically on adherence to coding standards, design patterns, and industry best practices.</li> <li>When set to <code>maintainability</code>: Focus specifically on code readability, documentation, modularity, and long-term maintenance concerns.</li> <li> <p>When set to <code>all</code>: Review all aspects including security, performance, best practices, and maintainability.</p> </li> <li> <p><code>strictness</code>:</p> </li> <li>When set to <code>relaxed</code>: Apply a relaxed level of scrutiny, focusing only on major issues.</li> <li>When set to <code>standard</code>: Apply a standard level of scrutiny, balancing thoroughness with pragmatism.</li> <li> <p>When set to <code>strict</code>: Apply a strict level of scrutiny, identifying all potential issues regardless of severity.</p> </li> <li> <p><code>format</code>:</p> </li> <li>When set to <code>comment-style</code>: Present the review as code comments that could be directly added to the source.</li> <li>When set to <code>summary</code>: Present a concise summary of findings with key points only.</li> <li>When set to <code>detailed</code>: Present a comprehensive review with sections for different types of issues and detailed explanations.</li> <li>When set to <code>inline</code>: Present the review as inline comments within the code itself.</li> </ul>"},{"location":"api/decorators/CodeReview/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo, claude-3-7-sonnet-latest, llama-3.2, palm-2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/CodeReview/#related-decorators","title":"Related Decorators","text":"<ul> <li>ExplainCode: Enhances CodeReview CodeReview can be used after ExplainCode to first understand the code and then review it.</li> <li>FixCode: Enhances CodeReview CodeReview can be used before FixCode to identify issues that need fixing.</li> </ul>"},{"location":"api/decorators/CodeStandards/","title":"CodeStandards Decorator","text":"<p>Applies coding standards and best practices.</p> <p>Category: Developer Workflow</p>"},{"location":"api/decorators/CodeStandards/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>standard</code> <code>enum</code> Code standard type <code>language-specific</code> <code>strictness</code> <code>enum</code> Enforcement level <code>required</code> <code>focus</code> <code>enum</code> Areas of emphasis <code>all</code>"},{"location":"api/decorators/CodeStandards/#standard-options","title":"Standard Options","text":"<ul> <li><code>company</code>: Apply company-specific coding standards and conventions.</li> <li><code>language-specific</code>: Follow the idiomatic standards and best practices specific to the programming language.</li> <li><code>custom</code>: Apply the custom coding standards as specified.</li> <li><code>industry</code>: Follow industry-standard coding practices and patterns.</li> </ul>"},{"location":"api/decorators/CodeStandards/#strictness-options","title":"Strictness Options","text":"<ul> <li><code>recommended</code>: Apply standards as recommendations, allowing for reasonable exceptions.</li> <li><code>required</code>: Enforce standards as requirements with minimal exceptions.</li> <li><code>strict</code>: Strictly enforce all standards with no exceptions.</li> </ul>"},{"location":"api/decorators/CodeStandards/#focus-options","title":"Focus Options","text":"<ul> <li><code>formatting</code>: Focus on code formatting, indentation, and style.</li> <li><code>naming</code>: Focus on naming conventions for variables, functions, and classes.</li> <li><code>patterns</code>: Focus on design patterns and architectural standards.</li> <li><code>security</code>: Focus on security best practices and vulnerability prevention.</li> <li><code>all</code>: Apply comprehensive standards covering formatting, naming, patterns, and security.</li> </ul>"},{"location":"api/decorators/CodeStandards/#examples","title":"Examples","text":""},{"location":"api/decorators/CodeStandards/#applying-javascript-standards-to-react-code","title":"Applying JavaScript standards to React code","text":"<pre><code>+++CodeStandards(standard=language-specific, strictness=required, focus=all)\nApply JavaScript best practices to this React component following Airbnb style guide.\n</code></pre> <p>The model will apply JavaScript-specific best practices to the React component, following required standards across all focus areas.</p>"},{"location":"api/decorators/CodeStandards/#focusing-on-security-standards","title":"Focusing on security standards","text":"<pre><code>+++CodeStandards(standard=industry, strictness=strict, focus=security)\nReview this Node.js API endpoint for security issues.\n</code></pre> <p>The model will strictly apply industry security standards to the Node.js API endpoint code.</p>"},{"location":"api/decorators/CodeStandards/#using-company-standards-for-formatting","title":"Using company standards for formatting","text":"<pre><code>+++CodeStandards(standard=company, focus=formatting)\nFormat this Python code according to our company standards.\n</code></pre> <p>The model will apply company-specific formatting standards to the Python code with the default required strictness.</p>"},{"location":"api/decorators/CodeStandards/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/CodeStandards/#gpt-4o","title":"gpt-4o","text":"<p>Instruction: Apply coding standards and best practices to the code. Follow established conventions for readability and maintainability. Be specific about which standards you're applying and why.</p> <p>Notes: gpt-4o can handle more detailed explanations of standards application.</p>"},{"location":"api/decorators/CodeStandards/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Apply coding standards and best practices to the code. Follow established conventions for readability and maintainability.</p> <p>Notes: Keep instructions more concise for gpt-4.</p>"},{"location":"api/decorators/CodeStandards/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/CodeStandards/#javascriptreact-development","title":"JavaScript/React development","text":"<p>Original Prompt: <pre><code>Refactor this React component to be more efficient.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Apply coding standards and best practices to the code. Follow established conventions for readability and maintainability. Follow the idiomatic standards and best practices specific to the programming language. Enforce standards as requirements with minimal exceptions. Apply comprehensive standards covering formatting, naming, patterns, and security.\n\nRefactor this React component to be more efficient.\n</code></pre></p> <p>Notes: The decorator adds specific guidance about JavaScript and React best practices.</p>"},{"location":"api/decorators/CodeStandards/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Apply coding standards and best practices to the code. Follow established conventions for readability and maintainability.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>standard</code>:</li> <li>When set to <code>company</code>: Apply company-specific coding standards and conventions.</li> <li>When set to <code>language-specific</code>: Follow the idiomatic standards and best practices specific to the programming language.</li> <li>When set to <code>custom</code>: Apply the custom coding standards as specified.</li> <li> <p>When set to <code>industry</code>: Follow industry-standard coding practices and patterns.</p> </li> <li> <p><code>strictness</code>:</p> </li> <li>When set to <code>recommended</code>: Apply standards as recommendations, allowing for reasonable exceptions.</li> <li>When set to <code>required</code>: Enforce standards as requirements with minimal exceptions.</li> <li> <p>When set to <code>strict</code>: Strictly enforce all standards with no exceptions.</p> </li> <li> <p><code>focus</code>:</p> </li> <li>When set to <code>formatting</code>: Focus on code formatting, indentation, and style.</li> <li>When set to <code>naming</code>: Focus on naming conventions for variables, functions, and classes.</li> <li>When set to <code>patterns</code>: Focus on design patterns and architectural standards.</li> <li>When set to <code>security</code>: Focus on security best practices and vulnerability prevention.</li> <li>When set to <code>all</code>: Apply comprehensive standards covering formatting, naming, patterns, and security.</li> </ul>"},{"location":"api/decorators/CodeStandards/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/CodeStandards/#related-decorators","title":"Related Decorators","text":"<ul> <li>CodeReview: Enhances CodeStandards CodeStandards works well with CodeReview by providing specific standards to check against.</li> <li>Refactor: Enhances CodeStandards CodeStandards can guide refactoring efforts with specific standards.</li> </ul>"},{"location":"api/decorators/CodeWalkthrough/","title":"CodeWalkthrough Decorator","text":"<p>Provides detailed explanations of code functionality.</p> <p>Category: Developer Education</p>"},{"location":"api/decorators/CodeWalkthrough/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>focus</code> <code>enum</code> Walkthrough emphasis <code>how</code> <code>detail</code> <code>enum</code> Explanation granularity <code>key-parts</code> <code>audience</code> <code>enum</code> Target reader <code>peer</code>"},{"location":"api/decorators/CodeWalkthrough/#focus-options","title":"Focus Options","text":"<ul> <li><code>how</code>: Explain how the code works, focusing on its mechanics and implementation details.</li> <li><code>why</code>: Explain why the code is designed this way, focusing on design decisions and rationale.</li> <li><code>optimization</code>: Explain how the code is optimized, focusing on performance considerations and efficiency.</li> <li><code>security</code>: Explain the security aspects of the code, focusing on potential vulnerabilities and safeguards.</li> </ul>"},{"location":"api/decorators/CodeWalkthrough/#detail-options","title":"Detail Options","text":"<ul> <li><code>overview</code>: Provide a high-level overview of the code structure and functionality.</li> <li><code>key-parts</code>: Focus on explaining the key components and important sections of the code.</li> <li><code>line-by-line</code>: Provide a detailed line-by-line explanation of how the code works.</li> </ul>"},{"location":"api/decorators/CodeWalkthrough/#audience-options","title":"Audience Options","text":"<ul> <li><code>junior</code>: Explain the code for a junior developer with basic programming knowledge.</li> <li><code>peer</code>: Explain the code as you would to a peer developer with similar experience.</li> <li><code>senior</code>: Explain the code with advanced concepts and patterns for a senior developer.</li> <li><code>non-technical</code>: Explain the code in simple terms for someone without technical background.</li> </ul>"},{"location":"api/decorators/CodeWalkthrough/#examples","title":"Examples","text":""},{"location":"api/decorators/CodeWalkthrough/#basic-code-walkthrough-for-junior-developers","title":"Basic code walkthrough for junior developers","text":"<pre><code>+++CodeWalkthrough(focus=how, detail=key-parts, audience=junior)\nWalk through this authentication middleware explaining how it works.\n</code></pre> <p>A detailed explanation of how the authentication middleware works, focusing on key components and written for junior developers to understand.</p>"},{"location":"api/decorators/CodeWalkthrough/#security-focused-code-review-for-senior-developers","title":"Security-focused code review for senior developers","text":"<pre><code>+++CodeWalkthrough(focus=security, detail=line-by-line, audience=senior)\nExplain this encryption implementation.\n</code></pre> <p>A comprehensive line-by-line security analysis of the encryption implementation, using advanced terminology appropriate for senior developers.</p>"},{"location":"api/decorators/CodeWalkthrough/#high-level-explanation-for-non-technical-stakeholders","title":"High-level explanation for non-technical stakeholders","text":"<pre><code>+++CodeWalkthrough(focus=why, detail=overview, audience=non-technical)\nExplain what this payment processing code does.\n</code></pre> <p>A non-technical overview explaining why the payment processing code is designed the way it is, avoiding jargon and technical details.</p>"},{"location":"api/decorators/CodeWalkthrough/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/CodeWalkthrough/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Explain this code in detail. Make sure to cover how it works, focusing on {focus}. Provide a {detail} explanation suitable for a {audience} developer.</p> <p>Notes: Simplified instruction format works better with gpt-4-turbo.</p>"},{"location":"api/decorators/CodeWalkthrough/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/CodeWalkthrough/#javascript-authentication-middleware","title":"JavaScript authentication middleware","text":"<p>Original Prompt: <pre><code>Walk through this authentication middleware explaining how it works.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Provide a walkthrough explanation of the code. Focus on making the explanation clear and educational. Explain how the code works, focusing on its mechanics and implementation details. Focus on explaining the key components and important sections of the code. Explain the code as you would to a peer developer with similar experience.\n\nWalk through this authentication middleware explaining how it works.\n</code></pre></p> <p>Notes: The decorator adds specific instructions for explaining code functionality with appropriate focus, detail level, and audience adaptation.</p>"},{"location":"api/decorators/CodeWalkthrough/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Provide a walkthrough explanation of the code. Focus on making the explanation clear and educational.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>focus</code>:</li> <li>When set to <code>how</code>: Explain how the code works, focusing on its mechanics and implementation details.</li> <li>When set to <code>why</code>: Explain why the code is designed this way, focusing on design decisions and rationale.</li> <li>When set to <code>optimization</code>: Explain how the code is optimized, focusing on performance considerations and efficiency.</li> <li> <p>When set to <code>security</code>: Explain the security aspects of the code, focusing on potential vulnerabilities and safeguards.</p> </li> <li> <p><code>detail</code>:</p> </li> <li>When set to <code>overview</code>: Provide a high-level overview of the code structure and functionality.</li> <li>When set to <code>key-parts</code>: Focus on explaining the key components and important sections of the code.</li> <li> <p>When set to <code>line-by-line</code>: Provide a detailed line-by-line explanation of how the code works.</p> </li> <li> <p><code>audience</code>:</p> </li> <li>When set to <code>junior</code>: Explain the code for a junior developer with basic programming knowledge.</li> <li>When set to <code>peer</code>: Explain the code as you would to a peer developer with similar experience.</li> <li>When set to <code>senior</code>: Explain the code with advanced concepts and patterns for a senior developer.</li> <li>When set to <code>non-technical</code>: Explain the code in simple terms for someone without technical background.</li> </ul>"},{"location":"api/decorators/CodeWalkthrough/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 1.5.0</li> </ul>"},{"location":"api/decorators/CodeWalkthrough/#related-decorators","title":"Related Decorators","text":"<ul> <li>CodeReview: Enhances CodeWalkthrough CodeWalkthrough can enhance CodeReview by providing educational context to review comments.</li> <li>ELI5: Conflicts with CodeWalkthrough When audience is set to anything other than 'non-technical', this may conflict with ELI5's simplification approach.</li> </ul>"},{"location":"api/decorators/CommitMessage/","title":"CommitMessage Decorator","text":"<p>Generates structured, informative commit messages.</p> <p>Category: Developer Workflow</p>"},{"location":"api/decorators/CommitMessage/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>style</code> <code>enum</code> Commit message format <code>conventional</code> <code>scope</code> <code>enum</code> Change scope information <code>include</code> <code>issue</code> <code>enum</code> Include issue references <code>reference</code>"},{"location":"api/decorators/CommitMessage/#style-options","title":"Style Options","text":"<ul> <li><code>conventional</code>: Follow the Conventional Commits format (type(scope): description) with types like feat, fix, docs, style, refactor, test, chore.</li> <li><code>detailed</code>: Create a detailed commit message with a summary line followed by a blank line and a more detailed explanatory text.</li> <li><code>minimal</code>: Create a brief, to-the-point commit message focusing only on the essential change.</li> <li><code>semantic</code>: Use semantic versioning principles to indicate the nature and impact of changes.</li> <li><code>custom</code>: Format the commit message according to the specific requirements provided in the prompt.</li> </ul>"},{"location":"api/decorators/CommitMessage/#scope-options","title":"Scope Options","text":"<ul> <li><code>include</code>: Include the scope of the change in parentheses after the type (e.g., feat(auth): add login functionality).</li> <li><code>exclude</code>: Omit the scope information from the commit message.</li> </ul>"},{"location":"api/decorators/CommitMessage/#issue-options","title":"Issue Options","text":"<ul> <li><code>none</code>: Do not include any issue references in the commit message.</li> <li><code>reference</code>: Reference related issues at the end of the commit message (e.g., 'Related to #123').</li> <li><code>close</code>: Include closing keywords for issues (e.g., 'Closes #123', 'Fixes #123').</li> </ul>"},{"location":"api/decorators/CommitMessage/#examples","title":"Examples","text":""},{"location":"api/decorators/CommitMessage/#conventional-commit-message-for-a-bug-fix","title":"Conventional commit message for a bug fix","text":"<pre><code>+++CommitMessage(style=conventional, scope=include, issue=reference)\nGenerate a commit message for changes that improve error handling in the authentication module, related to issue #143.\n</code></pre> <p>fix(auth): improve error handling in authentication module</p> <p>Enhance error handling for failed login attempts with better user feedback and logging. Related to #143</p>"},{"location":"api/decorators/CommitMessage/#detailed-commit-message-without-scope","title":"Detailed commit message without scope","text":"<pre><code>+++CommitMessage(style=detailed, scope=exclude, issue=close)\nGenerate a commit message for adding a new feature that allows users to reset their password.\n</code></pre> <p>Add password reset functionality</p> <p>Implements a secure password reset flow with email verification and temporary token generation. Users can now request password resets via the login page and receive email instructions.</p> <p>Closes #156</p>"},{"location":"api/decorators/CommitMessage/#minimal-commit-message","title":"Minimal commit message","text":"<pre><code>+++CommitMessage(style=minimal, issue=none)\nGenerate a commit message for updating the README with installation instructions.\n</code></pre> <p>Update README with installation instructions</p>"},{"location":"api/decorators/CommitMessage/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/CommitMessage/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Write a clear git commit message for the following changes. The message should follow standard commit message conventions and clearly explain what was changed and why.</p> <p>Notes: Simplified instruction for models with less context capacity.</p>"},{"location":"api/decorators/CommitMessage/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/CommitMessage/#git-commit-for-a-bug-fix","title":"Git commit for a bug fix","text":"<p>Original Prompt: <pre><code>Generate a commit message for changes that fix a login error in the authentication module.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Generate a commit message that is clear, concise, and follows best practices for version control. The message should effectively communicate the changes made in the commit. Follow the Conventional Commits format (type(scope): description) with types like feat, fix, docs, style, refactor, test, chore. Include the scope of the change in parentheses after the type (e.g., feat(auth): add login functionality). Reference related issues at the end of the commit message (e.g., 'Related to #123'). Generate a commit message for changes that fix a login error in the authentication module.\n</code></pre></p> <p>Notes: The decorator adds specific instructions for formatting the commit message according to conventional commits style.</p>"},{"location":"api/decorators/CommitMessage/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Generate a commit message that is clear, concise, and follows best practices for version control. The message should effectively communicate the changes made in the commit.</p> <p>Placement: prepend</p> <p>Composition Behavior: override</p> <p>Parameter Effects:</p> <ul> <li><code>style</code>:</li> <li>When set to <code>conventional</code>: Follow the Conventional Commits format (type(scope): description) with types like feat, fix, docs, style, refactor, test, chore.</li> <li>When set to <code>detailed</code>: Create a detailed commit message with a summary line followed by a blank line and a more detailed explanatory text.</li> <li>When set to <code>minimal</code>: Create a brief, to-the-point commit message focusing only on the essential change.</li> <li>When set to <code>semantic</code>: Use semantic versioning principles to indicate the nature and impact of changes.</li> <li> <p>When set to <code>custom</code>: Format the commit message according to the specific requirements provided in the prompt.</p> </li> <li> <p><code>scope</code>:</p> </li> <li>When set to <code>include</code>: Include the scope of the change in parentheses after the type (e.g., feat(auth): add login functionality).</li> <li> <p>When set to <code>exclude</code>: Omit the scope information from the commit message.</p> </li> <li> <p><code>issue</code>:</p> </li> <li>When set to <code>none</code>: Do not include any issue references in the commit message.</li> <li>When set to <code>reference</code>: Reference related issues at the end of the commit message (e.g., 'Related to #123').</li> <li>When set to <code>close</code>: Include closing keywords for issues (e.g., 'Closes #123', 'Fixes #123').</li> </ul>"},{"location":"api/decorators/CommitMessage/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/CommitMessage/#related-decorators","title":"Related Decorators","text":"<ul> <li>CodeReview: Enhances CommitMessage CommitMessage works well after CodeReview to generate appropriate commit messages based on code changes identified in the review.</li> <li>PullRequest: Enhances CommitMessage CommitMessage can be used to generate commit messages that will be included in a pull request description.</li> </ul>"},{"location":"api/decorators/Compare/","title":"Compare Decorator","text":"<p>Compares different technologies, approaches, or tools.</p> <p>Category: Developer Education</p>"},{"location":"api/decorators/Compare/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>aspects</code> <code>string</code> Comparison dimensions <code>performance,features,ecosystem,learning-curve</code> <code>format</code> <code>enum</code> Comparison format <code>table</code> <code>bias</code> <code>enum</code> Fairness control <code>neutral</code>"},{"location":"api/decorators/Compare/#format-options","title":"Format Options","text":"<ul> <li><code>table</code>: Present the comparison in a clear, tabular format with items as columns and aspects as rows.</li> <li><code>prose</code>: Present the comparison as flowing paragraphs that discuss each aspect across all items.</li> <li><code>pros-cons</code>: For each item, list the pros and cons relative to the alternatives.</li> <li><code>decision-matrix</code>: Create a decision matrix that scores each item across all aspects, with a final recommendation.</li> </ul>"},{"location":"api/decorators/Compare/#bias-options","title":"Bias Options","text":"<ul> <li><code>neutral</code>: Maintain a neutral, objective stance throughout the comparison.</li> <li><code>weighted</code>: Weight the importance of different aspects based on common industry priorities.</li> <li><code>opinionated</code>: Include your assessment of which option is superior for different use cases.</li> </ul>"},{"location":"api/decorators/Compare/#examples","title":"Examples","text":""},{"location":"api/decorators/Compare/#comparing-web-frameworks-with-a-decision-matrix","title":"Comparing web frameworks with a decision matrix","text":"<pre><code>+++Compare(aspects=performance,ecosystem,learning-curve, format=decision-matrix, bias=neutral)\nCompare React, Vue, and Angular for a new enterprise web application.\n</code></pre> <p>A neutral comparison of React, Vue, and Angular across performance, ecosystem, and learning-curve dimensions, presented as a decision matrix with scores and a final recommendation.</p>"},{"location":"api/decorators/Compare/#comparing-database-technologies-in-tabular-format","title":"Comparing database technologies in tabular format","text":"<pre><code>+++Compare(aspects=scalability,query-performance,data-types,community-support, format=table)\nCompare PostgreSQL, MongoDB, and MySQL for a high-traffic e-commerce application.\n</code></pre> <p>A tabular comparison of PostgreSQL, MongoDB, and MySQL across the specified aspects, making it easy to see the strengths and weaknesses of each database option.</p>"},{"location":"api/decorators/Compare/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Compare/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Create a detailed comparison of the following items. Analyze their similarities and differences systematically.</p> <p>Notes: Simplified instruction for models with more limited context windows.</p>"},{"location":"api/decorators/Compare/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Compare/#technology-comparison","title":"Technology comparison","text":"<p>Original Prompt: <pre><code>Compare React, Vue, and Angular for a new enterprise web application.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Compare the following items across multiple dimensions. Provide a thorough analysis that highlights similarities and differences. Compare across these specific aspects: performance,ecosystem,learning-curve. Present the comparison in a decision matrix that scores each item across all aspects, with a final recommendation. Maintain a neutral, objective stance throughout the comparison.\n\nCompare React, Vue, and Angular for a new enterprise web application.\n</code></pre></p> <p>Notes: The decorator adds specific comparison instructions while maintaining the original request.</p>"},{"location":"api/decorators/Compare/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Compare the following items across multiple dimensions. Provide a thorough analysis that highlights similarities and differences.</p> <p>Placement: prepend</p> <p>Composition Behavior: override</p> <p>Parameter Effects:</p> <ul> <li><code>aspects</code>:</li> <li> <p>Format: Compare across these specific aspects: {value}.</p> </li> <li> <p><code>format</code>:</p> </li> <li>When set to <code>table</code>: Present the comparison in a clear, tabular format with items as columns and aspects as rows.</li> <li>When set to <code>prose</code>: Present the comparison as flowing paragraphs that discuss each aspect across all items.</li> <li>When set to <code>pros-cons</code>: For each item, list the pros and cons relative to the alternatives.</li> <li> <p>When set to <code>decision-matrix</code>: Create a decision matrix that scores each item across all aspects, with a final recommendation.</p> </li> <li> <p><code>bias</code>:</p> </li> <li>When set to <code>neutral</code>: Maintain a neutral, objective stance throughout the comparison.</li> <li>When set to <code>weighted</code>: Weight the importance of different aspects based on common industry priorities.</li> <li>When set to <code>opinionated</code>: Include your assessment of which option is superior for different use cases.</li> </ul>"},{"location":"api/decorators/Compare/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 1.5.0</li> </ul>"},{"location":"api/decorators/Compare/#related-decorators","title":"Related Decorators","text":"<ul> <li>DetailLevel: Enhances Compare DetailLevel can be used to control the depth of the comparison.</li> <li>Audience: Enhances Compare Audience can help tailor the comparison to specific knowledge levels.</li> </ul>"},{"location":"api/decorators/Comparison/","title":"Comparison Decorator","text":"<p>Structures the response as a direct comparison between multiple items, concepts, or approaches. This decorator is ideal for highlighting similarities and differences across specific dimensions or criteria.</p> <p>Category: Structure</p>"},{"location":"api/decorators/Comparison/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>aspects</code> <code>array</code> Specific aspects or dimensions to compare `` <code>format</code> <code>enum</code> The presentation format for the comparison <code>table</code> <code>highlight</code> <code>boolean</code> Whether to explicitly emphasize key differences <code>True</code>"},{"location":"api/decorators/Comparison/#format-options","title":"Format Options","text":"<ul> <li><code>table</code>: Present the comparison in a tabular format with items as columns (or rows) and comparison aspects as rows (or columns).</li> <li><code>prose</code>: Present the comparison as flowing paragraphs that discuss each aspect across all items in a narrative style.</li> <li><code>bullets</code>: Present the comparison as bulleted lists grouped by aspect or by item.</li> </ul>"},{"location":"api/decorators/Comparison/#examples","title":"Examples","text":""},{"location":"api/decorators/Comparison/#basic-tabular-comparison-of-specific-aspects","title":"Basic tabular comparison of specific aspects","text":"<pre><code>+++Comparison(aspects=[performance,cost,ease of use,ecosystem])\nCompare React, Angular, and Vue for front-end development.\n</code></pre> <p>Creates a table comparing React, Angular, and Vue across the specified aspects, with key differences highlighted</p>"},{"location":"api/decorators/Comparison/#prose-based-comparison-without-specific-aspects","title":"Prose-based comparison without specific aspects","text":"<pre><code>+++Comparison(format=prose, highlight=false)\nCompare democracy and authoritarianism as political systems.\n</code></pre> <p>Delivers a flowing prose comparison between democracy and authoritarianism, covering key differences and similarities in paragraph form</p>"},{"location":"api/decorators/Comparison/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Comparison/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Create a direct comparison between the items/concepts mentioned in the question. Use {format} format and compare them along {aspects} dimensions. {highlight}</p> <p>Notes: This model sometimes needs more explicit structure for complex multi-dimensional comparisons</p>"},{"location":"api/decorators/Comparison/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Comparison/#comparing-programming-frameworks-with-specific-aspects","title":"Comparing programming frameworks with specific aspects","text":"<p>Original Prompt: <pre><code>Compare React, Angular, and Vue for front-end development.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please structure your response as a direct comparison between multiple items, concepts, or approaches, highlighting their similarities and differences. Compare the items specifically across these aspects or dimensions: performance, cost, ease of use, ecosystem. Present the comparison in a tabular format with items as columns (or rows) and comparison aspects as rows (or columns). Explicitly emphasize or call attention to key differences between the items being compared.\n\nCompare React, Angular, and Vue for front-end development.\n</code></pre></p>"},{"location":"api/decorators/Comparison/#prose-comparison-of-political-systems","title":"Prose comparison of political systems","text":"<p>Original Prompt: <pre><code>Compare democracy and authoritarianism as political systems.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please structure your response as a direct comparison between multiple items, concepts, or approaches, highlighting their similarities and differences. Present the comparison as flowing paragraphs that discuss each aspect across all items in a narrative style. Present differences and similarities without special emphasis on either.\n\nCompare democracy and authoritarianism as political systems.\n</code></pre></p>"},{"location":"api/decorators/Comparison/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please structure your response as a direct comparison between multiple items, concepts, or approaches, highlighting their similarities and differences.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>aspects</code>:</li> <li> <p>Format: Compare the items specifically across these aspects or dimensions: {value}.</p> </li> <li> <p><code>format</code>:</p> </li> <li>When set to <code>table</code>: Present the comparison in a tabular format with items as columns (or rows) and comparison aspects as rows (or columns).</li> <li>When set to <code>prose</code>: Present the comparison as flowing paragraphs that discuss each aspect across all items in a narrative style.</li> <li> <p>When set to <code>bullets</code>: Present the comparison as bulleted lists grouped by aspect or by item.</p> </li> <li> <p><code>highlight</code>:</p> </li> <li>When set to <code>true</code>: Explicitly emphasize or call attention to key differences between the items being compared.</li> <li>When set to <code>false</code>: Present differences and similarities without special emphasis on either.</li> </ul>"},{"location":"api/decorators/Comparison/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Comparison/#related-decorators","title":"Related Decorators","text":"<ul> <li>TableFormat: Enhances Comparison When using table format, TableFormat can provide additional formatting options for the comparison table</li> <li>Balanced: Enhances Comparison Balanced works well with Comparison to ensure fair treatment of each item being compared</li> </ul>"},{"location":"api/decorators/Compatibility/","title":"Compatibility Decorator","text":"<p>A meta-decorator that specifies model-specific adaptations or fall-back behaviors. This enables graceful degradation of decorator functionalities across different LLM capabilities and ensures optimal performance across model variants.</p> <p>Category: Meta</p>"},{"location":"api/decorators/Compatibility/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>models</code> <code>array</code> List of specific models to adapt for (e.g., gpt-4-turbo, gpt-4o, etc.) <code>Required</code> <code>fallback</code> <code>string</code> Decorator to apply if the current model doesn't match any in the models list `` <code>behaviors</code> <code>string</code> JSON string mapping model names to specific adaptations (e.g., '{\"gpt-4-turbo\": \"simplify complex reasoning\", \"gpt-4o\": \"maximize detailed analysis\"}') ``"},{"location":"api/decorators/Compatibility/#examples","title":"Examples","text":""},{"location":"api/decorators/Compatibility/#basic-model-specific-adaptation","title":"Basic model-specific adaptation","text":"<pre><code>+++Compatibility(models=[gpt-4o], fallback=StepByStep)\n+++TreeOfThought(branches=3, depth=3)\nSolve this complex optimization problem.\n</code></pre> <p>If using gpt-4o, applies the TreeOfThought decorator with full functionality; if using any other model, falls back to the simpler StepByStep decorator</p>"},{"location":"api/decorators/Compatibility/#detailed-model-specific-behavior-adaptations","title":"Detailed model-specific behavior adaptations","text":"<pre><code>+++Compatibility(models=[gpt-4o,gpt-4-turbo], behaviors={\"gpt-4o\":\"use full mathematical notation and derivations\", \"gpt-4-turbo\":\"use simplified equations and more intuitive explanations\"})\n+++Academic(style=scientific)\nExplain quantum field theory.\n</code></pre> <p>Applies the Academic decorator but adapts how quantum field theory is explained based on the specific model capabilities, with full mathematical rigor for gpt-4o or simplified explanations for gpt-4-turbo</p>"},{"location":"api/decorators/Compatibility/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Compatibility/#gpt-4o","title":"gpt-4o","text":"<p>Instruction: Apply special handling for different model capabilities. If using {models}, implement the full decorator capabilities. If not using one of these models, {fallback}. For model-specific behavior adjustments: {behaviors}. Adapt your response based on the capabilities of the model you're currently running on.</p> <p>Notes: This model can effectively implement complex model-specific adaptation logic across different decorator combinations</p>"},{"location":"api/decorators/Compatibility/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Compatibility/#gpt-4o-specific-complex-reasoning-with-stepbystep-fallback","title":"gpt-4o specific complex reasoning with StepByStep fallback","text":"<p>Original Prompt: <pre><code>+++Compatibility(models=[gpt-4o], fallback=StepByStep)\n+++TreeOfThought(branches=3, depth=3)\nSolve this complex optimization problem.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please apply model-specific adaptations to ensure optimal performance on the current language model. Apply the specialized behavior for these specific models: [gpt-4o]. If the current model is not in this list, use the default or fallback behavior. If the current model is not one of the specified models, fall back to using the StepByStep decorator instead.\n\n+++TreeOfThought(branches=3, depth=3)\nSolve this complex optimization problem.\n</code></pre></p>"},{"location":"api/decorators/Compatibility/#model-specific-explanations-for-quantum-field-theory","title":"Model-specific explanations for quantum field theory","text":"<p>Original Prompt: <pre><code>+++Compatibility(models=[gpt-4o,gpt-4-turbo], behaviors={\"gpt-4o\":\"use full mathematical notation and derivations\", \"gpt-4-turbo\":\"use simplified equations and more intuitive explanations\"})\n+++Academic(style=scientific)\nExplain quantum field theory.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please apply model-specific adaptations to ensure optimal performance on the current language model. Apply the specialized behavior for these specific models: [gpt-4o,gpt-4-turbo]. If the current model is not in this list, use the default or fallback behavior. Apply these model-specific behavior adaptations: {\"gpt-4o\":\"use full mathematical notation and derivations\", \"gpt-4-turbo\":\"use simplified equations and more intuitive explanations\"}. Each adaptation should be used only when running on the corresponding model.\n\n+++Academic(style=scientific)\nExplain quantum field theory.\n</code></pre></p>"},{"location":"api/decorators/Compatibility/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please apply model-specific adaptations to ensure optimal performance on the current language model.</p> <p>Placement: prepend</p> <p>Composition Behavior: override</p> <p>Parameter Effects:</p> <ul> <li><code>models</code>:</li> <li> <p>Format: Apply the specialized behavior for these specific models: {value}. If the current model is not in this list, use the default or fallback behavior.</p> </li> <li> <p><code>fallback</code>:</p> </li> <li> <p>Format: If the current model is not one of the specified models, fall back to using the {value} decorator instead.</p> </li> <li> <p><code>behaviors</code>:</p> </li> <li>Format: Apply these model-specific behavior adaptations: {value}. Each adaptation should be used only when running on the corresponding model.</li> </ul>"},{"location":"api/decorators/Compatibility/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Compatibility/#related-decorators","title":"Related Decorators","text":"<ul> <li>All: Enhances Compatibility Compatibility is designed to work with all other decorators to optimize their performance across different models</li> <li>Priority: Enhances Compatibility Priority can be used to control the sequence when both Compatibility and other meta-decorators are applied</li> <li>Override: Enhances Compatibility Compatibility and Override can work together to provide both model-specific adaptations and parameter customizations</li> </ul>"},{"location":"api/decorators/ComplexityLevel/","title":"ComplexityLevel Decorator","text":"<p>Specifies the permitted complexity level for the implementation.</p> <p>Category: Implementation-Focused</p>"},{"location":"api/decorators/ComplexityLevel/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>code</code> <code>enum</code> Code complexity limit <code>moderate</code> <code>concepts</code> <code>enum</code> Conceptual complexity limit <code>intermediate</code> <code>dependencies</code> <code>enum</code> External dependency usage <code>standard</code>"},{"location":"api/decorators/ComplexityLevel/#code-options","title":"Code Options","text":"<ul> <li><code>simple</code>: Use simple, straightforward code structures. Avoid complex algorithms or patterns.</li> <li><code>moderate</code>: Balance simplicity with efficiency. Use standard patterns where appropriate.</li> <li><code>complex</code>: Optimize for performance and scalability. Use advanced patterns when beneficial.</li> <li><code>necessary-only</code>: Use only the complexity that is absolutely necessary for the task.</li> </ul>"},{"location":"api/decorators/ComplexityLevel/#concepts-options","title":"Concepts Options","text":"<ul> <li><code>beginner-friendly</code>: Use only basic concepts that beginners would understand. Explain any non-trivial concepts.</li> <li><code>intermediate</code>: You can use intermediate-level concepts that most practitioners would be familiar with.</li> <li><code>advanced</code>: You can use advanced concepts and techniques appropriate for experienced developers.</li> </ul>"},{"location":"api/decorators/ComplexityLevel/#dependencies-options","title":"Dependencies Options","text":"<ul> <li><code>none</code>: Do not use any external dependencies or libraries.</li> <li><code>minimal</code>: Use only essential dependencies. Prefer standard libraries when possible.</li> <li><code>standard</code>: Use common, well-established dependencies as needed.</li> <li><code>whatever-needed</code>: Use any dependencies that would make the implementation better, regardless of number.</li> </ul>"},{"location":"api/decorators/ComplexityLevel/#examples","title":"Examples","text":""},{"location":"api/decorators/ComplexityLevel/#simple-date-formatter-with-beginner-friendly-concepts","title":"Simple date formatter with beginner-friendly concepts","text":"<pre><code>+++ComplexityLevel(code=simple, concepts=beginner-friendly, dependencies=minimal)\nImplement a simple date formatter utility that converts between different date formats without external libraries.\n</code></pre> <p>The model will provide a simple date formatter implementation using only basic programming concepts and minimal dependencies, suitable for beginners.</p>"},{"location":"api/decorators/ComplexityLevel/#complex-algorithm-with-standard-dependencies","title":"Complex algorithm with standard dependencies","text":"<pre><code>+++ComplexityLevel(code=complex, concepts=advanced, dependencies=standard)\nImplement a machine learning algorithm for sentiment analysis.\n</code></pre> <p>The model will provide an optimized, advanced implementation using standard libraries and frameworks appropriate for experienced developers.</p>"},{"location":"api/decorators/ComplexityLevel/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/ComplexityLevel/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Implement this with the following complexity constraints: {code_complexity}, {concept_complexity}, {dependency_usage}.</p> <p>Notes: More explicit phrasing works better with this model.</p>"},{"location":"api/decorators/ComplexityLevel/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/ComplexityLevel/#web-development-task","title":"Web development task","text":"<p>Original Prompt: <pre><code>Create a function to validate email addresses.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please implement this with appropriate complexity constraints. Use simple, straightforward code structures. Avoid complex algorithms or patterns. Use only basic concepts that beginners would understand. Explain any non-trivial concepts. Use only essential dependencies. Prefer standard libraries when possible.\n\nCreate a function to validate email addresses.\n</code></pre></p> <p>Notes: The transformed prompt guides the model to create a simple implementation with minimal dependencies that would be understandable to beginners.</p>"},{"location":"api/decorators/ComplexityLevel/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please implement this with appropriate complexity constraints.</p> <p>Placement: prepend</p> <p>Composition Behavior: override</p> <p>Parameter Effects:</p> <ul> <li><code>code</code>:</li> <li>When set to <code>simple</code>: Use simple, straightforward code structures. Avoid complex algorithms or patterns.</li> <li>When set to <code>moderate</code>: Balance simplicity with efficiency. Use standard patterns where appropriate.</li> <li>When set to <code>complex</code>: Optimize for performance and scalability. Use advanced patterns when beneficial.</li> <li> <p>When set to <code>necessary-only</code>: Use only the complexity that is absolutely necessary for the task.</p> </li> <li> <p><code>concepts</code>:</p> </li> <li>When set to <code>beginner-friendly</code>: Use only basic concepts that beginners would understand. Explain any non-trivial concepts.</li> <li>When set to <code>intermediate</code>: You can use intermediate-level concepts that most practitioners would be familiar with.</li> <li> <p>When set to <code>advanced</code>: You can use advanced concepts and techniques appropriate for experienced developers.</p> </li> <li> <p><code>dependencies</code>:</p> </li> <li>When set to <code>none</code>: Do not use any external dependencies or libraries.</li> <li>When set to <code>minimal</code>: Use only essential dependencies. Prefer standard libraries when possible.</li> <li>When set to <code>standard</code>: Use common, well-established dependencies as needed.</li> <li>When set to <code>whatever-needed</code>: Use any dependencies that would make the implementation better, regardless of number.</li> </ul>"},{"location":"api/decorators/ComplexityLevel/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/ComplexityLevel/#related-decorators","title":"Related Decorators","text":"<ul> <li>LanguagePreference: Enhances ComplexityLevel ComplexityLevel works well with LanguagePreference to specify both the programming language and its complexity level.</li> <li>OptimizationFocus: Conflicts with ComplexityLevel May conflict with OptimizationFocus if that decorator requests optimizations that would increase complexity beyond the specified level.</li> </ul>"},{"location":"api/decorators/ConceptModel/","title":"ConceptModel Decorator","text":"<p>Visualizes relationships between technical concepts.</p> <p>Category: Developer Education</p>"},{"location":"api/decorators/ConceptModel/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>notation</code> <code>enum</code> Diagram type <code>concept-map</code> <code>complexity</code> <code>enum</code> Diagram sophistication <code>intermediate</code> <code>focus</code> <code>string</code> Central concept <code>main-topic</code>"},{"location":"api/decorators/ConceptModel/#notation-options","title":"Notation Options","text":"<ul> <li><code>mind-map</code>: Organize the information as a mind map with a central concept and branching ideas.</li> <li><code>concept-map</code>: Create a concept map with labeled relationships between concepts.</li> <li><code>knowledge-graph</code>: Develop a knowledge graph with nodes representing concepts and edges showing relationships.</li> <li><code>informal</code>: Use an informal diagram style that best represents the relationships between concepts.</li> </ul>"},{"location":"api/decorators/ConceptModel/#complexity-options","title":"Complexity Options","text":"<ul> <li><code>basic</code>: Keep the diagram simple with only key concepts and primary relationships.</li> <li><code>intermediate</code>: Include important secondary concepts and relationships in addition to primary ones.</li> <li><code>comprehensive</code>: Create a detailed diagram capturing all relevant concepts, sub-concepts, and their interconnections.</li> </ul>"},{"location":"api/decorators/ConceptModel/#examples","title":"Examples","text":""},{"location":"api/decorators/ConceptModel/#creating-a-concept-map-for-react-concepts","title":"Creating a concept map for React concepts","text":"<pre><code>+++ConceptModel(notation=concept-map, complexity=intermediate)\nCreate a concept map showing the relationships between key React concepts including components, hooks, state, and context.\n</code></pre> <p>A concept map showing React concepts with components, hooks, state, and context as main nodes, with labeled relationships between them and relevant secondary concepts.</p>"},{"location":"api/decorators/ConceptModel/#basic-mind-map-for-programming-paradigms","title":"Basic mind map for programming paradigms","text":"<pre><code>+++ConceptModel(notation=mind-map, complexity=basic, focus=programming-paradigms)\nShow the main programming paradigms and their key characteristics.\n</code></pre> <p>A simple mind map with programming paradigms as the central node, branching out to imperative, declarative, object-oriented, functional, and other paradigms.</p>"},{"location":"api/decorators/ConceptModel/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/ConceptModel/#gpt-4o","title":"gpt-4o","text":"<p>Instruction: Create a visual representation of the relationships between concepts using ASCII or Unicode characters. Structure the diagram to clearly show connections and hierarchies between ideas.</p> <p>Notes: gpt-4o can create effective ASCII/Unicode diagrams for concept visualization.</p>"},{"location":"api/decorators/ConceptModel/#claude-3-7-sonnet-latest","title":"claude-3-7-sonnet-latest","text":"<p>Instruction: Create a visual representation of the relationships between concepts using ASCII art or structured text. Organize the information to clearly show connections and hierarchies between ideas.</p> <p>Notes: Claude models can create effective text-based visualizations.</p>"},{"location":"api/decorators/ConceptModel/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/ConceptModel/#technical-education","title":"Technical education","text":"<p>Original Prompt: <pre><code>Explain the relationships between key React concepts including components, hooks, state, and context.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Create a concept map with labeled relationships between concepts. Include important secondary concepts and relationships in addition to primary ones. Center the diagram around the concept of main-topic.\n\nExplain the relationships between key React concepts including components, hooks, state, and context.\n</code></pre></p> <p>Notes: The decorator transforms a simple explanation request into a request for a visual concept map.</p>"},{"location":"api/decorators/ConceptModel/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Create a visual representation of the relationships between concepts. Use a structured approach to show connections and hierarchies between ideas.</p> <p>Placement: prepend</p> <p>Composition Behavior: override</p> <p>Parameter Effects:</p> <ul> <li><code>notation</code>:</li> <li>When set to <code>mind-map</code>: Organize the information as a mind map with a central concept and branching ideas.</li> <li>When set to <code>concept-map</code>: Create a concept map with labeled relationships between concepts.</li> <li>When set to <code>knowledge-graph</code>: Develop a knowledge graph with nodes representing concepts and edges showing relationships.</li> <li> <p>When set to <code>informal</code>: Use an informal diagram style that best represents the relationships between concepts.</p> </li> <li> <p><code>complexity</code>:</p> </li> <li>When set to <code>basic</code>: Keep the diagram simple with only key concepts and primary relationships.</li> <li>When set to <code>intermediate</code>: Include important secondary concepts and relationships in addition to primary ones.</li> <li> <p>When set to <code>comprehensive</code>: Create a detailed diagram capturing all relevant concepts, sub-concepts, and their interconnections.</p> </li> <li> <p><code>focus</code>:</p> </li> <li>Format: Center the diagram around the concept of {value}.</li> </ul>"},{"location":"api/decorators/ConceptModel/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: OutputFormat</li> <li>Compatible Models: gpt-4o, gpt-4-turbo, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/ConceptModel/#related-decorators","title":"Related Decorators","text":"<ul> <li>DetailLevel: Enhances ConceptModel DetailLevel can be used to further refine the depth of information in the concept model.</li> <li>OutputFormat: Conflicts with ConceptModel This decorator already specifies an output format, so it may conflict with other format specifications.</li> </ul>"},{"location":"api/decorators/Concise/","title":"Concise Decorator","text":"<p>Optimizes the response for brevity and directness, eliminating unnecessary details and verbose language. This decorator is ideal for obtaining quick answers, executive summaries, or essential information when time or space is limited.</p> <p>Category: Tone</p>"},{"location":"api/decorators/Concise/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>maxWords</code> <code>number</code> Maximum word count for the entire response `` <code>bulletPoints</code> <code>boolean</code> Whether to use bullet points for maximum brevity <code>False</code> <code>level</code> <code>enum</code> The degree of conciseness to apply <code>moderate</code>"},{"location":"api/decorators/Concise/#level-options","title":"Level Options","text":"<ul> <li><code>moderate</code>: Focus on the most important information while maintaining readability and essential context.</li> <li><code>high</code>: Include only key points and critical information, eliminating all non-essential details.</li> <li><code>extreme</code>: Provide only the absolute minimum information required to answer the question - be as brief as possible.</li> </ul>"},{"location":"api/decorators/Concise/#examples","title":"Examples","text":""},{"location":"api/decorators/Concise/#basic-concise-explanation-of-a-complex-topic","title":"Basic concise explanation of a complex topic","text":"<pre><code>+++Concise\nExplain how blockchain technology works.\n</code></pre> <p>Provides a brief, to-the-point explanation of blockchain technology focusing only on essential concepts</p>"},{"location":"api/decorators/Concise/#extremely-concise-bulleted-answer-with-word-limit","title":"Extremely concise bulleted answer with word limit","text":"<pre><code>+++Concise(maxWords=50, bulletPoints=true, level=extreme)\nWhat are the key factors in successful project management?\n</code></pre> <p>Delivers a set of extremely concise bullet points covering only the most critical project management factors, totaling under 50 words</p>"},{"location":"api/decorators/Concise/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Concise/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Be extremely brief and direct. Focus only on essential information and eliminate all unnecessary words. Get straight to the point.</p> <p>Notes: This model may need more explicit instructions about brevity requirements</p>"},{"location":"api/decorators/Concise/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Concise/#basic-concise-explanation","title":"Basic concise explanation","text":"<p>Original Prompt: <pre><code>Explain how blockchain technology works.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please provide a concise, to-the-point response without unnecessary details or verbose language. Focus on the most important information while maintaining readability and essential context. Use concise paragraphs rather than bullet points.\n\nExplain how blockchain technology works.\n</code></pre></p>"},{"location":"api/decorators/Concise/#extremely-concise-bullet-points-with-word-limit","title":"Extremely concise bullet points with word limit","text":"<p>Original Prompt: <pre><code>What are the key factors in successful project management?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please provide a concise, to-the-point response without unnecessary details or verbose language. Limit your entire response to no more than 50 words. Use bullet points to present information in the most concise format possible. Provide only the absolute minimum information required to answer the question - be as brief as possible.\n\nWhat are the key factors in successful project management?\n</code></pre></p>"},{"location":"api/decorators/Concise/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please provide a concise, to-the-point response without unnecessary details or verbose language.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>maxWords</code>:</li> <li> <p>Format: Limit your entire response to no more than {value} words.</p> </li> <li> <p><code>bulletPoints</code>:</p> </li> <li>When set to <code>true</code>: Use bullet points to present information in the most concise format possible.</li> <li> <p>When set to <code>false</code>: Use concise paragraphs rather than bullet points.</p> </li> <li> <p><code>level</code>:</p> </li> <li>When set to <code>moderate</code>: Focus on the most important information while maintaining readability and essential context.</li> <li>When set to <code>high</code>: Include only key points and critical information, eliminating all non-essential details.</li> <li>When set to <code>extreme</code>: Provide only the absolute minimum information required to answer the question - be as brief as possible.</li> </ul>"},{"location":"api/decorators/Concise/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: Detailed</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Concise/#related-decorators","title":"Related Decorators","text":"<ul> <li>Detailed: Conflicts with Concise Concise aims for brevity while Detailed aims for comprehensive coverage, creating a direct conflict</li> <li>Summary: Enhances Concise Summary and Concise can work together to create extremely condensed outputs</li> </ul>"},{"location":"api/decorators/Conditional/","title":"Conditional Decorator","text":"<p>A meta-decorator that applies different decorators based on specified conditions. This enables dynamic behavior where the response formatting and approach changes depending on the content, context, or user-specified parameters.</p> <p>Category: Meta</p>"},{"location":"api/decorators/Conditional/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>if_param</code> <code>string</code> The condition to evaluate (e.g., 'technical', 'complex', 'controversial', or a parameter like '{param}') <code>Required</code> <code>then</code> <code>string</code> The decorator to apply if the condition is true (can be a specific decorator with parameters) <code>Required</code> <code>else_param</code> <code>string</code> The decorator to apply if the condition is false (can be a specific decorator with parameters) ``"},{"location":"api/decorators/Conditional/#examples","title":"Examples","text":""},{"location":"api/decorators/Conditional/#basic-conditional-application-based-on-content-complexity","title":"Basic conditional application based on content complexity","text":"<pre><code>+++Conditional(if_param=complex, then=StepByStep, else_param=Concise)\nExplain how quantum computing works.\n</code></pre> <p>Evaluates if the topic is complex, which quantum computing is, so it applies the StepByStep decorator</p>"},{"location":"api/decorators/Conditional/#conditional-application-with-parameterized-decorators","title":"Conditional application with parameterized decorators","text":"<pre><code>+++Conditional(if_param=controversial, then=Debate(perspectives=3), else_param=Reasoning(depth=moderate))\nDiscuss the ethical implications of gene editing in humans.\n</code></pre> <p>Determines that gene editing ethics is controversial, so it applies the Debate decorator with 3 perspectives rather than the Reasoning decorator</p>"},{"location":"api/decorators/Conditional/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Conditional/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: This response requires conditional formatting. First, analyze the topic to determine if it qualifies as '{if_param}'. Based on your determination, format your response using either the '{then}' approach (if true) or the '{else_param}' approach (if false).</p> <p>Notes: This model may need more explicit instructions about the conditional evaluation process</p>"},{"location":"api/decorators/Conditional/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Conditional/#conditional-based-on-complexity","title":"Conditional based on complexity","text":"<p>Original Prompt: <pre><code>Explain how quantum computing works.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please evaluate the topic and adapt your response formatting based on the conditional logic specified. First, determine if the topic or question can be classified as 'complex'. If the condition is true (the topic IS complex), then apply the following approach: StepByStep. If the condition is false (the topic is NOT complex), then apply the following approach instead: Concise.\n\nExplain how quantum computing works.\n</code></pre></p>"},{"location":"api/decorators/Conditional/#conditional-based-on-controversy","title":"Conditional based on controversy","text":"<p>Original Prompt: <pre><code>Discuss the ethical implications of gene editing in humans.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please evaluate the topic and adapt your response formatting based on the conditional logic specified. First, determine if the topic or question can be classified as 'controversial'. If the condition is true (the topic IS controversial), then apply the following approach: Debate(perspectives=3). If the condition is false (the topic is NOT controversial), then apply the following approach instead: Reasoning(depth=moderate).\n\nDiscuss the ethical implications of gene editing in humans.\n</code></pre></p>"},{"location":"api/decorators/Conditional/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please evaluate the topic and adapt your response formatting based on the conditional logic specified.</p> <p>Placement: prepend</p> <p>Composition Behavior: override</p> <p>Parameter Effects:</p> <ul> <li><code>if_param</code>:</li> <li> <p>Format: First, determine if the topic or question can be classified as '{value}'.</p> </li> <li> <p><code>then</code>:</p> </li> <li> <p>Format: If the condition is true (the topic IS {if_param}), then apply the following approach: {value}.</p> </li> <li> <p><code>else_param</code>:</p> </li> <li>Format: If the condition is false (the topic is NOT {if_param}), then apply the following approach instead: {value}.</li> </ul>"},{"location":"api/decorators/Conditional/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Conditional/#related-decorators","title":"Related Decorators","text":"<ul> <li>All: Enhances Conditional Conditional is a meta-decorator that may use any other decorator as part of its then/else parameters</li> <li>Priority: Enhances Conditional Priority can be used with Conditional to establish fallback patterns if conditions aren't met</li> </ul>"},{"location":"api/decorators/Confidence/","title":"Confidence Decorator","text":"<p>Enhances the response with explicit indications of confidence levels for different statements or claims. This decorator promotes transparency about knowledge certainty and helps differentiate between well-established facts and more speculative content.</p> <p>Category: Verification</p>"},{"location":"api/decorators/Confidence/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>scale</code> <code>enum</code> The method used to express confidence levels <code>qualitative</code> <code>threshold</code> <code>number</code> Minimum confidence level for including information (as a percentage) <code>50</code> <code>detailed</code> <code>boolean</code> Whether to provide explanations for confidence assessments <code>False</code>"},{"location":"api/decorators/Confidence/#scale-options","title":"Scale Options","text":"<ul> <li><code>percent</code>: Express confidence levels as percentages (e.g., 95% confidence, 70% confidence).</li> <li><code>qualitative</code>: Express confidence levels using qualitative descriptors (e.g., high confidence, moderate confidence, low confidence).</li> <li><code>stars</code>: Express confidence levels using a star rating system (e.g., \u2b50\u2b50\u2b50\u2b50\u2b50 for highest confidence, \u2b50 for lowest).</li> <li><code>numeric</code>: Express confidence levels using a numeric scale from 1-10, where 10 represents the highest confidence.</li> </ul>"},{"location":"api/decorators/Confidence/#examples","title":"Examples","text":""},{"location":"api/decorators/Confidence/#qualitative-confidence-indicators-for-a-complex-topic","title":"Qualitative confidence indicators for a complex topic","text":"<pre><code>+++Confidence\nExplain the current understanding of dark matter.\n</code></pre> <p>Explains dark matter theories with qualitative confidence indicators (high confidence, moderate confidence, etc.) for different claims</p>"},{"location":"api/decorators/Confidence/#detailed-percentage-based-confidence-with-high-threshold","title":"Detailed percentage-based confidence with high threshold","text":"<pre><code>+++Confidence(scale=percent, threshold=80, detailed=true)\nWhat are the most effective treatments for depression?\n</code></pre> <p>Discusses only high-confidence (80%+) depression treatments with percentage indicators and explanations for confidence assessments</p>"},{"location":"api/decorators/Confidence/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Confidence/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: For each claim or statement in your response, indicate how confident you are using {scale} measures. Only include information where your confidence is at least {threshold}%. {detailed}</p> <p>Notes: This model sometimes needs more explicit reminders to maintain consistent confidence indicators throughout a long response</p>"},{"location":"api/decorators/Confidence/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Confidence/#qualitative-confidence-indicators-for-dark-matter","title":"Qualitative confidence indicators for dark matter","text":"<p>Original Prompt: <pre><code>Explain the current understanding of dark matter.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please include explicit indications of your confidence level for different statements or claims in your response. Express confidence levels using qualitative descriptors (e.g., high confidence, moderate confidence, low confidence). Only include information for which your confidence level is at least 50%. State confidence levels without explaining the reasoning behind the assessments.\n\nExplain the current understanding of dark matter.\n</code></pre></p>"},{"location":"api/decorators/Confidence/#detailed-percentage-based-confidence-for-depression-treatments","title":"Detailed percentage-based confidence for depression treatments","text":"<p>Original Prompt: <pre><code>What are the most effective treatments for depression?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please include explicit indications of your confidence level for different statements or claims in your response. Express confidence levels as percentages (e.g., 95% confidence, 70% confidence). Only include information for which your confidence level is at least 80%. Provide brief explanations for why certain confidence levels were assigned to specific claims.\n\nWhat are the most effective treatments for depression?\n</code></pre></p>"},{"location":"api/decorators/Confidence/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please include explicit indications of your confidence level for different statements or claims in your response.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>scale</code>:</li> <li>When set to <code>percent</code>: Express confidence levels as percentages (e.g., 95% confidence, 70% confidence).</li> <li>When set to <code>qualitative</code>: Express confidence levels using qualitative descriptors (e.g., high confidence, moderate confidence, low confidence).</li> <li>When set to <code>stars</code>: Express confidence levels using a star rating system (e.g., \u2b50\u2b50\u2b50\u2b50\u2b50 for highest confidence, \u2b50 for lowest).</li> <li> <p>When set to <code>numeric</code>: Express confidence levels using a numeric scale from 1-10, where 10 represents the highest confidence.</p> </li> <li> <p><code>threshold</code>:</p> </li> <li> <p>Format: Only include information for which your confidence level is at least {value}%.</p> </li> <li> <p><code>detailed</code>:</p> </li> <li>When set to <code>true</code>: Provide brief explanations for why certain confidence levels were assigned to specific claims.</li> <li>When set to <code>false</code>: State confidence levels without explaining the reasoning behind the assessments.</li> </ul>"},{"location":"api/decorators/Confidence/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Confidence/#related-decorators","title":"Related Decorators","text":"<ul> <li>FactCheck: Enhances Confidence FactCheck and Confidence work well together to provide both verification and quantification of certainty</li> <li>Limitations: Enhances Confidence Limitations complements Confidence by explaining broader constraints where Confidence quantifies specific certainty levels</li> </ul>"},{"location":"api/decorators/Constraints/","title":"Constraints Decorator","text":"<p>Applies specific limitations to the output format, length, or content. This decorator enforces creative constraints that can enhance focus, brevity, or precision by requiring the response to work within defined boundaries.</p> <p>Category: Structure</p>"},{"location":"api/decorators/Constraints/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>wordCount</code> <code>number</code> Maximum number of words allowed in the response `` <code>timeframe</code> <code>string</code> Maximum time required to implement or consume the response (e.g., '5min', '1hr', '1week') `` <code>vocabulary</code> <code>enum</code> Constraints on vocabulary usage `` <code>custom</code> <code>string</code> Custom constraint to apply (e.g., 'no negatives', 'use only questions', 'each sentence starts with consecutive letters of the alphabet') ``"},{"location":"api/decorators/Constraints/#vocabulary-options","title":"Vocabulary Options","text":"<ul> <li><code>simple</code>: Use only simple, everyday vocabulary that would be understood by elementary school students. Avoid jargon, technical terms, and complex words.</li> <li><code>technical</code>: Use precise technical vocabulary appropriate to the subject matter, including field-specific terminology and concepts.</li> <li><code>domain-specific</code>: Employ specialized vocabulary from the relevant domain or field, using terms of art and professional language.</li> <li><code>creative</code>: Use varied, vivid, and evocative vocabulary that enhances engagement, including metaphors, sensory language, and uncommon word choices.</li> </ul>"},{"location":"api/decorators/Constraints/#examples","title":"Examples","text":""},{"location":"api/decorators/Constraints/#word-count-constraint-for-a-complex-topic","title":"Word count constraint for a complex topic","text":"<pre><code>+++Constraints(wordCount=100)\nExplain quantum computing principles.\n</code></pre> <p>Provides a concise explanation of quantum computing, carefully limiting the response to exactly 100 words</p>"},{"location":"api/decorators/Constraints/#multiple-constraints-for-a-creative-response","title":"Multiple constraints for a creative response","text":"<pre><code>+++Constraints(wordCount=200, vocabulary=creative, custom=each paragraph must contain exactly three sentences)\nDescribe a futuristic city.\n</code></pre> <p>Delivers a 200-word description of a futuristic city using creative vocabulary, with each paragraph containing exactly three sentences</p>"},{"location":"api/decorators/Constraints/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Constraints/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: You must follow these exact constraints: {wordCount} {timeframe} {vocabulary} {custom}. These are hard requirements - your response will only be valuable if it strictly adheres to these constraints.</p> <p>Notes: This model sometimes needs stronger emphasis on constraints to ensure they are followed precisely</p>"},{"location":"api/decorators/Constraints/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Constraints/#word-count-constraint-for-quantum-computing-explanation","title":"Word count constraint for quantum computing explanation","text":"<p>Original Prompt: <pre><code>Explain quantum computing principles.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please craft your response within specific constraints that limit aspects of the output format, length, or content. Limit your response to exactly 100 words. Count carefully to ensure you meet this constraint precisely.\n\nExplain quantum computing principles.\n</code></pre></p>"},{"location":"api/decorators/Constraints/#multiple-constraints-for-futuristic-city-description","title":"Multiple constraints for futuristic city description","text":"<p>Original Prompt: <pre><code>Describe a futuristic city.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please craft your response within specific constraints that limit aspects of the output format, length, or content. Limit your response to exactly 200 words. Count carefully to ensure you meet this constraint precisely. Use varied, vivid, and evocative vocabulary that enhances engagement, including metaphors, sensory language, and uncommon word choices. Apply this additional custom constraint: each paragraph must contain exactly three sentences.\n\nDescribe a futuristic city.\n</code></pre></p>"},{"location":"api/decorators/Constraints/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please craft your response within specific constraints that limit aspects of the output format, length, or content.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>wordCount</code>:</li> <li> <p>Format: Limit your response to exactly {value} words. Count carefully to ensure you meet this constraint precisely.</p> </li> <li> <p><code>timeframe</code>:</p> </li> <li> <p>Format: Ensure your response describes solutions or content that could be implemented or consumed within a {value} timeframe.</p> </li> <li> <p><code>vocabulary</code>:</p> </li> <li>When set to <code>simple</code>: Use only simple, everyday vocabulary that would be understood by elementary school students. Avoid jargon, technical terms, and complex words.</li> <li>When set to <code>technical</code>: Use precise technical vocabulary appropriate to the subject matter, including field-specific terminology and concepts.</li> <li>When set to <code>domain-specific</code>: Employ specialized vocabulary from the relevant domain or field, using terms of art and professional language.</li> <li> <p>When set to <code>creative</code>: Use varied, vivid, and evocative vocabulary that enhances engagement, including metaphors, sensory language, and uncommon word choices.</p> </li> <li> <p><code>custom</code>:</p> </li> <li>Format: Apply this additional custom constraint: {value}.</li> </ul>"},{"location":"api/decorators/Constraints/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Constraints/#related-decorators","title":"Related Decorators","text":"<ul> <li>Concise: Enhances Constraints Constraints with wordCount and Concise work well together to enforce brevity in different ways</li> <li>Detailed: Conflicts with Constraints Constraints with low wordCount may conflict with Detailed's aim for comprehensiveness</li> <li>Creative: Enhances Constraints Constraints often enhance creativity by forcing innovative solutions within limitations</li> </ul>"},{"location":"api/decorators/Context/","title":"Context Decorator","text":"<p>A meta-decorator that adapts standard decorators for domain-specific contexts. This provides specialized interpretations of decorators based on particular fields, industries, or subject matter to ensure appropriate adaptation to contextual requirements.</p> <p>Category: Meta</p>"},{"location":"api/decorators/Context/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>domain</code> <code>string</code> The specific domain, field, or industry to contextualize decorators for (e.g., 'medicine', 'legal', 'engineering', 'education') <code>Required</code> <code>scope</code> <code>enum</code> Which aspects of decorators to contextualize <code>all</code> <code>level</code> <code>enum</code> The expertise level to target within the domain <code>mixed</code>"},{"location":"api/decorators/Context/#scope-options","title":"Scope Options","text":"<ul> <li><code>terminology</code>: Use domain-specific terminology and vocabulary from this field, but keep other aspects generalized.</li> <li><code>examples</code>: Use domain-specific examples and cases to illustrate concepts, but keep terminology and structure generalized.</li> <li><code>structure</code>: Organize the information according to standard frameworks and structures used in this domain, but keep terminology and examples generalized.</li> <li><code>all</code>: Apply domain-specific terminology, examples, and structural organization throughout the entire response.</li> </ul>"},{"location":"api/decorators/Context/#level-options","title":"Level Options","text":"<ul> <li><code>beginner</code>: Target the response for newcomers to the field with limited domain knowledge or expertise.</li> <li><code>intermediate</code>: Target the response for individuals with moderate familiarity and experience in the domain.</li> <li><code>expert</code>: Target the response for specialists and experts with advanced knowledge in the domain.</li> <li><code>mixed</code>: Structure the response to be accessible to beginners while also including deeper insights for experts.</li> </ul>"},{"location":"api/decorators/Context/#examples","title":"Examples","text":""},{"location":"api/decorators/Context/#basic-domain-specific-adaptation-of-decorators","title":"Basic domain-specific adaptation of decorators","text":"<pre><code>+++Context(domain=medicine)\n+++StepByStep\n+++Detailed\nExplain how vaccines are developed.\n</code></pre> <p>Applies the StepByStep and Detailed decorators with medical context-awareness, using appropriate medical terminology, examples, and structures for explaining vaccine development</p>"},{"location":"api/decorators/Context/#targeted-contextualization-for-specific-expertise-level","title":"Targeted contextualization for specific expertise level","text":"<pre><code>+++Context(domain=programming, scope=examples, level=beginner)\n+++Reasoning\n+++ELI5\nExplain how databases work.\n</code></pre> <p>Uses the Reasoning and ELI5 decorators with programming-appropriate examples specifically tailored for beginners, while keeping general terminology and structure accessible</p>"},{"location":"api/decorators/Context/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Context/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Interpret this request within the context of the {domain} field. Use knowledge, terminology, and standards specific to this domain at a {level} level. Focus particularly on domain-appropriate {scope}.</p> <p>Notes: This model sometimes needs more explicit reminders to maintain consistent domain-specific focus throughout longer responses</p>"},{"location":"api/decorators/Context/#gpt-4o","title":"gpt-4o","text":"<p>Instruction: Frame your response specifically for the {domain} domain. Adjust your {scope} to match domain conventions and target a {level} expertise level.</p> <p>Notes: This model handles domain adaptation well but benefits from clear guidance about which aspects to contextualize</p>"},{"location":"api/decorators/Context/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Context/#medical-domain-contextualization-for-step-by-step-explanation","title":"Medical domain contextualization for step-by-step explanation","text":"<p>Original Prompt: <pre><code>+++StepByStep\n+++Detailed\nExplain how vaccines are developed.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please adapt your response and the behavior of any other decorators to the specific domain context provided. Apply specialized knowledge, terminology, and conventions appropriate for the medicine domain. Apply domain-specific terminology, examples, and structural organization throughout the entire response. Structure the response to be accessible to beginners while also including deeper insights for experts.\n\n+++StepByStep\n+++Detailed\nExplain how vaccines are developed.\n</code></pre></p>"},{"location":"api/decorators/Context/#programming-domain-with-beginner-focused-examples","title":"Programming domain with beginner-focused examples","text":"<p>Original Prompt: <pre><code>+++Reasoning\n+++ELI5\nExplain how databases work.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please adapt your response and the behavior of any other decorators to the specific domain context provided. Apply specialized knowledge, terminology, and conventions appropriate for the programming domain. Use domain-specific examples and cases to illustrate concepts, but keep terminology and structure generalized. Target the response for newcomers to the field with limited domain knowledge or expertise.\n\n+++Reasoning\n+++ELI5\nExplain how databases work.\n</code></pre></p>"},{"location":"api/decorators/Context/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please adapt your response and the behavior of any other decorators to the specific domain context provided.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>domain</code>:</li> <li> <p>Format: Apply specialized knowledge, terminology, and conventions appropriate for the {value} domain.</p> </li> <li> <p><code>scope</code>:</p> </li> <li>When set to <code>terminology</code>: Use domain-specific terminology and vocabulary from this field, but keep other aspects generalized.</li> <li>When set to <code>examples</code>: Use domain-specific examples and cases to illustrate concepts, but keep terminology and structure generalized.</li> <li>When set to <code>structure</code>: Organize the information according to standard frameworks and structures used in this domain, but keep terminology and examples generalized.</li> <li> <p>When set to <code>all</code>: Apply domain-specific terminology, examples, and structural organization throughout the entire response.</p> </li> <li> <p><code>level</code>:</p> </li> <li>When set to <code>beginner</code>: Target the response for newcomers to the field with limited domain knowledge or expertise.</li> <li>When set to <code>intermediate</code>: Target the response for individuals with moderate familiarity and experience in the domain.</li> <li>When set to <code>expert</code>: Target the response for specialists and experts with advanced knowledge in the domain.</li> <li>When set to <code>mixed</code>: Structure the response to be accessible to beginners while also including deeper insights for experts.</li> </ul>"},{"location":"api/decorators/Context/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Context/#related-decorators","title":"Related Decorators","text":"<ul> <li>Audience: Enhances Context Audience complements Context by further refining the target expertise level within the domain context</li> <li>Professional: Enhances Context Professional works well with Context to ensure appropriate formal language for the specific domain context</li> <li>Custom: Enhances Context Custom can provide additional specialized behaviors for particular domain contexts beyond standard adaptations</li> </ul>"},{"location":"api/decorators/Contrarian/","title":"Contrarian Decorator","text":"<p>Generates responses that deliberately challenge conventional wisdom or mainstream perspectives. This decorator encourages critical thinking by presenting counterarguments, alternative interpretations, or challenging established positions on a topic.</p> <p>Category: Reasoning</p>"},{"location":"api/decorators/Contrarian/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>approach</code> <code>enum</code> The specific contrarian approach to take <code>devils-advocate</code> <code>maintain</code> <code>boolean</code> Whether to maintain contrarian stance throughout (true) or provide balanced view at the end (false) <code>False</code> <code>focus</code> <code>string</code> Optional specific aspect of the topic to focus contrarian analysis on ``"},{"location":"api/decorators/Contrarian/#approach-options","title":"Approach Options","text":"<ul> <li><code>outsider</code>: Adopt the perspective of someone completely outside the field or discipline, questioning fundamental assumptions that insiders might take for granted.</li> <li><code>skeptic</code>: Take a deeply skeptical stance that questions the evidence, methodology, and logical foundations behind established views.</li> <li><code>devils-advocate</code>: Present the strongest possible counterarguments to what would normally be considered the most reasonable position.</li> </ul>"},{"location":"api/decorators/Contrarian/#examples","title":"Examples","text":""},{"location":"api/decorators/Contrarian/#basic-devils-advocate-approach-with-balanced-conclusion","title":"Basic devil's advocate approach with balanced conclusion","text":"<pre><code>+++Contrarian\nWhy is renewable energy considered the future of power generation?\n</code></pre> <p>Challenges conventional thinking about renewable energy's dominance, presenting counterarguments and limitations, followed by a balanced perspective</p>"},{"location":"api/decorators/Contrarian/#maintained-skeptical-contrarian-stance-focused-on-a-specific-aspect","title":"Maintained skeptical contrarian stance focused on a specific aspect","text":"<pre><code>+++Contrarian(approach=skeptic, maintain=true, focus=methodology)\nDiscuss the reliability of climate models in predicting future global temperatures.\n</code></pre> <p>Provides a consistently skeptical analysis of climate model methodologies, questioning assumptions, limitations, and historical accuracy throughout the response</p>"},{"location":"api/decorators/Contrarian/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Contrarian/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Challenge the conventional or mainstream view on this topic. Take the role of a {approach} who questions accepted wisdom. Focus particularly on {focus}. Present strong counterarguments and alternative interpretations. {maintain}</p> <p>Notes: This model sometimes needs more explicit instruction to maintain a truly challenging stance rather than reverting to conventional views</p>"},{"location":"api/decorators/Contrarian/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Contrarian/#basic-devils-advocate-with-balanced-conclusion-on-renewable-energy","title":"Basic devil's advocate with balanced conclusion on renewable energy","text":"<p>Original Prompt: <pre><code>Why is renewable energy considered the future of power generation?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please generate a response that deliberately challenges conventional wisdom or mainstream perspectives on this topic to encourage critical thinking. Present the strongest possible counterarguments to what would normally be considered the most reasonable position. After thoroughly presenting the contrarian perspective, conclude with a brief balanced view that acknowledges the merits of both conventional and contrarian viewpoints.\n\nWhy is renewable energy considered the future of power generation?\n</code></pre></p>"},{"location":"api/decorators/Contrarian/#maintained-skeptical-stance-focused-on-methodology-of-climate-models","title":"Maintained skeptical stance focused on methodology of climate models","text":"<p>Original Prompt: <pre><code>Discuss the reliability of climate models in predicting future global temperatures.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please generate a response that deliberately challenges conventional wisdom or mainstream perspectives on this topic to encourage critical thinking. Take a deeply skeptical stance that questions the evidence, methodology, and logical foundations behind established views. Maintain the contrarian perspective consistently throughout the entire response without offering a conventional perspective. Focus your contrarian analysis specifically on the methodology aspect of the topic rather than addressing all dimensions.\n\nDiscuss the reliability of climate models in predicting future global temperatures.\n</code></pre></p>"},{"location":"api/decorators/Contrarian/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please generate a response that deliberately challenges conventional wisdom or mainstream perspectives on this topic to encourage critical thinking.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>approach</code>:</li> <li>When set to <code>outsider</code>: Adopt the perspective of someone completely outside the field or discipline, questioning fundamental assumptions that insiders might take for granted.</li> <li>When set to <code>skeptic</code>: Take a deeply skeptical stance that questions the evidence, methodology, and logical foundations behind established views.</li> <li> <p>When set to <code>devils-advocate</code>: Present the strongest possible counterarguments to what would normally be considered the most reasonable position.</p> </li> <li> <p><code>maintain</code>:</p> </li> <li>When set to <code>true</code>: Maintain the contrarian perspective consistently throughout the entire response without offering a conventional perspective.</li> <li> <p>When set to <code>false</code>: After thoroughly presenting the contrarian perspective, conclude with a brief balanced view that acknowledges the merits of both conventional and contrarian viewpoints.</p> </li> <li> <p><code>focus</code>:</p> </li> <li>Format: Focus your contrarian analysis specifically on the {value} aspect of the topic rather than addressing all dimensions.</li> </ul>"},{"location":"api/decorators/Contrarian/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Contrarian/#related-decorators","title":"Related Decorators","text":"<ul> <li>Balanced: Conflicts with Contrarian Contrarian with maintain=true directly conflicts with Balanced's aim for equal perspective representation</li> <li>Debate: Enhances Contrarian Debate can work well with Contrarian to present structured arguments for both conventional and contrarian views</li> <li>StepByStep: Enhances Contrarian StepByStep can help structure the contrarian reasoning in a clear, logical progression</li> </ul>"},{"location":"api/decorators/Creative/","title":"Creative Decorator","text":"<p>Enhances responses with imaginative, novel, and original content. This decorator encourages divergent thinking, metaphorical language, and unusual connections to generate engaging and non-obvious outputs.</p> <p>Category: Tone</p>"},{"location":"api/decorators/Creative/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>level</code> <code>enum</code> The degree of creative thinking to apply <code>high</code> <code>elements</code> <code>array</code> Specific creative elements to incorporate (e.g., metaphor, wordplay, narrative) `` <code>constraints</code> <code>array</code> Optional creative constraints to work within ``"},{"location":"api/decorators/Creative/#level-options","title":"Level Options","text":"<ul> <li><code>moderate</code>: Use creativity to make the content engaging while ensuring it remains accessible and practical. Incorporate creative elements that enhance understanding without overshadowing the substance.</li> <li><code>high</code>: Apply significant creative thinking to present the information in fresh, surprising ways. Use vivid language, unexpected angles, and novel framing to create an engaging and memorable response.</li> <li><code>unconventional</code>: Push far beyond conventional thinking to create a truly original response. Break traditional patterns, challenge assumptions, and explore highly unusual perspectives or approaches.</li> </ul>"},{"location":"api/decorators/Creative/#examples","title":"Examples","text":""},{"location":"api/decorators/Creative/#basic-creative-response-to-a-standard-question","title":"Basic creative response to a standard question","text":"<pre><code>+++Creative\nExplain how the internet works.\n</code></pre> <p>Provides an imaginative explanation of the internet using unexpected metaphors and creative language while maintaining accuracy</p>"},{"location":"api/decorators/Creative/#highly-creative-response-with-specific-elements","title":"Highly creative response with specific elements","text":"<pre><code>+++Creative(level=unconventional, elements=[metaphor,narrative,wordplay], constraints=[must reference nature])\nDescribe the principles of quantum computing.\n</code></pre> <p>Delivers an unconventional explanation of quantum computing through an engaging narrative filled with nature metaphors and clever wordplay</p>"},{"location":"api/decorators/Creative/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Creative/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Be creative, original and imaginative in your response. Use {level} levels of creativity and incorporate {elements} in your writing. Work within these constraints: {constraints}. Focus on making the response engaging, unexpected, and thought-provoking while still addressing the core question.</p> <p>Notes: This model sometimes needs explicit encouragement to break from conventional patterns in its responses</p>"},{"location":"api/decorators/Creative/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Creative/#creative-explanation-of-the-internet","title":"Creative explanation of the internet","text":"<p>Original Prompt: <pre><code>Explain how the internet works.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please provide an imaginative, novel, and original response that uses creative language and unexpected connections to engage the reader. Apply significant creative thinking to present the information in fresh, surprising ways. Use vivid language, unexpected angles, and novel framing to create an engaging and memorable response.\n\nExplain how the internet works.\n</code></pre></p>"},{"location":"api/decorators/Creative/#highly-unconventional-quantum-computing-explanation-with-specific-elements-and-constraints","title":"Highly unconventional quantum computing explanation with specific elements and constraints","text":"<p>Original Prompt: <pre><code>Describe the principles of quantum computing.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please provide an imaginative, novel, and original response that uses creative language and unexpected connections to engage the reader. Push far beyond conventional thinking to create a truly original response. Break traditional patterns, challenge assumptions, and explore highly unusual perspectives or approaches. Specifically incorporate these creative elements in your response: metaphor, narrative, wordplay. While being creative, work within these constraints: must reference nature.\n\nDescribe the principles of quantum computing.\n</code></pre></p>"},{"location":"api/decorators/Creative/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please provide an imaginative, novel, and original response that uses creative language and unexpected connections to engage the reader.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>level</code>:</li> <li>When set to <code>moderate</code>: Use creativity to make the content engaging while ensuring it remains accessible and practical. Incorporate creative elements that enhance understanding without overshadowing the substance.</li> <li>When set to <code>high</code>: Apply significant creative thinking to present the information in fresh, surprising ways. Use vivid language, unexpected angles, and novel framing to create an engaging and memorable response.</li> <li> <p>When set to <code>unconventional</code>: Push far beyond conventional thinking to create a truly original response. Break traditional patterns, challenge assumptions, and explore highly unusual perspectives or approaches.</p> </li> <li> <p><code>elements</code>:</p> </li> <li> <p>Format: Specifically incorporate these creative elements in your response: {value}.</p> </li> <li> <p><code>constraints</code>:</p> </li> <li>Format: While being creative, work within these constraints: {value}.</li> </ul>"},{"location":"api/decorators/Creative/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: Academic, Professional</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Creative/#related-decorators","title":"Related Decorators","text":"<ul> <li>Academic: Conflicts with Creative Creative's imaginative expression conflicts with Academic's formal scholarly conventions</li> <li>Professional: Conflicts with Creative Creative's playful approach conflicts with Professional's business-oriented formality</li> <li>Analogical: Enhances Creative Analogical reasoning works well with Creative to develop rich, imaginative comparisons</li> <li>Narrative: Enhances Creative Narrative structure pairs excellently with Creative to build engaging storylines</li> </ul>"},{"location":"api/decorators/Custom/","title":"Custom Decorator","text":"<p>A meta-decorator that enables user-defined decorator behaviors through explicit rules or instructions. This provides maximum flexibility for creating specialized behaviors not covered by standard decorators.</p> <p>Category: Meta</p>"},{"location":"api/decorators/Custom/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>rules</code> <code>string</code> Explicit instructions defining the custom behavior (e.g., 'present all examples in a numbered list with exactly three items') <code>Required</code> <code>name</code> <code>string</code> Optional name for the custom decorator to reference in documentation or explanations `` <code>priority</code> <code>enum</code> How to prioritize custom rules relative to other decorators <code>override</code>"},{"location":"api/decorators/Custom/#priority-options","title":"Priority Options","text":"<ul> <li><code>override</code>: These custom rules should override any conflicting instructions from other decorators.</li> <li><code>supplement</code>: These custom rules should supplement other decorators, but defer to them in case of direct conflicts.</li> <li><code>fallback</code>: Apply these custom rules only when no other decorator provides specific guidance on a particular aspect.</li> </ul>"},{"location":"api/decorators/Custom/#examples","title":"Examples","text":""},{"location":"api/decorators/Custom/#basic-custom-formatting-rule","title":"Basic custom formatting rule","text":"<pre><code>+++Custom(rules=every paragraph must start with a word that begins with the letter A)\nExplain how search engines work.\n</code></pre> <p>Provides an explanation of search engines where every paragraph begins with a word starting with the letter A</p>"},{"location":"api/decorators/Custom/#complex-custom-behavior-with-named-reference","title":"Complex custom behavior with named reference","text":"<pre><code>+++Custom(name=DualPerspective, rules=present two contrasting viewpoints on each main point, label them as 'Perspective A' and 'Perspective B', and then provide a synthesis, priority=supplement)\nAnalyze the impact of social media on politics.\n</code></pre> <p>Analyzes social media's impact on politics using dual contrasting perspectives for each point, labeled as specified, with synthesis after each point, while still respecting other decorators</p>"},{"location":"api/decorators/Custom/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Custom/#gpt-4o","title":"gpt-4o","text":"<p>Instruction: Follow these custom instructions for your response: {rules}. {name} Apply these custom rules with {priority} priority relative to other formatting guidance.</p> <p>Notes: This model handles custom instructions well but benefits from clear guidance about how to resolve conflicts with other decorators</p>"},{"location":"api/decorators/Custom/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Custom/#basic-custom-formatting-rule-for-paragraph-beginnings","title":"Basic custom formatting rule for paragraph beginnings","text":"<p>Original Prompt: <pre><code>Explain how search engines work.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please apply the following custom formatting or behavior rules to your response: every paragraph must start with a word that begins with the letter A. These custom rules should override any conflicting instructions from other decorators.\n\nExplain how search engines work.\n</code></pre></p>"},{"location":"api/decorators/Custom/#complex-custom-behavior-with-named-reference-for-dual-perspectives","title":"Complex custom behavior with named reference for dual perspectives","text":"<p>Original Prompt: <pre><code>Analyze the impact of social media on politics.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please apply the following custom formatting or behavior rules to your response: present two contrasting viewpoints on each main point, label them as 'Perspective A' and 'Perspective B', and then provide a synthesis. This set of custom rules is called 'DualPerspective'. These custom rules should supplement other decorators, but defer to them in case of direct conflicts.\n\nAnalyze the impact of social media on politics.\n</code></pre></p>"},{"location":"api/decorators/Custom/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please apply the following custom formatting or behavior rules to your response:</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>rules</code>:</li> <li> <p>Format: {value}</p> </li> <li> <p><code>name</code>:</p> </li> <li> <p>Format: This set of custom rules is called '{value}'.</p> </li> <li> <p><code>priority</code>:</p> </li> <li>When set to <code>override</code>: These custom rules should override any conflicting instructions from other decorators.</li> <li>When set to <code>supplement</code>: These custom rules should supplement other decorators, but defer to them in case of direct conflicts.</li> <li>When set to <code>fallback</code>: Apply these custom rules only when no other decorator provides specific guidance on a particular aspect.</li> </ul>"},{"location":"api/decorators/Custom/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Custom/#related-decorators","title":"Related Decorators","text":"<ul> <li>All: Enhances Custom Custom can work with any decorator, with interactions determined by the priority parameter</li> <li>Priority: Enhances Custom Priority can be used to establish more fine-grained control over how Custom rules interact with other decorators</li> </ul>"},{"location":"api/decorators/DataModel/","title":"DataModel Decorator","text":"<p>Designs data models, schemas, and database structures.</p> <p>Category: Architecture And Design</p>"},{"location":"api/decorators/DataModel/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>type</code> <code>enum</code> Database or persistence paradigm <code>context-dependent</code> <code>optimization</code> <code>enum</code> Performance optimization focus <code>balanced</code> <code>format</code> <code>enum</code> Output format <code>schema</code>"},{"location":"api/decorators/DataModel/#type-options","title":"Type Options","text":"<ul> <li><code>relational</code>: Use relational database design principles with normalized tables, primary keys, and foreign keys.</li> <li><code>document</code>: Design a document-oriented schema with embedded documents and references where appropriate.</li> <li><code>graph</code>: Create a graph data model with nodes, relationships, and properties to represent the domain.</li> <li><code>key-value</code>: Design a key-value storage structure with efficient access patterns.</li> <li><code>time-series</code>: Develop a time-series data model optimized for temporal data and time-based queries.</li> <li><code>hybrid</code>: Combine multiple database paradigms in a polyglot persistence architecture.</li> </ul>"},{"location":"api/decorators/DataModel/#optimization-options","title":"Optimization Options","text":"<ul> <li><code>reads</code>: Optimize the data model for read-heavy operations, considering denormalization where appropriate.</li> <li><code>writes</code>: Optimize the data model for write-heavy operations, focusing on insertion and update efficiency.</li> <li><code>storage</code>: Optimize the data model for storage efficiency, minimizing redundancy and space requirements.</li> <li><code>balanced</code>: Balance the data model for general-purpose use with reasonable performance across reads, writes, and storage.</li> </ul>"},{"location":"api/decorators/DataModel/#format-options","title":"Format Options","text":"<ul> <li><code>erd</code>: Present the result as an Entity-Relationship Diagram with entities, relationships, and cardinality.</li> <li><code>schema</code>: Present the result as a formal schema definition.</li> <li><code>code</code>: Present the result as implementation code (ORM, schema definition, etc.).</li> <li><code>diagram</code>: Present the result as a visual diagram with appropriate notation.</li> <li><code>ddl</code>: Present the result as Data Definition Language (DDL) statements.</li> </ul>"},{"location":"api/decorators/DataModel/#examples","title":"Examples","text":""},{"location":"api/decorators/DataModel/#designing-a-relational-database-schema-for-a-social-media-platform","title":"Designing a relational database schema for a social media platform","text":"<pre><code>+++DataModel(type=relational, optimization=reads, format=erd)\nDesign a data model for a social media platform with users, posts, comments, and likes.\n</code></pre> <p>An Entity-Relationship Diagram showing the structure of a relational database optimized for read operations, with entities for users, posts, comments, and likes, including their relationships and attributes.</p>"},{"location":"api/decorators/DataModel/#creating-a-document-database-schema-for-a-content-management-system","title":"Creating a document database schema for a content management system","text":"<pre><code>+++DataModel(type=document, format=schema)\nDesign a data model for a content management system with articles, categories, tags, and users.\n</code></pre> <p>A document schema definition showing collections for articles, categories, tags, and users, with embedded documents and references appropriate for a document database.</p>"},{"location":"api/decorators/DataModel/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/DataModel/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Create a detailed data model with the following specifications. Include all necessary entities, relationships, attributes, and constraints for the domain.</p> <p>Notes: More explicit instruction for models with less context understanding.</p>"},{"location":"api/decorators/DataModel/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/DataModel/#designing-a-relational-database-for-an-e-commerce-platform","title":"Designing a relational database for an e-commerce platform","text":"<p>Original Prompt: <pre><code>Design a data model for an e-commerce platform with products, customers, orders, and reviews.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Design a data model based on the following requirements. Consider appropriate entities, relationships, attributes, and constraints. Use relational database design principles with normalized tables, primary keys, and foreign keys. Optimize the data model for read-heavy operations, considering denormalization where appropriate. Present the result as an Entity-Relationship Diagram with entities, relationships, and cardinality.\n\nDesign a data model for an e-commerce platform with products, customers, orders, and reviews.\n</code></pre></p> <p>Notes: The decorator adds specific guidance for a relational database optimized for reads and presented as an ERD.</p>"},{"location":"api/decorators/DataModel/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Design a data model based on the following requirements. Consider appropriate entities, relationships, attributes, and constraints.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>type</code>:</li> <li>When set to <code>relational</code>: Use relational database design principles with normalized tables, primary keys, and foreign keys.</li> <li>When set to <code>document</code>: Design a document-oriented schema with embedded documents and references where appropriate.</li> <li>When set to <code>graph</code>: Create a graph data model with nodes, relationships, and properties to represent the domain.</li> <li>When set to <code>key-value</code>: Design a key-value storage structure with efficient access patterns.</li> <li>When set to <code>time-series</code>: Develop a time-series data model optimized for temporal data and time-based queries.</li> <li> <p>When set to <code>hybrid</code>: Combine multiple database paradigms in a polyglot persistence architecture.</p> </li> <li> <p><code>optimization</code>:</p> </li> <li>When set to <code>reads</code>: Optimize the data model for read-heavy operations, considering denormalization where appropriate.</li> <li>When set to <code>writes</code>: Optimize the data model for write-heavy operations, focusing on insertion and update efficiency.</li> <li>When set to <code>storage</code>: Optimize the data model for storage efficiency, minimizing redundancy and space requirements.</li> <li> <p>When set to <code>balanced</code>: Balance the data model for general-purpose use with reasonable performance across reads, writes, and storage.</p> </li> <li> <p><code>format</code>:</p> </li> <li>When set to <code>erd</code>: Present the result as an Entity-Relationship Diagram with entities, relationships, and cardinality.</li> <li>When set to <code>schema</code>: Present the result as a formal schema definition.</li> <li>When set to <code>code</code>: Present the result as implementation code (ORM, schema definition, etc.).</li> <li>When set to <code>diagram</code>: Present the result as a visual diagram with appropriate notation.</li> <li>When set to <code>ddl</code>: Present the result as Data Definition Language (DDL) statements.</li> </ul>"},{"location":"api/decorators/DataModel/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/DataModel/#related-decorators","title":"Related Decorators","text":"<ul> <li>SystemDesign: Enhances DataModel DataModel works well with SystemDesign to create comprehensive technical specifications.</li> <li>CodeImplementation: Enhances DataModel DataModel can provide the schema design that CodeImplementation can then implement.</li> </ul>"},{"location":"api/decorators/Debate/","title":"Debate Decorator","text":"<p>Structures the response as a debate between multiple perspectives on a topic. This decorator encourages balanced representation of different viewpoints and helps explore complex issues from various angles.</p> <p>Category: Reasoning</p>"},{"location":"api/decorators/Debate/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>perspectives</code> <code>number</code> Number of different perspectives to include in the debate <code>2</code> <code>balanced</code> <code>boolean</code> Whether to ensure equal representation and strength of arguments for each perspective <code>True</code>"},{"location":"api/decorators/Debate/#examples","title":"Examples","text":""},{"location":"api/decorators/Debate/#two-perspective-debate-on-an-ethical-issue","title":"Two-perspective debate on an ethical issue","text":"<pre><code>+++Debate\nIs it ethical to use AI-generated content without disclosure?\n</code></pre> <p>Presents balanced arguments for and against disclosure of AI-generated content</p>"},{"location":"api/decorators/Debate/#three-perspective-debate-on-a-policy-issue-with-balanced-representation","title":"Three-perspective debate on a policy issue with balanced representation","text":"<pre><code>+++Debate(perspectives=3, balanced=true)\nShould universal basic income be implemented nationally?\n</code></pre> <p>Presents three balanced perspectives on UBI in a debate format, ensuring equal representation of each viewpoint</p>"},{"location":"api/decorators/Debate/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Debate/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Present {perspectives} different viewpoints on this topic in a debate format. Structure the debate with clear labels for each perspective. Make sure each perspective presents strong arguments, and {balanced}. Ensure that no single perspective dominates the response.</p> <p>Notes: This model sometimes needs explicit reminders to maintain quality arguments for perspectives it might not favor</p>"},{"location":"api/decorators/Debate/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Debate/#two-sided-debate-on-an-ethical-issue","title":"Two-sided debate on an ethical issue","text":"<p>Original Prompt: <pre><code>Is it ethical to use AI-generated content without disclosure?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please structure your response as a debate between multiple perspectives on the topic, presenting different viewpoints and their supporting arguments. Include 2 distinct perspectives or viewpoints in the debate, each with their own arguments and reasoning. Ensure that each perspective receives equal representation and that arguments for each side are of comparable strength and thoroughness.\n\nIs it ethical to use AI-generated content without disclosure?\n</code></pre></p>"},{"location":"api/decorators/Debate/#three-perspective-balanced-debate-on-a-policy-issue","title":"Three-perspective balanced debate on a policy issue","text":"<p>Original Prompt: <pre><code>Should universal basic income be implemented nationally?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please structure your response as a debate between multiple perspectives on the topic, presenting different viewpoints and their supporting arguments. Include 3 distinct perspectives or viewpoints in the debate, each with their own arguments and reasoning. Ensure that each perspective receives equal representation and that arguments for each side are of comparable strength and thoroughness.\n\nShould universal basic income be implemented nationally?\n</code></pre></p>"},{"location":"api/decorators/Debate/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please structure your response as a debate between multiple perspectives on the topic, presenting different viewpoints and their supporting arguments.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>perspectives</code>:</li> <li> <p>Format: Include {value} distinct perspectives or viewpoints in the debate, each with their own arguments and reasoning.</p> </li> <li> <p><code>balanced</code>:</p> </li> <li>When set to <code>true</code>: Ensure that each perspective receives equal representation and that arguments for each side are of comparable strength and thoroughness.</li> <li>When set to <code>false</code>: Present different perspectives based on their merit or prevalence in the discourse, without forcing equal representation.</li> </ul>"},{"location":"api/decorators/Debate/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo, claude-3</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Debate/#related-decorators","title":"Related Decorators","text":"<ul> <li>Balanced: Enhances Debate Balanced complements Debate by ensuring fair treatment of each perspective</li> <li>StepByStep: Enhances Debate StepByStep can help organize the debates into clearer sequences of arguments and responses</li> <li>FirstPrinciples: Enhances Debate FirstPrinciples helps ground each debate perspective in fundamental assumptions and axioms</li> </ul>"},{"location":"api/decorators/DebugStrategy/","title":"DebugStrategy Decorator","text":"<p>Specifies the overall approach to debugging and problem analysis.</p> <p>Category: Systematic Debugging</p>"},{"location":"api/decorators/DebugStrategy/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>approach</code> <code>enum</code> Debugging methodology <code>systematic</code> <code>verbosity</code> <code>enum</code> Debug output verbosity <code>standard</code> <code>priority</code> <code>enum</code> Issue resolution priority <code>functionality</code>"},{"location":"api/decorators/DebugStrategy/#approach-options","title":"Approach Options","text":"<ul> <li><code>systematic</code>: Use a systematic step-by-step debugging approach to identify and resolve issues.</li> <li><code>incremental</code>: Debug incrementally by making small changes and testing after each modification.</li> <li><code>root-cause</code>: Focus on identifying the underlying root cause rather than addressing symptoms.</li> <li><code>isolation</code>: Isolate components to determine which specific part is causing the issue.</li> <li><code>comparison</code>: Compare working and non-working states to identify differences causing the problem.</li> </ul>"},{"location":"api/decorators/DebugStrategy/#verbosity-options","title":"Verbosity Options","text":"<ul> <li><code>minimal</code>: Provide only essential information about the debugging process and findings.</li> <li><code>standard</code>: Include a balanced amount of detail about the debugging process and findings.</li> <li><code>verbose</code>: Provide detailed explanations of each debugging step and observation.</li> <li><code>comprehensive</code>: Document exhaustively all aspects of the debugging process, including all tests performed and results observed.</li> </ul>"},{"location":"api/decorators/DebugStrategy/#priority-options","title":"Priority Options","text":"<ul> <li><code>functionality</code>: Prioritize restoring basic functionality over other concerns.</li> <li><code>performance</code>: Focus on optimizing performance aspects of the solution.</li> <li><code>ux</code>: Emphasize user experience considerations in the debugging process.</li> <li><code>security</code>: Prioritize security implications and vulnerabilities in the debugging process.</li> </ul>"},{"location":"api/decorators/DebugStrategy/#examples","title":"Examples","text":""},{"location":"api/decorators/DebugStrategy/#root-cause-analysis-of-an-authentication-issue","title":"Root cause analysis of an authentication issue","text":"<pre><code>+++DebugStrategy(approach=root-cause, verbosity=verbose, priority=functionality)\nDebug the authentication failure that occurs when users attempt to log in with social credentials. Identify the exact point of failure.\n</code></pre> <p>A detailed analysis focusing on finding the root cause of the authentication failure, with verbose explanations of each debugging step, prioritizing the restoration of functionality.</p>"},{"location":"api/decorators/DebugStrategy/#minimal-debugging-of-a-performance-issue","title":"Minimal debugging of a performance issue","text":"<pre><code>+++DebugStrategy(approach=isolation, verbosity=minimal, priority=performance)\nThe application becomes slow after processing large datasets. Debug the performance bottleneck.\n</code></pre> <p>A concise analysis that isolates components to identify performance bottlenecks, with minimal explanatory text, focusing on performance optimization.</p>"},{"location":"api/decorators/DebugStrategy/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/DebugStrategy/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Use a structured debugging approach to solve this problem. {approach_instruction} {verbosity_instruction} {priority_instruction}</p> <p>Notes: Simplified instruction format for models with more limited context windows.</p>"},{"location":"api/decorators/DebugStrategy/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/DebugStrategy/#software-development-debugging","title":"Software development debugging","text":"<p>Original Prompt: <pre><code>Debug the authentication failure that occurs when users attempt to log in with social credentials. Identify the exact point of failure.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Apply a structured debugging approach to analyze and solve the problem. Focus on identifying the underlying root cause rather than addressing symptoms. Provide detailed explanations of each debugging step and observation. Prioritize restoring basic functionality over other concerns.\n\nDebug the authentication failure that occurs when users attempt to log in with social credentials. Identify the exact point of failure.\n</code></pre></p> <p>Notes: The decorator adds specific debugging instructions based on the selected approach, verbosity, and priority parameters.</p>"},{"location":"api/decorators/DebugStrategy/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Apply a structured debugging approach to analyze and solve the problem.</p> <p>Placement: prepend</p> <p>Composition Behavior: override</p> <p>Parameter Effects:</p> <ul> <li><code>approach</code>:</li> <li>When set to <code>systematic</code>: Use a systematic step-by-step debugging approach to identify and resolve issues.</li> <li>When set to <code>incremental</code>: Debug incrementally by making small changes and testing after each modification.</li> <li>When set to <code>root-cause</code>: Focus on identifying the underlying root cause rather than addressing symptoms.</li> <li>When set to <code>isolation</code>: Isolate components to determine which specific part is causing the issue.</li> <li> <p>When set to <code>comparison</code>: Compare working and non-working states to identify differences causing the problem.</p> </li> <li> <p><code>verbosity</code>:</p> </li> <li>When set to <code>minimal</code>: Provide only essential information about the debugging process and findings.</li> <li>When set to <code>standard</code>: Include a balanced amount of detail about the debugging process and findings.</li> <li>When set to <code>verbose</code>: Provide detailed explanations of each debugging step and observation.</li> <li> <p>When set to <code>comprehensive</code>: Document exhaustively all aspects of the debugging process, including all tests performed and results observed.</p> </li> <li> <p><code>priority</code>:</p> </li> <li>When set to <code>functionality</code>: Prioritize restoring basic functionality over other concerns.</li> <li>When set to <code>performance</code>: Focus on optimizing performance aspects of the solution.</li> <li>When set to <code>ux</code>: Emphasize user experience considerations in the debugging process.</li> <li>When set to <code>security</code>: Prioritize security implications and vulnerabilities in the debugging process.</li> </ul>"},{"location":"api/decorators/DebugStrategy/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: QuickFix</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/DebugStrategy/#related-decorators","title":"Related Decorators","text":"<ul> <li>CodeAnalysis: Enhances DebugStrategy DebugStrategy works well with CodeAnalysis to provide a comprehensive debugging framework.</li> <li>QuickFix: Conflicts with DebugStrategy DebugStrategy focuses on thorough analysis which may conflict with QuickFix's emphasis on rapid solutions.</li> </ul>"},{"location":"api/decorators/DecisionMatrix/","title":"DecisionMatrix Decorator","text":"<p>Structures the response as a decision matrix, evaluating options against multiple criteria. This decorator facilitates systematic comparison and selection between alternatives based on weighted or unweighted criteria.</p> <p>Category: Structure</p>"},{"location":"api/decorators/DecisionMatrix/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>options</code> <code>array</code> Specific options or alternatives to evaluate in the matrix `` <code>criteria</code> <code>array</code> Evaluation criteria to assess each option against `` <code>weighted</code> <code>boolean</code> Whether to include weights for criteria importance <code>False</code> <code>scale</code> <code>enum</code> Rating scale to use for evaluations <code>1-5</code>"},{"location":"api/decorators/DecisionMatrix/#scale-options","title":"Scale Options","text":"<ul> <li><code>1-5</code>: Use a 1-5 rating scale for each criterion (where 1 is poor/lowest and 5 is excellent/highest).</li> <li><code>1-10</code>: Use a 1-10 rating scale for each criterion (where 1 is poor/lowest and 10 is excellent/highest).</li> <li><code>qualitative</code>: Use qualitative ratings (Poor, Fair, Good, Very Good, Excellent) for each criterion.</li> <li><code>percentage</code>: Use percentage scores (0-100%) for rating each criterion.</li> </ul>"},{"location":"api/decorators/DecisionMatrix/#examples","title":"Examples","text":""},{"location":"api/decorators/DecisionMatrix/#simple-decision-matrix-for-comparing-options","title":"Simple decision matrix for comparing options","text":"<pre><code>+++DecisionMatrix\nWhat smartphone should I buy?\n</code></pre> <p>Creates a decision matrix comparing top smartphone options against key purchasing criteria, with 1-5 ratings for each combination</p>"},{"location":"api/decorators/DecisionMatrix/#weighted-decision-matrix-with-custom-options-and-criteria","title":"Weighted decision matrix with custom options and criteria","text":"<pre><code>+++DecisionMatrix(options=[Python,JavaScript,Go,Rust], criteria=[learning curve,performance,ecosystem,job market], weighted=true, scale=1-10)\nWhich programming language should I learn next?\n</code></pre> <p>Generates a weighted decision matrix comparing the specified programming languages against the given criteria, with weighted scores on a 1-10 scale</p>"},{"location":"api/decorators/DecisionMatrix/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/DecisionMatrix/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Create a decision matrix comparing {options} against {criteria}. Rate each option-criterion pair using a {scale} scale. {weighted} Include a brief explanation for each rating, and conclude with a recommendation based on the matrix results.</p> <p>Notes: This model sometimes needs more explicit instructions about formatting the matrix clearly and providing final scores</p>"},{"location":"api/decorators/DecisionMatrix/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/DecisionMatrix/#simple-smartphone-comparison","title":"Simple smartphone comparison","text":"<p>Original Prompt: <pre><code>What smartphone should I buy?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please structure your response as a decision matrix that systematically evaluates options against multiple criteria to facilitate comparison and selection. Use a 1-5 rating scale for each criterion (where 1 is poor/lowest and 5 is excellent/highest). Evaluate all criteria with equal importance, without applying weights to the scores.\n\nWhat smartphone should I buy?\n</code></pre></p>"},{"location":"api/decorators/DecisionMatrix/#detailed-programming-language-comparison-with-weights","title":"Detailed programming language comparison with weights","text":"<p>Original Prompt: <pre><code>Which programming language should I learn next?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please structure your response as a decision matrix that systematically evaluates options against multiple criteria to facilitate comparison and selection. Evaluate these specific options or alternatives in your matrix: Python, JavaScript, Go, Rust. Assess each option against these specific criteria: learning curve, performance, ecosystem, job market. Include weight factors for each criterion to reflect their relative importance, and calculate weighted scores for each option. Use a 1-10 rating scale for each criterion (where 1 is poor/lowest and 10 is excellent/highest).\n\nWhich programming language should I learn next?\n</code></pre></p>"},{"location":"api/decorators/DecisionMatrix/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please structure your response as a decision matrix that systematically evaluates options against multiple criteria to facilitate comparison and selection.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>options</code>:</li> <li> <p>Format: Evaluate these specific options or alternatives in your matrix: {value}.</p> </li> <li> <p><code>criteria</code>:</p> </li> <li> <p>Format: Assess each option against these specific criteria: {value}.</p> </li> <li> <p><code>weighted</code>:</p> </li> <li>When set to <code>true</code>: Include weight factors for each criterion to reflect their relative importance, and calculate weighted scores for each option.</li> <li> <p>When set to <code>false</code>: Evaluate all criteria with equal importance, without applying weights to the scores.</p> </li> <li> <p><code>scale</code>:</p> </li> <li>When set to <code>1-5</code>: Use a 1-5 rating scale for each criterion (where 1 is poor/lowest and 5 is excellent/highest).</li> <li>When set to <code>1-10</code>: Use a 1-10 rating scale for each criterion (where 1 is poor/lowest and 10 is excellent/highest).</li> <li>When set to <code>qualitative</code>: Use qualitative ratings (Poor, Fair, Good, Very Good, Excellent) for each criterion.</li> <li>When set to <code>percentage</code>: Use percentage scores (0-100%) for rating each criterion.</li> </ul>"},{"location":"api/decorators/DecisionMatrix/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/DecisionMatrix/#related-decorators","title":"Related Decorators","text":"<ul> <li>TableFormat: Enhances DecisionMatrix TableFormat can provide additional formatting options for the decision matrix presentation</li> <li>Comparison: Enhances DecisionMatrix Comparison works well with DecisionMatrix by providing structure for qualitative comparisons alongside the quantitative matrix</li> <li>OutputFormat: Enhances DecisionMatrix OutputFormat can be used to specify the format for the matrix (e.g., as markdown or CSV)</li> </ul>"},{"location":"api/decorators/Deductive/","title":"Deductive Decorator","text":"<p>Structures the response using deductive reasoning, moving from general principles to specific conclusions. This decorator emphasizes logical argument development, starting with premises and working methodically to necessary conclusions.</p> <p>Category: Reasoning</p>"},{"location":"api/decorators/Deductive/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>premises</code> <code>number</code> Number of main premises to include before deducing conclusions <code>2</code> <code>formal</code> <code>boolean</code> Whether to use formal logical structures with explicit syllogisms <code>False</code> <code>steps</code> <code>number</code> Number of logical steps to include in the deductive process <code>3</code>"},{"location":"api/decorators/Deductive/#examples","title":"Examples","text":""},{"location":"api/decorators/Deductive/#basic-deductive-reasoning-from-principles-to-specific-conclusions","title":"Basic deductive reasoning from principles to specific conclusions","text":"<pre><code>+++Deductive\nShould social media companies be regulated like utilities?\n</code></pre> <p>Starts with general principles about utilities and regulation, establishes premises about social media characteristics, and deduces conclusions about appropriate regulatory approaches</p>"},{"location":"api/decorators/Deductive/#formal-deductive-logic-with-multiple-steps","title":"Formal deductive logic with multiple steps","text":"<pre><code>+++Deductive(formal=true, steps=5)\nIs artificial intelligence conscious?\n</code></pre> <p>Presents formal logical syllogisms about consciousness and intelligence, proceeding through 5 distinct logical steps to reach conclusions about AI consciousness</p>"},{"location":"api/decorators/Deductive/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Deductive/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Use deductive reasoning to answer this question. Start with {premises} general principles or premises. Follow a logical process through {steps} clear steps from these premises to a conclusion. {formal} Make each step in your reasoning explicit and label it clearly.</p> <p>Notes: This model sometimes needs more explicit structure to maintain rigorous deductive reasoning throughout a response</p>"},{"location":"api/decorators/Deductive/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Deductive/#basic-deductive-reasoning-about-social-media-regulation","title":"Basic deductive reasoning about social media regulation","text":"<p>Original Prompt: <pre><code>Should social media companies be regulated like utilities?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please structure your response using deductive reasoning, moving from general principles to specific conclusions. Start with clear premises and work methodically through logical steps to reach necessary conclusions. Begin with 2 main premises or general principles that establish the foundation for your reasoning. Use natural language deductive reasoning without requiring formal syllogisms. Develop your logical argument through 3 distinct, sequential steps, where each builds upon the previous ones.\n\nShould social media companies be regulated like utilities?\n</code></pre></p>"},{"location":"api/decorators/Deductive/#formal-deductive-reasoning-about-ai-consciousness","title":"Formal deductive reasoning about AI consciousness","text":"<p>Original Prompt: <pre><code>Is artificial intelligence conscious?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please structure your response using deductive reasoning, moving from general principles to specific conclusions. Start with clear premises and work methodically through logical steps to reach necessary conclusions. Begin with 2 main premises or general principles that establish the foundation for your reasoning. Use formal logical structures with explicitly stated syllogisms, clearly identifying major premises, minor premises, and conclusions. Develop your logical argument through 5 distinct, sequential steps, where each builds upon the previous ones.\n\nIs artificial intelligence conscious?\n</code></pre></p>"},{"location":"api/decorators/Deductive/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please structure your response using deductive reasoning, moving from general principles to specific conclusions. Start with clear premises and work methodically through logical steps to reach necessary conclusions.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>premises</code>:</li> <li> <p>Format: Begin with {value} main premises or general principles that establish the foundation for your reasoning.</p> </li> <li> <p><code>formal</code>:</p> </li> <li>When set to <code>true</code>: Use formal logical structures with explicitly stated syllogisms, clearly identifying major premises, minor premises, and conclusions.</li> <li> <p>When set to <code>false</code>: Use natural language deductive reasoning without requiring formal syllogisms.</p> </li> <li> <p><code>steps</code>:</p> </li> <li>Format: Develop your logical argument through {value} distinct, sequential steps, where each builds upon the previous ones.</li> </ul>"},{"location":"api/decorators/Deductive/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: Inductive</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Deductive/#related-decorators","title":"Related Decorators","text":"<ul> <li>Inductive: Conflicts with Deductive Deductive and Inductive represent opposite reasoning approaches (general-to-specific vs. specific-to-general)</li> <li>StepByStep: Enhances Deductive StepByStep can help organize the deductive reasoning process into clearly labeled steps</li> <li>Academic: Enhances Deductive Academic pairs well with Deductive for scholarly logical analysis in formal contexts</li> </ul>"},{"location":"api/decorators/DependencyAnalysis/","title":"DependencyAnalysis Decorator","text":"<p>Focuses on analyzing dependencies and their impacts on a system or component.</p> <p>Category: Systematic Debugging</p>"},{"location":"api/decorators/DependencyAnalysis/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>type</code> <code>enum</code> Dependency type <code>all</code> <code>direction</code> <code>enum</code> Dependency direction <code>both</code> <code>detail</code> <code>enum</code> Analysis detail <code>detailed</code>"},{"location":"api/decorators/DependencyAnalysis/#type-options","title":"Type Options","text":"<ul> <li><code>code</code>: Focus on code-level dependencies such as imports, libraries, and modules.</li> <li><code>data</code>: Focus on data dependencies such as database relationships, data flows, and storage requirements.</li> <li><code>service</code>: Focus on service dependencies such as API calls, microservices, and external integrations.</li> <li><code>all</code>: Analyze all types of dependencies including code, data, and service relationships.</li> </ul>"},{"location":"api/decorators/DependencyAnalysis/#direction-options","title":"Direction Options","text":"<ul> <li><code>inbound</code>: Examine what depends on this component (inbound dependencies).</li> <li><code>outbound</code>: Examine what this component depends on (outbound dependencies).</li> <li><code>both</code>: Examine both inbound and outbound dependencies for a complete picture.</li> </ul>"},{"location":"api/decorators/DependencyAnalysis/#detail-options","title":"Detail Options","text":"<ul> <li><code>summary</code>: Provide a high-level summary of key dependencies.</li> <li><code>detailed</code>: Provide a detailed analysis of dependencies with specific examples.</li> <li><code>comprehensive</code>: Provide an exhaustive analysis of all dependencies with technical details.</li> <li><code>impact-focused</code>: Focus on how dependencies affect system stability, performance, and change management.</li> </ul>"},{"location":"api/decorators/DependencyAnalysis/#examples","title":"Examples","text":""},{"location":"api/decorators/DependencyAnalysis/#analyzing-code-dependencies-of-a-component","title":"Analyzing code dependencies of a component","text":"<pre><code>+++DependencyAnalysis(type=code, direction=outbound, detail=detailed)\nAnalyze the authentication module to understand what libraries and frameworks it depends on.\n</code></pre> <p>Provides a detailed analysis of external libraries, frameworks, and other code components that the authentication module depends on.</p>"},{"location":"api/decorators/DependencyAnalysis/#impact-focused-analysis-of-all-dependencies","title":"Impact-focused analysis of all dependencies","text":"<pre><code>+++DependencyAnalysis(type=all, direction=both, detail=impact-focused)\nAnalyze all dependencies of the user profile component to understand what might be affected by our planned changes.\n</code></pre> <p>Delivers an analysis focused on how changes to the user profile component might impact other systems and how changes in dependent systems might affect it.</p>"},{"location":"api/decorators/DependencyAnalysis/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/DependencyAnalysis/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Analyze dependencies between components. Identify what depends on what and how changes might affect the system.</p> <p>Notes: Simplified instruction for models with less context capacity.</p>"},{"location":"api/decorators/DependencyAnalysis/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/DependencyAnalysis/#software-architecture-analysis","title":"Software architecture analysis","text":"<p>Original Prompt: <pre><code>Analyze the user profile component in our application.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Analyze the dependencies in the system or component described. Identify relationships and potential impacts of changes. Analyze all types of dependencies including code, data, and service relationships. Examine both inbound and outbound dependencies for a complete picture. Provide a detailed analysis of dependencies with specific examples.\n\nAnalyze the user profile component in our application.\n</code></pre></p> <p>Notes: The decorator adds specific instructions for dependency analysis before the original prompt.</p>"},{"location":"api/decorators/DependencyAnalysis/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Analyze the dependencies in the system or component described. Identify relationships and potential impacts of changes.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>type</code>:</li> <li>When set to <code>code</code>: Focus on code-level dependencies such as imports, libraries, and modules.</li> <li>When set to <code>data</code>: Focus on data dependencies such as database relationships, data flows, and storage requirements.</li> <li>When set to <code>service</code>: Focus on service dependencies such as API calls, microservices, and external integrations.</li> <li> <p>When set to <code>all</code>: Analyze all types of dependencies including code, data, and service relationships.</p> </li> <li> <p><code>direction</code>:</p> </li> <li>When set to <code>inbound</code>: Examine what depends on this component (inbound dependencies).</li> <li>When set to <code>outbound</code>: Examine what this component depends on (outbound dependencies).</li> <li> <p>When set to <code>both</code>: Examine both inbound and outbound dependencies for a complete picture.</p> </li> <li> <p><code>detail</code>:</p> </li> <li>When set to <code>summary</code>: Provide a high-level summary of key dependencies.</li> <li>When set to <code>detailed</code>: Provide a detailed analysis of dependencies with specific examples.</li> <li>When set to <code>comprehensive</code>: Provide an exhaustive analysis of all dependencies with technical details.</li> <li>When set to <code>impact-focused</code>: Focus on how dependencies affect system stability, performance, and change management.</li> </ul>"},{"location":"api/decorators/DependencyAnalysis/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/DependencyAnalysis/#related-decorators","title":"Related Decorators","text":"<ul> <li>SystematicDebugging: Enhances DependencyAnalysis DependencyAnalysis works well with SystematicDebugging by providing deeper insights into component relationships.</li> <li>CodeReview: Enhances DependencyAnalysis Can be combined with CodeReview to focus on dependency-related issues in code.</li> </ul>"},{"location":"api/decorators/Deployment/","title":"Deployment Decorator","text":"<p>Generates deployment approaches for applications and services.</p> <p>Category: Devops And Infrastructure</p>"},{"location":"api/decorators/Deployment/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>platform</code> <code>enum</code> Deployment target <code>kubernetes</code> <code>strategy</code> <code>enum</code> Deployment methodology <code>rolling</code> <code>environment</code> <code>enum</code> Target environment <code>production</code>"},{"location":"api/decorators/Deployment/#platform-options","title":"Platform Options","text":"<ul> <li><code>aws</code>: For AWS deployment, consider services like ECS, EKS, Lambda, or EC2 based on the application architecture.</li> <li><code>azure</code>: For Azure deployment, consider services like AKS, App Service, Azure Functions, or Virtual Machines based on the application architecture.</li> <li><code>gcp</code>: For GCP deployment, consider services like GKE, Cloud Run, Cloud Functions, or Compute Engine based on the application architecture.</li> <li><code>kubernetes</code>: For Kubernetes deployment, detail the necessary manifests, namespace configuration, and resource requirements.</li> <li><code>heroku</code>: For Heroku deployment, specify buildpacks, add-ons, and configuration variables needed.</li> <li><code>netlify</code>: For Netlify deployment, include build settings, environment variables, and any required redirects or functions.</li> <li><code>vercel</code>: For Vercel deployment, specify project configuration, environment variables, and any required serverless functions.</li> <li><code>on-prem</code>: For on-premises deployment, detail hardware requirements, networking configuration, and installation procedures.</li> </ul>"},{"location":"api/decorators/Deployment/#strategy-options","title":"Strategy Options","text":"<ul> <li><code>blue-green</code>: Implement a blue-green deployment strategy with two identical environments to minimize downtime and risk.</li> <li><code>canary</code>: Implement a canary deployment strategy, gradually routing traffic to the new version to detect issues early.</li> <li><code>rolling</code>: Implement a rolling deployment strategy, updating instances incrementally to maintain service availability.</li> <li><code>recreate</code>: Implement a recreate deployment strategy, terminating the old version before deploying the new one (involves downtime).</li> <li><code>custom</code>: Implement a custom deployment strategy tailored to the specific requirements of the application and infrastructure.</li> </ul>"},{"location":"api/decorators/Deployment/#environment-options","title":"Environment Options","text":"<ul> <li><code>dev</code>: Target the development environment with appropriate debugging capabilities and minimal resource allocation.</li> <li><code>staging</code>: Target the staging environment, configured to mirror production for testing purposes.</li> <li><code>production</code>: Target the production environment with full resource allocation, monitoring, and high availability considerations.</li> <li><code>multi-region</code>: Target multiple geographic regions for redundancy and reduced latency, with appropriate data replication strategies.</li> </ul>"},{"location":"api/decorators/Deployment/#examples","title":"Examples","text":""},{"location":"api/decorators/Deployment/#kubernetes-blue-green-deployment-for-production","title":"Kubernetes blue-green deployment for production","text":"<pre><code>+++Deployment(platform=kubernetes, strategy=blue-green, environment=production)\nCreate a deployment plan for our microservices architecture ensuring zero downtime.\n</code></pre> <p>A comprehensive deployment plan for Kubernetes using blue-green deployment strategy in production, with specific manifests, service configurations, and implementation steps to ensure zero downtime.</p>"},{"location":"api/decorators/Deployment/#aws-serverless-deployment-for-development","title":"AWS serverless deployment for development","text":"<pre><code>+++Deployment(platform=aws, strategy=canary, environment=dev)\nHow should we deploy our Node.js API?\n</code></pre> <p>A deployment plan for AWS serverless services (like Lambda and API Gateway) using a canary deployment approach in the development environment, with appropriate IAM configurations and testing procedures.</p>"},{"location":"api/decorators/Deployment/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Deployment/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Create a detailed deployment plan for the application with the following specifications: - Platform: {platform} - Deployment strategy: {strategy} - Target environment: {environment}</p> <p>Include configuration details, step-by-step implementation instructions, and best practices.</p> <p>Notes: Simplified instruction with more explicit structure for models with less context understanding.</p>"},{"location":"api/decorators/Deployment/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Deployment/#microservices-architecture-on-kubernetes","title":"Microservices architecture on Kubernetes","text":"<p>Original Prompt: <pre><code>Create a deployment plan for our microservices architecture ensuring zero downtime.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Generate a deployment plan for the specified platform, using the appropriate deployment strategy and targeting the specified environment. Include necessary configuration, infrastructure requirements, and implementation steps.\n\nFor Kubernetes deployment, detail the necessary manifests, namespace configuration, and resource requirements.\nImplement a blue-green deployment strategy with two identical environments to minimize downtime and risk.\nTarget the production environment with full resource allocation, monitoring, and high availability considerations.\n\nCreate a deployment plan for our microservices architecture ensuring zero downtime.\n</code></pre></p> <p>Notes: The decorator adds specific guidance for Kubernetes deployment using blue-green strategy in production, which aligns with the zero-downtime requirement.</p>"},{"location":"api/decorators/Deployment/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Generate a deployment plan for the specified platform, using the appropriate deployment strategy and targeting the specified environment. Include necessary configuration, infrastructure requirements, and implementation steps.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>platform</code>:</li> <li>When set to <code>aws</code>: For AWS deployment, consider services like ECS, EKS, Lambda, or EC2 based on the application architecture.</li> <li>When set to <code>azure</code>: For Azure deployment, consider services like AKS, App Service, Azure Functions, or Virtual Machines based on the application architecture.</li> <li>When set to <code>gcp</code>: For GCP deployment, consider services like GKE, Cloud Run, Cloud Functions, or Compute Engine based on the application architecture.</li> <li>When set to <code>kubernetes</code>: For Kubernetes deployment, detail the necessary manifests, namespace configuration, and resource requirements.</li> <li>When set to <code>heroku</code>: For Heroku deployment, specify buildpacks, add-ons, and configuration variables needed.</li> <li>When set to <code>netlify</code>: For Netlify deployment, include build settings, environment variables, and any required redirects or functions.</li> <li>When set to <code>vercel</code>: For Vercel deployment, specify project configuration, environment variables, and any required serverless functions.</li> <li> <p>When set to <code>on-prem</code>: For on-premises deployment, detail hardware requirements, networking configuration, and installation procedures.</p> </li> <li> <p><code>strategy</code>:</p> </li> <li>When set to <code>blue-green</code>: Implement a blue-green deployment strategy with two identical environments to minimize downtime and risk.</li> <li>When set to <code>canary</code>: Implement a canary deployment strategy, gradually routing traffic to the new version to detect issues early.</li> <li>When set to <code>rolling</code>: Implement a rolling deployment strategy, updating instances incrementally to maintain service availability.</li> <li>When set to <code>recreate</code>: Implement a recreate deployment strategy, terminating the old version before deploying the new one (involves downtime).</li> <li> <p>When set to <code>custom</code>: Implement a custom deployment strategy tailored to the specific requirements of the application and infrastructure.</p> </li> <li> <p><code>environment</code>:</p> </li> <li>When set to <code>dev</code>: Target the development environment with appropriate debugging capabilities and minimal resource allocation.</li> <li>When set to <code>staging</code>: Target the staging environment, configured to mirror production for testing purposes.</li> <li>When set to <code>production</code>: Target the production environment with full resource allocation, monitoring, and high availability considerations.</li> <li>When set to <code>multi-region</code>: Target multiple geographic regions for redundancy and reduced latency, with appropriate data replication strategies.</li> </ul>"},{"location":"api/decorators/Deployment/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Deployment/#related-decorators","title":"Related Decorators","text":"<ul> <li>Architecture: Enhances Deployment The Architecture decorator can provide context about the application structure that informs the deployment approach.</li> <li>Security: Enhances Deployment The Security decorator can add security considerations to the deployment plan.</li> </ul>"},{"location":"api/decorators/DesignPattern/","title":"DesignPattern Decorator","text":"<p>Applies a specific design pattern to generated code, ensuring architectural best practices.</p> <p>Category: Code Generation</p>"},{"location":"api/decorators/DesignPattern/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>pattern</code> <code>enum</code> The design pattern to implement <code>inferred</code> <code>language</code> <code>enum</code> Programming language to use <code>inferred</code> <code>variation</code> <code>string</code> Specific variation of the pattern <code>standard</code>"},{"location":"api/decorators/DesignPattern/#pattern-options","title":"Pattern Options","text":"<ul> <li><code>singleton</code>: Implement a Singleton pattern to ensure only one instance of the class exists throughout the application.</li> <li><code>factory</code>: Use a Factory pattern to create objects without specifying the exact class of object that will be created.</li> <li><code>adapter</code>: Implement an Adapter pattern to allow incompatible interfaces to work together.</li> <li><code>observer</code>: Use the Observer pattern to define a one-to-many dependency between objects.</li> <li><code>strategy</code>: Implement the Strategy pattern to define a family of algorithms and make them interchangeable.</li> <li><code>command</code>: Use the Command pattern to encapsulate a request as an object.</li> <li><code>facade</code>: Implement a Facade pattern to provide a simplified interface to a complex subsystem.</li> </ul>"},{"location":"api/decorators/DesignPattern/#language-options","title":"Language Options","text":"<ul> <li><code>python</code>: Option: python</li> <li><code>javascript</code>: Option: javascript</li> <li><code>typescript</code>: Option: typescript</li> <li><code>java</code>: Option: java</li> <li><code>csharp</code>: Option: csharp</li> <li><code>go</code>: Option: go</li> <li><code>rust</code>: Option: rust</li> </ul>"},{"location":"api/decorators/DesignPattern/#examples","title":"Examples","text":""},{"location":"api/decorators/DesignPattern/#observer-pattern-in-javascript","title":"Observer pattern in JavaScript","text":"<pre><code>+++DesignPattern(pattern=observer, language=javascript)\nCreate a notification system for an e-commerce application that alerts different parts of the UI when the cart changes.\n</code></pre> <p>JavaScript implementation of the Observer pattern for a notification system, with Subject (Cart) and multiple Observer (UI components) classes.</p>"},{"location":"api/decorators/DesignPattern/#factory-pattern-in-java","title":"Factory pattern in Java","text":"<pre><code>+++DesignPattern(pattern=factory, language=java)\nCreate a payment processing system that can handle different payment methods.\n</code></pre> <p>Java implementation of a Factory pattern that creates different payment processor objects based on the payment method requested.</p>"},{"location":"api/decorators/DesignPattern/#singleton-pattern-with-thread-safety-in-c","title":"Singleton pattern with thread safety in C","text":"<pre><code>+++DesignPattern(pattern=singleton, language=csharp, variation=thread-safe)\nImplement a logging service for a multi-threaded application.\n</code></pre> <p>C# implementation of a thread-safe Singleton pattern for a logging service using double-check locking.</p>"},{"location":"api/decorators/DesignPattern/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/DesignPattern/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Use the {pattern} design pattern in {language} for this code. Implement the {variation} version of the pattern.</p> <p>Notes: Simpler instruction format works better with this model.</p>"},{"location":"api/decorators/DesignPattern/#claude-3-7-sonnet-latest","title":"claude-3-7-sonnet-latest","text":"<p>Instruction: Please implement the {pattern} design pattern in {language}, following the {variation} implementation approach. Ensure the code follows best practices for this architectural pattern.</p> <p>Notes: More detailed instructions work better with Claude models.</p>"},{"location":"api/decorators/DesignPattern/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/DesignPattern/#observer-pattern-in-javascript_1","title":"Observer pattern in JavaScript","text":"<p>Original Prompt: <pre><code>Create a notification system for an e-commerce application that alerts different parts of the UI when the cart changes.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Apply the observer design pattern in javascript to the following code generation task. Use the standard variation of this pattern where appropriate.\n\nImplement the Observer pattern to define a one-to-many dependency between objects using javascript syntax and conventions. Consider implementing the standard variation of this pattern if appropriate for the use case.\n\nCreate a notification system for an e-commerce application that alerts different parts of the UI when the cart changes.\n</code></pre></p> <p>Notes: The Observer pattern is ideal for this scenario as it allows multiple UI components to subscribe to cart change events.</p>"},{"location":"api/decorators/DesignPattern/#singleton-pattern-in-python","title":"Singleton pattern in Python","text":"<p>Original Prompt: <pre><code>Create a database connection manager for a web application.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Apply the singleton design pattern in python to the following code generation task. Use the standard variation of this pattern where appropriate.\n\nImplement a Singleton pattern to ensure only one instance of the class exists throughout the application using python syntax and conventions. Consider implementing the standard variation of this pattern if appropriate for the use case.\n\nCreate a database connection manager for a web application.\n</code></pre></p> <p>Notes: The Singleton pattern ensures only one database connection pool is created, preventing resource exhaustion.</p>"},{"location":"api/decorators/DesignPattern/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Apply the {pattern} design pattern in {language} to the following code generation task. Use the {variation} variation of this pattern where appropriate.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>pattern</code>:</li> <li>When set to <code>singleton</code>: Implement a Singleton pattern to ensure only one instance of the class exists throughout the application.</li> <li>When set to <code>factory</code>: Use a Factory pattern to create objects without specifying the exact class of object that will be created.</li> <li>When set to <code>adapter</code>: Implement an Adapter pattern to allow incompatible interfaces to work together.</li> <li>When set to <code>observer</code>: Use the Observer pattern to define a one-to-many dependency between objects.</li> <li>When set to <code>strategy</code>: Implement the Strategy pattern to define a family of algorithms and make them interchangeable.</li> <li>When set to <code>command</code>: Use the Command pattern to encapsulate a request as an object.</li> <li> <p>When set to <code>facade</code>: Implement a Facade pattern to provide a simplified interface to a complex subsystem.</p> </li> <li> <p><code>language</code>:</p> </li> <li> <p>Format: using {value} syntax and conventions</p> </li> <li> <p><code>variation</code>:</p> </li> <li>Format: Consider implementing the {value} variation of this pattern if appropriate for the use case.</li> </ul>"},{"location":"api/decorators/DesignPattern/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo, claude-3-7-sonnet-latest, llama-3.2-70b</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/DesignPattern/#related-decorators","title":"Related Decorators","text":"<ul> <li>CodeReview: Enhances DesignPattern CodeReview can be used after DesignPattern to evaluate the implementation quality.</li> <li>CodeOptimization: Enhances DesignPattern CodeOptimization can be applied after DesignPattern to improve performance while maintaining the pattern structure.</li> </ul>"},{"location":"api/decorators/Detailed/","title":"Detailed Decorator","text":"<p>Enhances the response with comprehensive information, thorough explanations, and rich context. This decorator is ideal for in-depth learning, complex topics requiring nuance, or when completeness is valued over brevity.</p> <p>Category: Tone</p>"},{"location":"api/decorators/Detailed/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>depth</code> <code>enum</code> The level of detail and comprehensiveness <code>comprehensive</code> <code>aspects</code> <code>array</code> Specific aspects or dimensions to explore in detail `` <code>examples</code> <code>boolean</code> Whether to include detailed examples to illustrate points <code>True</code>"},{"location":"api/decorators/Detailed/#depth-options","title":"Depth Options","text":"<ul> <li><code>moderate</code>: Include a good level of detail that covers the main points thoroughly while avoiding excessive information.</li> <li><code>comprehensive</code>: Provide extensive detail, covering both main concepts and secondary aspects with thorough explanation of each.</li> <li><code>exhaustive</code>: Deliver an extremely detailed analysis that leaves no aspect unexplored, including nuances, edge cases, theoretical foundations, and practical applications.</li> </ul>"},{"location":"api/decorators/Detailed/#examples","title":"Examples","text":""},{"location":"api/decorators/Detailed/#comprehensive-detailed-explanation-of-a-concept","title":"Comprehensive detailed explanation of a concept","text":"<pre><code>+++Detailed\nExplain how the human immune system works.\n</code></pre> <p>Provides a thorough, in-depth explanation of the immune system covering all major components, processes, and functions with illustrative examples</p>"},{"location":"api/decorators/Detailed/#exhaustive-detailed-analysis-of-specific-aspects","title":"Exhaustive detailed analysis of specific aspects","text":"<pre><code>+++Detailed(depth=exhaustive, aspects=[economic,environmental,social,technological], examples=true)\nAnalyze the implications of transitioning to renewable energy.\n</code></pre> <p>Delivers an extremely detailed analysis of renewable energy transition, exhaustively covering all four specified aspects with comprehensive examples</p>"},{"location":"api/decorators/Detailed/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Detailed/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Provide an extremely thorough and comprehensive response that covers all aspects of this topic in detail. Don't simplify or abbreviate. Include explanations of core concepts, nuances, relationships between ideas, and practical implications.</p> <p>Notes: This model sometimes needs more explicit instructions to maintain depth throughout a long response</p>"},{"location":"api/decorators/Detailed/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Detailed/#comprehensive-explanation-of-a-complex-system","title":"Comprehensive explanation of a complex system","text":"<p>Original Prompt: <pre><code>Explain how the human immune system works.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please provide a detailed response with comprehensive information, thorough explanations, and rich context. Provide extensive detail, covering both main concepts and secondary aspects with thorough explanation of each. Include detailed examples, case studies, or illustrations to demonstrate key points and enhance understanding.\n\nExplain how the human immune system works.\n</code></pre></p>"},{"location":"api/decorators/Detailed/#exhaustive-analysis-of-specific-aspects","title":"Exhaustive analysis of specific aspects","text":"<p>Original Prompt: <pre><code>Analyze the implications of transitioning to renewable energy.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please provide a detailed response with comprehensive information, thorough explanations, and rich context. Deliver an extremely detailed analysis that leaves no aspect unexplored, including nuances, edge cases, theoretical foundations, and practical applications. Pay particular attention to these specific aspects: economic, environmental, social, technological. Explore each of these dimensions thoroughly. Include detailed examples, case studies, or illustrations to demonstrate key points and enhance understanding.\n\nAnalyze the implications of transitioning to renewable energy.\n</code></pre></p>"},{"location":"api/decorators/Detailed/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please provide a detailed response with comprehensive information, thorough explanations, and rich context.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>depth</code>:</li> <li>When set to <code>moderate</code>: Include a good level of detail that covers the main points thoroughly while avoiding excessive information.</li> <li>When set to <code>comprehensive</code>: Provide extensive detail, covering both main concepts and secondary aspects with thorough explanation of each.</li> <li> <p>When set to <code>exhaustive</code>: Deliver an extremely detailed analysis that leaves no aspect unexplored, including nuances, edge cases, theoretical foundations, and practical applications.</p> </li> <li> <p><code>aspects</code>:</p> </li> <li> <p>Format: Pay particular attention to these specific aspects: {value}. Explore each of these dimensions thoroughly.</p> </li> <li> <p><code>examples</code>:</p> </li> <li>When set to <code>true</code>: Include detailed examples, case studies, or illustrations to demonstrate key points and enhance understanding.</li> <li>When set to <code>false</code>: Focus on explaining concepts without providing specific examples or case studies.</li> </ul>"},{"location":"api/decorators/Detailed/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: Concise, Summary</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Detailed/#related-decorators","title":"Related Decorators","text":"<ul> <li>Concise: Conflicts with Detailed Detailed's comprehensive approach directly conflicts with Concise's brevity focus</li> <li>Summary: Conflicts with Detailed Detailed aims for comprehensiveness while Summary aims for conciseness</li> <li>StepByStep: Enhances Detailed StepByStep can organize detailed information into a more digestible format</li> </ul>"},{"location":"api/decorators/Documentation/","title":"Documentation Decorator","text":"<p>Creates comprehensive documentation for various audiences.</p> <p>Category: Developer Workflow</p>"},{"location":"api/decorators/Documentation/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>for</code> <code>enum</code> Documentation target <code>code</code> <code>format</code> <code>enum</code> Documentation format <code>markdown</code> <code>detail</code> <code>enum</code> Documentation comprehensiveness <code>standard</code>"},{"location":"api/decorators/Documentation/#for-options","title":"For Options","text":"<ul> <li><code>code</code>: Create code documentation that explains the implementation details, functions, classes, and methods.</li> <li><code>api</code>: Create API documentation that includes endpoints, request/response formats, authentication, and error handling.</li> <li><code>user</code>: Create user documentation that explains how to use the product or service from an end-user perspective.</li> <li><code>admin</code>: Create administrator documentation that explains how to configure, manage, and troubleshoot the system.</li> <li><code>architecture</code>: Create architecture documentation that explains the system design, components, and their interactions.</li> </ul>"},{"location":"api/decorators/Documentation/#format-options","title":"Format Options","text":"<ul> <li><code>markdown</code>: Format the documentation in Markdown syntax.</li> <li><code>javadoc</code>: Format the documentation in Javadoc syntax.</li> <li><code>jsdoc</code>: Format the documentation in JSDoc syntax.</li> <li><code>openapi</code>: Format the documentation following OpenAPI specification.</li> <li><code>restructuredtext</code>: Format the documentation in reStructuredText syntax.</li> <li><code>html</code>: Format the documentation in HTML.</li> <li><code>jupyter</code>: Format the documentation as a Jupyter notebook with explanatory cells.</li> </ul>"},{"location":"api/decorators/Documentation/#detail-options","title":"Detail Options","text":"<ul> <li><code>minimal</code>: Include only essential information with brief descriptions.</li> <li><code>standard</code>: Include standard level of detail with examples and explanations.</li> <li><code>comprehensive</code>: Include exhaustive details, examples, edge cases, and cross-references.</li> </ul>"},{"location":"api/decorators/Documentation/#examples","title":"Examples","text":""},{"location":"api/decorators/Documentation/#creating-comprehensive-api-documentation-in-markdown","title":"Creating comprehensive API documentation in Markdown","text":"<pre><code>+++Documentation(for=api, format=markdown, detail=comprehensive)\nCreate documentation for our payment processing API including authentication, endpoints, request/response formats, and error handling.\n</code></pre> <p>The model will generate comprehensive API documentation in Markdown format, covering all aspects of the payment processing API with detailed examples, error scenarios, and cross-references.</p>"},{"location":"api/decorators/Documentation/#creating-minimal-user-documentation","title":"Creating minimal user documentation","text":"<pre><code>+++Documentation(for=user, format=html, detail=minimal)\nDocument how to use our photo editing application.\n</code></pre> <p>The model will generate concise user documentation in HTML format, covering only the essential features and workflows of the photo editing application.</p>"},{"location":"api/decorators/Documentation/#creating-standard-code-documentation","title":"Creating standard code documentation","text":"<pre><code>+++Documentation(for=code, format=jsdoc, detail=standard)\nDocument this JavaScript utility function library.\n</code></pre> <p>The model will generate standard JSDoc documentation for the JavaScript utility functions, including function signatures, parameters, return values, and basic usage examples.</p>"},{"location":"api/decorators/Documentation/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Documentation/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Generate detailed documentation following these specifications:</p> <p>Notes: For smaller models, be more explicit about documentation structure requirements.</p>"},{"location":"api/decorators/Documentation/#claude-3-7-sonnet-latest","title":"claude-3-7-sonnet-latest","text":"<p>Instruction: Please create well-structured documentation with the following characteristics:</p> <p>Notes: Claude models respond well to clear structure guidance in documentation tasks.</p>"},{"location":"api/decorators/Documentation/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Documentation/#api-documentation","title":"API Documentation","text":"<p>Original Prompt: <pre><code>Create documentation for our payment processing API.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Create API documentation that includes endpoints, request/response formats, authentication, and error handling. Format the documentation in Markdown syntax. Include standard level of detail with examples and explanations.\n\nCreate documentation for our payment processing API.\n</code></pre></p> <p>Notes: The decorator adds specific guidance on what elements to include in API documentation.</p>"},{"location":"api/decorators/Documentation/#code-documentation","title":"Code Documentation","text":"<p>Original Prompt: <pre><code>Document this Python class for calculating mortgage payments.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Create code documentation that explains the implementation details, functions, classes, and methods. Format the documentation in reStructuredText syntax. Include exhaustive details, examples, edge cases, and cross-references.\n\nDocument this Python class for calculating mortgage payments.\n</code></pre></p> <p>Notes: The decorator specifies the format and level of detail for code documentation.</p>"},{"location":"api/decorators/Documentation/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Create comprehensive documentation based on the provided content.</p> <p>Placement: prepend</p> <p>Composition Behavior: override</p> <p>Parameter Effects:</p> <ul> <li><code>for</code>:</li> <li>When set to <code>code</code>: Create code documentation that explains the implementation details, functions, classes, and methods.</li> <li>When set to <code>api</code>: Create API documentation that includes endpoints, request/response formats, authentication, and error handling.</li> <li>When set to <code>user</code>: Create user documentation that explains how to use the product or service from an end-user perspective.</li> <li>When set to <code>admin</code>: Create administrator documentation that explains how to configure, manage, and troubleshoot the system.</li> <li> <p>When set to <code>architecture</code>: Create architecture documentation that explains the system design, components, and their interactions.</p> </li> <li> <p><code>format</code>:</p> </li> <li>When set to <code>markdown</code>: Format the documentation in Markdown syntax.</li> <li>When set to <code>javadoc</code>: Format the documentation in Javadoc syntax.</li> <li>When set to <code>jsdoc</code>: Format the documentation in JSDoc syntax.</li> <li>When set to <code>openapi</code>: Format the documentation following OpenAPI specification.</li> <li>When set to <code>restructuredtext</code>: Format the documentation in reStructuredText syntax.</li> <li>When set to <code>html</code>: Format the documentation in HTML.</li> <li> <p>When set to <code>jupyter</code>: Format the documentation as a Jupyter notebook with explanatory cells.</p> </li> <li> <p><code>detail</code>:</p> </li> <li>When set to <code>minimal</code>: Include only essential information with brief descriptions.</li> <li>When set to <code>standard</code>: Include standard level of detail with examples and explanations.</li> <li>When set to <code>comprehensive</code>: Include exhaustive details, examples, edge cases, and cross-references.</li> </ul>"},{"location":"api/decorators/Documentation/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: ELI5, Simplify</li> <li>Compatible Models: gpt-4o, gpt-4-turbo, claude-3-7-sonnet-latest, llama-3.2, palm-2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Documentation/#related-decorators","title":"Related Decorators","text":"<ul> <li>CodeAnalysis: Enhances Documentation Documentation works well after CodeAnalysis to document the analyzed code.</li> <li>ELI5: Conflicts with Documentation ELI5 simplifies content while Documentation formalizes it, creating potential conflicts in tone and detail level.</li> </ul>"},{"location":"api/decorators/ELI5/","title":"ELI5 Decorator","text":"<p>Adapts the response to explain a concept as if to a 5-year-old child. This decorator simplifies complex topics using basic vocabulary, concrete examples, and relatable analogies to make information accessible to non-experts or those new to a subject.</p> <p>Category: Tone</p>"},{"location":"api/decorators/ELI5/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>strictness</code> <code>boolean</code> Whether to strictly maintain a child-appropriate level of simplicity or allow slightly more complexity when necessary <code>False</code>"},{"location":"api/decorators/ELI5/#examples","title":"Examples","text":""},{"location":"api/decorators/ELI5/#basic-explanation-of-a-complex-scientific-concept","title":"Basic explanation of a complex scientific concept","text":"<pre><code>+++ELI5\nExplain how nuclear fusion works.\n</code></pre> <p>Explains nuclear fusion using simple language, analogies, and examples a child could understand</p>"},{"location":"api/decorators/ELI5/#strict-simplified-explanation-of-a-technical-subject","title":"Strict simplified explanation of a technical subject","text":"<pre><code>+++ELI5(strictness=true)\nHow does the internet work?\n</code></pre> <p>Provides an extremely simplified explanation of the internet using only basic vocabulary and concrete examples appropriate for young children</p>"},{"location":"api/decorators/ELI5/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/ELI5/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Explain this in the simplest possible terms, as if talking to a young child. Use words a 5-year-old would know. Compare complex ideas to everyday things like toys, food, or familiar activities. {strictness}</p> <p>Notes: This model sometimes needs reminders to maintain the simplified level throughout longer responses</p>"},{"location":"api/decorators/ELI5/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/ELI5/#basic-eli5-explanation-of-nuclear-fusion","title":"Basic ELI5 explanation of nuclear fusion","text":"<p>Original Prompt: <pre><code>Explain how nuclear fusion works.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please explain this concept as you would to a 5-year-old child. Use simple vocabulary, concrete examples, and relatable analogies. Keep explanations simple and child-friendly, but you may introduce slightly more advanced concepts when absolutely necessary for understanding, as long as they're explained with simple analogies.\n\nExplain how nuclear fusion works.\n</code></pre></p>"},{"location":"api/decorators/ELI5/#strict-eli5-explanation-of-the-internet","title":"Strict ELI5 explanation of the internet","text":"<p>Original Prompt: <pre><code>How does the internet work?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please explain this concept as you would to a 5-year-old child. Use simple vocabulary, concrete examples, and relatable analogies. Maintain an extremely simplified approach that a young child would understand, using only basic vocabulary and very concrete analogies. Avoid any technical terms or complex explanations entirely.\n\nHow does the internet work?\n</code></pre></p>"},{"location":"api/decorators/ELI5/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please explain this concept as you would to a 5-year-old child. Use simple vocabulary, concrete examples, and relatable analogies.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>strictness</code>:</li> <li>When set to <code>true</code>: Maintain an extremely simplified approach that a young child would understand, using only basic vocabulary and very concrete analogies. Avoid any technical terms or complex explanations entirely.</li> <li>When set to <code>false</code>: Keep explanations simple and child-friendly, but you may introduce slightly more advanced concepts when absolutely necessary for understanding, as long as they're explained with simple analogies.</li> </ul>"},{"location":"api/decorators/ELI5/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: Academic, Professional, AsExpert, Precision, Tone</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/ELI5/#related-decorators","title":"Related Decorators","text":"<ul> <li>Academic: Conflicts with ELI5 ELI5's simplified language directly conflicts with Academic's scholarly approach</li> <li>Professional: Conflicts with ELI5 ELI5's child-like language conflicts with Professional's business-oriented language</li> <li>AsExpert: Conflicts with ELI5 ELI5 requires beginner-level explanations which conflict with expert-level discourse</li> <li>Analogical: Enhances ELI5 Analogical reasoning works well with ELI5 to create child-friendly analogies</li> </ul>"},{"location":"api/decorators/EdgeCases/","title":"EdgeCases Decorator","text":"<p>Identifies edge cases and boundary conditions for testing.</p> <p>Category: Testing And Debugging</p>"},{"location":"api/decorators/EdgeCases/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>focus</code> <code>enum</code> Types of edge cases to identify <code>all</code> <code>risk</code> <code>enum</code> Risk level of edge cases to consider <code>common</code> <code>output</code> <code>enum</code> Format of identified edge cases <code>test-cases</code>"},{"location":"api/decorators/EdgeCases/#focus-options","title":"Focus Options","text":"<ul> <li><code>input-validation</code>: Focus on edge cases related to input validation, such as invalid inputs, boundary values, and type mismatches.</li> <li><code>error-handling</code>: Focus on edge cases related to error handling, such as exception paths, error propagation, and recovery mechanisms.</li> <li><code>resource-limits</code>: Focus on edge cases related to resource limitations, such as memory constraints, timeout conditions, and storage limits.</li> <li><code>concurrency</code>: Focus on edge cases related to concurrency issues, such as race conditions, deadlocks, and synchronization problems.</li> <li><code>all</code>: Consider all types of edge cases including input validation, error handling, resource limitations, and concurrency issues.</li> </ul>"},{"location":"api/decorators/EdgeCases/#risk-options","title":"Risk Options","text":"<ul> <li><code>common</code>: Focus on common edge cases that are likely to occur in normal usage scenarios.</li> <li><code>rare</code>: Include rare edge cases that might occur infrequently but could have significant impact.</li> <li><code>extreme</code>: Consider extreme edge cases, including highly unlikely scenarios that could lead to catastrophic failures.</li> </ul>"},{"location":"api/decorators/EdgeCases/#output-options","title":"Output Options","text":"<ul> <li><code>description</code>: Provide detailed descriptions of each edge case, explaining the conditions and potential impacts.</li> <li><code>test-cases</code>: Format the edge cases as specific test cases that could be implemented to verify system behavior.</li> <li><code>examples</code>: Present concrete examples demonstrating each edge case in action with expected outcomes.</li> </ul>"},{"location":"api/decorators/EdgeCases/#examples","title":"Examples","text":""},{"location":"api/decorators/EdgeCases/#identifying-concurrency-edge-cases-for-a-document-editing-feature","title":"Identifying concurrency edge cases for a document editing feature","text":"<pre><code>+++EdgeCases(focus=concurrency, risk=rare, output=test-cases)\nIdentify edge cases for a multi-user document editing feature.\n</code></pre> <p>The model will identify rare concurrency-related edge cases for a multi-user document editing feature, formatted as specific test cases that could be implemented.</p>"},{"location":"api/decorators/EdgeCases/#finding-input-validation-edge-cases-for-a-form-submission","title":"Finding input validation edge cases for a form submission","text":"<pre><code>+++EdgeCases(focus=input-validation, risk=common)\nIdentify edge cases for a user registration form.\n</code></pre> <p>The model will identify common input validation edge cases for a user registration form, formatted as test cases (the default output format).</p>"},{"location":"api/decorators/EdgeCases/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/EdgeCases/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Identify edge cases, corner cases, and boundary conditions for the following scenario. Consider what could go wrong, unexpected inputs, and system limitations.</p> <p>Notes: Simpler phrasing works better with this model.</p>"},{"location":"api/decorators/EdgeCases/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/EdgeCases/#software-testing-for-a-web-application","title":"Software testing for a web application","text":"<p>Original Prompt: <pre><code>Identify edge cases for a multi-user document editing feature.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Identify and analyze edge cases and boundary conditions for the given scenario. Consider potential failures, unexpected inputs, and system limitations. Focus on edge cases related to concurrency issues, such as race conditions, deadlocks, and synchronization problems. Include rare edge cases that might occur infrequently but could have significant impact. Format the edge cases as specific test cases that could be implemented to verify system behavior.\n\nIdentify edge cases for a multi-user document editing feature.\n</code></pre></p> <p>Notes: The decorator adds specific guidance on focusing on concurrency issues with rare risk levels, formatted as test cases.</p>"},{"location":"api/decorators/EdgeCases/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Identify and analyze edge cases and boundary conditions for the given scenario. Consider potential failures, unexpected inputs, and system limitations.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>focus</code>:</li> <li>When set to <code>input-validation</code>: Focus on edge cases related to input validation, such as invalid inputs, boundary values, and type mismatches.</li> <li>When set to <code>error-handling</code>: Focus on edge cases related to error handling, such as exception paths, error propagation, and recovery mechanisms.</li> <li>When set to <code>resource-limits</code>: Focus on edge cases related to resource limitations, such as memory constraints, timeout conditions, and storage limits.</li> <li>When set to <code>concurrency</code>: Focus on edge cases related to concurrency issues, such as race conditions, deadlocks, and synchronization problems.</li> <li> <p>When set to <code>all</code>: Consider all types of edge cases including input validation, error handling, resource limitations, and concurrency issues.</p> </li> <li> <p><code>risk</code>:</p> </li> <li>When set to <code>common</code>: Focus on common edge cases that are likely to occur in normal usage scenarios.</li> <li>When set to <code>rare</code>: Include rare edge cases that might occur infrequently but could have significant impact.</li> <li> <p>When set to <code>extreme</code>: Consider extreme edge cases, including highly unlikely scenarios that could lead to catastrophic failures.</p> </li> <li> <p><code>output</code>:</p> </li> <li>When set to <code>description</code>: Provide detailed descriptions of each edge case, explaining the conditions and potential impacts.</li> <li>When set to <code>test-cases</code>: Format the edge cases as specific test cases that could be implemented to verify system behavior.</li> <li>When set to <code>examples</code>: Present concrete examples demonstrating each edge case in action with expected outcomes.</li> </ul>"},{"location":"api/decorators/EdgeCases/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 1.5.0</li> </ul>"},{"location":"api/decorators/EdgeCases/#related-decorators","title":"Related Decorators","text":"<ul> <li>TestCases: Enhances EdgeCases EdgeCases works well with TestCases decorator, providing more comprehensive test coverage.</li> <li>SecurityAnalysis: Enhances EdgeCases EdgeCases can complement SecurityAnalysis by identifying boundary conditions that might lead to security vulnerabilities.</li> </ul>"},{"location":"api/decorators/ErrorDiagnosis/","title":"ErrorDiagnosis Decorator","text":"<p>Focuses on diagnosing and resolving specific errors or bugs.</p> <p>Category: Systematic Debugging</p>"},{"location":"api/decorators/ErrorDiagnosis/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>severity</code> <code>enum</code> Error severity level <code>significant</code> <code>persistence</code> <code>enum</code> Error persistence pattern <code>consistent</code> <code>analysis</code> <code>enum</code> Analysis depth <code>root-cause</code>"},{"location":"api/decorators/ErrorDiagnosis/#severity-options","title":"Severity Options","text":"<ul> <li><code>minor</code>: Treat this as a minor issue that may have limited impact.</li> <li><code>significant</code>: Approach this as a significant issue that requires careful attention.</li> <li><code>major</code>: Consider this a major issue with substantial impact on system functionality.</li> <li><code>critical</code>: Treat this as a critical issue requiring immediate resolution.</li> </ul>"},{"location":"api/decorators/ErrorDiagnosis/#persistence-options","title":"Persistence Options","text":"<ul> <li><code>intermittent</code>: Focus on diagnosing this intermittent issue, considering timing patterns and triggering conditions.</li> <li><code>consistent</code>: Analyze this consistent issue that occurs reliably under specific conditions.</li> <li><code>progressive</code>: Examine this progressive issue that worsens over time or with increased usage.</li> <li><code>environment-specific</code>: Investigate this environment-specific issue that only manifests in particular contexts.</li> </ul>"},{"location":"api/decorators/ErrorDiagnosis/#analysis-options","title":"Analysis Options","text":"<ul> <li><code>surface</code>: Provide a surface-level analysis identifying the most obvious potential causes.</li> <li><code>detailed</code>: Conduct a detailed analysis examining multiple factors and their interactions.</li> <li><code>root-cause</code>: Perform a root-cause analysis to identify the fundamental source of the issue.</li> <li><code>comprehensive</code>: Deliver a comprehensive analysis covering all aspects including root causes, contributing factors, and systemic implications.</li> </ul>"},{"location":"api/decorators/ErrorDiagnosis/#examples","title":"Examples","text":""},{"location":"api/decorators/ErrorDiagnosis/#diagnosing-a-critical-database-error","title":"Diagnosing a critical database error","text":"<pre><code>+++ErrorDiagnosis(severity=critical, persistence=consistent, analysis=root-cause)\nOur database is consistently returning timeout errors when querying large datasets.\n</code></pre> <p>A systematic diagnosis of the database timeout issue, focusing on identifying the root cause of this critical and consistent problem.</p>"},{"location":"api/decorators/ErrorDiagnosis/#investigating-an-intermittent-ui-glitch","title":"Investigating an intermittent UI glitch","text":"<pre><code>+++ErrorDiagnosis(severity=minor, persistence=intermittent, analysis=surface)\nUsers occasionally report that the dropdown menu disappears when hovering over it.\n</code></pre> <p>A surface-level analysis of potential causes for the intermittent UI glitch, treating it as a minor issue.</p>"},{"location":"api/decorators/ErrorDiagnosis/#comprehensive-analysis-of-a-progressive-memory-leak","title":"Comprehensive analysis of a progressive memory leak","text":"<pre><code>+++ErrorDiagnosis(severity=major, persistence=progressive, analysis=comprehensive)\nOur application's memory usage gradually increases until it crashes, usually after several hours of operation.\n</code></pre> <p>A comprehensive analysis of the progressive memory leak, including root causes, contributing factors, and systemic implications, treating it as a major issue.</p>"},{"location":"api/decorators/ErrorDiagnosis/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/ErrorDiagnosis/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Analyze and diagnose the described error or bug. Identify likely causes and recommend solutions based on the error characteristics.</p> <p>Notes: Simplified instruction for models with less diagnostic capability.</p>"},{"location":"api/decorators/ErrorDiagnosis/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/ErrorDiagnosis/#software-debugging-scenario","title":"Software debugging scenario","text":"<p>Original Prompt: <pre><code>The payment processing occasionally fails during high traffic periods. Diagnose the root cause of this intermittent error.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Diagnose the described error or bug with a systematic debugging approach. Identify potential causes and suggest solutions. Focus on diagnosing this intermittent issue, considering timing patterns and triggering conditions. Consider this a major issue with substantial impact on system functionality. Deliver a comprehensive analysis covering all aspects including root causes, contributing factors, and systemic implications.\n\nThe payment processing occasionally fails during high traffic periods. Diagnose the root cause of this intermittent error.\n</code></pre></p> <p>Notes: The decorator adds specific guidance for approaching the error diagnosis based on the parameters provided.</p>"},{"location":"api/decorators/ErrorDiagnosis/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Diagnose the described error or bug with a systematic debugging approach. Identify potential causes and suggest solutions.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>severity</code>:</li> <li>When set to <code>minor</code>: Treat this as a minor issue that may have limited impact.</li> <li>When set to <code>significant</code>: Approach this as a significant issue that requires careful attention.</li> <li>When set to <code>major</code>: Consider this a major issue with substantial impact on system functionality.</li> <li> <p>When set to <code>critical</code>: Treat this as a critical issue requiring immediate resolution.</p> </li> <li> <p><code>persistence</code>:</p> </li> <li>When set to <code>intermittent</code>: Focus on diagnosing this intermittent issue, considering timing patterns and triggering conditions.</li> <li>When set to <code>consistent</code>: Analyze this consistent issue that occurs reliably under specific conditions.</li> <li>When set to <code>progressive</code>: Examine this progressive issue that worsens over time or with increased usage.</li> <li> <p>When set to <code>environment-specific</code>: Investigate this environment-specific issue that only manifests in particular contexts.</p> </li> <li> <p><code>analysis</code>:</p> </li> <li>When set to <code>surface</code>: Provide a surface-level analysis identifying the most obvious potential causes.</li> <li>When set to <code>detailed</code>: Conduct a detailed analysis examining multiple factors and their interactions.</li> <li>When set to <code>root-cause</code>: Perform a root-cause analysis to identify the fundamental source of the issue.</li> <li>When set to <code>comprehensive</code>: Deliver a comprehensive analysis covering all aspects including root causes, contributing factors, and systemic implications.</li> </ul>"},{"location":"api/decorators/ErrorDiagnosis/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: Simplify, CreativeWriting</li> <li>Compatible Models: gpt-4o, gpt-4-turbo, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/ErrorDiagnosis/#related-decorators","title":"Related Decorators","text":"<ul> <li>SystematicThinking: Enhances ErrorDiagnosis ErrorDiagnosis works well with SystematicThinking to provide a structured approach to debugging.</li> <li>Simplify: Conflicts with ErrorDiagnosis ErrorDiagnosis typically requires detailed analysis which may conflict with simplification approaches.</li> </ul>"},{"location":"api/decorators/ErrorStrategy/","title":"ErrorStrategy Decorator","text":"<p>Guides how errors and exceptions should be handled in the implementation.</p> <p>Category: Implementation-Focused</p>"},{"location":"api/decorators/ErrorStrategy/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>approach</code> <code>enum</code> Error handling philosophy <code>language-standard</code> <code>detail</code> <code>enum</code> Error detail level <code>standard</code> <code>recovery</code> <code>enum</code> Error recovery approach <code>none</code>"},{"location":"api/decorators/ErrorStrategy/#approach-options","title":"Approach Options","text":"<ul> <li><code>defensive</code>: Use defensive programming techniques to prevent errors from occurring.</li> <li><code>fail-fast</code>: Fail immediately when errors are detected to prevent cascading failures.</li> <li><code>return-result</code>: Use a Result/Either pattern to explicitly handle success and error cases.</li> <li><code>exceptions</code>: Use exception handling mechanisms for error management.</li> <li><code>monadic</code>: Apply monadic error handling patterns for functional composition.</li> </ul>"},{"location":"api/decorators/ErrorStrategy/#detail-options","title":"Detail Options","text":"<ul> <li><code>minimal</code>: Provide minimal error information, focusing on essential details only.</li> <li><code>standard</code>: Include standard error information with type, message, and basic context.</li> <li><code>detailed</code>: Provide detailed error information including context, cause, and potential solutions.</li> <li><code>debug</code>: Include comprehensive debug information with stack traces and internal state.</li> </ul>"},{"location":"api/decorators/ErrorStrategy/#recovery-options","title":"Recovery Options","text":"<ul> <li><code>none</code>: Do not implement automatic recovery mechanisms.</li> <li><code>retry</code>: Implement retry logic for transient failures.</li> <li><code>fallback</code>: Provide fallback mechanisms when primary operations fail.</li> <li><code>circuit-breaker</code>: Implement circuit breaker pattern to prevent cascading failures.</li> </ul>"},{"location":"api/decorators/ErrorStrategy/#examples","title":"Examples","text":""},{"location":"api/decorators/ErrorStrategy/#file-processing-service-with-result-pattern-and-retry-logic","title":"File processing service with result pattern and retry logic","text":"<pre><code>+++ErrorStrategy(approach=return-result, detail=detailed, recovery=retry)\nImplement a file processing service that uses the Result pattern for error handling and includes retry logic for transient errors.\n</code></pre> <p>A file processing service implementation that uses a Result/Either pattern to handle errors, provides detailed error information, and implements retry logic for transient failures like network issues.</p>"},{"location":"api/decorators/ErrorStrategy/#web-api-with-fail-fast-approach","title":"Web API with fail-fast approach","text":"<pre><code>+++ErrorStrategy(approach=fail-fast, detail=standard)\nCreate a REST API endpoint for user registration.\n</code></pre> <p>A REST API implementation that validates inputs early and fails immediately with standard error messages when invalid data is detected.</p>"},{"location":"api/decorators/ErrorStrategy/#database-service-with-circuit-breaker-pattern","title":"Database service with circuit breaker pattern","text":"<pre><code>+++ErrorStrategy(approach=exceptions, recovery=circuit-breaker)\nImplement a database access service.\n</code></pre> <p>A database service that uses exceptions for error handling and implements a circuit breaker pattern to prevent cascading failures during database outages.</p>"},{"location":"api/decorators/ErrorStrategy/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/ErrorStrategy/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Implement error handling using the following approach:</p> <p>Notes: May need more explicit guidance on specific error handling patterns.</p>"},{"location":"api/decorators/ErrorStrategy/#gpt-4o","title":"gpt-4o","text":"<p>Instruction: Implement error handling with the following strategy:</p> <p>Notes: Can handle more nuanced error handling approaches like monadic patterns.</p>"},{"location":"api/decorators/ErrorStrategy/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/ErrorStrategy/#java-backend-service","title":"Java backend service","text":"<p>Original Prompt: <pre><code>Implement a file processing service.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Implement error handling with the following strategy:\nUse a Result/Either pattern to explicitly handle success and error cases.\nProvide detailed error information including context, cause, and potential solutions.\nImplement retry logic for transient failures.\n\nImplement a file processing service.\n</code></pre></p> <p>Notes: For Java, consider using libraries like Vavr for Result types or Spring Retry for retry mechanisms.</p>"},{"location":"api/decorators/ErrorStrategy/#javascript-frontend","title":"JavaScript frontend","text":"<p>Original Prompt: <pre><code>Create a data fetching component.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Implement error handling with the following strategy:\nUse exception handling mechanisms for error management.\nInclude standard error information with type, message, and basic context.\nDo not implement automatic recovery mechanisms.\n\nCreate a data fetching component.\n</code></pre></p> <p>Notes: In JavaScript, consider using try/catch with async/await or Promise.catch() for handling asynchronous errors.</p>"},{"location":"api/decorators/ErrorStrategy/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Implement error handling with the following strategy:</p> <p>Placement: prepend</p> <p>Composition Behavior: override</p> <p>Parameter Effects:</p> <ul> <li><code>approach</code>:</li> <li>When set to <code>defensive</code>: Use defensive programming techniques to prevent errors from occurring.</li> <li>When set to <code>fail-fast</code>: Fail immediately when errors are detected to prevent cascading failures.</li> <li>When set to <code>return-result</code>: Use a Result/Either pattern to explicitly handle success and error cases.</li> <li>When set to <code>exceptions</code>: Use exception handling mechanisms for error management.</li> <li> <p>When set to <code>monadic</code>: Apply monadic error handling patterns for functional composition.</p> </li> <li> <p><code>detail</code>:</p> </li> <li>When set to <code>minimal</code>: Provide minimal error information, focusing on essential details only.</li> <li>When set to <code>standard</code>: Include standard error information with type, message, and basic context.</li> <li>When set to <code>detailed</code>: Provide detailed error information including context, cause, and potential solutions.</li> <li> <p>When set to <code>debug</code>: Include comprehensive debug information with stack traces and internal state.</p> </li> <li> <p><code>recovery</code>:</p> </li> <li>When set to <code>none</code>: Do not implement automatic recovery mechanisms.</li> <li>When set to <code>retry</code>: Implement retry logic for transient failures.</li> <li>When set to <code>fallback</code>: Provide fallback mechanisms when primary operations fail.</li> <li>When set to <code>circuit-breaker</code>: Implement circuit breaker pattern to prevent cascading failures.</li> </ul>"},{"location":"api/decorators/ErrorStrategy/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/ErrorStrategy/#related-decorators","title":"Related Decorators","text":"<ul> <li>Performance: Enhances ErrorStrategy ErrorStrategy can enhance Performance by specifying efficient error handling approaches.</li> <li>Logging: Enhances ErrorStrategy ErrorStrategy works well with Logging to ensure errors are properly recorded.</li> </ul>"},{"location":"api/decorators/Estimation/","title":"Estimation Decorator","text":"<p>Helps with effort estimation for development tasks.</p> <p>Category: Developer Workflow</p>"},{"location":"api/decorators/Estimation/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>method</code> <code>enum</code> Estimation approach <code>fibonacci</code> <code>confidence</code> <code>enum</code> Estimate type <code>range</code> <code>factors</code> <code>enum</code> Considerations to include <code>all</code>"},{"location":"api/decorators/Estimation/#method-options","title":"Method Options","text":"<ul> <li><code>t-shirt</code>: Use t-shirt sizing (XS, S, M, L, XL, XXL) for your estimation.</li> <li><code>fibonacci</code>: Use Fibonacci sequence points (1, 2, 3, 5, 8, 13, 21, etc.) for your estimation.</li> <li><code>hours</code>: Estimate the effort in hours of work required.</li> <li><code>days</code>: Estimate the effort in days of work required.</li> </ul>"},{"location":"api/decorators/Estimation/#confidence-options","title":"Confidence Options","text":"<ul> <li><code>best-case</code>: Provide a best-case scenario estimate assuming ideal conditions.</li> <li><code>worst-case</code>: Provide a worst-case scenario estimate accounting for potential complications.</li> <li><code>expected</code>: Provide your most realistic expected estimate.</li> <li><code>range</code>: Provide a range from best-case to worst-case estimates.</li> </ul>"},{"location":"api/decorators/Estimation/#factors-options","title":"Factors Options","text":"<ul> <li><code>complexity</code>: Consider technical complexity in your estimation.</li> <li><code>risk</code>: Consider risk factors in your estimation.</li> <li><code>unknowns</code>: Consider unknown factors and learning curves in your estimation.</li> <li><code>dependencies</code>: Consider dependencies on other systems or teams in your estimation.</li> <li><code>all</code>: Consider all factors including complexity, risk, unknowns, and dependencies in your estimation.</li> </ul>"},{"location":"api/decorators/Estimation/#examples","title":"Examples","text":""},{"location":"api/decorators/Estimation/#fibonacci-estimation-with-confidence-range-for-authentication-system","title":"Fibonacci estimation with confidence range for authentication system","text":"<pre><code>+++Estimation(method=fibonacci, confidence=range, factors=all)\nEstimate the effort required to implement a new authentication system with social login and MFA support.\n</code></pre> <p>Provides a structured estimation using Fibonacci points with a range of estimates, considering all relevant factors for implementing an authentication system.</p>"},{"location":"api/decorators/Estimation/#t-shirt-sizing-for-a-simple-feature","title":"T-shirt sizing for a simple feature","text":"<pre><code>+++Estimation(method=t-shirt, confidence=expected)\nEstimate the effort to add a dark mode toggle to our web application.\n</code></pre> <p>Provides a t-shirt size estimation (likely S or M) for implementing a dark mode feature with explanation of the expected effort.</p>"},{"location":"api/decorators/Estimation/#hourly-estimation-focusing-on-complexity","title":"Hourly estimation focusing on complexity","text":"<pre><code>+++Estimation(method=hours, confidence=worst-case, factors=complexity)\nEstimate the effort to refactor our payment processing module.\n</code></pre> <p>Provides an hourly worst-case estimate focusing specifically on the technical complexity aspects of refactoring a payment system.</p>"},{"location":"api/decorators/Estimation/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Estimation/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Analyze this development task and provide a detailed effort estimation. Break down the components and explain your reasoning for each estimate.</p> <p>Notes: More explicit instruction for models with less context understanding.</p>"},{"location":"api/decorators/Estimation/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Estimation/#software-development-task-estimation","title":"Software development task estimation","text":"<p>Original Prompt: <pre><code>Estimate the effort required to implement a new authentication system with social login and MFA support.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Provide an effort estimation for the development task described. Break down the task into components and explain your reasoning. Use Fibonacci sequence points (1, 2, 3, 5, 8, 13, 21, etc.) for your estimation. Provide a range from best-case to worst-case estimates. Consider all factors including complexity, risk, unknowns, and dependencies in your estimation.\n\nEstimate the effort required to implement a new authentication system with social login and MFA support.\n</code></pre></p> <p>Notes: The decorator adds specific estimation guidance before the original prompt.</p>"},{"location":"api/decorators/Estimation/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Provide an effort estimation for the development task described. Break down the task into components and explain your reasoning.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>method</code>:</li> <li>When set to <code>t-shirt</code>: Use t-shirt sizing (XS, S, M, L, XL, XXL) for your estimation.</li> <li>When set to <code>fibonacci</code>: Use Fibonacci sequence points (1, 2, 3, 5, 8, 13, 21, etc.) for your estimation.</li> <li>When set to <code>hours</code>: Estimate the effort in hours of work required.</li> <li> <p>When set to <code>days</code>: Estimate the effort in days of work required.</p> </li> <li> <p><code>confidence</code>:</p> </li> <li>When set to <code>best-case</code>: Provide a best-case scenario estimate assuming ideal conditions.</li> <li>When set to <code>worst-case</code>: Provide a worst-case scenario estimate accounting for potential complications.</li> <li>When set to <code>expected</code>: Provide your most realistic expected estimate.</li> <li> <p>When set to <code>range</code>: Provide a range from best-case to worst-case estimates.</p> </li> <li> <p><code>factors</code>:</p> </li> <li>When set to <code>complexity</code>: Consider technical complexity in your estimation.</li> <li>When set to <code>risk</code>: Consider risk factors in your estimation.</li> <li>When set to <code>unknowns</code>: Consider unknown factors and learning curves in your estimation.</li> <li>When set to <code>dependencies</code>: Consider dependencies on other systems or teams in your estimation.</li> <li>When set to <code>all</code>: Consider all factors including complexity, risk, unknowns, and dependencies in your estimation.</li> </ul>"},{"location":"api/decorators/Estimation/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Estimation/#related-decorators","title":"Related Decorators","text":"<ul> <li>ProjectPlanning: Enhances Estimation Works well with ProjectPlanning decorator to create comprehensive project plans with effort estimates.</li> <li>TechnicalSpecification: Enhances Estimation Can be combined with TechnicalSpecification to include effort estimates in technical documentation.</li> </ul>"},{"location":"api/decorators/Explain/","title":"Explain Decorator","text":"<p>Explains code or technical concepts with appropriate depth.</p> <p>Category: Developer Education</p>"},{"location":"api/decorators/Explain/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>level</code> <code>enum</code> Expertise assumption <code>intermediate</code> <code>approach</code> <code>enum</code> Explanation style <code>examples</code> <code>focus</code> <code>enum</code> Explanation emphasis <code>both</code>"},{"location":"api/decorators/Explain/#level-options","title":"Level Options","text":"<ul> <li><code>beginner</code>: Explain this as if to someone new to the field, avoiding jargon and using simple concepts.</li> <li><code>intermediate</code>: Explain this to someone with moderate familiarity with the subject area.</li> <li><code>advanced</code>: Provide an in-depth technical explanation suitable for experts in the field.</li> </ul>"},{"location":"api/decorators/Explain/#approach-options","title":"Approach Options","text":"<ul> <li><code>analogy</code>: Use relevant analogies to make the concept more relatable.</li> <li><code>examples</code>: Include concrete examples to illustrate the concept.</li> <li><code>theory</code>: Focus on the theoretical foundations and principles.</li> <li><code>step-by-step</code>: Break down the explanation into clear sequential steps.</li> <li><code>visual</code>: Describe visual representations or diagrams that would help understand the concept.</li> </ul>"},{"location":"api/decorators/Explain/#focus-options","title":"Focus Options","text":"<ul> <li><code>how</code>: Focus on how it works and practical implementation details.</li> <li><code>why</code>: Focus on why it exists and the underlying rationale.</li> <li><code>both</code>: Cover both how it works and why it exists or is designed this way.</li> </ul>"},{"location":"api/decorators/Explain/#examples","title":"Examples","text":""},{"location":"api/decorators/Explain/#explaining-a-programming-concept-at-intermediate-level-with-examples","title":"Explaining a programming concept at intermediate level with examples","text":"<pre><code>+++Explain(level=intermediate, approach=examples, focus=both)\nExplain React's useEffect hook and its dependency array.\n</code></pre> <p>A comprehensive explanation of React's useEffect hook that assumes intermediate knowledge, uses concrete examples, and covers both how it works and why it's designed that way.</p>"},{"location":"api/decorators/Explain/#explaining-a-complex-concept-to-beginners-using-analogies","title":"Explaining a complex concept to beginners using analogies","text":"<pre><code>+++Explain(level=beginner, approach=analogy, focus=how)\nExplain how public key cryptography works.\n</code></pre> <p>A beginner-friendly explanation of public key cryptography using analogies, focusing on how it works rather than theoretical underpinnings.</p>"},{"location":"api/decorators/Explain/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Explain/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Please explain the following concept or code with clarity and detail.</p> <p>Notes: Slightly simplified instruction for models with less context capacity.</p>"},{"location":"api/decorators/Explain/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Explain/#explaining-a-programming-concept","title":"Explaining a programming concept","text":"<p>Original Prompt: <pre><code>Explain React's useEffect hook and its dependency array.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Explain the following concept or code clearly and thoroughly. Explain this to someone with moderate familiarity with the subject area. Include concrete examples to illustrate the concept. Cover both how it works and why it exists or is designed this way.\n\nExplain React's useEffect hook and its dependency array.\n</code></pre></p> <p>Notes: The transformation adds context about the target audience level, preferred explanation approach, and what aspects to focus on.</p>"},{"location":"api/decorators/Explain/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Explain the following concept or code clearly and thoroughly.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>level</code>:</li> <li>When set to <code>beginner</code>: Explain this as if to someone new to the field, avoiding jargon and using simple concepts.</li> <li>When set to <code>intermediate</code>: Explain this to someone with moderate familiarity with the subject area.</li> <li> <p>When set to <code>advanced</code>: Provide an in-depth technical explanation suitable for experts in the field.</p> </li> <li> <p><code>approach</code>:</p> </li> <li>When set to <code>analogy</code>: Use relevant analogies to make the concept more relatable.</li> <li>When set to <code>examples</code>: Include concrete examples to illustrate the concept.</li> <li>When set to <code>theory</code>: Focus on the theoretical foundations and principles.</li> <li>When set to <code>step-by-step</code>: Break down the explanation into clear sequential steps.</li> <li> <p>When set to <code>visual</code>: Describe visual representations or diagrams that would help understand the concept.</p> </li> <li> <p><code>focus</code>:</p> </li> <li>When set to <code>how</code>: Focus on how it works and practical implementation details.</li> <li>When set to <code>why</code>: Focus on why it exists and the underlying rationale.</li> <li>When set to <code>both</code>: Cover both how it works and why it exists or is designed this way.</li> </ul>"},{"location":"api/decorators/Explain/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: ELI5, TechnicalDetail</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 1.5.0</li> </ul>"},{"location":"api/decorators/Explain/#related-decorators","title":"Related Decorators","text":"<ul> <li>ELI5: Conflicts with Explain ELI5 sets a specific explanation level that would override the level parameter in Explain.</li> <li>CodeReview: Enhances Explain Can be used together to explain code while reviewing it.</li> </ul>"},{"location":"api/decorators/ExtendCode/","title":"ExtendCode Decorator","text":"<p>Requests extending or enhancing existing code with new functionality without complete rewrites.</p> <p>Category: Implementation-Focused</p>"},{"location":"api/decorators/ExtendCode/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>approach</code> <code>enum</code> How to extend the code <code>add-feature</code> <code>impact</code> <code>enum</code> Level of changes to existing code <code>minimal</code> <code>maintain</code> <code>enum</code> Aspects to maintain <code>all</code>"},{"location":"api/decorators/ExtendCode/#approach-options","title":"Approach Options","text":"<ul> <li><code>add-function</code>: Add a new standalone function that implements the requested functionality.</li> <li><code>add-method</code>: Add a new method to an existing class or object that implements the requested functionality.</li> <li><code>add-feature</code>: Implement a new feature by extending the existing code structure.</li> <li><code>enhance-existing</code>: Enhance existing functionality without adding new functions or methods.</li> </ul>"},{"location":"api/decorators/ExtendCode/#impact-options","title":"Impact Options","text":"<ul> <li><code>none</code>: Make no changes to existing code, only add new code.</li> <li><code>minimal</code>: Make minimal changes to existing code, focusing on additions rather than modifications.</li> <li><code>moderate</code>: Make moderate changes to existing code where necessary to support the new functionality.</li> <li><code>significant</code>: Make significant changes to existing code if needed to properly implement the requested functionality.</li> </ul>"},{"location":"api/decorators/ExtendCode/#maintain-options","title":"Maintain Options","text":"<ul> <li><code>api</code>: Maintain the existing API contracts and interfaces.</li> <li><code>architecture</code>: Maintain the existing architectural patterns and structure.</li> <li><code>naming</code>: Maintain the existing naming conventions and style.</li> <li><code>performance</code>: Maintain the existing performance characteristics.</li> <li><code>all</code>: Maintain all aspects of the existing code including API, architecture, naming conventions, and performance characteristics.</li> </ul>"},{"location":"api/decorators/ExtendCode/#examples","title":"Examples","text":""},{"location":"api/decorators/ExtendCode/#adding-a-method-to-a-user-service-class","title":"Adding a method to a user service class","text":"<pre><code>+++ExtendCode(approach=add-method, impact=minimal, maintain=all)\nAdd a method to this user service class that allows retrieving users by email domain.\n</code></pre> <p>Adds a new method to the user service class that follows existing patterns and naming conventions, with minimal changes to existing code.</p>"},{"location":"api/decorators/ExtendCode/#adding-a-new-feature-with-moderate-changes","title":"Adding a new feature with moderate changes","text":"<pre><code>+++ExtendCode(approach=add-feature, impact=moderate, maintain=architecture)\nAdd pagination support to this API endpoint.\n</code></pre> <p>Implements pagination by extending the existing code with moderate changes while maintaining the architectural patterns.</p>"},{"location":"api/decorators/ExtendCode/#enhancing-existing-functionality","title":"Enhancing existing functionality","text":"<pre><code>+++ExtendCode(approach=enhance-existing, impact=minimal, maintain=performance)\nImprove the error handling in this function.\n</code></pre> <p>Enhances the error handling with minimal changes while ensuring performance is not degraded.</p>"},{"location":"api/decorators/ExtendCode/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/ExtendCode/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Add new functionality to the existing code without rewriting it. Follow the existing code style and patterns. For approach={approach}, impact={impact}, maintain={maintain}.</p> <p>Notes: Simpler instruction format works better with gpt-4 Turbo's context window limitations.</p>"},{"location":"api/decorators/ExtendCode/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/ExtendCode/#adding-a-method-to-a-user-service-class_1","title":"Adding a method to a user service class","text":"<p>Original Prompt: <pre><code>Add a method to this user service class that allows retrieving users by email domain.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Extend the existing code with new functionality. Focus on adding to the codebase rather than rewriting it. Add a new method to an existing class or object that implements the requested functionality. Make minimal changes to existing code, focusing on additions rather than modifications. Maintain all aspects of the existing code including API, architecture, naming conventions, and performance characteristics.\n\nAdd a method to this user service class that allows retrieving users by email domain.\n</code></pre></p> <p>Notes: The decorator prepends instructions to maintain code style and minimize changes while adding the requested functionality.</p>"},{"location":"api/decorators/ExtendCode/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Extend the existing code with new functionality. Focus on adding to the codebase rather than rewriting it.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>approach</code>:</li> <li>When set to <code>add-function</code>: Add a new standalone function that implements the requested functionality.</li> <li>When set to <code>add-method</code>: Add a new method to an existing class or object that implements the requested functionality.</li> <li>When set to <code>add-feature</code>: Implement a new feature by extending the existing code structure.</li> <li> <p>When set to <code>enhance-existing</code>: Enhance existing functionality without adding new functions or methods.</p> </li> <li> <p><code>impact</code>:</p> </li> <li>When set to <code>none</code>: Make no changes to existing code, only add new code.</li> <li>When set to <code>minimal</code>: Make minimal changes to existing code, focusing on additions rather than modifications.</li> <li>When set to <code>moderate</code>: Make moderate changes to existing code where necessary to support the new functionality.</li> <li> <p>When set to <code>significant</code>: Make significant changes to existing code if needed to properly implement the requested functionality.</p> </li> <li> <p><code>maintain</code>:</p> </li> <li>When set to <code>api</code>: Maintain the existing API contracts and interfaces.</li> <li>When set to <code>architecture</code>: Maintain the existing architectural patterns and structure.</li> <li>When set to <code>naming</code>: Maintain the existing naming conventions and style.</li> <li>When set to <code>performance</code>: Maintain the existing performance characteristics.</li> <li>When set to <code>all</code>: Maintain all aspects of the existing code including API, architecture, naming conventions, and performance characteristics.</li> </ul>"},{"location":"api/decorators/ExtendCode/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: Refactor, RewriteCode</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, claude-instant</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/ExtendCode/#related-decorators","title":"Related Decorators","text":"<ul> <li>CodeReview: Enhances ExtendCode ExtendCode works well with CodeReview, which can be used to validate that the extensions maintain the specified aspects.</li> <li>Refactor: Conflicts with ExtendCode ExtendCode focuses on adding functionality with minimal changes, while Refactor focuses on restructuring existing code.</li> </ul>"},{"location":"api/decorators/Extension/","title":"Extension Decorator","text":"<p>A meta-decorator that enables loading of community-defined decorators from external sources. This facilitates the use of specialized decorator packages, domain-specific extensions, or custom decorator libraries maintained by communities or organizations.</p> <p>Category: Meta</p>"},{"location":"api/decorators/Extension/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>source</code> <code>string</code> URI or identifier for the extension package (e.g., URL, namespace, or registry identifier) <code>Required</code> <code>version</code> <code>string</code> Specific version of the extension package to use `` <code>decorators</code> <code>array</code> Specific decorators to load from the extension (if empty, loads all decorators from the package) ``"},{"location":"api/decorators/Extension/#examples","title":"Examples","text":""},{"location":"api/decorators/Extension/#basic-loading-of-an-extension-package","title":"Basic loading of an extension package","text":"<pre><code>+++Extension(source=https://decorator-registry.ai/scientific-pack.json)\n+++ScientificReasoning(discipline=physics)\nExplain dark matter.\n</code></pre> <p>Loads decorators from the scientific-pack extension and then applies the ScientificReasoning decorator (defined in that pack) with physics discipline to explain dark matter</p>"},{"location":"api/decorators/Extension/#loading-specific-decorators-from-a-versioned-extension","title":"Loading specific decorators from a versioned extension","text":"<pre><code>+++Extension(source=medical-decorators, version=2.1.0, decorators=[ClinicalCase,EvidenceBased])\n+++ClinicalCase(format=SOAP)\nDescribe the treatment approach for Type 2 diabetes.\n</code></pre> <p>Loads only the ClinicalCase and EvidenceBased decorators from version 2.1.0 of the medical-decorators package, then applies the ClinicalCase decorator with SOAP format to describe diabetes treatment</p>"},{"location":"api/decorators/Extension/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Extension/#gpt-4o","title":"gpt-4o","text":"<p>Instruction: This request will load specialized decorators from {source}. If any decorators in the following prompt come from this extension, apply them according to their definitions in the extension package.</p> <p>Notes: This model handles extension loading well but requires clear indications of which decorators come from the extension</p>"},{"location":"api/decorators/Extension/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Extension/#loading-scientific-package-for-dark-matter-explanation","title":"Loading scientific package for dark matter explanation","text":"<p>Original Prompt: <pre><code>+++Extension(source=https://decorator-registry.ai/scientific-pack.json)\n+++ScientificReasoning(discipline=physics)\nExplain dark matter.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please load and apply specialized decorators from an external source to enhance your response capabilities. Load the extension package from this source: https://decorator-registry.ai/scientific-pack.json.\n\n+++ScientificReasoning(discipline=physics)\nExplain dark matter.\n</code></pre></p>"},{"location":"api/decorators/Extension/#loading-specific-medical-decorators-for-diabetes-treatment","title":"Loading specific medical decorators for diabetes treatment","text":"<p>Original Prompt: <pre><code>+++Extension(source=medical-decorators, version=2.1.0, decorators=[ClinicalCase,EvidenceBased])\n+++ClinicalCase(format=SOAP)\nDescribe the treatment approach for Type 2 diabetes.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please load and apply specialized decorators from an external source to enhance your response capabilities. Load the extension package from this source: medical-decorators. Use version 2.1.0 of the extension package. Load only these specific decorators from the package: ClinicalCase,EvidenceBased.\n\n+++ClinicalCase(format=SOAP)\nDescribe the treatment approach for Type 2 diabetes.\n</code></pre></p>"},{"location":"api/decorators/Extension/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please load and apply specialized decorators from an external source to enhance your response capabilities.</p> <p>Placement: prepend</p> <p>Composition Behavior: override</p> <p>Parameter Effects:</p> <ul> <li><code>source</code>:</li> <li> <p>Format: Load the extension package from this source: {value}.</p> </li> <li> <p><code>version</code>:</p> </li> <li> <p>Format: Use version {value} of the extension package.</p> </li> <li> <p><code>decorators</code>:</p> </li> <li>Format: Load only these specific decorators from the package: {value}.</li> </ul>"},{"location":"api/decorators/Extension/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Extension/#related-decorators","title":"Related Decorators","text":"<ul> <li>Context: Enhances Extension Context can help adapt the loaded extension decorators to domain-specific requirements</li> <li>Custom: Enhances Extension Custom provides flexibility for working with extension decorators that might require customization</li> <li>Version: Enhances Extension Version helps ensure compatibility between core decorators and loaded extensions</li> </ul>"},{"location":"api/decorators/Extremes/","title":"Extremes Decorator","text":"<p>Presents content at the extreme ends of a spectrum, showing both a radical, ambitious, or maximalist version alongside a minimal, conservative, or basic version. This decorator helps explore the range of possibilities from the simplest implementation to the most expansive vision.</p> <p>Category: Tone</p>"},{"location":"api/decorators/Extremes/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>versions</code> <code>enum</code> Which extreme versions to include <code>both</code> <code>dimension</code> <code>string</code> The specific dimension along which to explore extremes (e.g., 'cost', 'time', 'ambition', 'complexity') <code>ambition</code> <code>compare</code> <code>boolean</code> Whether to include a comparative analysis of the extreme versions <code>True</code>"},{"location":"api/decorators/Extremes/#versions-options","title":"Versions Options","text":"<ul> <li><code>radical</code>: Focus exclusively on presenting a radical, ambitious, or maximalist version that pushes boundaries and represents the most expansive vision possible.</li> <li><code>minimal</code>: Focus exclusively on presenting a minimal, conservative, or basic version that emphasizes simplicity, feasibility, and immediate implementability.</li> <li><code>both</code>: Present both a radical, ambitious version and a minimal, conservative version, clearly contrasting these opposite approaches.</li> </ul>"},{"location":"api/decorators/Extremes/#examples","title":"Examples","text":""},{"location":"api/decorators/Extremes/#basic-exploration-of-minimal-and-radical-approaches","title":"Basic exploration of minimal and radical approaches","text":"<pre><code>+++Extremes\nDescribe a strategy for reducing carbon emissions.\n</code></pre> <p>Presents both a minimal, immediately achievable carbon reduction strategy and a radical, transformative approach, with a comparison of their respective impacts, feasibility, and trade-offs</p>"},{"location":"api/decorators/Extremes/#only-radical-version-along-a-specific-dimension","title":"Only radical version along a specific dimension","text":"<pre><code>+++Extremes(versions=radical, dimension=technological innovation, compare=false)\nOutline the future of transportation.\n</code></pre> <p>Provides only a technologically radical vision of transportation's future, focusing on the most innovative and disruptive possibilities without comparison to other approaches</p>"},{"location":"api/decorators/Extremes/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Extremes/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Present {versions} versions of this topic along the spectrum of {dimension}. If showing a minimal version, focus on what's practical, immediately achievable, and conservative. If showing a radical version, explore ambitious, transformative possibilities that push boundaries. {compare} Make the contrast between approaches very clear, and ensure each version is fully developed.</p> <p>Notes: This model sometimes needs reminders to ensure the radical version is truly ambitious and not just a moderate enhancement of conventional approaches</p>"},{"location":"api/decorators/Extremes/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Extremes/#radical-and-minimal-carbon-reduction-strategies","title":"Radical and minimal carbon reduction strategies","text":"<p>Original Prompt: <pre><code>Describe a strategy for reducing carbon emissions.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please present content at the extreme ends of a spectrum, exploring the range of possibilities from minimalist to maximalist approaches. Clearly contrast different versions that represent opposite ends of implementation or conceptualization. Present both a radical, ambitious version and a minimal, conservative version, clearly contrasting these opposite approaches. Explore the extremes specifically along the dimension of ambition, focusing on how this particular aspect varies between minimal and maximal implementations. Include an explicit comparative analysis of the extreme versions, highlighting the trade-offs, advantages, and disadvantages of each approach.\n\nDescribe a strategy for reducing carbon emissions.\n</code></pre></p>"},{"location":"api/decorators/Extremes/#radical-technology-vision-for-transportation","title":"Radical technology vision for transportation","text":"<p>Original Prompt: <pre><code>Outline the future of transportation.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please present content at the extreme ends of a spectrum, exploring the range of possibilities from minimalist to maximalist approaches. Clearly contrast different versions that represent opposite ends of implementation or conceptualization. Focus exclusively on presenting a radical, ambitious, or maximalist version that pushes boundaries and represents the most expansive vision possible. Explore the extremes specifically along the dimension of technological innovation, focusing on how this particular aspect varies between minimal and maximal implementations. Present the extreme versions without explicit comparison, allowing each to stand on its own merits.\n\nOutline the future of transportation.\n</code></pre></p>"},{"location":"api/decorators/Extremes/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please present content at the extreme ends of a spectrum, exploring the range of possibilities from minimalist to maximalist approaches. Clearly contrast different versions that represent opposite ends of implementation or conceptualization.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>versions</code>:</li> <li>When set to <code>radical</code>: Focus exclusively on presenting a radical, ambitious, or maximalist version that pushes boundaries and represents the most expansive vision possible.</li> <li>When set to <code>minimal</code>: Focus exclusively on presenting a minimal, conservative, or basic version that emphasizes simplicity, feasibility, and immediate implementability.</li> <li> <p>When set to <code>both</code>: Present both a radical, ambitious version and a minimal, conservative version, clearly contrasting these opposite approaches.</p> </li> <li> <p><code>dimension</code>:</p> </li> <li> <p>Format: Explore the extremes specifically along the dimension of {value}, focusing on how this particular aspect varies between minimal and maximal implementations.</p> </li> <li> <p><code>compare</code>:</p> </li> <li>When set to <code>true</code>: Include an explicit comparative analysis of the extreme versions, highlighting the trade-offs, advantages, and disadvantages of each approach.</li> <li>When set to <code>false</code>: Present the extreme versions without explicit comparison, allowing each to stand on its own merits.</li> </ul>"},{"location":"api/decorators/Extremes/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Extremes/#related-decorators","title":"Related Decorators","text":"<ul> <li>Alternatives: Enhances Extremes Extremes complements Alternatives by specifically focusing on opposite ends of a spectrum while Alternatives generates distinct options</li> <li>Constraints: Enhances Extremes Constraints can help define the parameters for the minimal version in the Extremes decorator</li> <li>Balanced: Conflicts with Extremes Extremes intentionally presents polarized views rather than the balanced perspective promoted by the Balanced decorator</li> </ul>"},{"location":"api/decorators/FactCheck/","title":"FactCheck Decorator","text":"<p>Enhances the response with verification of factual claims and explicit indication of confidence levels. This decorator promotes accuracy by distinguishing between well-established facts, likely facts, and uncertain or speculative information.</p> <p>Category: Verification</p>"},{"location":"api/decorators/FactCheck/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>confidence</code> <code>boolean</code> Whether to include explicit confidence levels for claims <code>True</code> <code>uncertain</code> <code>enum</code> How to handle uncertain information <code>mark</code> <code>strictness</code> <code>enum</code> The threshold for considering information verified <code>moderate</code>"},{"location":"api/decorators/FactCheck/#uncertain-options","title":"Uncertain Options","text":"<ul> <li><code>mark</code>: Clearly mark any uncertain or speculative information with appropriate qualifiers (e.g., 'may be', 'some evidence suggests', 'it is theorized').</li> <li><code>exclude</code>: Only include well-established or highly likely information, omitting speculative or highly uncertain claims entirely.</li> <li><code>qualify</code>: Include uncertain information but qualify it extensively with context about the limitations of current knowledge.</li> </ul>"},{"location":"api/decorators/FactCheck/#strictness-options","title":"Strictness Options","text":"<ul> <li><code>low</code>: Apply a lenient standard for verification, allowing inclusion of generally accepted information even without definitive proof.</li> <li><code>moderate</code>: Apply a balanced verification standard, requiring reliable sources for claims but accepting well-supported consensus views.</li> <li><code>high</code>: Apply a stringent verification standard, requiring strong evidence and multiple reliable sources for all claims.</li> </ul>"},{"location":"api/decorators/FactCheck/#examples","title":"Examples","text":""},{"location":"api/decorators/FactCheck/#basic-fact-checking-with-confidence-indicators","title":"Basic fact checking with confidence indicators","text":"<pre><code>+++FactCheck\nExplain the history and effectiveness of vaccines.\n</code></pre> <p>Provides information about vaccines with clear indications of confidence levels for different claims</p>"},{"location":"api/decorators/FactCheck/#high-strictness-fact-checking-that-excludes-uncertain-information","title":"High-strictness fact checking that excludes uncertain information","text":"<pre><code>+++FactCheck(strictness=high, uncertain=exclude)\nDescribe what we know about dark matter.\n</code></pre> <p>Presents only well-established scientific facts about dark matter, excluding speculative or uncertain information</p>"},{"location":"api/decorators/FactCheck/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/FactCheck/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Carefully distinguish between facts with strong evidence, facts with moderate evidence, and speculative information. Label your confidence level for each claim (Established fact, Likely, Uncertain). Be precise about what is and isn't well-supported by evidence.</p> <p>Notes: This model benefits from more explicit instructions about the need to clearly signal confidence levels</p>"},{"location":"api/decorators/FactCheck/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/FactCheck/#basic-fact-checking-with-confidence-indicators_1","title":"Basic fact checking with confidence indicators","text":"<p>Original Prompt: <pre><code>Explain the history and effectiveness of vaccines.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please verify the factual claims in your response and clearly distinguish between well-established facts, likely facts, and uncertain or speculative information. For each factual claim, include an explicit indication of your confidence level (e.g., 'Established fact:', 'Likely:', 'Uncertain:'). Clearly mark any uncertain or speculative information with appropriate qualifiers (e.g., 'may be', 'some evidence suggests', 'it is theorized'). Apply a balanced verification standard, requiring reliable sources for claims but accepting well-supported consensus views.\n\nExplain the history and effectiveness of vaccines.\n</code></pre></p>"},{"location":"api/decorators/FactCheck/#high-strictness-fact-checking-excluding-uncertain-information","title":"High-strictness fact checking excluding uncertain information","text":"<p>Original Prompt: <pre><code>Describe what we know about dark matter.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please verify the factual claims in your response and clearly distinguish between well-established facts, likely facts, and uncertain or speculative information. For each factual claim, include an explicit indication of your confidence level (e.g., 'Established fact:', 'Likely:', 'Uncertain:'). Only include well-established or highly likely information, omitting speculative or highly uncertain claims entirely. Apply a stringent verification standard, requiring strong evidence and multiple reliable sources for all claims.\n\nDescribe what we know about dark matter.\n</code></pre></p>"},{"location":"api/decorators/FactCheck/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please verify the factual claims in your response and clearly distinguish between well-established facts, likely facts, and uncertain or speculative information.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>confidence</code>:</li> <li>When set to <code>true</code>: For each factual claim, include an explicit indication of your confidence level (e.g., 'Established fact:', 'Likely:', 'Uncertain:').</li> <li> <p>When set to <code>false</code>: Maintain factual accuracy but do not explicitly label confidence levels for individual claims.</p> </li> <li> <p><code>uncertain</code>:</p> </li> <li>When set to <code>mark</code>: Clearly mark any uncertain or speculative information with appropriate qualifiers (e.g., 'may be', 'some evidence suggests', 'it is theorized').</li> <li>When set to <code>exclude</code>: Only include well-established or highly likely information, omitting speculative or highly uncertain claims entirely.</li> <li> <p>When set to <code>qualify</code>: Include uncertain information but qualify it extensively with context about the limitations of current knowledge.</p> </li> <li> <p><code>strictness</code>:</p> </li> <li>When set to <code>low</code>: Apply a lenient standard for verification, allowing inclusion of generally accepted information even without definitive proof.</li> <li>When set to <code>moderate</code>: Apply a balanced verification standard, requiring reliable sources for claims but accepting well-supported consensus views.</li> <li>When set to <code>high</code>: Apply a stringent verification standard, requiring strong evidence and multiple reliable sources for all claims.</li> </ul>"},{"location":"api/decorators/FactCheck/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/FactCheck/#related-decorators","title":"Related Decorators","text":"<ul> <li>CiteSource: Enhances FactCheck CiteSource pairs well with FactCheck by providing references for verified claims</li> <li>Uncertainty: Enhances FactCheck Uncertainty complements FactCheck by providing detailed probabilistic assessment of uncertain claims</li> </ul>"},{"location":"api/decorators/FindGaps/","title":"FindGaps Decorator","text":"<p>Identifies missing elements, unanswered questions, or overlooked considerations in an idea, plan, or argument. This decorator helps improve completeness by systematically discovering and highlighting gaps that need addressing.</p> <p>Category: Verification</p>"},{"location":"api/decorators/FindGaps/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>aspects</code> <code>enum</code> The specific types of gaps to focus on finding <code>comprehensive</code> <code>depth</code> <code>enum</code> How thoroughly to analyze for gaps <code>thorough</code> <code>solutions</code> <code>boolean</code> Whether to suggest solutions or approaches for addressing the identified gaps <code>True</code>"},{"location":"api/decorators/FindGaps/#aspects-options","title":"Aspects Options","text":"<ul> <li><code>questions</code>: Focus specifically on identifying unanswered questions and unresolved issues that need clarification.</li> <li><code>resources</code>: Focus specifically on identifying missing resources, tools, skills, or capabilities needed for implementation or success.</li> <li><code>stakeholders</code>: Focus specifically on identifying overlooked stakeholders, individuals, or groups whose perspectives or needs are not adequately addressed.</li> <li><code>risks</code>: Focus specifically on identifying potential risks, threats, and vulnerabilities that have not been adequately considered.</li> <li><code>dependencies</code>: Focus specifically on identifying overlooked dependencies, prerequisites, or contingencies that could affect implementation or outcomes.</li> <li><code>comprehensive</code>: Comprehensively identify gaps across multiple dimensions, including questions, resources, stakeholders, risks, and dependencies.</li> </ul>"},{"location":"api/decorators/FindGaps/#depth-options","title":"Depth Options","text":"<ul> <li><code>basic</code>: Conduct a focused analysis to identify the most obvious and critical gaps.</li> <li><code>thorough</code>: Conduct a detailed analysis to identify both obvious and subtle gaps that might significantly impact outcomes.</li> <li><code>exhaustive</code>: Conduct an extremely comprehensive analysis to identify all possible gaps, including edge cases and minor considerations.</li> </ul>"},{"location":"api/decorators/FindGaps/#examples","title":"Examples","text":""},{"location":"api/decorators/FindGaps/#basic-comprehensive-gap-analysis-of-a-business-plan","title":"Basic comprehensive gap analysis of a business plan","text":"<pre><code>+++FindGaps\nWe plan to launch our SaaS product with these features and marketing channels...\n</code></pre> <p>First identifies gaps across various aspects of the SaaS product launch plan, then suggests solutions for addressing each gap</p>"},{"location":"api/decorators/FindGaps/#exhaustive-stakeholder-focused-gap-analysis-without-solutions","title":"Exhaustive stakeholder-focused gap analysis without solutions","text":"<pre><code>+++FindGaps(aspects=stakeholders, depth=exhaustive, solutions=false)\nHere's our urban redevelopment proposal...\n</code></pre> <p>Provides an exhaustive analysis of overlooked or inadequately considered stakeholders in the urban redevelopment proposal, without suggesting solutions</p>"},{"location":"api/decorators/FindGaps/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/FindGaps/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: First analyze this content carefully. Then identify missing or overlooked {aspects} using a {depth} approach. For each gap found, clearly explain why it matters and how it could impact outcomes. {solutions} Be specific and constructive in your gap analysis.</p> <p>Notes: This model sometimes needs more explicit instruction to go beyond surface-level analysis and identify non-obvious gaps</p>"},{"location":"api/decorators/FindGaps/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/FindGaps/#basic-comprehensive-gap-analysis-of-a-business-plan_1","title":"Basic comprehensive gap analysis of a business plan","text":"<p>Original Prompt: <pre><code>We plan to launch our SaaS product with these features and marketing channels...\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please first analyze the main content, then methodically identify missing elements, unanswered questions, or overlooked considerations that need addressing. Comprehensively identify gaps across multiple dimensions, including questions, resources, stakeholders, risks, and dependencies. Conduct a detailed analysis to identify both obvious and subtle gaps that might significantly impact outcomes. For each identified gap, suggest potential solutions, approaches, or strategies to address it.\n\nWe plan to launch our SaaS product with these features and marketing channels...\n</code></pre></p>"},{"location":"api/decorators/FindGaps/#exhaustive-stakeholder-focused-gap-analysis-without-solutions_1","title":"Exhaustive stakeholder-focused gap analysis without solutions","text":"<p>Original Prompt: <pre><code>Here's our urban redevelopment proposal...\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please first analyze the main content, then methodically identify missing elements, unanswered questions, or overlooked considerations that need addressing. Focus specifically on identifying overlooked stakeholders, individuals, or groups whose perspectives or needs are not adequately addressed. Conduct an extremely comprehensive analysis to identify all possible gaps, including edge cases and minor considerations. Focus solely on identifying gaps without suggesting solutions or remedies.\n\nHere's our urban redevelopment proposal...\n</code></pre></p>"},{"location":"api/decorators/FindGaps/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please first analyze the main content, then methodically identify missing elements, unanswered questions, or overlooked considerations that need addressing.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>aspects</code>:</li> <li>When set to <code>questions</code>: Focus specifically on identifying unanswered questions and unresolved issues that need clarification.</li> <li>When set to <code>resources</code>: Focus specifically on identifying missing resources, tools, skills, or capabilities needed for implementation or success.</li> <li>When set to <code>stakeholders</code>: Focus specifically on identifying overlooked stakeholders, individuals, or groups whose perspectives or needs are not adequately addressed.</li> <li>When set to <code>risks</code>: Focus specifically on identifying potential risks, threats, and vulnerabilities that have not been adequately considered.</li> <li>When set to <code>dependencies</code>: Focus specifically on identifying overlooked dependencies, prerequisites, or contingencies that could affect implementation or outcomes.</li> <li> <p>When set to <code>comprehensive</code>: Comprehensively identify gaps across multiple dimensions, including questions, resources, stakeholders, risks, and dependencies.</p> </li> <li> <p><code>depth</code>:</p> </li> <li>When set to <code>basic</code>: Conduct a focused analysis to identify the most obvious and critical gaps.</li> <li>When set to <code>thorough</code>: Conduct a detailed analysis to identify both obvious and subtle gaps that might significantly impact outcomes.</li> <li> <p>When set to <code>exhaustive</code>: Conduct an extremely comprehensive analysis to identify all possible gaps, including edge cases and minor considerations.</p> </li> <li> <p><code>solutions</code>:</p> </li> <li>When set to <code>true</code>: For each identified gap, suggest potential solutions, approaches, or strategies to address it.</li> <li>When set to <code>false</code>: Focus solely on identifying gaps without suggesting solutions or remedies.</li> </ul>"},{"location":"api/decorators/FindGaps/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/FindGaps/#related-decorators","title":"Related Decorators","text":"<ul> <li>Limitations: Enhances FindGaps Limitations and FindGaps complement each other by identifying both inherent constraints and missing elements</li> <li>BreakAndBuild: Enhances FindGaps FindGaps can help identify issues that BreakAndBuild can then address in its reconstruction phase</li> <li>StressTest: Enhances FindGaps FindGaps plus StressTest provides a comprehensive approach to identifying both missing elements and potential breaking points</li> </ul>"},{"location":"api/decorators/FirstPrinciples/","title":"FirstPrinciples Decorator","text":"<p>Structures the response by breaking down complex topics into their fundamental truths or axioms, then building up from there. This decorator promotes a deeper understanding by examining the most basic elements of a concept before constructing more complex ideas.</p> <p>Category: Reasoning</p>"},{"location":"api/decorators/FirstPrinciples/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>depth</code> <code>number</code> Level of detail in breaking down to fundamental principles <code>3</code>"},{"location":"api/decorators/FirstPrinciples/#examples","title":"Examples","text":""},{"location":"api/decorators/FirstPrinciples/#basic-first-principles-analysis-of-a-concept","title":"Basic first principles analysis of a concept","text":"<pre><code>+++FirstPrinciples\nHow do electric vehicles work?\n</code></pre> <p>Breaks down electric vehicles into fundamental principles of electricity, motors, and energy storage before explaining the complete system</p>"},{"location":"api/decorators/FirstPrinciples/#deep-first-principles-analysis-with-maximum-depth","title":"Deep first principles analysis with maximum depth","text":"<pre><code>+++FirstPrinciples(depth=5)\nWhat makes machine learning effective?\n</code></pre> <p>Provides an extensive breakdown of machine learning starting from mathematical foundations and progressively building up to complex algorithms</p>"},{"location":"api/decorators/FirstPrinciples/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/FirstPrinciples/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Start by identifying the most basic, fundamental truths about this topic - the axioms that cannot be broken down further. Then build your explanation step by step from these foundations, showing how complex aspects emerge from these simple principles.</p> <p>Notes: This model benefits from more explicit instructions about the process of first principles analysis</p>"},{"location":"api/decorators/FirstPrinciples/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/FirstPrinciples/#standard-implementation-with-moderate-depth","title":"Standard implementation with moderate depth","text":"<p>Original Prompt: <pre><code>How do electric vehicles work?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please structure your response using first principles thinking. Break down the topic into fundamental truths or axioms that cannot be reduced further, then build up your explanation from these foundations. Provide a thorough analysis of the fundamental principles underlying the topic.\n\nHow do electric vehicles work?\n</code></pre></p>"},{"location":"api/decorators/FirstPrinciples/#deep-fundamental-analysis","title":"Deep fundamental analysis","text":"<p>Original Prompt: <pre><code>What makes machine learning effective?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please structure your response using first principles thinking. Break down the topic into fundamental truths or axioms that cannot be reduced further, then build up your explanation from these foundations. Provide an extremely comprehensive analysis of all fundamental axioms, exploring their origins and interconnections in depth.\n\nWhat makes machine learning effective?\n</code></pre></p>"},{"location":"api/decorators/FirstPrinciples/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please structure your response using first principles thinking. Break down the topic into fundamental truths or axioms that cannot be reduced further, then build up your explanation from these foundations.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>depth</code>:</li> <li>When set to <code>1</code>: Provide a basic breakdown with only the most essential fundamental principles.</li> <li>When set to <code>2</code>: Break down the topic into key fundamental principles with moderate detail.</li> <li>When set to <code>3</code>: Provide a thorough analysis of the fundamental principles underlying the topic.</li> <li>When set to <code>4</code>: Break down the topic extensively into detailed fundamental principles and their relationships.</li> <li>When set to <code>5</code>: Provide an extremely comprehensive analysis of all fundamental axioms, exploring their origins and interconnections in depth.</li> </ul>"},{"location":"api/decorators/FirstPrinciples/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/FirstPrinciples/#related-decorators","title":"Related Decorators","text":"<ul> <li>Reasoning: Enhances FirstPrinciples FirstPrinciples provides a specific reasoning approach that complements the general Reasoning decorator</li> <li>StepByStep: Enhances FirstPrinciples StepByStep can organize the first principles analysis into clearer sequential steps</li> </ul>"},{"location":"api/decorators/ForcedAnalogy/","title":"ForcedAnalogy Decorator","text":"<p>Explains concepts by specifically comparing them to a particular domain or field. This decorator forces analogies from a specified source domain to make complex or unfamiliar topics more relatable and understandable.</p> <p>Category: Reasoning</p>"},{"location":"api/decorators/ForcedAnalogy/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>source</code> <code>string</code> The specific domain, field, or context to draw analogies from <code>Required</code> <code>comprehensiveness</code> <code>enum</code> How comprehensively to map concepts between domains <code>comprehensive</code> <code>mappings</code> <code>number</code> Number of distinct concept mappings to create between domains <code>3</code>"},{"location":"api/decorators/ForcedAnalogy/#comprehensiveness-options","title":"Comprehensiveness Options","text":"<ul> <li><code>basic</code>: Create simple, straightforward analogies with clear one-to-one mappings between the most fundamental concepts.</li> <li><code>comprehensive</code>: Develop well-rounded analogies that cover the major components and processes, with moderately detailed mappings between domains.</li> <li><code>detailed</code>: Construct elaborate, nuanced analogies with detailed mappings that capture subtle aspects, edge cases, and complexities of the topic.</li> </ul>"},{"location":"api/decorators/ForcedAnalogy/#examples","title":"Examples","text":""},{"location":"api/decorators/ForcedAnalogy/#explaining-a-technical-concept-using-sports-analogies","title":"Explaining a technical concept using sports analogies","text":"<pre><code>+++ForcedAnalogy(source=sports)\nExplain how blockchain technology works.\n</code></pre> <p>Explains blockchain technology by mapping concepts to sports analogies (e.g., ledger as scoreboard, miners as referees, consensus as rulebook)</p>"},{"location":"api/decorators/ForcedAnalogy/#detailed-cooking-analogy-for-complex-scientific-process","title":"Detailed cooking analogy for complex scientific process","text":"<pre><code>+++ForcedAnalogy(source=cooking, comprehensiveness=detailed, mappings=5)\nDescribe how CRISPR gene editing works.\n</code></pre> <p>Provides a detailed explanation of CRISPR through cooking analogies, with 5 distinct concept mappings (e.g., DNA as recipe, Cas9 as kitchen knife, guide RNA as cooking instructions)</p>"},{"location":"api/decorators/ForcedAnalogy/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/ForcedAnalogy/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Create an explanation that uses only {source}-based analogies. Identify {mappings} key concepts from the topic and map each one to something from {source}. For each mapping, explain: 1) The original concept, 2) The {source} analogy, and 3) How they are similar and different. Be {comprehensiveness} in your mapping depth. Stick to this domain exclusively - don't use analogies from any other fields.</p> <p>Notes: This model may need explicit reminders to stay within the specified source domain and to clearly label which concept maps to which analogy</p>"},{"location":"api/decorators/ForcedAnalogy/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/ForcedAnalogy/#using-sports-analogies-to-explain-blockchain","title":"Using sports analogies to explain blockchain","text":"<p>Original Prompt: <pre><code>Explain how blockchain technology works.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please explain this topic using analogies drawn specifically from a particular domain. Create explicit comparisons that map concepts from the topic to elements, processes, or ideas from the specified source domain. Use analogies specifically from the domain of sports. Draw all your comparisons and metaphors from this domain to explain the target concepts. Develop well-rounded analogies that cover the major components and processes, with moderately detailed mappings between domains. Create exactly 3 distinct concept mappings between the target domain and the source domain. Each mapping should connect a specific element from the topic to a corresponding element in the sports domain.\n\nExplain how blockchain technology works.\n</code></pre></p>"},{"location":"api/decorators/ForcedAnalogy/#detailed-cooking-analogies-for-crispr-gene-editing","title":"Detailed cooking analogies for CRISPR gene editing","text":"<p>Original Prompt: <pre><code>Describe how CRISPR gene editing works.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please explain this topic using analogies drawn specifically from a particular domain. Create explicit comparisons that map concepts from the topic to elements, processes, or ideas from the specified source domain. Use analogies specifically from the domain of cooking. Draw all your comparisons and metaphors from this domain to explain the target concepts. Construct elaborate, nuanced analogies with detailed mappings that capture subtle aspects, edge cases, and complexities of the topic. Create exactly 5 distinct concept mappings between the target domain and the source domain. Each mapping should connect a specific element from the topic to a corresponding element in the cooking domain.\n\nDescribe how CRISPR gene editing works.\n</code></pre></p>"},{"location":"api/decorators/ForcedAnalogy/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please explain this topic using analogies drawn specifically from a particular domain. Create explicit comparisons that map concepts from the topic to elements, processes, or ideas from the specified source domain.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>source</code>:</li> <li> <p>Format: Use analogies specifically from the domain of {value}. Draw all your comparisons and metaphors from this domain to explain the target concepts.</p> </li> <li> <p><code>comprehensiveness</code>:</p> </li> <li>When set to <code>basic</code>: Create simple, straightforward analogies with clear one-to-one mappings between the most fundamental concepts.</li> <li>When set to <code>comprehensive</code>: Develop well-rounded analogies that cover the major components and processes, with moderately detailed mappings between domains.</li> <li> <p>When set to <code>detailed</code>: Construct elaborate, nuanced analogies with detailed mappings that capture subtle aspects, edge cases, and complexities of the topic.</p> </li> <li> <p><code>mappings</code>:</p> </li> <li>Format: Create exactly {value} distinct concept mappings between the target domain and the source domain. Each mapping should connect a specific element from the topic to a corresponding element in the {source} domain.</li> </ul>"},{"location":"api/decorators/ForcedAnalogy/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/ForcedAnalogy/#related-decorators","title":"Related Decorators","text":"<ul> <li>Analogical: Enhances ForcedAnalogy ForcedAnalogy constrains the source domain for analogies, while Analogical provides more general analogy-based reasoning</li> <li>ELI5: Enhances ForcedAnalogy ForcedAnalogy can be combined with ELI5 to create simple, accessible analogies from a specific domain</li> <li>Technical: Enhances ForcedAnalogy ForcedAnalogy helps make technical topics more accessible by mapping them to familiar domains</li> </ul>"},{"location":"api/decorators/ImplPhase/","title":"ImplPhase Decorator","text":"<p>Indicates which phase of implementation the AI should focus on, controlling scope and detail level.</p> <p>Category: Implementation-Focused</p>"},{"location":"api/decorators/ImplPhase/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>stage</code> <code>enum</code> Current implementation phase <code>core</code> <code>scope</code> <code>enum</code> Implementation scope boundary <code>component</code> <code>iteration</code> <code>number</code> Implementation iteration number <code>1</code>"},{"location":"api/decorators/ImplPhase/#stage-options","title":"Stage Options","text":"<ul> <li><code>design</code>: Design phase: Create high-level architecture and design patterns without implementation details.</li> <li><code>scaffold</code>: Scaffolding phase: Create the basic structure and interfaces without full implementation.</li> <li><code>core</code>: Core implementation phase: Implement the essential functionality with basic error handling.</li> <li><code>refinement</code>: Refinement phase: Enhance the implementation with better error handling and edge cases.</li> <li><code>optimization</code>: Optimization phase: Improve performance, reduce complexity, and enhance efficiency.</li> <li><code>documentation</code>: Documentation phase: Add comprehensive comments, documentation, and usage examples.</li> </ul>"},{"location":"api/decorators/ImplPhase/#scope-options","title":"Scope Options","text":"<ul> <li><code>function</code>: Limit implementation to a single function or method.</li> <li><code>component</code>: Focus on a self-contained component with defined interfaces.</li> <li><code>module</code>: Implement a complete module with multiple related components.</li> <li><code>service</code>: Develop a service that may interact with multiple modules.</li> <li><code>system</code>: Consider the entire system architecture and integration points.</li> </ul>"},{"location":"api/decorators/ImplPhase/#examples","title":"Examples","text":""},{"location":"api/decorators/ImplPhase/#scaffolding-a-component","title":"Scaffolding a component","text":"<pre><code>+++ImplPhase(stage=scaffold, scope=component, iteration=1)\nCreate the initial structure for a user authentication component with login/register forms.\n</code></pre> <p>The AI will focus on creating the basic structure and interfaces for the authentication component without implementing all functionality.</p>"},{"location":"api/decorators/ImplPhase/#core-implementation-of-a-function","title":"Core implementation of a function","text":"<pre><code>+++ImplPhase(stage=core, scope=function, iteration=2)\nImplement a password validation function that checks for minimum length, special characters, and numbers.\n</code></pre> <p>The AI will implement the essential functionality of the password validation function with basic error handling.</p>"},{"location":"api/decorators/ImplPhase/#documentation-for-a-module","title":"Documentation for a module","text":"<pre><code>+++ImplPhase(stage=documentation, scope=module, iteration=1)\nCreate documentation for the user management module including all public APIs.\n</code></pre> <p>The AI will focus on creating comprehensive documentation for the user management module rather than implementing new features.</p>"},{"location":"api/decorators/ImplPhase/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/ImplPhase/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: You are working on a {scope} in the {stage} phase (iteration #{iteration}). Focus specifically on this phase and don't try to implement features beyond this scope.</p> <p>Notes: More explicit instructions help gpt-4 maintain focus on the specific implementation phase.</p>"},{"location":"api/decorators/ImplPhase/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/ImplPhase/#web-development","title":"Web development","text":"<p>Original Prompt: <pre><code>Create a user authentication component with login/register forms.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Focus on the scaffold phase of implementation for this component, iteration #1.\n\nScaffolding phase: Create the basic structure and interfaces without full implementation.\nFocus on a self-contained component with defined interfaces.\nThis is iteration #1 of the implementation process.\n\nCreate a user authentication component with login/register forms.\n</code></pre></p> <p>Notes: The transformed prompt guides the AI to focus on creating the basic structure without full implementation details.</p>"},{"location":"api/decorators/ImplPhase/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Focus on the {stage} phase of implementation for this {scope}, iteration #{iteration}.</p> <p>Placement: prepend</p> <p>Composition Behavior: override</p> <p>Parameter Effects:</p> <ul> <li><code>stage</code>:</li> <li>When set to <code>design</code>: Design phase: Create high-level architecture and design patterns without implementation details.</li> <li>When set to <code>scaffold</code>: Scaffolding phase: Create the basic structure and interfaces without full implementation.</li> <li>When set to <code>core</code>: Core implementation phase: Implement the essential functionality with basic error handling.</li> <li>When set to <code>refinement</code>: Refinement phase: Enhance the implementation with better error handling and edge cases.</li> <li>When set to <code>optimization</code>: Optimization phase: Improve performance, reduce complexity, and enhance efficiency.</li> <li> <p>When set to <code>documentation</code>: Documentation phase: Add comprehensive comments, documentation, and usage examples.</p> </li> <li> <p><code>scope</code>:</p> </li> <li>When set to <code>function</code>: Limit implementation to a single function or method.</li> <li>When set to <code>component</code>: Focus on a self-contained component with defined interfaces.</li> <li>When set to <code>module</code>: Implement a complete module with multiple related components.</li> <li>When set to <code>service</code>: Develop a service that may interact with multiple modules.</li> <li> <p>When set to <code>system</code>: Consider the entire system architecture and integration points.</p> </li> <li> <p><code>iteration</code>:</p> </li> <li>Format: This is iteration #{value} of the implementation process.</li> </ul>"},{"location":"api/decorators/ImplPhase/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 1.5.0</li> </ul>"},{"location":"api/decorators/ImplPhase/#related-decorators","title":"Related Decorators","text":"<ul> <li>CodeStyle: Enhances ImplPhase CodeStyle can be used alongside ImplPhase to specify coding conventions for the implementation.</li> <li>Language: Enhances ImplPhase Language decorator can specify the programming language for the implementation.</li> </ul>"},{"location":"api/decorators/ImplementationStrategy/","title":"ImplementationStrategy Decorator","text":"<p>Guides the overall approach to implementing a feature or component.</p> <p>Category: Implementation-Focused</p>"},{"location":"api/decorators/ImplementationStrategy/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>approach</code> <code>enum</code> Implementation methodology <code>standard</code> <code>direction</code> <code>enum</code> Implementation direction <code>top-down</code> <code>priority</code> <code>enum</code> Implementation priority <code>correctness</code>"},{"location":"api/decorators/ImplementationStrategy/#approach-options","title":"Approach Options","text":"<ul> <li><code>tdd</code>: Use Test-Driven Development (TDD) by writing tests before implementing functionality.</li> <li><code>bdd</code>: Apply Behavior-Driven Development (BDD) focusing on business requirements and scenarios.</li> <li><code>prototype-first</code>: Create a working prototype before refining the implementation.</li> <li><code>interface-first</code>: Define interfaces and contracts before implementing the underlying functionality.</li> <li><code>standard</code>: Follow standard development practices with a balanced approach.</li> </ul>"},{"location":"api/decorators/ImplementationStrategy/#direction-options","title":"Direction Options","text":"<ul> <li><code>top-down</code>: Start with high-level components and work down to implementation details.</li> <li><code>bottom-up</code>: Begin with foundational components and build upward to higher-level functionality.</li> <li><code>outside-in</code>: Start with external interfaces and work inward toward core functionality.</li> <li><code>inside-out</code>: Begin with core functionality and expand outward to external interfaces.</li> </ul>"},{"location":"api/decorators/ImplementationStrategy/#priority-options","title":"Priority Options","text":"<ul> <li><code>correctness</code>: Prioritize correctness and accuracy above all other concerns.</li> <li><code>clarity</code>: Focus on code clarity and maintainability as the primary goal.</li> <li><code>performance</code>: Optimize for performance as a key consideration throughout development.</li> <li><code>completeness</code>: Ensure comprehensive feature coverage before refining implementation.</li> </ul>"},{"location":"api/decorators/ImplementationStrategy/#examples","title":"Examples","text":""},{"location":"api/decorators/ImplementationStrategy/#tdd-approach-with-outside-in-direction-for-user-registration","title":"TDD approach with outside-in direction for user registration","text":"<pre><code>+++ImplementationStrategy(approach=tdd, direction=outside-in, priority=correctness)\nImplement a user registration system starting with the acceptance tests and working inward to the core functionality.\n</code></pre> <p>The implementation will follow TDD methodology, starting with external interfaces and working inward, with a focus on correctness.</p>"},{"location":"api/decorators/ImplementationStrategy/#prototype-first-approach-for-a-new-feature","title":"Prototype-first approach for a new feature","text":"<pre><code>+++ImplementationStrategy(approach=prototype-first, direction=top-down, priority=clarity)\nCreate a dashboard to visualize user analytics.\n</code></pre> <p>The implementation will start with a working prototype, using a top-down approach, with code clarity as the main priority.</p>"},{"location":"api/decorators/ImplementationStrategy/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/ImplementationStrategy/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Follow these implementation guidelines: approach={approach}, direction={direction}, priority={priority}. When implementing this solution, ensure you follow the specified methodology.</p> <p>Notes: Simplified instruction for models with more limited context windows.</p>"},{"location":"api/decorators/ImplementationStrategy/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/ImplementationStrategy/#web-application-development","title":"Web application development","text":"<p>Original Prompt: <pre><code>Implement a user registration system.\n</code></pre></p> <p>Transformed Prompt: <pre><code>When implementing this solution, follow a structured approach that emphasizes methodical development. Use Test-Driven Development (TDD) by writing tests before implementing functionality. Start with external interfaces and work inward toward core functionality. Prioritize correctness and accuracy above all other concerns.\n\nImplement a user registration system.\n</code></pre></p> <p>Notes: This transformation guides the implementation toward a TDD approach with outside-in direction and correctness as the priority.</p>"},{"location":"api/decorators/ImplementationStrategy/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: When implementing this solution, follow a structured approach that emphasizes methodical development.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>approach</code>:</li> <li>When set to <code>tdd</code>: Use Test-Driven Development (TDD) by writing tests before implementing functionality.</li> <li>When set to <code>bdd</code>: Apply Behavior-Driven Development (BDD) focusing on business requirements and scenarios.</li> <li>When set to <code>prototype-first</code>: Create a working prototype before refining the implementation.</li> <li>When set to <code>interface-first</code>: Define interfaces and contracts before implementing the underlying functionality.</li> <li> <p>When set to <code>standard</code>: Follow standard development practices with a balanced approach.</p> </li> <li> <p><code>direction</code>:</p> </li> <li>When set to <code>top-down</code>: Start with high-level components and work down to implementation details.</li> <li>When set to <code>bottom-up</code>: Begin with foundational components and build upward to higher-level functionality.</li> <li>When set to <code>outside-in</code>: Start with external interfaces and work inward toward core functionality.</li> <li> <p>When set to <code>inside-out</code>: Begin with core functionality and expand outward to external interfaces.</p> </li> <li> <p><code>priority</code>:</p> </li> <li>When set to <code>correctness</code>: Prioritize correctness and accuracy above all other concerns.</li> <li>When set to <code>clarity</code>: Focus on code clarity and maintainability as the primary goal.</li> <li>When set to <code>performance</code>: Optimize for performance as a key consideration throughout development.</li> <li>When set to <code>completeness</code>: Ensure comprehensive feature coverage before refining implementation.</li> </ul>"},{"location":"api/decorators/ImplementationStrategy/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/ImplementationStrategy/#related-decorators","title":"Related Decorators","text":"<ul> <li>CodeQuality: Enhances ImplementationStrategy ImplementationStrategy works well with CodeQuality to ensure both strategic approach and quality standards.</li> <li>ArchitecturalPattern: Enhances ImplementationStrategy Can be combined with ArchitecturalPattern to provide both high-level architecture and implementation approach.</li> </ul>"},{"location":"api/decorators/IncrementalBuild/","title":"IncrementalBuild Decorator","text":"<p>Indicates that the code should be built incrementally, with focus on one feature/component at a time.</p> <p>Category: Implementation-Focused</p>"},{"location":"api/decorators/IncrementalBuild/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>focus</code> <code>enum</code> Current implementation focus <code>feature</code> <code>dependencies</code> <code>enum</code> How to handle dependencies <code>stub</code> <code>completion</code> <code>enum</code> Expected completion of this increment <code>functional</code>"},{"location":"api/decorators/IncrementalBuild/#focus-options","title":"Focus Options","text":"<ul> <li><code>feature</code>: Focus on implementing a complete feature with all necessary components.</li> <li><code>component</code>: Focus on building a specific UI or functional component that can be integrated later.</li> <li><code>function</code>: Focus on implementing a specific function or method with well-defined inputs and outputs.</li> <li><code>integration</code>: Focus on integrating previously implemented components or features.</li> <li><code>refactoring</code>: Focus on improving existing code without changing functionality.</li> </ul>"},{"location":"api/decorators/IncrementalBuild/#dependencies-options","title":"Dependencies Options","text":"<ul> <li><code>mock</code>: Use mock objects or functions for all dependencies that aren't the focus of this increment.</li> <li><code>stub</code>: Create minimal stub implementations for dependencies that return hardcoded values.</li> <li><code>implement</code>: Implement all dependencies as part of this increment.</li> <li><code>import-existing</code>: Use existing implementations for dependencies where available.</li> </ul>"},{"location":"api/decorators/IncrementalBuild/#completion-options","title":"Completion Options","text":"<ul> <li><code>minimal-viable</code>: Implement only the core functionality needed to demonstrate the concept.</li> <li><code>functional</code>: Implement a complete solution that works for the main use cases.</li> <li><code>robust</code>: Implement a solution that handles edge cases and includes error handling.</li> <li><code>production-ready</code>: Implement a fully tested solution with documentation and optimizations.</li> </ul>"},{"location":"api/decorators/IncrementalBuild/#examples","title":"Examples","text":""},{"location":"api/decorators/IncrementalBuild/#building-a-component-with-minimal-viable-implementation-and-mocked-dependencies","title":"Building a component with minimal viable implementation and mocked dependencies","text":"<pre><code>+++IncrementalBuild(focus=component, dependencies=mock, completion=minimal-viable)\nImplement the user profile card component that displays basic user information and an avatar.\n</code></pre> <p>The model will implement a minimal viable user profile card component, focusing only on the component itself and using mocks for any dependencies like user data services.</p>"},{"location":"api/decorators/IncrementalBuild/#implementing-a-complete-feature-with-robust-implementation","title":"Implementing a complete feature with robust implementation","text":"<pre><code>+++IncrementalBuild(focus=feature, dependencies=implement, completion=robust)\nCreate a user authentication system with login, registration, and password reset.\n</code></pre> <p>The model will implement a robust user authentication system, including all necessary components and handling edge cases and error conditions.</p>"},{"location":"api/decorators/IncrementalBuild/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/IncrementalBuild/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Build this code step by step. First focus on {focus} with {completion} level of completeness. For dependencies, use the {dependencies} approach.</p> <p>Notes: Simplified instruction for models with more limited context windows.</p>"},{"location":"api/decorators/IncrementalBuild/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/IncrementalBuild/#web-development","title":"Web development","text":"<p>Original Prompt: <pre><code>Implement a user profile card component that displays basic user information and an avatar.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Implement code incrementally, focusing on one part at a time. Build the solution step by step, ensuring each increment is testable before moving to the next. Focus on building a specific UI or functional component that can be integrated later. Use mock objects or functions for all dependencies that aren't the focus of this increment. Implement only the core functionality needed to demonstrate the concept.\n\nImplement a user profile card component that displays basic user information and an avatar.\n</code></pre></p> <p>Notes: The transformation adds specific guidance on how to approach the implementation incrementally.</p>"},{"location":"api/decorators/IncrementalBuild/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Implement code incrementally, focusing on one part at a time. Build the solution step by step, ensuring each increment is testable before moving to the next.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>focus</code>:</li> <li>When set to <code>feature</code>: Focus on implementing a complete feature with all necessary components.</li> <li>When set to <code>component</code>: Focus on building a specific UI or functional component that can be integrated later.</li> <li>When set to <code>function</code>: Focus on implementing a specific function or method with well-defined inputs and outputs.</li> <li>When set to <code>integration</code>: Focus on integrating previously implemented components or features.</li> <li> <p>When set to <code>refactoring</code>: Focus on improving existing code without changing functionality.</p> </li> <li> <p><code>dependencies</code>:</p> </li> <li>When set to <code>mock</code>: Use mock objects or functions for all dependencies that aren't the focus of this increment.</li> <li>When set to <code>stub</code>: Create minimal stub implementations for dependencies that return hardcoded values.</li> <li>When set to <code>implement</code>: Implement all dependencies as part of this increment.</li> <li> <p>When set to <code>import-existing</code>: Use existing implementations for dependencies where available.</p> </li> <li> <p><code>completion</code>:</p> </li> <li>When set to <code>minimal-viable</code>: Implement only the core functionality needed to demonstrate the concept.</li> <li>When set to <code>functional</code>: Implement a complete solution that works for the main use cases.</li> <li>When set to <code>robust</code>: Implement a solution that handles edge cases and includes error handling.</li> <li>When set to <code>production-ready</code>: Implement a fully tested solution with documentation and optimizations.</li> </ul>"},{"location":"api/decorators/IncrementalBuild/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: CompleteSystem, MonolithicImplementation</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/IncrementalBuild/#related-decorators","title":"Related Decorators","text":"<ul> <li>TestDriven: Enhances IncrementalBuild TestDriven works well with IncrementalBuild as tests can be written for each increment.</li> <li>CompleteSystem: Conflicts with IncrementalBuild CompleteSystem expects a full implementation which conflicts with the incremental approach.</li> </ul>"},{"location":"api/decorators/Inductive/","title":"Inductive Decorator","text":"<p>Structures the response using inductive reasoning, moving from specific observations to broader generalizations and theories. This decorator emphasizes pattern recognition and the derivation of general principles from particular instances.</p> <p>Category: Reasoning</p>"},{"location":"api/decorators/Inductive/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>examples</code> <code>number</code> Number of specific examples or observations to include before generalizing <code>3</code> <code>confidence</code> <code>boolean</code> Whether to explicitly state the confidence level of the inductive conclusions <code>False</code> <code>structure</code> <code>enum</code> The pattern of inductive reasoning to follow <code>generalization</code>"},{"location":"api/decorators/Inductive/#structure-options","title":"Structure Options","text":"<ul> <li><code>generalization</code>: Use generalization induction, where common properties among the examples are used to form a general rule or principle.</li> <li><code>causal</code>: Apply causal induction, focusing on identifying cause-and-effect relationships across the examples to establish causal patterns.</li> <li><code>statistical</code>: Employ statistical induction, using quantitative patterns and probabilistic reasoning to derive statistical generalizations from the examples.</li> <li><code>analogical</code>: Utilize analogical induction, where similarities between examples are used to infer that they likely share other properties as well.</li> </ul>"},{"location":"api/decorators/Inductive/#examples","title":"Examples","text":""},{"location":"api/decorators/Inductive/#basic-inductive-reasoning-from-examples-to-general-principles","title":"Basic inductive reasoning from examples to general principles","text":"<pre><code>+++Inductive\nWhat factors contribute to successful startups?\n</code></pre> <p>Provides specific examples of successful startups, identifies patterns across them, and derives general principles of startup success</p>"},{"location":"api/decorators/Inductive/#causal-inductive-reasoning-with-confidence-levels","title":"Causal inductive reasoning with confidence levels","text":"<pre><code>+++Inductive(examples=5, confidence=true, structure=causal)\nHow does screen time affect child development?\n</code></pre> <p>Presents 5 specific observations about screen time and child development, infers causal relationships, and generalizes with explicit confidence levels for each conclusion</p>"},{"location":"api/decorators/Inductive/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Inductive/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Use inductive reasoning to address this question. Start with {examples} specific real-world examples. Analyze these examples to identify patterns. Then use {structure} reasoning to derive general principles or conclusions. {confidence} Make each step in your reasoning explicit and clearly show how you move from specific cases to general insights.</p> <p>Notes: This model sometimes needs explicit instruction to avoid jumping directly to conclusions without thoroughly examining specific examples first</p>"},{"location":"api/decorators/Inductive/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Inductive/#basic-inductive-reasoning-about-successful-startups","title":"Basic inductive reasoning about successful startups","text":"<p>Original Prompt: <pre><code>What factors contribute to successful startups?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please structure your response using inductive reasoning, moving from specific observations or examples to broader generalizations and theories. Focus on pattern recognition and deriving general principles from particular instances. Begin with 3 specific, concrete examples or observations before deriving generalizations from them. Present the inductive conclusions without explicitly stating confidence levels. Use generalization induction, where common properties among the examples are used to form a general rule or principle.\n\nWhat factors contribute to successful startups?\n</code></pre></p>"},{"location":"api/decorators/Inductive/#causal-inductive-reasoning-about-screen-time","title":"Causal inductive reasoning about screen time","text":"<p>Original Prompt: <pre><code>How does screen time affect child development?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please structure your response using inductive reasoning, moving from specific observations or examples to broader generalizations and theories. Focus on pattern recognition and deriving general principles from particular instances. Begin with 5 specific, concrete examples or observations before deriving generalizations from them. Explicitly state the confidence level for each inductive conclusion, acknowledging the inherent uncertainty in generalizing from specific cases. Apply causal induction, focusing on identifying cause-and-effect relationships across the examples to establish causal patterns.\n\nHow does screen time affect child development?\n</code></pre></p>"},{"location":"api/decorators/Inductive/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please structure your response using inductive reasoning, moving from specific observations or examples to broader generalizations and theories. Focus on pattern recognition and deriving general principles from particular instances.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>examples</code>:</li> <li> <p>Format: Begin with {value} specific, concrete examples or observations before deriving generalizations from them.</p> </li> <li> <p><code>confidence</code>:</p> </li> <li>When set to <code>true</code>: Explicitly state the confidence level for each inductive conclusion, acknowledging the inherent uncertainty in generalizing from specific cases.</li> <li> <p>When set to <code>false</code>: Present the inductive conclusions without explicitly stating confidence levels.</p> </li> <li> <p><code>structure</code>:</p> </li> <li>When set to <code>generalization</code>: Use generalization induction, where common properties among the examples are used to form a general rule or principle.</li> <li>When set to <code>causal</code>: Apply causal induction, focusing on identifying cause-and-effect relationships across the examples to establish causal patterns.</li> <li>When set to <code>statistical</code>: Employ statistical induction, using quantitative patterns and probabilistic reasoning to derive statistical generalizations from the examples.</li> <li>When set to <code>analogical</code>: Utilize analogical induction, where similarities between examples are used to infer that they likely share other properties as well.</li> </ul>"},{"location":"api/decorators/Inductive/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: Deductive</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Inductive/#related-decorators","title":"Related Decorators","text":"<ul> <li>Deductive: Conflicts with Inductive Inductive and Deductive represent opposite reasoning approaches (specific-to-general vs. general-to-specific)</li> <li>Uncertainty: Enhances Inductive Uncertainty works well with Inductive (especially with confidence=true) to acknowledge the probabilistic nature of inductive conclusions</li> <li>StepByStep: Enhances Inductive StepByStep can help organize the progression from specific examples to general principles</li> </ul>"},{"location":"api/decorators/Infrastructure/","title":"Infrastructure Decorator","text":"<p>Generates infrastructure as code templates for environment provisioning.</p> <p>Category: Devops And Infrastructure</p>"},{"location":"api/decorators/Infrastructure/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>tool</code> <code>enum</code> Infrastructure as code tool <code>terraform</code> <code>environment</code> <code>enum</code> Target environment <code>multi-environment</code> <code>approach</code> <code>enum</code> Infrastructure philosophy <code>immutable</code>"},{"location":"api/decorators/Infrastructure/#tool-options","title":"Tool Options","text":"<ul> <li><code>terraform</code>: Use Terraform HCL syntax and modules to define the infrastructure.</li> <li><code>cloudformation</code>: Use AWS CloudFormation YAML/JSON templates to define the infrastructure.</li> <li><code>arm</code>: Use Azure Resource Manager templates to define the infrastructure.</li> <li><code>pulumi</code>: Use Pulumi with appropriate programming language to define the infrastructure.</li> <li><code>cdk</code>: Use Cloud Development Kit with appropriate programming language to define the infrastructure.</li> <li><code>ansible</code>: Use Ansible playbooks and roles to define the infrastructure.</li> </ul>"},{"location":"api/decorators/Infrastructure/#environment-options","title":"Environment Options","text":"<ul> <li><code>dev</code>: Optimize for development speed and cost efficiency.</li> <li><code>staging</code>: Create a production-like environment with reduced resources.</li> <li><code>prod</code>: Optimize for reliability, security, and performance.</li> <li><code>multi-environment</code>: Design with environment promotion in mind, using variables or parameters to differentiate environments.</li> </ul>"},{"location":"api/decorators/Infrastructure/#approach-options","title":"Approach Options","text":"<ul> <li><code>immutable</code>: Design infrastructure to be replaced rather than modified when changes are needed.</li> <li><code>mutable</code>: Design infrastructure that can be updated in place.</li> <li><code>hybrid</code>: Use a combination of immutable and mutable approaches as appropriate.</li> </ul>"},{"location":"api/decorators/Infrastructure/#examples","title":"Examples","text":""},{"location":"api/decorators/Infrastructure/#terraform-infrastructure-for-a-multi-environment-web-application","title":"Terraform infrastructure for a multi-environment web application","text":"<pre><code>+++Infrastructure(tool=terraform, environment=multi-environment, approach=immutable)\nCreate infrastructure as code for a web application with frontend, API, and database tiers.\n</code></pre> <p>Generates Terraform code with modules for frontend (e.g., S3/CloudFront), API (e.g., ECS/Lambda), and database (e.g., RDS) with environment variables and immutable deployment strategy.</p>"},{"location":"api/decorators/Infrastructure/#cloudformation-template-for-a-development-environment","title":"CloudFormation template for a development environment","text":"<pre><code>+++Infrastructure(tool=cloudformation, environment=dev, approach=mutable)\nCreate infrastructure for a data processing pipeline.\n</code></pre> <p>Generates AWS CloudFormation template optimized for development with cost-saving measures and the ability to update resources in place.</p>"},{"location":"api/decorators/Infrastructure/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Infrastructure/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Create infrastructure as code for the following requirements using {tool} for {environment} environments with an {approach} infrastructure approach:</p> <p>Notes: Simplified instruction for models with less context capacity.</p>"},{"location":"api/decorators/Infrastructure/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Infrastructure/#web-application-infrastructure","title":"Web application infrastructure","text":"<p>Original Prompt: <pre><code>Create infrastructure as code for a web application with frontend, API, and database tiers.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Generate infrastructure as code using best practices for the specified tool, environment, and approach. Use Terraform HCL syntax and modules to define the infrastructure. Design with environment promotion in mind, using variables or parameters to differentiate environments. Design infrastructure to be replaced rather than modified when changes are needed.\n\nCreate infrastructure as code for a web application with frontend, API, and database tiers.\n</code></pre></p> <p>Notes: The decorator adds specific guidance based on the selected IaC tool, environment strategy, and infrastructure approach.</p>"},{"location":"api/decorators/Infrastructure/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Generate infrastructure as code using best practices for the specified tool, environment, and approach.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>tool</code>:</li> <li>When set to <code>terraform</code>: Use Terraform HCL syntax and modules to define the infrastructure.</li> <li>When set to <code>cloudformation</code>: Use AWS CloudFormation YAML/JSON templates to define the infrastructure.</li> <li>When set to <code>arm</code>: Use Azure Resource Manager templates to define the infrastructure.</li> <li>When set to <code>pulumi</code>: Use Pulumi with appropriate programming language to define the infrastructure.</li> <li>When set to <code>cdk</code>: Use Cloud Development Kit with appropriate programming language to define the infrastructure.</li> <li> <p>When set to <code>ansible</code>: Use Ansible playbooks and roles to define the infrastructure.</p> </li> <li> <p><code>environment</code>:</p> </li> <li>When set to <code>dev</code>: Optimize for development speed and cost efficiency.</li> <li>When set to <code>staging</code>: Create a production-like environment with reduced resources.</li> <li>When set to <code>prod</code>: Optimize for reliability, security, and performance.</li> <li> <p>When set to <code>multi-environment</code>: Design with environment promotion in mind, using variables or parameters to differentiate environments.</p> </li> <li> <p><code>approach</code>:</p> </li> <li>When set to <code>immutable</code>: Design infrastructure to be replaced rather than modified when changes are needed.</li> <li>When set to <code>mutable</code>: Design infrastructure that can be updated in place.</li> <li>When set to <code>hybrid</code>: Use a combination of immutable and mutable approaches as appropriate.</li> </ul>"},{"location":"api/decorators/Infrastructure/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, claude-instant</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Infrastructure/#related-decorators","title":"Related Decorators","text":"<ul> <li>CloudProvider: Enhances Infrastructure CloudProvider can specify the target cloud platform, which complements the Infrastructure decorator.</li> <li>Security: Enhances Infrastructure Security decorator can add security-specific requirements to the infrastructure code.</li> </ul>"},{"location":"api/decorators/Interface/","title":"Interface Decorator","text":"<p>Generates interface definitions for APIs, libraries, or components.</p> <p>Category: Code Generation</p>"},{"location":"api/decorators/Interface/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>style</code> <code>enum</code> Interface paradigm or API style <code>context-dependent</code> <code>verbosity</code> <code>enum</code> Level of documentation detail <code>documented</code> <code>format</code> <code>enum</code> Output format of the interface <code>context-dependent</code>"},{"location":"api/decorators/Interface/#style-options","title":"Style Options","text":"<ul> <li><code>rest</code>: Use REST API design principles with appropriate HTTP methods and resource-based URLs.</li> <li><code>graphql</code>: Design a GraphQL schema with types, queries, and mutations.</li> <li><code>rpc</code>: Create an RPC-style interface with clearly defined methods and parameters.</li> <li><code>soap</code>: Define a SOAP web service interface with XML schema definitions.</li> <li><code>class</code>: Design an object-oriented class interface with methods and properties.</li> <li><code>function</code>: Create a functional programming interface with pure functions.</li> <li><code>event-driven</code>: Design an event-driven interface with events, subscribers, and handlers.</li> </ul>"},{"location":"api/decorators/Interface/#verbosity-options","title":"Verbosity Options","text":"<ul> <li><code>minimal</code>: Include only essential documentation with brief descriptions.</li> <li><code>documented</code>: Provide standard documentation with descriptions for all elements and parameters.</li> <li><code>extensive</code>: Include comprehensive documentation with examples, edge cases, and implementation notes.</li> </ul>"},{"location":"api/decorators/Interface/#format-options","title":"Format Options","text":"<ul> <li><code>code</code>: Output as implementation code in the most appropriate language.</li> <li><code>openapi</code>: Output as an OpenAPI/Swagger specification.</li> <li><code>schema</code>: Output as a schema definition (JSON Schema, XML Schema, etc.).</li> <li><code>typescript</code>: Output as TypeScript interface definitions.</li> </ul>"},{"location":"api/decorators/Interface/#examples","title":"Examples","text":""},{"location":"api/decorators/Interface/#rest-api-for-user-management","title":"REST API for user management","text":"<pre><code>+++Interface(style=rest, verbosity=extensive, format=openapi)\nCreate an API interface for a user management service with authentication, user profiles, and role management.\n</code></pre> <p>Generates a comprehensive OpenAPI specification for a RESTful user management API with detailed documentation.</p>"},{"location":"api/decorators/Interface/#graphql-api-with-minimal-documentation","title":"GraphQL API with minimal documentation","text":"<pre><code>+++Interface(style=graphql, verbosity=minimal)\nDesign an e-commerce product catalog API.\n</code></pre> <p>Produces a GraphQL schema for an e-commerce product catalog with essential documentation.</p>"},{"location":"api/decorators/Interface/#typescript-class-interface","title":"TypeScript class interface","text":"<pre><code>+++Interface(style=class, format=typescript)\nCreate a data structure for a task management system.\n</code></pre> <p>Generates TypeScript interfaces and classes for a task management system with standard documentation.</p>"},{"location":"api/decorators/Interface/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Interface/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Create a well-structured interface definition following these specifications:</p> <p>Notes: For gpt-4, more explicit instructions about structure may be needed.</p>"},{"location":"api/decorators/Interface/#claude-3-7-sonnet-latest","title":"claude-3-7-sonnet-latest","text":"<p>Instruction: Design a clear and comprehensive interface with these parameters:</p> <p>Notes: Claude models may benefit from more emphasis on comprehensive documentation.</p>"},{"location":"api/decorators/Interface/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Interface/#rest-api-design","title":"REST API design","text":"<p>Original Prompt: <pre><code>Create an API interface for a user management service with authentication, user profiles, and role management.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Generate an interface definition with the following characteristics:\nInterface style: rest\nDocumentation level: extensive\nOutput format: openapi\n\nCreate an API interface for a user management service with authentication, user profiles, and role management.\n</code></pre></p> <p>Notes: The decorator transforms the prompt to specify REST API design with extensive documentation in OpenAPI format.</p>"},{"location":"api/decorators/Interface/#class-interface-design","title":"Class interface design","text":"<p>Original Prompt: <pre><code>Design a data structure for managing a shopping cart.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Generate an interface definition with the following characteristics:\nInterface style: class\nDocumentation level: documented\nOutput format: typescript\n\nDesign a data structure for managing a shopping cart.\n</code></pre></p> <p>Notes: The decorator transforms the prompt to specify a class-based interface with standard documentation in TypeScript.</p>"},{"location":"api/decorators/Interface/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Generate an interface definition with the following characteristics:</p> <p>Placement: prepend</p> <p>Composition Behavior: override</p> <p>Parameter Effects:</p> <ul> <li><code>style</code>:</li> <li>When set to <code>rest</code>: Use REST API design principles with appropriate HTTP methods and resource-based URLs.</li> <li>When set to <code>graphql</code>: Design a GraphQL schema with types, queries, and mutations.</li> <li>When set to <code>rpc</code>: Create an RPC-style interface with clearly defined methods and parameters.</li> <li>When set to <code>soap</code>: Define a SOAP web service interface with XML schema definitions.</li> <li>When set to <code>class</code>: Design an object-oriented class interface with methods and properties.</li> <li>When set to <code>function</code>: Create a functional programming interface with pure functions.</li> <li>When set to <code>event-driven</code>: Design an event-driven interface with events, subscribers, and handlers.</li> <li> <p>Format: Interface style: {value}</p> </li> <li> <p><code>verbosity</code>:</p> </li> <li>When set to <code>minimal</code>: Include only essential documentation with brief descriptions.</li> <li>When set to <code>documented</code>: Provide standard documentation with descriptions for all elements and parameters.</li> <li>When set to <code>extensive</code>: Include comprehensive documentation with examples, edge cases, and implementation notes.</li> <li> <p>Format: Documentation level: {value}</p> </li> <li> <p><code>format</code>:</p> </li> <li>When set to <code>code</code>: Output as implementation code in the most appropriate language.</li> <li>When set to <code>openapi</code>: Output as an OpenAPI/Swagger specification.</li> <li>When set to <code>schema</code>: Output as a schema definition (JSON Schema, XML Schema, etc.).</li> <li>When set to <code>typescript</code>: Output as TypeScript interface definitions.</li> <li>Format: Output format: {value}</li> </ul>"},{"location":"api/decorators/Interface/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Interface/#related-decorators","title":"Related Decorators","text":"<ul> <li>CodeReview: Enhances Interface CodeReview can be applied after Interface to evaluate the generated interface design.</li> <li>LanguageSpecific: Enhances Interface LanguageSpecific can refine the output to target a specific programming language.</li> </ul>"},{"location":"api/decorators/Iterate/","title":"Iterate Decorator","text":"<p>Indicates this is an iteration on previously generated code, with specific improvements needed.</p> <p>Category: Implementation-Focused</p>"},{"location":"api/decorators/Iterate/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>version</code> <code>number</code> Iteration number <code>2</code> <code>feedback</code> <code>enum</code> Type of feedback addressed <code>review-comments</code> <code>priority</code> <code>enum</code> Implementation priority <code>correctness</code>"},{"location":"api/decorators/Iterate/#feedback-options","title":"Feedback Options","text":"<ul> <li><code>review-comments</code>: code review comments</li> <li><code>bug-fixes</code>: bug fixes</li> <li><code>performance-issues</code>: performance issues</li> <li><code>feature-requests</code>: feature requests</li> </ul>"},{"location":"api/decorators/Iterate/#priority-options","title":"Priority Options","text":"<ul> <li><code>correctness</code>: ensuring code correctness</li> <li><code>completeness</code>: ensuring feature completeness</li> <li><code>performance</code>: optimizing performance</li> <li><code>readability</code>: improving code readability</li> </ul>"},{"location":"api/decorators/Iterate/#examples","title":"Examples","text":""},{"location":"api/decorators/Iterate/#basic-iteration-on-authentication-middleware","title":"Basic iteration on authentication middleware","text":"<pre><code>+++Iterate(version=2, feedback=review-comments, priority=correctness)\nUpdate the authentication middleware based on these code review comments: 1) Token expiration is not properly checked, 2) Error messages are not consistent.\n</code></pre> <p>The model will understand this is the second iteration of code, focusing on fixing specific review comments with correctness as the priority.</p>"},{"location":"api/decorators/Iterate/#performance-improvement-iteration","title":"Performance improvement iteration","text":"<pre><code>+++Iterate(feedback=performance-issues, priority=performance)\nThe database query in the user service is taking too long. Please optimize it.\n</code></pre> <p>The model will understand this is an iteration focused on performance issues, with performance optimization as the priority.</p>"},{"location":"api/decorators/Iterate/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Iterate/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: This is iteration {version}. I need you to improve the previously generated code based on {feedback} feedback. Focus primarily on {priority}.</p> <p>Notes: Simpler phrasing works better with this model.</p>"},{"location":"api/decorators/Iterate/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Iterate/#web-development","title":"Web development","text":"<p>Original Prompt: <pre><code>Create an authentication middleware for Express.js\n</code></pre></p> <p>Transformed Prompt: <pre><code>This is iteration 2 of the code implementation. Please focus on addressing the following feedback: code review comments, with priority on ensuring code correctness.\n\nCreate an authentication middleware for Express.js\n</code></pre></p> <p>Notes: The decorator indicates this is a follow-up request to improve previously generated code.</p>"},{"location":"api/decorators/Iterate/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: This is iteration {version} of the code implementation. Please focus on addressing the following feedback: {feedback}, with priority on {priority}.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>version</code>:</li> <li> <p>Format: {value}</p> </li> <li> <p><code>feedback</code>:</p> </li> <li>When set to <code>review-comments</code>: code review comments</li> <li>When set to <code>bug-fixes</code>: bug fixes</li> <li>When set to <code>performance-issues</code>: performance issues</li> <li> <p>When set to <code>feature-requests</code>: feature requests</p> </li> <li> <p><code>priority</code>:</p> </li> <li>When set to <code>correctness</code>: ensuring code correctness</li> <li>When set to <code>completeness</code>: ensuring feature completeness</li> <li>When set to <code>performance</code>: optimizing performance</li> <li>When set to <code>readability</code>: improving code readability</li> </ul>"},{"location":"api/decorators/Iterate/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: FromScratch</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Iterate/#related-decorators","title":"Related Decorators","text":"<ul> <li>CodeReview: Enhances Iterate Iterate works well after CodeReview to implement suggested changes.</li> <li>FromScratch: Conflicts with Iterate Iterate assumes existing code to improve upon, which conflicts with FromScratch's purpose.</li> </ul>"},{"location":"api/decorators/Layered/","title":"Layered Decorator","text":"<p>Presents content at multiple levels of explanation depth, allowing readers to engage with information at their preferred level of detail. This decorator structures responses with progressive disclosure, from high-level summaries to increasingly detailed explanations.</p> <p>Category: Structure</p>"},{"location":"api/decorators/Layered/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>levels</code> <code>enum</code> The granularity of explanation levels to include <code>summary-detail-technical</code> <code>count</code> <code>number</code> Number of distinct explanation layers to provide <code>3</code> <code>progression</code> <code>enum</code> How to structure the progression between layers <code>separate</code>"},{"location":"api/decorators/Layered/#levels-options","title":"Levels Options","text":"<ul> <li><code>sentence-paragraph-full</code>: Structure the explanation in three distinct formats: first a one-sentence summary, then a single paragraph overview, and finally a full comprehensive explanation.</li> <li><code>basic-intermediate-advanced</code>: Provide explanations at three knowledge levels: a basic explanation for beginners, an intermediate explanation with more domain-specific concepts, and an advanced explanation for specialists.</li> <li><code>summary-detail-technical</code>: Present the information in increasing technical depth: first a high-level summary, then a detailed explanation, and finally a technical deep-dive with specialized terminology and concepts.</li> </ul>"},{"location":"api/decorators/Layered/#progression-options","title":"Progression Options","text":"<ul> <li><code>separate</code>: Present each explanation layer as a separate, clearly labeled section with its own heading.</li> <li><code>nested</code>: Structure the explanation as a hierarchical nested format, where each layer builds upon and includes the previous layer.</li> <li><code>incremental</code>: Present the information incrementally, adding new details and concepts with each layer while referencing previous information.</li> </ul>"},{"location":"api/decorators/Layered/#examples","title":"Examples","text":""},{"location":"api/decorators/Layered/#basic-three-level-explanation-of-a-complex-concept","title":"Basic three-level explanation of a complex concept","text":"<pre><code>+++Layered\nExplain how blockchain technology works.\n</code></pre> <p>Provides a summary-level explanation of blockchain, followed by a detailed explanation, and finally a technical deep dive with implementation details</p>"},{"location":"api/decorators/Layered/#multi-layered-nested-progression-with-custom-levels","title":"Multi-layered nested progression with custom levels","text":"<pre><code>+++Layered(levels=basic-intermediate-advanced, count=4, progression=nested)\nDescribe the principles of quantum computing.\n</code></pre> <p>Delivers a nested explanation of quantum computing with four progressive layers of understanding, each building on the previous and increasing in complexity from basic to advanced</p>"},{"location":"api/decorators/Layered/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Layered/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Provide {count} different levels of explanation about this topic. Use the {levels} approach, with each layer getting progressively more detailed. Structure these {progression}. Make sure to clearly label each layer so readers can choose their preferred depth.</p> <p>Notes: This model sometimes needs explicit reminders to create sufficiently distinct layers with meaningful differences in detail</p>"},{"location":"api/decorators/Layered/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Layered/#three-level-explanation-of-blockchain-technology","title":"Three-level explanation of blockchain technology","text":"<p>Original Prompt: <pre><code>Explain how blockchain technology works.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please present the information at multiple levels of explanation depth, allowing readers to engage with the content at their preferred level of detail. Present the information in increasing technical depth: first a high-level summary, then a detailed explanation, and finally a technical deep-dive with specialized terminology and concepts. Provide exactly 3 distinct layers of explanation, each with increasing depth and detail. Present each explanation layer as a separate, clearly labeled section with its own heading.\n\nExplain how blockchain technology works.\n</code></pre></p>"},{"location":"api/decorators/Layered/#multi-layered-nested-explanation-of-quantum-computing","title":"Multi-layered nested explanation of quantum computing","text":"<p>Original Prompt: <pre><code>Describe the principles of quantum computing.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please present the information at multiple levels of explanation depth, allowing readers to engage with the content at their preferred level of detail. Provide explanations at three knowledge levels: a basic explanation for beginners, an intermediate explanation with more domain-specific concepts, and an advanced explanation for specialists. Provide exactly 4 distinct layers of explanation, each with increasing depth and detail. Structure the explanation as a hierarchical nested format, where each layer builds upon and includes the previous layer.\n\nDescribe the principles of quantum computing.\n</code></pre></p>"},{"location":"api/decorators/Layered/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please present the information at multiple levels of explanation depth, allowing readers to engage with the content at their preferred level of detail.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>levels</code>:</li> <li>When set to <code>sentence-paragraph-full</code>: Structure the explanation in three distinct formats: first a one-sentence summary, then a single paragraph overview, and finally a full comprehensive explanation.</li> <li>When set to <code>basic-intermediate-advanced</code>: Provide explanations at three knowledge levels: a basic explanation for beginners, an intermediate explanation with more domain-specific concepts, and an advanced explanation for specialists.</li> <li> <p>When set to <code>summary-detail-technical</code>: Present the information in increasing technical depth: first a high-level summary, then a detailed explanation, and finally a technical deep-dive with specialized terminology and concepts.</p> </li> <li> <p><code>count</code>:</p> </li> <li> <p>Format: Provide exactly {value} distinct layers of explanation, each with increasing depth and detail.</p> </li> <li> <p><code>progression</code>:</p> </li> <li>When set to <code>separate</code>: Present each explanation layer as a separate, clearly labeled section with its own heading.</li> <li>When set to <code>nested</code>: Structure the explanation as a hierarchical nested format, where each layer builds upon and includes the previous layer.</li> <li>When set to <code>incremental</code>: Present the information incrementally, adding new details and concepts with each layer while referencing previous information.</li> </ul>"},{"location":"api/decorators/Layered/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Layered/#related-decorators","title":"Related Decorators","text":"<ul> <li>Audience: Enhances Layered Layered works well with Audience to further tailor each layer to different expertise levels</li> <li>ELI5: Enhances Layered ELI5 can be effectively used for the initial layer in a layered explanation</li> <li>Technical: Enhances Layered Technical can be used for the deepest layer in a layered explanation</li> </ul>"},{"location":"api/decorators/LearningPath/","title":"LearningPath Decorator","text":"<p>Creates step-by-step learning roadmaps.</p> <p>Category: Developer Education</p>"},{"location":"api/decorators/LearningPath/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>for</code> <code>string</code> Learning subject <code>context-dependent</code> <code>experience</code> <code>enum</code> Learner starting point <code>beginner</code> <code>timeframe</code> <code>enum</code> Available learning time <code>self-paced</code>"},{"location":"api/decorators/LearningPath/#experience-options","title":"Experience Options","text":"<ul> <li><code>beginner</code>: complete beginner with no prior knowledge</li> <li><code>intermediate</code>: learner with basic understanding seeking to deepen knowledge</li> <li><code>advanced</code>: experienced practitioner looking to master advanced concepts</li> <li><code>career-change</code>: professional transitioning from another field</li> </ul>"},{"location":"api/decorators/LearningPath/#timeframe-options","title":"Timeframe Options","text":"<ul> <li><code>week</code>: one week (intensive crash course)</li> <li><code>month</code>: one month (focused daily learning)</li> <li><code>quarter</code>: three months (steady consistent progress)</li> <li><code>year</code>: one year (comprehensive mastery program)</li> <li><code>self-paced</code>: flexible self-paced schedule</li> </ul>"},{"location":"api/decorators/LearningPath/#examples","title":"Examples","text":""},{"location":"api/decorators/LearningPath/#creating-a-react-learning-path-for-beginners-over-three-months","title":"Creating a React learning path for beginners over three months","text":"<pre><code>+++LearningPath(for=react, experience=beginner, timeframe=quarter)\nCreate a learning roadmap for a junior developer to become proficient in React and its ecosystem.\n</code></pre> <p>A structured, progressive learning path for React that spans three months, starting with fundamentals and building to advanced concepts, with appropriate resources and milestones for beginners.</p>"},{"location":"api/decorators/LearningPath/#creating-an-advanced-machine-learning-path-for-experienced-practitioners","title":"Creating an advanced machine learning path for experienced practitioners","text":"<pre><code>+++LearningPath(for=\"machine learning\", experience=advanced, timeframe=year)\n</code></pre> <p>A comprehensive year-long advanced learning path for machine learning that covers cutting-edge techniques, research papers, and practical implementations for someone already familiar with the basics.</p>"},{"location":"api/decorators/LearningPath/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/LearningPath/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Create a detailed, step-by-step learning path for {for}. The path should be for {experience} level learners and designed to be completed in a {timeframe}. Include specific resources, practice projects, and clear milestones.</p> <p>Notes: Simplified instruction with more direct language for models with smaller context windows.</p>"},{"location":"api/decorators/LearningPath/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/LearningPath/#creating-a-learning-path-for-react","title":"Creating a learning path for React","text":"<p>Original Prompt: <pre><code>Create a learning roadmap for a junior developer to become proficient in React and its ecosystem.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Create a structured learning path for React with the following characteristics:\n- Tailored for a beginner level learner\n- Designed to be completed within a quarter timeframe\n- Include specific resources, practice exercises, and milestones\n- Organize content in a logical progression from fundamentals to advanced topics\n\nCreate a learning roadmap for a junior developer to become proficient in React and its ecosystem.\n</code></pre></p> <p>Notes: The decorator prepends specific instructions for creating a structured learning path with clear parameters.</p>"},{"location":"api/decorators/LearningPath/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Create a structured learning path for {for} with the following characteristics: - Tailored for a {experience} level learner - Designed to be completed within a {timeframe} timeframe - Include specific resources, practice exercises, and milestones - Organize content in a logical progression from fundamentals to advanced topics</p> <p>Placement: prepend</p> <p>Composition Behavior: override</p> <p>Parameter Effects:</p> <ul> <li><code>for</code>:</li> <li> <p>Format: {value}</p> </li> <li> <p><code>experience</code>:</p> </li> <li>When set to <code>beginner</code>: complete beginner with no prior knowledge</li> <li>When set to <code>intermediate</code>: learner with basic understanding seeking to deepen knowledge</li> <li>When set to <code>advanced</code>: experienced practitioner looking to master advanced concepts</li> <li> <p>When set to <code>career-change</code>: professional transitioning from another field</p> </li> <li> <p><code>timeframe</code>:</p> </li> <li>When set to <code>week</code>: one week (intensive crash course)</li> <li>When set to <code>month</code>: one month (focused daily learning)</li> <li>When set to <code>quarter</code>: three months (steady consistent progress)</li> <li>When set to <code>year</code>: one year (comprehensive mastery program)</li> <li>When set to <code>self-paced</code>: flexible self-paced schedule</li> </ul>"},{"location":"api/decorators/LearningPath/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: Curriculum</li> <li>Compatible Models: gpt-4o, gpt-4-turbo, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 1.5.0</li> </ul>"},{"location":"api/decorators/LearningPath/#related-decorators","title":"Related Decorators","text":"<ul> <li>ExpertLevel: Enhances LearningPath ExpertLevel can be used to specify the expertise level of the content creator, while LearningPath focuses on the learner's experience level.</li> <li>Curriculum: Conflicts with LearningPath Both decorators aim to structure educational content and may provide conflicting instructions.</li> </ul>"},{"location":"api/decorators/Limitations/","title":"Limitations Decorator","text":"<p>Adds an explicit statement of limitations, caveats, or uncertainties related to the provided information. This decorator promotes intellectual honesty by acknowledging the boundaries of current knowledge, potential biases, or contextual constraints.</p> <p>Category: Verification</p>"},{"location":"api/decorators/Limitations/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>detail</code> <code>enum</code> The level of detail in the limitations statement <code>moderate</code> <code>position</code> <code>enum</code> Where to place the limitations statement in the response <code>end</code> <code>focus</code> <code>enum</code> The primary aspect to focus on in the limitations <code>all</code>"},{"location":"api/decorators/Limitations/#detail-options","title":"Detail Options","text":"<ul> <li><code>brief</code>: Add a concise, focused statement highlighting only the most critical limitations.</li> <li><code>moderate</code>: Provide a balanced discussion of several important limitations with some supporting context.</li> <li><code>comprehensive</code>: Include a thorough examination of all significant limitations with detailed explanations and implications.</li> </ul>"},{"location":"api/decorators/Limitations/#position-options","title":"Position Options","text":"<ul> <li><code>beginning</code>: Place the limitations statement at the beginning of your response, before presenting the main information.</li> <li><code>end</code>: Place the limitations statement at the end of your response, after presenting the main information.</li> </ul>"},{"location":"api/decorators/Limitations/#focus-options","title":"Focus Options","text":"<ul> <li><code>knowledge</code>: Focus primarily on limitations related to the current state of knowledge or understanding in this field.</li> <li><code>methodology</code>: Focus primarily on limitations in the methodology, research approaches, or analytical techniques used in this area.</li> <li><code>context</code>: Focus primarily on contextual limitations such as time period, geographical scope, or situational constraints.</li> <li><code>biases</code>: Focus primarily on potential biases, including research biases, sampling biases, or perspective biases.</li> <li><code>all</code>: Address a balanced mix of limitations across knowledge gaps, methodological issues, contextual constraints, and potential biases.</li> </ul>"},{"location":"api/decorators/Limitations/#examples","title":"Examples","text":""},{"location":"api/decorators/Limitations/#brief-limitations-statement-at-the-end-focused-on-methodology","title":"Brief limitations statement at the end focused on methodology","text":"<pre><code>+++Limitations(detail=brief, focus=methodology)\nExplain how personality tests predict career success.\n</code></pre> <p>Explains personality tests and career success, concluding with a brief statement of methodological limitations</p>"},{"location":"api/decorators/Limitations/#comprehensive-limitations-at-the-beginning-covering-all-aspects","title":"Comprehensive limitations at the beginning covering all aspects","text":"<pre><code>+++Limitations(detail=comprehensive, position=beginning, focus=all)\nDescribe the current understanding of consciousness.\n</code></pre> <p>Begins with a thorough discussion of the limitations in our understanding of consciousness before presenting the current state of knowledge</p>"},{"location":"api/decorators/Limitations/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Limitations/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Your response must include a clear section on the limitations of the information you're providing. Be honest about what isn't fully understood, potential issues with methodologies, and other important caveats. {position} Make the limitations {detail} and focus on {focus}.</p> <p>Notes: This model sometimes needs explicit prompting to acknowledge limitations, especially in domains where it has high confidence</p>"},{"location":"api/decorators/Limitations/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Limitations/#brief-methodological-limitations-at-the-end","title":"Brief methodological limitations at the end","text":"<p>Original Prompt: <pre><code>Explain how personality tests predict career success.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please include an explicit statement of limitations, caveats, or uncertainties related to the information in your response. Add a concise, focused statement highlighting only the most critical limitations. Place the limitations statement at the end of your response, after presenting the main information. Focus primarily on limitations in the methodology, research approaches, or analytical techniques used in this area.\n\nExplain how personality tests predict career success.\n</code></pre></p>"},{"location":"api/decorators/Limitations/#comprehensive-limitations-at-the-beginning-covering-all-aspects_1","title":"Comprehensive limitations at the beginning covering all aspects","text":"<p>Original Prompt: <pre><code>Describe the current understanding of consciousness.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please include an explicit statement of limitations, caveats, or uncertainties related to the information in your response. Include a thorough examination of all significant limitations with detailed explanations and implications. Place the limitations statement at the beginning of your response, before presenting the main information. Address a balanced mix of limitations across knowledge gaps, methodological issues, contextual constraints, and potential biases.\n\nDescribe the current understanding of consciousness.\n</code></pre></p>"},{"location":"api/decorators/Limitations/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please include an explicit statement of limitations, caveats, or uncertainties related to the information in your response.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>detail</code>:</li> <li>When set to <code>brief</code>: Add a concise, focused statement highlighting only the most critical limitations.</li> <li>When set to <code>moderate</code>: Provide a balanced discussion of several important limitations with some supporting context.</li> <li> <p>When set to <code>comprehensive</code>: Include a thorough examination of all significant limitations with detailed explanations and implications.</p> </li> <li> <p><code>position</code>:</p> </li> <li>When set to <code>beginning</code>: Place the limitations statement at the beginning of your response, before presenting the main information.</li> <li> <p>When set to <code>end</code>: Place the limitations statement at the end of your response, after presenting the main information.</p> </li> <li> <p><code>focus</code>:</p> </li> <li>When set to <code>knowledge</code>: Focus primarily on limitations related to the current state of knowledge or understanding in this field.</li> <li>When set to <code>methodology</code>: Focus primarily on limitations in the methodology, research approaches, or analytical techniques used in this area.</li> <li>When set to <code>context</code>: Focus primarily on contextual limitations such as time period, geographical scope, or situational constraints.</li> <li>When set to <code>biases</code>: Focus primarily on potential biases, including research biases, sampling biases, or perspective biases.</li> <li>When set to <code>all</code>: Address a balanced mix of limitations across knowledge gaps, methodological issues, contextual constraints, and potential biases.</li> </ul>"},{"location":"api/decorators/Limitations/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Limitations/#related-decorators","title":"Related Decorators","text":"<ul> <li>FactCheck: Enhances Limitations FactCheck and Limitations work well together to provide both factual accuracy and transparent acknowledgment of knowledge boundaries</li> <li>Confidence: Enhances Limitations Confidence ratings complement Limitations by quantifying uncertainty where Limitations describes it qualitatively</li> </ul>"},{"location":"api/decorators/LoggingStrategy/","title":"LoggingStrategy Decorator","text":"<p>Defines a strategy for implementing logging to aid debugging and monitoring.</p> <p>Category: Systematic Debugging</p>"},{"location":"api/decorators/LoggingStrategy/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>level</code> <code>enum</code> Logging detail level <code>standard</code> <code>targets</code> <code>enum</code> Logging targets <code>console</code> <code>lifecycle</code> <code>enum</code> Log lifecycle management <code>temporary</code>"},{"location":"api/decorators/LoggingStrategy/#level-options","title":"Level Options","text":"<ul> <li><code>minimal</code>: Implement minimal logging that captures only critical events and errors.</li> <li><code>standard</code>: Implement standard logging that captures important application events, errors, and basic flow information.</li> <li><code>verbose</code>: Implement verbose logging that captures detailed information about application flow, state changes, and all significant events.</li> <li><code>diagnostic</code>: Implement diagnostic logging that captures comprehensive details about internal operations, variable states, and system interactions for troubleshooting purposes.</li> </ul>"},{"location":"api/decorators/LoggingStrategy/#targets-options","title":"Targets Options","text":"<ul> <li><code>console</code>: Direct logs to the console or standard output.</li> <li><code>file</code>: Write logs to persistent files with appropriate rotation and management.</li> <li><code>service</code>: Send logs to a dedicated logging service or aggregator.</li> <li><code>all</code>: Implement multiple logging targets including console, file, and service integration.</li> </ul>"},{"location":"api/decorators/LoggingStrategy/#lifecycle-options","title":"Lifecycle Options","text":"<ul> <li><code>temporary</code>: Implement logging as a temporary measure that can be easily removed when no longer needed.</li> <li><code>permanent</code>: Implement logging as a permanent part of the system architecture.</li> <li><code>conditional</code>: Implement conditional logging that activates based on environment variables or configuration.</li> <li><code>togglable</code>: Implement logging that can be dynamically enabled or disabled at runtime.</li> </ul>"},{"location":"api/decorators/LoggingStrategy/#examples","title":"Examples","text":""},{"location":"api/decorators/LoggingStrategy/#implementing-diagnostic-logging-for-authentication-flow","title":"Implementing diagnostic logging for authentication flow","text":"<pre><code>+++LoggingStrategy(level=diagnostic, targets=console, lifecycle=togglable)\nImplement comprehensive logging for the authentication flow that can be enabled/disabled with a debug flag.\n</code></pre> <p>The model will generate code for an authentication flow with detailed diagnostic logging that outputs to the console and can be toggled on/off via a debug flag.</p>"},{"location":"api/decorators/LoggingStrategy/#standard-file-logging-for-production-environment","title":"Standard file logging for production environment","text":"<pre><code>+++LoggingStrategy(level=standard, targets=file, lifecycle=permanent)\nCreate a user registration system with appropriate logging.\n</code></pre> <p>The model will implement a user registration system with standard-level logging written to files as a permanent part of the system.</p>"},{"location":"api/decorators/LoggingStrategy/#minimal-conditional-logging-for-performance-sensitive-operations","title":"Minimal conditional logging for performance-sensitive operations","text":"<pre><code>+++LoggingStrategy(level=minimal, targets=service, lifecycle=conditional)\nWrite a high-performance data processing function.\n</code></pre> <p>The model will create a high-performance function with minimal logging sent to a service, activated only under specific conditions to minimize performance impact.</p>"},{"location":"api/decorators/LoggingStrategy/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/LoggingStrategy/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Add logging to the code with the following characteristics: {level} detail level, output to {targets}, and {lifecycle} persistence.</p> <p>Notes: Simplified instruction format works better with gpt-4 Turbo.</p>"},{"location":"api/decorators/LoggingStrategy/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/LoggingStrategy/#nodejs-application","title":"Node.js application","text":"<p>Original Prompt: <pre><code>Write a user authentication function for my Express app.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Implement a logging strategy for the code or system being discussed. Implement diagnostic logging that captures comprehensive details about internal operations, variable states, and system interactions for troubleshooting purposes. Direct logs to the console or standard output. Implement logging that can be dynamically enabled or disabled at runtime.\n\nWrite a user authentication function for my Express app.\n</code></pre></p> <p>Notes: The transformed prompt instructs the model to include diagnostic-level logging in the authentication function with console output that can be toggled on/off.</p>"},{"location":"api/decorators/LoggingStrategy/#python-backend-service","title":"Python backend service","text":"<p>Original Prompt: <pre><code>Create a data processing pipeline that handles CSV imports.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Implement a logging strategy for the code or system being discussed. Implement verbose logging that captures detailed information about application flow, state changes, and all significant events. Write logs to persistent files with appropriate rotation and management. Implement conditional logging that activates based on environment variables or configuration.\n\nCreate a data processing pipeline that handles CSV imports.\n</code></pre></p> <p>Notes: The transformed prompt adds instructions for verbose file-based logging with conditional activation based on environment settings.</p>"},{"location":"api/decorators/LoggingStrategy/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Implement a logging strategy for the code or system being discussed.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>level</code>:</li> <li>When set to <code>minimal</code>: Implement minimal logging that captures only critical events and errors.</li> <li>When set to <code>standard</code>: Implement standard logging that captures important application events, errors, and basic flow information.</li> <li>When set to <code>verbose</code>: Implement verbose logging that captures detailed information about application flow, state changes, and all significant events.</li> <li> <p>When set to <code>diagnostic</code>: Implement diagnostic logging that captures comprehensive details about internal operations, variable states, and system interactions for troubleshooting purposes.</p> </li> <li> <p><code>targets</code>:</p> </li> <li>When set to <code>console</code>: Direct logs to the console or standard output.</li> <li>When set to <code>file</code>: Write logs to persistent files with appropriate rotation and management.</li> <li>When set to <code>service</code>: Send logs to a dedicated logging service or aggregator.</li> <li> <p>When set to <code>all</code>: Implement multiple logging targets including console, file, and service integration.</p> </li> <li> <p><code>lifecycle</code>:</p> </li> <li>When set to <code>temporary</code>: Implement logging as a temporary measure that can be easily removed when no longer needed.</li> <li>When set to <code>permanent</code>: Implement logging as a permanent part of the system architecture.</li> <li>When set to <code>conditional</code>: Implement conditional logging that activates based on environment variables or configuration.</li> <li>When set to <code>togglable</code>: Implement logging that can be dynamically enabled or disabled at runtime.</li> </ul>"},{"location":"api/decorators/LoggingStrategy/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/LoggingStrategy/#related-decorators","title":"Related Decorators","text":"<ul> <li>ErrorHandling: Enhances LoggingStrategy LoggingStrategy works well with ErrorHandling to create robust error tracking and debugging capabilities.</li> <li>PerformanceOptimization: Conflicts with LoggingStrategy Verbose or diagnostic logging may impact performance, so be cautious when combining with PerformanceOptimization.</li> </ul>"},{"location":"api/decorators/MECE/","title":"MECE Decorator","text":"<p>Structures the response using the Mutually Exclusive, Collectively Exhaustive framework - a principle where categories have no overlaps and cover all possibilities. This decorator ensures comprehensive analysis with clear categorization for decision-making and problem-solving.</p> <p>Category: Structure</p>"},{"location":"api/decorators/MECE/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>dimensions</code> <code>number</code> Number of top-level MECE dimensions to use for categorization <code>3</code> <code>depth</code> <code>number</code> Maximum level of hierarchical breakdown within each dimension <code>2</code> <code>framework</code> <code>enum</code> Optional predefined MECE framework to apply <code>custom</code>"},{"location":"api/decorators/MECE/#framework-options","title":"Framework Options","text":"<ul> <li><code>issue tree</code>: Use an issue tree framework to break down the topic into a hierarchy of questions and sub-questions, ensuring comprehensive coverage of all relevant issues.</li> <li><code>value chain</code>: Apply a value chain framework to analyze the topic across all activities that add value, from inputs to final outputs/outcomes.</li> <li><code>business segments</code>: Categorize the analysis using business segments such as products/services, customer segments, geographical regions, and operational functions.</li> <li><code>stakeholders</code>: Structure the analysis around all relevant stakeholders, ensuring every entity affected by or influencing the topic is considered.</li> <li><code>custom</code>: Develop a custom MECE framework tailored specifically to this topic, with categories that best fit the subject matter.</li> </ul>"},{"location":"api/decorators/MECE/#examples","title":"Examples","text":""},{"location":"api/decorators/MECE/#basic-mece-analysis-of-a-business-problem","title":"Basic MECE analysis of a business problem","text":"<pre><code>+++MECE\nWhat factors should we consider when expanding to a new market?\n</code></pre> <p>Organizes market expansion factors into 3 mutually exclusive, collectively exhaustive categories with no overlaps and full coverage of all considerations</p>"},{"location":"api/decorators/MECE/#detailed-mece-framework-with-stakeholder-focus","title":"Detailed MECE framework with stakeholder focus","text":"<pre><code>+++MECE(dimensions=4, depth=3, framework=stakeholders)\nAnalyze the implications of implementing a four-day work week.\n</code></pre> <p>Provides a 4-dimension MECE analysis of a four-day work week using a stakeholder framework, with up to 3 levels of hierarchical breakdown within each stakeholder category</p>"},{"location":"api/decorators/MECE/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/MECE/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Create a MECE (Mutually Exclusive, Collectively Exhaustive) analysis with {dimensions} main categories that don't overlap and together cover everything about this topic. Use the {framework} approach. For each main category, break it down into {depth} levels of sub-categories. Make sure there are no gaps in your analysis and no overlaps between categories.</p> <p>Notes: This model sometimes struggles with maintaining true MECE principles and may need explicit reminders to check for category overlaps or gaps</p>"},{"location":"api/decorators/MECE/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/MECE/#mece-analysis-of-market-expansion-factors","title":"MECE analysis of market expansion factors","text":"<p>Original Prompt: <pre><code>What factors should we consider when expanding to a new market?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please structure your response using the Mutually Exclusive, Collectively Exhaustive (MECE) framework, ensuring all categories are distinct with no overlaps (mutually exclusive) and together cover all possible aspects (collectively exhaustive). Organize your analysis into exactly 3 distinct top-level MECE dimensions or categories. For each top-level dimension, provide a hierarchical breakdown with up to 2 sub-levels of categorization. Develop a custom MECE framework tailored specifically to this topic, with categories that best fit the subject matter.\n\nWhat factors should we consider when expanding to a new market?\n</code></pre></p>"},{"location":"api/decorators/MECE/#stakeholder-focused-mece-analysis-of-work-week-change","title":"Stakeholder-focused MECE analysis of work week change","text":"<p>Original Prompt: <pre><code>Analyze the implications of implementing a four-day work week.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please structure your response using the Mutually Exclusive, Collectively Exhaustive (MECE) framework, ensuring all categories are distinct with no overlaps (mutually exclusive) and together cover all possible aspects (collectively exhaustive). Organize your analysis into exactly 4 distinct top-level MECE dimensions or categories. For each top-level dimension, provide a hierarchical breakdown with up to 3 sub-levels of categorization. Structure the analysis around all relevant stakeholders, ensuring every entity affected by or influencing the topic is considered.\n\nAnalyze the implications of implementing a four-day work week.\n</code></pre></p>"},{"location":"api/decorators/MECE/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please structure your response using the Mutually Exclusive, Collectively Exhaustive (MECE) framework, ensuring all categories are distinct with no overlaps (mutually exclusive) and together cover all possible aspects (collectively exhaustive).</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>dimensions</code>:</li> <li> <p>Format: Organize your analysis into exactly {value} distinct top-level MECE dimensions or categories.</p> </li> <li> <p><code>depth</code>:</p> </li> <li> <p>Format: For each top-level dimension, provide a hierarchical breakdown with up to {value} sub-levels of categorization.</p> </li> <li> <p><code>framework</code>:</p> </li> <li>When set to <code>issue tree</code>: Use an issue tree framework to break down the topic into a hierarchy of questions and sub-questions, ensuring comprehensive coverage of all relevant issues.</li> <li>When set to <code>value chain</code>: Apply a value chain framework to analyze the topic across all activities that add value, from inputs to final outputs/outcomes.</li> <li>When set to <code>business segments</code>: Categorize the analysis using business segments such as products/services, customer segments, geographical regions, and operational functions.</li> <li>When set to <code>stakeholders</code>: Structure the analysis around all relevant stakeholders, ensuring every entity affected by or influencing the topic is considered.</li> <li>When set to <code>custom</code>: Develop a custom MECE framework tailored specifically to this topic, with categories that best fit the subject matter.</li> </ul>"},{"location":"api/decorators/MECE/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/MECE/#related-decorators","title":"Related Decorators","text":"<ul> <li>Prioritize: Enhances MECE MECE provides comprehensive categorization, while Prioritize helps rank the identified categories by importance</li> <li>Structured: Enhances MECE MECE and Structured work well together to create clearly organized and comprehensive content</li> <li>FindGaps: Enhances MECE FindGaps can help verify the 'collectively exhaustive' aspect of a MECE analysis by identifying any missing categories</li> </ul>"},{"location":"api/decorators/MemoryConstraint/","title":"MemoryConstraint Decorator","text":"<p>Helps manage implementation within AI context window limitations by focusing on specific code portions.</p> <p>Category: Implementation-Focused</p>"},{"location":"api/decorators/MemoryConstraint/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>focus</code> <code>enum</code> Part of the code to focus on <code>component</code> <code>implementation</code> <code>enum</code> Implementation completeness <code>core-logic</code> <code>context</code> <code>enum</code> How to handle surrounding code <code>summarize</code>"},{"location":"api/decorators/MemoryConstraint/#focus-options","title":"Focus Options","text":"<ul> <li><code>single-function</code>: Focus only on implementing a single function or method.</li> <li><code>component</code>: Implement a complete component with its related functions.</li> <li><code>interface</code>: Focus on defining the interface or API surface.</li> <li><code>specific-feature</code>: Implement a specific feature across relevant functions/components.</li> </ul>"},{"location":"api/decorators/MemoryConstraint/#implementation-options","title":"Implementation Options","text":"<ul> <li><code>skeleton</code>: Provide only the structure/skeleton of the implementation with minimal logic.</li> <li><code>core-logic</code>: Implement the core logic while omitting edge cases and optimizations.</li> <li><code>full-implementation</code>: Provide a complete implementation with error handling and edge cases.</li> <li><code>with-tests</code>: Include both implementation and unit tests for the code.</li> </ul>"},{"location":"api/decorators/MemoryConstraint/#context-options","title":"Context Options","text":"<ul> <li><code>ignore</code>: Ignore any surrounding code context in your implementation.</li> <li><code>summarize</code>: Briefly summarize how this implementation fits into the broader codebase.</li> <li><code>interface-only</code>: Only reference interfaces or signatures of surrounding code.</li> <li><code>stub</code>: Include stub implementations for surrounding code dependencies.</li> </ul>"},{"location":"api/decorators/MemoryConstraint/#examples","title":"Examples","text":""},{"location":"api/decorators/MemoryConstraint/#implementing-a-single-authentication-function-with-full-implementation","title":"Implementing a single authentication function with full implementation","text":"<pre><code>+++MemoryConstraint(focus=single-function, implementation=full-implementation, context=interface-only)\nImplement the user authentication function that verifies credentials against our database.\n</code></pre> <p>A complete implementation of just the authentication function with error handling and edge cases, referencing only the interfaces of surrounding code.</p>"},{"location":"api/decorators/MemoryConstraint/#creating-a-component-skeleton-with-stubbed-dependencies","title":"Creating a component skeleton with stubbed dependencies","text":"<pre><code>+++MemoryConstraint(focus=component, implementation=skeleton, context=stub)\nImplement a shopping cart component for our e-commerce application.\n</code></pre> <p>A structural skeleton of the shopping cart component with stubbed implementations of dependencies.</p>"},{"location":"api/decorators/MemoryConstraint/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/MemoryConstraint/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Due to context window limitations, focus specifically on: {focus} with {implementation} level of detail. For surrounding code, {context}.</p> <p>Notes: More explicit instructions needed for models with smaller context windows.</p>"},{"location":"api/decorators/MemoryConstraint/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/MemoryConstraint/#web-application-development","title":"Web application development","text":"<p>Original Prompt: <pre><code>Implement the user authentication function that verifies credentials against our database.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Focus only on implementing a single function or method. Provide a complete implementation with error handling and edge cases. Only reference interfaces or signatures of surrounding code.\n\nImplement the user authentication function that verifies credentials against our database.\n</code></pre></p> <p>Notes: The decorator helps focus the implementation on just the authentication function with complete implementation while only referencing interfaces of surrounding code.</p>"},{"location":"api/decorators/MemoryConstraint/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Focus on implementing the specified code portion while managing memory constraints. Prioritize clarity and correctness within the scope.</p> <p>Placement: prepend</p> <p>Composition Behavior: override</p> <p>Parameter Effects:</p> <ul> <li><code>focus</code>:</li> <li>When set to <code>single-function</code>: Focus only on implementing a single function or method.</li> <li>When set to <code>component</code>: Implement a complete component with its related functions.</li> <li>When set to <code>interface</code>: Focus on defining the interface or API surface.</li> <li> <p>When set to <code>specific-feature</code>: Implement a specific feature across relevant functions/components.</p> </li> <li> <p><code>implementation</code>:</p> </li> <li>When set to <code>skeleton</code>: Provide only the structure/skeleton of the implementation with minimal logic.</li> <li>When set to <code>core-logic</code>: Implement the core logic while omitting edge cases and optimizations.</li> <li>When set to <code>full-implementation</code>: Provide a complete implementation with error handling and edge cases.</li> <li> <p>When set to <code>with-tests</code>: Include both implementation and unit tests for the code.</p> </li> <li> <p><code>context</code>:</p> </li> <li>When set to <code>ignore</code>: Ignore any surrounding code context in your implementation.</li> <li>When set to <code>summarize</code>: Briefly summarize how this implementation fits into the broader codebase.</li> <li>When set to <code>interface-only</code>: Only reference interfaces or signatures of surrounding code.</li> <li>When set to <code>stub</code>: Include stub implementations for surrounding code dependencies.</li> </ul>"},{"location":"api/decorators/MemoryConstraint/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: FullSystemDesign, ComprehensiveImplementation</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/MemoryConstraint/#related-decorators","title":"Related Decorators","text":"<ul> <li>CodeStyle: Enhances MemoryConstraint Can be combined with CodeStyle to specify both memory constraints and coding style preferences.</li> <li>FullSystemDesign: Conflicts with MemoryConstraint Conflicts with decorators that request comprehensive system designs as MemoryConstraint deliberately limits scope.</li> </ul>"},{"location":"api/decorators/Migration/","title":"Migration Decorator","text":"<p>Plans migration approaches between system states.</p> <p>Category: Architecture And Design</p>"},{"location":"api/decorators/Migration/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>from</code> <code>string</code> Current state <code>context-dependent</code> <code>to</code> <code>string</code> Target state <code>context-dependent</code> <code>approach</code> <code>enum</code> Migration strategy <code>incremental</code>"},{"location":"api/decorators/Migration/#approach-options","title":"Approach Options","text":"<ul> <li><code>big-bang</code>: Use a big-bang migration approach, where the entire system is replaced at once.</li> <li><code>incremental</code>: Use an incremental migration approach, where components are migrated one by one over time.</li> <li><code>strangler-fig</code>: Use a strangler-fig migration approach, where the new system gradually replaces the old one.</li> <li><code>parallel-run</code>: Use a parallel-run migration approach, where both systems operate simultaneously until the migration is complete.</li> </ul>"},{"location":"api/decorators/Migration/#examples","title":"Examples","text":""},{"location":"api/decorators/Migration/#migration-plan-for-transitioning-from-monolith-to-microservices","title":"Migration plan for transitioning from monolith to microservices","text":"<pre><code>+++Migration(from=monolith, to=microservices, approach=strangler-fig)\nCreate a migration plan for transitioning our monolithic e-commerce application to microservices.\n</code></pre> <p>A detailed migration plan using the strangler-fig pattern to gradually transition from a monolithic architecture to microservices.</p>"},{"location":"api/decorators/Migration/#database-migration-planning","title":"Database migration planning","text":"<pre><code>+++Migration(from=SQL, to=NoSQL, approach=parallel-run)\nHow should we migrate our customer data?\n</code></pre> <p>A migration plan for transitioning from SQL to NoSQL databases using a parallel-run approach, with specific focus on customer data.</p>"},{"location":"api/decorators/Migration/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Migration/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Create a step-by-step migration plan to move from {from} to {to} using the {approach} approach. Include timeline, risks, and resource needs.</p> <p>Notes: Simplified instruction for models with more limited context windows.</p>"},{"location":"api/decorators/Migration/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Migration/#software-architecture-planning","title":"Software Architecture Planning","text":"<p>Original Prompt: <pre><code>Create a migration plan for transitioning our monolithic e-commerce application to microservices.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Create a detailed migration plan that addresses the transition from the current state to the target state. Include key considerations, risks, timeline estimates, and resource requirements. The current state is: monolith. The target state is: microservices. Use a strangler-fig migration approach, where the new system gradually replaces the old one.\n\nCreate a migration plan for transitioning our monolithic e-commerce application to microservices.\n</code></pre></p> <p>Notes: The decorator adds specific migration context and approach guidance to the original prompt.</p>"},{"location":"api/decorators/Migration/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Create a detailed migration plan that addresses the transition from the current state to the target state. Include key considerations, risks, timeline estimates, and resource requirements.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>from</code>:</li> <li> <p>Format: The current state is: {value}.</p> </li> <li> <p><code>to</code>:</p> </li> <li> <p>Format: The target state is: {value}.</p> </li> <li> <p><code>approach</code>:</p> </li> <li>When set to <code>big-bang</code>: Use a big-bang migration approach, where the entire system is replaced at once.</li> <li>When set to <code>incremental</code>: Use an incremental migration approach, where components are migrated one by one over time.</li> <li>When set to <code>strangler-fig</code>: Use a strangler-fig migration approach, where the new system gradually replaces the old one.</li> <li>When set to <code>parallel-run</code>: Use a parallel-run migration approach, where both systems operate simultaneously until the migration is complete.</li> </ul>"},{"location":"api/decorators/Migration/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Migration/#related-decorators","title":"Related Decorators","text":"<ul> <li>SystemDesign: Enhances Migration Migration works well with SystemDesign as it provides context for the migration planning.</li> <li>RiskAnalysis: Enhances Migration RiskAnalysis can be used to further elaborate on the risks associated with the migration.</li> </ul>"},{"location":"api/decorators/MockData/","title":"MockData Decorator","text":"<p>Generates test fixtures and mock data for testing.</p> <p>Category: Testing And Debugging</p>"},{"location":"api/decorators/MockData/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>complexity</code> <code>enum</code> Sophistication of generated data <code>moderate</code> <code>format</code> <code>enum</code> Output format of the mock data <code>json</code> <code>size</code> <code>enum</code> Amount of mock data to generate <code>medium</code>"},{"location":"api/decorators/MockData/#complexity-options","title":"Complexity Options","text":"<ul> <li><code>simple</code>: Create basic mock data with minimal fields and simple relationships.</li> <li><code>moderate</code>: Generate mock data with reasonable complexity including relationships and varied field values.</li> <li><code>complex</code>: Produce sophisticated mock data with complex relationships, edge cases, and realistic variations.</li> </ul>"},{"location":"api/decorators/MockData/#format-options","title":"Format Options","text":"<ul> <li><code>json</code>: Output the mock data in JSON format.</li> <li><code>csv</code>: Output the mock data in CSV format.</li> <li><code>sql</code>: Output the mock data as SQL insert statements.</li> <li><code>code</code>: Output the mock data as code objects in a programming language appropriate to the context.</li> <li><code>graphql</code>: Output the mock data in GraphQL format.</li> </ul>"},{"location":"api/decorators/MockData/#size-options","title":"Size Options","text":"<ul> <li><code>small</code>: Generate a small sample of 3-5 records per entity.</li> <li><code>medium</code>: Generate a medium-sized dataset of 10-20 records per entity.</li> <li><code>large</code>: Generate a large dataset of 50-100 records per entity.</li> </ul>"},{"location":"api/decorators/MockData/#examples","title":"Examples","text":""},{"location":"api/decorators/MockData/#generating-complex-json-mock-data-for-an-e-commerce-system","title":"Generating complex JSON mock data for an e-commerce system","text":"<pre><code>+++MockData(complexity=complex, format=json, size=medium)\nGenerate mock data for an e-commerce system with users, products, orders, and reviews.\n</code></pre> <p>Returns a medium-sized set of complex, interconnected mock data in JSON format for an e-commerce system, including users, products, orders, and reviews with realistic relationships.</p>"},{"location":"api/decorators/MockData/#creating-simple-sql-test-data","title":"Creating simple SQL test data","text":"<pre><code>+++MockData(complexity=simple, format=sql, size=small)\nGenerate test data for a blog database with authors, posts, and comments.\n</code></pre> <p>Returns SQL insert statements for a small set of simple blog data including authors, posts, and comments tables.</p>"},{"location":"api/decorators/MockData/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/MockData/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Create realistic mock data for testing purposes. The data should be fictional but plausible.</p> <p>Notes: Simpler instruction for models with less context capacity.</p>"},{"location":"api/decorators/MockData/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/MockData/#e-commerce-application-testing","title":"E-commerce application testing","text":"<p>Original Prompt: <pre><code>Generate mock data for an e-commerce system with users, products, orders, and reviews.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Generate mock data according to the specified parameters. The data should be realistic but not real. Generate mock data with reasonable complexity including relationships and varied field values. Output the mock data in JSON format. Generate a medium-sized dataset of 10-20 records per entity.\n\nGenerate mock data for an e-commerce system with users, products, orders, and reviews.\n</code></pre></p> <p>Notes: The decorator adds specific instructions about the complexity, format, and size of the mock data to generate.</p>"},{"location":"api/decorators/MockData/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Generate mock data according to the specified parameters. The data should be realistic but not real.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>complexity</code>:</li> <li>When set to <code>simple</code>: Create basic mock data with minimal fields and simple relationships.</li> <li>When set to <code>moderate</code>: Generate mock data with reasonable complexity including relationships and varied field values.</li> <li> <p>When set to <code>complex</code>: Produce sophisticated mock data with complex relationships, edge cases, and realistic variations.</p> </li> <li> <p><code>format</code>:</p> </li> <li>When set to <code>json</code>: Output the mock data in JSON format.</li> <li>When set to <code>csv</code>: Output the mock data in CSV format.</li> <li>When set to <code>sql</code>: Output the mock data as SQL insert statements.</li> <li>When set to <code>code</code>: Output the mock data as code objects in a programming language appropriate to the context.</li> <li> <p>When set to <code>graphql</code>: Output the mock data in GraphQL format.</p> </li> <li> <p><code>size</code>:</p> </li> <li>When set to <code>small</code>: Generate a small sample of 3-5 records per entity.</li> <li>When set to <code>medium</code>: Generate a medium-sized dataset of 10-20 records per entity.</li> <li>When set to <code>large</code>: Generate a large dataset of 50-100 records per entity.</li> </ul>"},{"location":"api/decorators/MockData/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/MockData/#related-decorators","title":"Related Decorators","text":"<ul> <li>CodeGeneration: Enhances MockData MockData works well with CodeGeneration to create test fixtures within generated code.</li> <li>DataAnalysis: Enhances MockData MockData can provide test data for DataAnalysis examples.</li> </ul>"},{"location":"api/decorators/Monitoring/","title":"Monitoring Decorator","text":"<p>Creates monitoring and alerting setups for systems.</p> <p>Category: Devops And Infrastructure</p>"},{"location":"api/decorators/Monitoring/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>focus</code> <code>enum</code> Monitoring emphasis <code>comprehensive</code> <code>tools</code> <code>enum</code> Preferred monitoring tools <code>recommend</code> <code>implementation</code> <code>enum</code> Implementation depth <code>configuration</code>"},{"location":"api/decorators/Monitoring/#focus-options","title":"Focus Options","text":"<ul> <li><code>performance</code>: Emphasize performance metrics, throughput, and latency monitoring.</li> <li><code>errors</code>: Prioritize error detection, logging, and exception tracking.</li> <li><code>security</code>: Focus on security-related monitoring, intrusion detection, and vulnerability scanning.</li> <li><code>business-metrics</code>: Concentrate on business KPIs and metrics that align with organizational goals.</li> <li><code>user-experience</code>: Monitor user interactions, satisfaction metrics, and frontend performance.</li> <li><code>comprehensive</code>: Provide a balanced monitoring approach covering all critical aspects of the system.</li> </ul>"},{"location":"api/decorators/Monitoring/#tools-options","title":"Tools Options","text":"<ul> <li><code>datadog</code>: Implement the solution using Datadog as the primary monitoring platform.</li> <li><code>prometheus</code>: Use Prometheus and associated tools for metrics collection and alerting.</li> <li><code>cloudwatch</code>: Leverage AWS CloudWatch for monitoring and alerting capabilities.</li> <li><code>newrelic</code>: Build the monitoring solution around New Relic's observability platform.</li> <li><code>grafana</code>: Utilize Grafana for dashboarding, with appropriate data sources for collection.</li> <li><code>elastic</code>: Implement using the Elastic Stack (Elasticsearch, Logstash, Kibana).</li> <li><code>recommend</code>: Suggest the most appropriate monitoring tools based on the system requirements.</li> </ul>"},{"location":"api/decorators/Monitoring/#implementation-options","title":"Implementation Options","text":"<ul> <li><code>concepts</code>: Provide a high-level conceptual overview of the monitoring approach.</li> <li><code>configuration</code>: Include specific configuration examples and implementation details.</li> <li><code>full-setup</code>: Deliver comprehensive setup instructions with code samples and deployment guidance.</li> </ul>"},{"location":"api/decorators/Monitoring/#examples","title":"Examples","text":""},{"location":"api/decorators/Monitoring/#performance-monitoring-for-microservices","title":"Performance monitoring for microservices","text":"<pre><code>+++Monitoring(focus=performance, tools=prometheus, implementation=configuration)\nCreate a monitoring solution for our microservices architecture focusing on performance metrics and latency.\n</code></pre> <p>Provides a Prometheus-based monitoring configuration focused on performance metrics like request rates, latency distributions, and resource utilization for microservices.</p>"},{"location":"api/decorators/Monitoring/#security-monitoring-with-comprehensive-setup","title":"Security monitoring with comprehensive setup","text":"<pre><code>+++Monitoring(focus=security, tools=elastic, implementation=full-setup)\nWe need to monitor our cloud infrastructure for potential security breaches.\n</code></pre> <p>Delivers a complete Elastic Stack setup with detailed implementation instructions for security monitoring, including log collection, SIEM rules, and security dashboards.</p>"},{"location":"api/decorators/Monitoring/#business-metrics-monitoring-concepts","title":"Business metrics monitoring concepts","text":"<pre><code>+++Monitoring(focus=business-metrics, implementation=concepts)\nWhat should we monitor for our SaaS product?\n</code></pre> <p>Provides conceptual guidance on monitoring business KPIs for a SaaS product, including customer acquisition costs, churn rates, and lifetime value metrics.</p>"},{"location":"api/decorators/Monitoring/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Monitoring/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Create a monitoring setup for the system described below. Include specific tools, metrics to track, and alert configurations.</p> <p>Notes: Simplified instruction for models with more limited context windows.</p>"},{"location":"api/decorators/Monitoring/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Monitoring/#microservices-architecture","title":"Microservices Architecture","text":"<p>Original Prompt: <pre><code>Create a monitoring solution for our microservices architecture focusing on performance metrics and latency.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Create a monitoring and alerting setup for the described system. Focus on providing practical, implementable monitoring solutions. Emphasize performance metrics, throughput, and latency monitoring. Use Prometheus and associated tools for metrics collection and alerting. Include specific configuration examples and implementation details.\n\nCreate a monitoring solution for our microservices architecture focusing on performance metrics and latency.\n</code></pre></p> <p>Notes: This example shows how the decorator adds specific guidance for performance monitoring in a microservices context using Prometheus.</p>"},{"location":"api/decorators/Monitoring/#e-commerce-platform","title":"E-commerce Platform","text":"<p>Original Prompt: <pre><code>How should we monitor our e-commerce platform?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Create a monitoring and alerting setup for the described system. Focus on providing practical, implementable monitoring solutions. Provide a balanced monitoring approach covering all critical aspects of the system. Suggest the most appropriate monitoring tools based on the system requirements. Include specific configuration examples and implementation details.\n\nHow should we monitor our e-commerce platform?\n</code></pre></p> <p>Notes: This example uses default values to provide a comprehensive monitoring approach with tool recommendations.</p>"},{"location":"api/decorators/Monitoring/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Create a monitoring and alerting setup for the described system. Focus on providing practical, implementable monitoring solutions.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>focus</code>:</li> <li>When set to <code>performance</code>: Emphasize performance metrics, throughput, and latency monitoring.</li> <li>When set to <code>errors</code>: Prioritize error detection, logging, and exception tracking.</li> <li>When set to <code>security</code>: Focus on security-related monitoring, intrusion detection, and vulnerability scanning.</li> <li>When set to <code>business-metrics</code>: Concentrate on business KPIs and metrics that align with organizational goals.</li> <li>When set to <code>user-experience</code>: Monitor user interactions, satisfaction metrics, and frontend performance.</li> <li> <p>When set to <code>comprehensive</code>: Provide a balanced monitoring approach covering all critical aspects of the system.</p> </li> <li> <p><code>tools</code>:</p> </li> <li>When set to <code>datadog</code>: Implement the solution using Datadog as the primary monitoring platform.</li> <li>When set to <code>prometheus</code>: Use Prometheus and associated tools for metrics collection and alerting.</li> <li>When set to <code>cloudwatch</code>: Leverage AWS CloudWatch for monitoring and alerting capabilities.</li> <li>When set to <code>newrelic</code>: Build the monitoring solution around New Relic's observability platform.</li> <li>When set to <code>grafana</code>: Utilize Grafana for dashboarding, with appropriate data sources for collection.</li> <li>When set to <code>elastic</code>: Implement using the Elastic Stack (Elasticsearch, Logstash, Kibana).</li> <li> <p>When set to <code>recommend</code>: Suggest the most appropriate monitoring tools based on the system requirements.</p> </li> <li> <p><code>implementation</code>:</p> </li> <li>When set to <code>concepts</code>: Provide a high-level conceptual overview of the monitoring approach.</li> <li>When set to <code>configuration</code>: Include specific configuration examples and implementation details.</li> <li>When set to <code>full-setup</code>: Deliver comprehensive setup instructions with code samples and deployment guidance.</li> </ul>"},{"location":"api/decorators/Monitoring/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Monitoring/#related-decorators","title":"Related Decorators","text":"<ul> <li>Infrastructure: Enhances Monitoring Monitoring works well with Infrastructure decorator to provide complete infrastructure-as-code solutions with built-in monitoring.</li> <li>Security: Enhances Monitoring When combined with Security decorator, can create security-focused monitoring solutions.</li> </ul>"},{"location":"api/decorators/Motivational/","title":"Motivational Decorator","text":"<p>Enhances responses with encouraging, inspiring, and empowering language. This decorator is designed to motivate action, build confidence, and create a positive emotional impact while still delivering substantive content.</p> <p>Category: Tone</p>"},{"location":"api/decorators/Motivational/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>intensity</code> <code>enum</code> The level of motivational energy and enthusiasm <code>moderate</code> <code>focus</code> <code>enum</code> The primary motivational approach to emphasize <code>balanced</code> <code>actionable</code> <code>boolean</code> Whether to include specific actionable steps or only inspirational content <code>True</code>"},{"location":"api/decorators/Motivational/#intensity-options","title":"Intensity Options","text":"<ul> <li><code>mild</code>: Use a mildly motivational tone with gentle encouragement and moderate positivity, maintaining a balanced and realistic perspective.</li> <li><code>moderate</code>: Use a moderately motivational tone with clear encouragement, positive framing, and confidence-building language throughout the response.</li> <li><code>high</code>: Use a highly motivational tone with energetic, enthusiastic, and empowering language throughout, creating strong emotional impact and inspiration.</li> </ul>"},{"location":"api/decorators/Motivational/#focus-options","title":"Focus Options","text":"<ul> <li><code>achievement</code>: Focus your motivational approach on accomplishment, success, and reaching goals, emphasizing concrete results and outcomes.</li> <li><code>growth</code>: Focus your motivational approach on learning, development, and continuous improvement, emphasizing progress over perfection.</li> <li><code>resilience</code>: Focus your motivational approach on overcoming obstacles, perseverance, and bouncing back from setbacks, emphasizing inner strength.</li> <li><code>purpose</code>: Focus your motivational approach on meaning, values, and impact, emphasizing the deeper significance of actions and choices.</li> <li><code>balanced</code>: Take a balanced motivational approach that incorporates elements of achievement, growth, resilience, and purpose in appropriate proportions.</li> </ul>"},{"location":"api/decorators/Motivational/#examples","title":"Examples","text":""},{"location":"api/decorators/Motivational/#basic-moderately-motivational-response","title":"Basic moderately motivational response","text":"<pre><code>+++Motivational\nWhat are some strategies for building healthy habits?\n</code></pre> <p>Provides strategies for building healthy habits with moderate motivational language, encouraging tone, and confidence-building framing</p>"},{"location":"api/decorators/Motivational/#high-intensity-resilience-focused-motivational-content","title":"High-intensity resilience-focused motivational content","text":"<pre><code>+++Motivational(intensity=high, focus=resilience, actionable=true)\nHow can I overcome setbacks in my professional life?\n</code></pre> <p>Delivers highly energetic and inspiring advice for professional resilience, emphasizing overcoming adversity with specific actionable steps, using powerful language and empowering framing</p>"},{"location":"api/decorators/Motivational/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Motivational/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Use {intensity} motivational language throughout your response. Focus on {focus} as your primary theme. {actionable} Incorporate powerful words, positive framing, and confidence-building phrases. Address challenges honestly but frame them as opportunities for growth. Use second-person perspective (\"you can\", \"your journey\") to make it personal and direct.</p> <p>Notes: This model sometimes needs explicit reminders to maintain consistent motivational tone throughout longer responses rather than only at the beginning and end</p>"},{"location":"api/decorators/Motivational/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Motivational/#moderately-motivational-strategies-for-building-healthy-habits","title":"Moderately motivational strategies for building healthy habits","text":"<p>Original Prompt: <pre><code>What are some strategies for building healthy habits?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please enhance your response with encouraging, inspiring, and empowering language. Use a motivational tone that builds confidence and creates a positive emotional impact while still delivering substantive content. Use a moderately motivational tone with clear encouragement, positive framing, and confidence-building language throughout the response. Take a balanced motivational approach that incorporates elements of achievement, growth, resilience, and purpose in appropriate proportions. Include specific, actionable steps or concrete recommendations that the person can implement, alongside the motivational content.\n\nWhat are some strategies for building healthy habits?\n</code></pre></p>"},{"location":"api/decorators/Motivational/#high-intensity-resilience-focused-advice-for-professional-setbacks","title":"High-intensity resilience-focused advice for professional setbacks","text":"<p>Original Prompt: <pre><code>How can I overcome setbacks in my professional life?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please enhance your response with encouraging, inspiring, and empowering language. Use a motivational tone that builds confidence and creates a positive emotional impact while still delivering substantive content. Use a highly motivational tone with energetic, enthusiastic, and empowering language throughout, creating strong emotional impact and inspiration. Focus your motivational approach on overcoming obstacles, perseverance, and bouncing back from setbacks, emphasizing inner strength. Include specific, actionable steps or concrete recommendations that the person can implement, alongside the motivational content.\n\nHow can I overcome setbacks in my professional life?\n</code></pre></p>"},{"location":"api/decorators/Motivational/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please enhance your response with encouraging, inspiring, and empowering language. Use a motivational tone that builds confidence and creates a positive emotional impact while still delivering substantive content.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>intensity</code>:</li> <li>When set to <code>mild</code>: Use a mildly motivational tone with gentle encouragement and moderate positivity, maintaining a balanced and realistic perspective.</li> <li>When set to <code>moderate</code>: Use a moderately motivational tone with clear encouragement, positive framing, and confidence-building language throughout the response.</li> <li> <p>When set to <code>high</code>: Use a highly motivational tone with energetic, enthusiastic, and empowering language throughout, creating strong emotional impact and inspiration.</p> </li> <li> <p><code>focus</code>:</p> </li> <li>When set to <code>achievement</code>: Focus your motivational approach on accomplishment, success, and reaching goals, emphasizing concrete results and outcomes.</li> <li>When set to <code>growth</code>: Focus your motivational approach on learning, development, and continuous improvement, emphasizing progress over perfection.</li> <li>When set to <code>resilience</code>: Focus your motivational approach on overcoming obstacles, perseverance, and bouncing back from setbacks, emphasizing inner strength.</li> <li>When set to <code>purpose</code>: Focus your motivational approach on meaning, values, and impact, emphasizing the deeper significance of actions and choices.</li> <li> <p>When set to <code>balanced</code>: Take a balanced motivational approach that incorporates elements of achievement, growth, resilience, and purpose in appropriate proportions.</p> </li> <li> <p><code>actionable</code>:</p> </li> <li>When set to <code>true</code>: Include specific, actionable steps or concrete recommendations that the person can implement, alongside the motivational content.</li> <li>When set to <code>false</code>: Focus primarily on inspirational and encouraging content without specific action steps or detailed implementation guidance.</li> </ul>"},{"location":"api/decorators/Motivational/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: Academic</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Motivational/#related-decorators","title":"Related Decorators","text":"<ul> <li>Academic: Conflicts with Motivational Academic's formal, objective tone conflicts with Motivational's encouraging, emotionally resonant approach</li> <li>Professional: Enhances Motivational Professional can be enhanced with mild motivational elements while maintaining appropriate business context</li> <li>StepByStep: Enhances Motivational StepByStep works well with Motivational's actionable parameter to create encouraging yet structured guidance</li> </ul>"},{"location":"api/decorators/Narrative/","title":"Narrative Decorator","text":"<p>Structures the response as a story-based delivery with narrative elements. This decorator employs storytelling techniques to make information more engaging, memorable, and contextually rich.</p> <p>Category: Tone</p>"},{"location":"api/decorators/Narrative/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>structure</code> <code>enum</code> The narrative structure to employ <code>classic</code> <code>characters</code> <code>boolean</code> Whether to include character elements in the narrative <code>True</code> <code>length</code> <code>enum</code> The relative length of the narrative <code>moderate</code>"},{"location":"api/decorators/Narrative/#structure-options","title":"Structure Options","text":"<ul> <li><code>classic</code>: Use a traditional narrative arc with a clear beginning, middle, and end, following a logical progression of setup, conflict/challenge, and resolution.</li> <li><code>nonlinear</code>: Use a nonlinear narrative structure that may include flashbacks, flash-forwards, or parallel storylines to present the information from multiple temporal perspectives.</li> <li><code>case-study</code>: Structure the response as a real or hypothetical case study that examines specific situations, decisions, and outcomes to illustrate the key points.</li> </ul>"},{"location":"api/decorators/Narrative/#length-options","title":"Length Options","text":"<ul> <li><code>brief</code>: Keep the narrative concise and focused, using storytelling elements economically while still conveying the essential information.</li> <li><code>moderate</code>: Develop the narrative with sufficient detail to engage the reader while maintaining a balanced pace and moderate length.</li> <li><code>extended</code>: Create a fully developed narrative with rich details, multiple story beats, and thorough exploration of the topic through storytelling.</li> </ul>"},{"location":"api/decorators/Narrative/#examples","title":"Examples","text":""},{"location":"api/decorators/Narrative/#classic-narrative-structure-to-explain-a-concept","title":"Classic narrative structure to explain a concept","text":"<pre><code>+++Narrative\nExplain how the stock market works.\n</code></pre> <p>Explains the stock market through a classic narrative structure, introducing character elements and following a traditional story arc</p>"},{"location":"api/decorators/Narrative/#brief-case-study-without-character-elements","title":"Brief case study without character elements","text":"<pre><code>+++Narrative(structure=case-study, characters=false, length=brief)\nDescribe the impact of social media on mental health.\n</code></pre> <p>Presents a concise case study narrative about social media's impact on mental health, focusing on situations and outcomes without personified characters</p>"},{"location":"api/decorators/Narrative/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Narrative/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Present this information as a {length} {structure} story. {characters} Use narrative elements like setting, plot development, and thematic threads to explain the concepts. Make the information engaging while ensuring accuracy.</p> <p>Notes: This model sometimes needs reminder to maintain factual accuracy while employing narrative techniques</p>"},{"location":"api/decorators/Narrative/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Narrative/#classic-narrative-explanation-of-the-stock-market","title":"Classic narrative explanation of the stock market","text":"<p>Original Prompt: <pre><code>Explain how the stock market works.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please structure your response as a story-based delivery that uses narrative elements and storytelling techniques to make the information engaging, memorable, and contextually rich. Use a traditional narrative arc with a clear beginning, middle, and end, following a logical progression of setup, conflict/challenge, and resolution. Include character elements such as personas, stakeholders, or representative individuals that the audience can relate to and follow throughout the narrative. Develop the narrative with sufficient detail to engage the reader while maintaining a balanced pace and moderate length.\n\nExplain how the stock market works.\n</code></pre></p>"},{"location":"api/decorators/Narrative/#brief-case-study-of-social-media-impact-without-characters","title":"Brief case study of social media impact without characters","text":"<p>Original Prompt: <pre><code>Describe the impact of social media on mental health.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please structure your response as a story-based delivery that uses narrative elements and storytelling techniques to make the information engaging, memorable, and contextually rich. Structure the response as a real or hypothetical case study that examines specific situations, decisions, and outcomes to illustrate the key points. Focus on situations, processes, and outcomes without personifying the narrative through specific characters or personas. Keep the narrative concise and focused, using storytelling elements economically while still conveying the essential information.\n\nDescribe the impact of social media on mental health.\n</code></pre></p>"},{"location":"api/decorators/Narrative/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please structure your response as a story-based delivery that uses narrative elements and storytelling techniques to make the information engaging, memorable, and contextually rich.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>structure</code>:</li> <li>When set to <code>classic</code>: Use a traditional narrative arc with a clear beginning, middle, and end, following a logical progression of setup, conflict/challenge, and resolution.</li> <li>When set to <code>nonlinear</code>: Use a nonlinear narrative structure that may include flashbacks, flash-forwards, or parallel storylines to present the information from multiple temporal perspectives.</li> <li> <p>When set to <code>case-study</code>: Structure the response as a real or hypothetical case study that examines specific situations, decisions, and outcomes to illustrate the key points.</p> </li> <li> <p><code>characters</code>:</p> </li> <li>When set to <code>true</code>: Include character elements such as personas, stakeholders, or representative individuals that the audience can relate to and follow throughout the narrative.</li> <li> <p>When set to <code>false</code>: Focus on situations, processes, and outcomes without personifying the narrative through specific characters or personas.</p> </li> <li> <p><code>length</code>:</p> </li> <li>When set to <code>brief</code>: Keep the narrative concise and focused, using storytelling elements economically while still conveying the essential information.</li> <li>When set to <code>moderate</code>: Develop the narrative with sufficient detail to engage the reader while maintaining a balanced pace and moderate length.</li> <li>When set to <code>extended</code>: Create a fully developed narrative with rich details, multiple story beats, and thorough exploration of the topic through storytelling.</li> </ul>"},{"location":"api/decorators/Narrative/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Narrative/#related-decorators","title":"Related Decorators","text":"<ul> <li>Creative: Enhances Narrative Creative and Narrative work exceptionally well together to produce engaging and imaginative storytelling</li> <li>Academic: Conflicts with Narrative Academic's formal scholarly conventions may conflict with Narrative's story-based approach, though case studies can bridge this gap</li> <li>Timeline: Enhances Narrative Timeline can complement Narrative by adding clear chronological structure to story-based explanations</li> </ul>"},{"location":"api/decorators/NegativeSpace/","title":"NegativeSpace Decorator","text":"<p>Focuses on analyzing what is not explicitly stated, implied, or missing from a topic or question. This decorator explores the 'negative space' by identifying unexplored angles, implicit assumptions, unasked questions, and contextual elements that may have been overlooked.</p> <p>Category: Reasoning</p>"},{"location":"api/decorators/NegativeSpace/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>focus</code> <code>enum</code> The specific aspect of negative space to emphasize <code>comprehensive</code> <code>depth</code> <code>enum</code> How deeply to explore the negative space <code>moderate</code> <code>structure</code> <code>enum</code> How to present the negative space analysis <code>integrated</code>"},{"location":"api/decorators/NegativeSpace/#focus-options","title":"Focus Options","text":"<ul> <li><code>implications</code>: Focus primarily on the unstated implications and logical consequences that may not be immediately obvious.</li> <li><code>missing</code>: Focus primarily on identifying missing elements, overlooked factors, and gaps in the topic or question.</li> <li><code>unstated</code>: Focus primarily on unstated assumptions, implicit premises, and underlying beliefs that frame the topic.</li> <li><code>comprehensive</code>: Take a comprehensive approach to negative space, addressing implications, missing elements, unstated assumptions, and other overlooked aspects.</li> </ul>"},{"location":"api/decorators/NegativeSpace/#depth-options","title":"Depth Options","text":"<ul> <li><code>surface</code>: Provide a surface-level exploration of the negative space, identifying the most obvious unstated elements without extensive analysis.</li> <li><code>moderate</code>: Conduct a moderately deep exploration of the negative space, with substantial attention to important unstated elements and their significance.</li> <li><code>deep</code>: Perform a deep examination of the negative space, with thorough exploration of subtle, non-obvious unstated elements and their complex interconnections.</li> </ul>"},{"location":"api/decorators/NegativeSpace/#structure-options","title":"Structure Options","text":"<ul> <li><code>before</code>: Present the negative space analysis before addressing the explicit content of the topic.</li> <li><code>after</code>: First address the explicit content of the topic, then follow with the negative space analysis.</li> <li><code>integrated</code>: Integrate the negative space analysis throughout your response, addressing both explicit content and unstated elements in parallel.</li> <li><code>separate</code>: Clearly separate the negative space analysis from the explicit content with distinct sections and headings.</li> </ul>"},{"location":"api/decorators/NegativeSpace/#examples","title":"Examples","text":""},{"location":"api/decorators/NegativeSpace/#basic-comprehensive-negative-space-analysis","title":"Basic comprehensive negative space analysis","text":"<pre><code>+++NegativeSpace\nDiscuss the impact of social media on society.\n</code></pre> <p>Provides a discussion of social media's societal impact while integrating analysis of unstated assumptions, overlooked factors, and typically unaddressed implications</p>"},{"location":"api/decorators/NegativeSpace/#deep-negative-space-analysis-focused-on-missing-elements","title":"Deep negative space analysis focused on missing elements","text":"<pre><code>+++NegativeSpace(focus=missing, depth=deep, structure=after)\nExplain the current approaches to artificial intelligence safety.\n</code></pre> <p>First explains current AI safety approaches, then provides a separate deep analysis of missing elements in the discussion, such as unstudied risks, overlooked stakeholders, and neglected scenarios</p>"},{"location":"api/decorators/NegativeSpace/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/NegativeSpace/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: For this topic, I want you to think about what's NOT being said or asked. Consider: 1) Unstated {focus} that aren't directly mentioned, 2) Questions that should be asked but aren't, 3) Assumptions that underlie the topic, and 4) Important context that's missing. Explore this {depth}. {structure} This is about identifying the 'negative space' - what's missing from the picture rather than what's in it.</p> <p>Notes: This model may need explicit reminders to distinguish between negative space analysis and standard critical thinking analysis</p>"},{"location":"api/decorators/NegativeSpace/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/NegativeSpace/#comprehensive-negative-space-analysis-of-social-media-impact","title":"Comprehensive negative space analysis of social media impact","text":"<p>Original Prompt: <pre><code>Discuss the impact of social media on society.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please analyze the 'negative space' surrounding this topic - focusing on what is not explicitly stated, implied, or missing. Identify unexplored angles, implicit assumptions, unasked questions, and overlooked contextual elements. Take a comprehensive approach to negative space, addressing implications, missing elements, unstated assumptions, and other overlooked aspects. Conduct a moderately deep exploration of the negative space, with substantial attention to important unstated elements and their significance. Integrate the negative space analysis throughout your response, addressing both explicit content and unstated elements in parallel.\n\nDiscuss the impact of social media on society.\n</code></pre></p>"},{"location":"api/decorators/NegativeSpace/#deep-analysis-of-missing-elements-in-ai-safety-approaches","title":"Deep analysis of missing elements in AI safety approaches","text":"<p>Original Prompt: <pre><code>Explain the current approaches to artificial intelligence safety.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please analyze the 'negative space' surrounding this topic - focusing on what is not explicitly stated, implied, or missing. Identify unexplored angles, implicit assumptions, unasked questions, and overlooked contextual elements. Focus primarily on identifying missing elements, overlooked factors, and gaps in the topic or question. Perform a deep examination of the negative space, with thorough exploration of subtle, non-obvious unstated elements and their complex interconnections. First address the explicit content of the topic, then follow with the negative space analysis.\n\nExplain the current approaches to artificial intelligence safety.\n</code></pre></p>"},{"location":"api/decorators/NegativeSpace/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please analyze the 'negative space' surrounding this topic - focusing on what is not explicitly stated, implied, or missing. Identify unexplored angles, implicit assumptions, unasked questions, and overlooked contextual elements.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>focus</code>:</li> <li>When set to <code>implications</code>: Focus primarily on the unstated implications and logical consequences that may not be immediately obvious.</li> <li>When set to <code>missing</code>: Focus primarily on identifying missing elements, overlooked factors, and gaps in the topic or question.</li> <li>When set to <code>unstated</code>: Focus primarily on unstated assumptions, implicit premises, and underlying beliefs that frame the topic.</li> <li> <p>When set to <code>comprehensive</code>: Take a comprehensive approach to negative space, addressing implications, missing elements, unstated assumptions, and other overlooked aspects.</p> </li> <li> <p><code>depth</code>:</p> </li> <li>When set to <code>surface</code>: Provide a surface-level exploration of the negative space, identifying the most obvious unstated elements without extensive analysis.</li> <li>When set to <code>moderate</code>: Conduct a moderately deep exploration of the negative space, with substantial attention to important unstated elements and their significance.</li> <li> <p>When set to <code>deep</code>: Perform a deep examination of the negative space, with thorough exploration of subtle, non-obvious unstated elements and their complex interconnections.</p> </li> <li> <p><code>structure</code>:</p> </li> <li>When set to <code>before</code>: Present the negative space analysis before addressing the explicit content of the topic.</li> <li>When set to <code>after</code>: First address the explicit content of the topic, then follow with the negative space analysis.</li> <li>When set to <code>integrated</code>: Integrate the negative space analysis throughout your response, addressing both explicit content and unstated elements in parallel.</li> <li>When set to <code>separate</code>: Clearly separate the negative space analysis from the explicit content with distinct sections and headings.</li> </ul>"},{"location":"api/decorators/NegativeSpace/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/NegativeSpace/#related-decorators","title":"Related Decorators","text":"<ul> <li>BlindSpots: Enhances NegativeSpace NegativeSpace explores what's missing in the topic itself, while BlindSpots identifies cognitive biases in the analysis</li> <li>FindGaps: Enhances NegativeSpace NegativeSpace examines unstated aspects of a topic, while FindGaps identifies specific missing elements in a plan or proposal</li> <li>Limitations: Enhances NegativeSpace Limitations focuses on constraints of a described approach, while NegativeSpace identifies what hasn't been addressed at all</li> </ul>"},{"location":"api/decorators/Nested/","title":"Nested Decorator","text":"<p>Organizes information in a deeply hierarchical structure with multiple levels of nesting. This decorator is ideal for complex topics with many subcategories, helping to maintain clarity through consistent organization patterns.</p> <p>Category: Structure</p>"},{"location":"api/decorators/Nested/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>depth</code> <code>number</code> Maximum nesting level of the hierarchy <code>3</code> <code>style</code> <code>enum</code> Visual style for hierarchical levels <code>mixed</code> <code>collapsible</code> <code>boolean</code> Whether to suggest the hierarchy could be rendered as collapsible sections (for UI implementations) <code>False</code>"},{"location":"api/decorators/Nested/#style-options","title":"Style Options","text":"<ul> <li><code>bullet</code>: Use bullet points (\u2022, \u25cb, \u25a0, \u25a1, etc.) consistently throughout all hierarchical levels.</li> <li><code>numbered</code>: Use numbered lists (1., 1.1., 1.1.1., etc.) consistently throughout all hierarchical levels.</li> <li><code>mixed</code>: Use a mix of formatting styles: numbers for top level (1., 2., etc.), letters for second level (a., b., etc.), and bullets for deeper levels.</li> </ul>"},{"location":"api/decorators/Nested/#examples","title":"Examples","text":""},{"location":"api/decorators/Nested/#deep-hierarchical-organization-of-a-complex-domain","title":"Deep hierarchical organization of a complex domain","text":"<pre><code>+++Nested\nExplain the classification of living organisms.\n</code></pre> <p>Presents taxonomy in a nested hierarchy with domains, kingdoms, phyla, etc., using mixed notation styles for different levels</p>"},{"location":"api/decorators/Nested/#maximum-depth-collapsible-structure-for-reference-material","title":"Maximum depth collapsible structure for reference material","text":"<pre><code>+++Nested(depth=5, style=bullet, collapsible=true)\nProvide a comprehensive overview of programming paradigms.\n</code></pre> <p>Creates a 5-level deep bullet-point hierarchy of programming paradigms, designed to be rendered as collapsible sections</p>"},{"location":"api/decorators/Nested/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Nested/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Create a {depth}-level deep hierarchical structure for this topic. Use {style} formatting for the levels. Each level should contain more specific details than its parent level. Make sure the categories are logical and properly nested. {collapsible}</p> <p>Notes: This model may need additional guidance to maintain consistent depth across all branches of the hierarchy</p>"},{"location":"api/decorators/Nested/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Nested/#nested-taxonomy-explanation","title":"Nested taxonomy explanation","text":"<p>Original Prompt: <pre><code>Explain the classification of living organisms.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please organize your response in a deeply hierarchical structure with clearly defined levels of nesting. Create a logical progression from major categories down to granular subcategories, maintaining consistent organization patterns throughout. Structure your response with 3 levels of nesting, where the information hierarchy reveals increasingly specific details at each level. Use a mix of formatting styles: numbers for top level (1., 2., etc.), letters for second level (a., b., etc.), and bullets for deeper levels. Present the full hierarchy with all levels visible simultaneously.\n\nExplain the classification of living organisms.\n</code></pre></p>"},{"location":"api/decorators/Nested/#collapsible-programming-paradigms-overview","title":"Collapsible programming paradigms overview","text":"<p>Original Prompt: <pre><code>Provide a comprehensive overview of programming paradigms.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please organize your response in a deeply hierarchical structure with clearly defined levels of nesting. Create a logical progression from major categories down to granular subcategories, maintaining consistent organization patterns throughout. Structure your response with 5 levels of nesting, where the information hierarchy reveals increasingly specific details at each level. Use bullet points (\u2022, \u25cb, \u25a0, \u25a1, etc.) consistently throughout all hierarchical levels. Design the hierarchy to work as collapsible sections, where each parent category could expand to show child categories.\n\nProvide a comprehensive overview of programming paradigms.\n</code></pre></p>"},{"location":"api/decorators/Nested/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please organize your response in a deeply hierarchical structure with clearly defined levels of nesting. Create a logical progression from major categories down to granular subcategories, maintaining consistent organization patterns throughout.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>depth</code>:</li> <li> <p>Format: Structure your response with {value} levels of nesting, where the information hierarchy reveals increasingly specific details at each level.</p> </li> <li> <p><code>style</code>:</p> </li> <li>When set to <code>bullet</code>: Use bullet points (\u2022, \u25cb, \u25a0, \u25a1, etc.) consistently throughout all hierarchical levels.</li> <li>When set to <code>numbered</code>: Use numbered lists (1., 1.1., 1.1.1., etc.) consistently throughout all hierarchical levels.</li> <li> <p>When set to <code>mixed</code>: Use a mix of formatting styles: numbers for top level (1., 2., etc.), letters for second level (a., b., etc.), and bullets for deeper levels.</p> </li> <li> <p><code>collapsible</code>:</p> </li> <li>When set to <code>true</code>: Design the hierarchy to work as collapsible sections, where each parent category could expand to show child categories.</li> <li>When set to <code>false</code>: Present the full hierarchy with all levels visible simultaneously.</li> </ul>"},{"location":"api/decorators/Nested/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Nested/#related-decorators","title":"Related Decorators","text":"<ul> <li>Outline: Enhances Nested Nested provides deeper hierarchical structure to Outline's organizational framework</li> <li>MECE: Enhances Nested MECE ensures categories in the Nested hierarchy are mutually exclusive and collectively exhaustive</li> <li>Schema: Enhances Nested Schema can provide a consistent data structure for each level of the Nested hierarchy</li> </ul>"},{"location":"api/decorators/OptimizationFocus/","title":"OptimizationFocus Decorator","text":"<p>Guides targeted optimization efforts with specific constraints and goals.</p> <p>Category: Systematic Debugging</p>"},{"location":"api/decorators/OptimizationFocus/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>target</code> <code>enum</code> Optimization target <code>performance</code> <code>constraints</code> <code>enum</code> Optimization constraints <code>no-functional-changes</code> <code>approach</code> <code>enum</code> Optimization approach <code>profiling</code>"},{"location":"api/decorators/OptimizationFocus/#target-options","title":"Target Options","text":"<ul> <li><code>performance</code>: Focus on optimizing overall execution speed and responsiveness.</li> <li><code>memory</code>: Focus on reducing memory usage and improving memory management.</li> <li><code>network</code>: Focus on optimizing network requests, reducing payload sizes, and improving caching strategies.</li> <li><code>size</code>: Focus on reducing the overall size of the application or its assets.</li> <li><code>mobile</code>: Focus on optimizing specifically for mobile device constraints and capabilities.</li> </ul>"},{"location":"api/decorators/OptimizationFocus/#constraints-options","title":"Constraints Options","text":"<ul> <li><code>no-visual-changes</code>: Ensure that no visual changes occur as a result of the optimization.</li> <li><code>no-functional-changes</code>: Ensure that the functionality remains identical after optimization.</li> <li><code>both</code>: Ensure that neither visual appearance nor functionality changes during optimization.</li> <li><code>minimal-changes</code>: Allow minimal changes to appearance or functionality if they significantly improve optimization outcomes.</li> </ul>"},{"location":"api/decorators/OptimizationFocus/#approach-options","title":"Approach Options","text":"<ul> <li><code>profiling</code>: Use profiling tools to identify bottlenecks and optimization opportunities.</li> <li><code>code-review</code>: Perform a systematic code review to identify inefficiencies and improvement opportunities.</li> <li><code>algorithm-improvements</code>: Focus on improving the underlying algorithms and data structures.</li> <li><code>resource-management</code>: Focus on better management of system resources like memory, disk, and network.</li> </ul>"},{"location":"api/decorators/OptimizationFocus/#examples","title":"Examples","text":""},{"location":"api/decorators/OptimizationFocus/#optimizing-a-web-application-for-performance","title":"Optimizing a web application for performance","text":"<pre><code>+++OptimizationFocus(target=performance, constraints=no-functional-changes, approach=profiling)\nHow can I improve the loading time of my e-commerce website?\n</code></pre> <p>The model will provide optimization suggestions focused on performance, ensuring functionality doesn't change, using profiling-based approaches.</p>"},{"location":"api/decorators/OptimizationFocus/#mobile-optimization-with-code-review","title":"Mobile optimization with code review","text":"<pre><code>+++OptimizationFocus(target=mobile, constraints=no-visual-changes, approach=code-review)\nReview this React Native code for my mobile app.\n</code></pre> <p>The model will review the code specifically looking for mobile optimization opportunities while preserving the visual design.</p>"},{"location":"api/decorators/OptimizationFocus/#memory-optimization-with-algorithm-improvements","title":"Memory optimization with algorithm improvements","text":"<pre><code>+++OptimizationFocus(target=memory, constraints=minimal-changes, approach=algorithm-improvements)\nHow can I reduce the memory usage of this data processing function?\n</code></pre> <p>The model will suggest algorithm improvements to reduce memory usage, allowing for minimal changes to functionality if necessary.</p>"},{"location":"api/decorators/OptimizationFocus/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/OptimizationFocus/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: I need you to help optimize an application with these specific requirements:</p> <p>Notes: More direct instruction works better with this model.</p>"},{"location":"api/decorators/OptimizationFocus/#claude-3-7-sonnet-latest","title":"claude-3-7-sonnet-latest","text":"<p>Instruction: Please analyze the following for optimization opportunities, focusing on the specified target and constraints:</p> <p>Notes: Claude benefits from a more analytical framing.</p>"},{"location":"api/decorators/OptimizationFocus/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/OptimizationFocus/#web-application-optimization","title":"Web application optimization","text":"<p>Original Prompt: <pre><code>How can I make my React application faster?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Focus on optimizing overall execution speed and responsiveness. Ensure that the functionality remains identical after optimization. Use profiling tools to identify bottlenecks and optimization opportunities.\n\nHow can I make my React application faster?\n</code></pre></p> <p>Notes: The decorator adds specific optimization guidance before the original question.</p>"},{"location":"api/decorators/OptimizationFocus/#mobile-app-optimization","title":"Mobile app optimization","text":"<p>Original Prompt: <pre><code>Review this code for my Android app and suggest improvements.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Focus on optimizing specifically for mobile device constraints and capabilities. Ensure that no visual changes occur as a result of the optimization. Perform a systematic code review to identify inefficiencies and improvement opportunities.\n\nReview this code for my Android app and suggest improvements.\n</code></pre></p> <p>Notes: Parameters target=mobile, constraints=no-visual-changes, and approach=code-review are applied.</p>"},{"location":"api/decorators/OptimizationFocus/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Optimize the application with a focus on improving its efficiency and performance.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>target</code>:</li> <li>When set to <code>performance</code>: Focus on optimizing overall execution speed and responsiveness.</li> <li>When set to <code>memory</code>: Focus on reducing memory usage and improving memory management.</li> <li>When set to <code>network</code>: Focus on optimizing network requests, reducing payload sizes, and improving caching strategies.</li> <li>When set to <code>size</code>: Focus on reducing the overall size of the application or its assets.</li> <li> <p>When set to <code>mobile</code>: Focus on optimizing specifically for mobile device constraints and capabilities.</p> </li> <li> <p><code>constraints</code>:</p> </li> <li>When set to <code>no-visual-changes</code>: Ensure that no visual changes occur as a result of the optimization.</li> <li>When set to <code>no-functional-changes</code>: Ensure that the functionality remains identical after optimization.</li> <li>When set to <code>both</code>: Ensure that neither visual appearance nor functionality changes during optimization.</li> <li> <p>When set to <code>minimal-changes</code>: Allow minimal changes to appearance or functionality if they significantly improve optimization outcomes.</p> </li> <li> <p><code>approach</code>:</p> </li> <li>When set to <code>profiling</code>: Use profiling tools to identify bottlenecks and optimization opportunities.</li> <li>When set to <code>code-review</code>: Perform a systematic code review to identify inefficiencies and improvement opportunities.</li> <li>When set to <code>algorithm-improvements</code>: Focus on improving the underlying algorithms and data structures.</li> <li>When set to <code>resource-management</code>: Focus on better management of system resources like memory, disk, and network.</li> </ul>"},{"location":"api/decorators/OptimizationFocus/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 1.5.0</li> </ul>"},{"location":"api/decorators/OptimizationFocus/#related-decorators","title":"Related Decorators","text":"<ul> <li>CodeReview: Enhances OptimizationFocus OptimizationFocus can enhance CodeReview by adding specific optimization targets and constraints.</li> <li>PerformanceAnalysis: Enhances OptimizationFocus Combines well with PerformanceAnalysis for more comprehensive optimization guidance.</li> </ul>"},{"location":"api/decorators/Optimize/","title":"Optimize Decorator","text":"<p>Optimizes code for specific metrics while respecting constraints.</p> <p>Category: Code Generation</p>"},{"location":"api/decorators/Optimize/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>for</code> <code>enum</code> The primary optimization target <code>speed</code> <code>constraints</code> <code>enum</code> Limitations that must be respected <code>none</code> <code>priority</code> <code>enum</code> Trade-off preference when optimizations conflict <code>balanced</code>"},{"location":"api/decorators/Optimize/#for-options","title":"For Options","text":"<ul> <li><code>speed</code>: execution speed and performance</li> <li><code>memory</code>: memory usage and efficiency</li> <li><code>readability</code>: code clarity and maintainability</li> <li><code>size</code>: code size and compactness</li> <li><code>network</code>: network efficiency and reduced data transfer</li> </ul>"},{"location":"api/decorators/Optimize/#constraints-options","title":"Constraints Options","text":"<ul> <li><code>backwards-compatible</code>: maintaining backward compatibility</li> <li><code>minimal-changes</code>: making minimal changes to the original code</li> <li><code>no-external-dependencies</code>: using no additional external dependencies</li> <li><code>same-api</code>: preserving the same API interface</li> <li><code>none</code>: Option: none</li> </ul>"},{"location":"api/decorators/Optimize/#priority-options","title":"Priority Options","text":"<ul> <li><code>max-gains</code>: maximum optimization gains even if it involves more risk</li> <li><code>min-risk</code>: minimal risk approaches even if the optimization gains are smaller</li> <li><code>balanced</code>: a balanced approach between optimization gains and risk</li> </ul>"},{"location":"api/decorators/Optimize/#examples","title":"Examples","text":""},{"location":"api/decorators/Optimize/#optimizing-code-for-memory-usage-with-backward-compatibility","title":"Optimizing code for memory usage with backward compatibility","text":"<pre><code>+++Optimize(for=memory, constraints=backwards-compatible, priority=min-risk)\nOptimize this image processing function that's consuming too much memory.\n</code></pre> <p>The model will optimize the code focusing on memory efficiency, while ensuring backward compatibility and taking a conservative approach to changes.</p>"},{"location":"api/decorators/Optimize/#optimizing-for-speed-with-default-constraints","title":"Optimizing for speed with default constraints","text":"<pre><code>+++Optimize(for=speed)\nMake this sorting algorithm faster.\n</code></pre> <p>The model will focus on improving execution speed with balanced risk approach and no specific constraints.</p>"},{"location":"api/decorators/Optimize/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Optimize/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Please optimize this code for {for}, making sure to follow these constraints: {constraints}. When there are trade-offs to make, prioritize {priority}.</p> <p>Notes: More explicit instruction format works better with this model.</p>"},{"location":"api/decorators/Optimize/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Optimize/#python-code-optimization","title":"Python code optimization","text":"<p>Original Prompt: <pre><code>Optimize this image processing function that's consuming too much memory:\n\ndef process_image(image):\n    result = []\n    for x in range(image.width):\n        for y in range(image.height):\n            pixel = image.get_pixel(x, y)\n            result.append(transform_pixel(pixel))\n    return result\n</code></pre></p> <p>Transformed Prompt: <pre><code>Optimize the code for memory usage and efficiency while respecting maintaining backward compatibility. When optimizations conflict, prioritize minimal risk approaches even if the optimization gains are smaller.\n\nOptimize this image processing function that's consuming too much memory:\n\ndef process_image(image):\n    result = []\n    for x in range(image.width):\n        for y in range(image.height):\n            pixel = image.get_pixel(x, y)\n            result.append(transform_pixel(pixel))\n    return result\n</code></pre></p> <p>Notes: The decorator prepends specific optimization instructions while preserving the original request.</p>"},{"location":"api/decorators/Optimize/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Optimize the code for {for} while respecting the following constraints: {constraints}. When optimizations conflict, prioritize {priority}.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>for</code>:</li> <li>When set to <code>speed</code>: execution speed and performance</li> <li>When set to <code>memory</code>: memory usage and efficiency</li> <li>When set to <code>readability</code>: code clarity and maintainability</li> <li>When set to <code>size</code>: code size and compactness</li> <li> <p>When set to <code>network</code>: network efficiency and reduced data transfer</p> </li> <li> <p><code>constraints</code>:</p> </li> <li>When set to <code>backwards-compatible</code>: maintaining backward compatibility</li> <li>When set to <code>minimal-changes</code>: making minimal changes to the original code</li> <li>When set to <code>no-external-dependencies</code>: using no additional external dependencies</li> <li> <p>When set to <code>same-api</code>: preserving the same API interface</p> </li> <li> <p><code>priority</code>:</p> </li> <li>When set to <code>max-gains</code>: maximum optimization gains even if it involves more risk</li> <li>When set to <code>min-risk</code>: minimal risk approaches even if the optimization gains are smaller</li> <li>When set to <code>balanced</code>: a balanced approach between optimization gains and risk</li> </ul>"},{"location":"api/decorators/Optimize/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: Refactor</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Optimize/#related-decorators","title":"Related Decorators","text":"<ul> <li>Explain: Enhances Optimize Can be combined with Explain to request optimization with explanations of the changes made.</li> <li>Refactor: Conflicts with Optimize Both decorators attempt to modify code structure which may lead to conflicting instructions.</li> </ul>"},{"location":"api/decorators/Outline/","title":"Outline Decorator","text":"<p>Structures the response as a hierarchical outline with headings and subheadings. This decorator organizes information in a clear, logical structure that highlights relationships between main topics and subtopics.</p> <p>Category: Structure</p>"},{"location":"api/decorators/Outline/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>depth</code> <code>number</code> Maximum nesting level of the outline <code>3</code> <code>style</code> <code>enum</code> Numbering or bullet style for the outline <code>numeric</code> <code>detailed</code> <code>boolean</code> Whether to include brief explanations under each outline point <code>False</code>"},{"location":"api/decorators/Outline/#style-options","title":"Style Options","text":"<ul> <li><code>numeric</code>: Use numeric notation (1, 1.1, 1.1.1, etc.) for all outline levels.</li> <li><code>bullet</code>: Use bullet point notation (\u2022, \u25cb, \u25aa, etc.) for all outline levels.</li> <li><code>roman</code>: Use Roman numeral notation (I, II, III, etc. for top level, then A, B, C, etc. for second level).</li> <li><code>alpha</code>: Use alphabetical notation (A, B, C, etc. for top level, then 1, 2, 3, etc. for second level).</li> <li><code>mixed</code>: Use a mix of notation styles: numbers for level 1, letters for level 2, Roman numerals for level 3, etc.</li> </ul>"},{"location":"api/decorators/Outline/#examples","title":"Examples","text":""},{"location":"api/decorators/Outline/#simple-numeric-outline-of-a-complex-topic","title":"Simple numeric outline of a complex topic","text":"<pre><code>+++Outline\nExplain the structure of the United States government.\n</code></pre> <p>Presents the US government structure as a numbered outline with up to 3 levels of hierarchy</p>"},{"location":"api/decorators/Outline/#detailed-outline-with-mixed-notation-and-deep-hierarchy","title":"Detailed outline with mixed notation and deep hierarchy","text":"<pre><code>+++Outline(style=mixed, depth=5, detailed=true)\nProvide a comprehensive overview of machine learning techniques.\n</code></pre> <p>Creates a 5-level deep outline using mixed notation (numbers, letters, roman numerals) with brief explanations under each point, covering machine learning techniques</p>"},{"location":"api/decorators/Outline/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Outline/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Format your response as an outline with clear hierarchical structure. Use headings and subheadings with consistent formatting for each level.</p> <p>Notes: This model may need more explicit instructions about maintaining consistent outline formatting</p>"},{"location":"api/decorators/Outline/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Outline/#standard-numeric-outline","title":"Standard numeric outline","text":"<p>Original Prompt: <pre><code>Explain the structure of the United States government.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please structure your response as a hierarchical outline with headings and subheadings to organize the information clearly. Use a maximum of 3 levels of nesting in the hierarchy. Use numeric notation (1, 1.1, 1.1.1, etc.) for all outline levels. Keep the outline concise with headings only, without additional explanations under each point.\n\nExplain the structure of the United States government.\n</code></pre></p>"},{"location":"api/decorators/Outline/#detailed-mixed-style-outline","title":"Detailed mixed-style outline","text":"<p>Original Prompt: <pre><code>Provide a comprehensive overview of machine learning techniques.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please structure your response as a hierarchical outline with headings and subheadings to organize the information clearly. Use a maximum of 5 levels of nesting in the hierarchy. Use a mix of notation styles: numbers for level 1, letters for level 2, Roman numerals for level 3, etc. Include a brief explanation or description under each outline point to provide context.\n\nProvide a comprehensive overview of machine learning techniques.\n</code></pre></p>"},{"location":"api/decorators/Outline/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please structure your response as a hierarchical outline with headings and subheadings to organize the information clearly.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>depth</code>:</li> <li> <p>Format: Use a maximum of {value} levels of nesting in the hierarchy.</p> </li> <li> <p><code>style</code>:</p> </li> <li>When set to <code>numeric</code>: Use numeric notation (1, 1.1, 1.1.1, etc.) for all outline levels.</li> <li>When set to <code>bullet</code>: Use bullet point notation (\u2022, \u25cb, \u25aa, etc.) for all outline levels.</li> <li>When set to <code>roman</code>: Use Roman numeral notation (I, II, III, etc. for top level, then A, B, C, etc. for second level).</li> <li>When set to <code>alpha</code>: Use alphabetical notation (A, B, C, etc. for top level, then 1, 2, 3, etc. for second level).</li> <li> <p>When set to <code>mixed</code>: Use a mix of notation styles: numbers for level 1, letters for level 2, Roman numerals for level 3, etc.</p> </li> <li> <p><code>detailed</code>:</p> </li> <li>When set to <code>true</code>: Include a brief explanation or description under each outline point to provide context.</li> <li>When set to <code>false</code>: Keep the outline concise with headings only, without additional explanations under each point.</li> </ul>"},{"location":"api/decorators/Outline/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Outline/#related-decorators","title":"Related Decorators","text":"<ul> <li>Bullet: Conflicts with Outline Bullet and Outline both specify different formatting structures that may conflict</li> <li>StepByStep: Enhances Outline Outline can complement StepByStep by providing a structured overview of the steps</li> </ul>"},{"location":"api/decorators/OutputFormat/","title":"OutputFormat Decorator","text":"<p>Specifies the format of the AI's response. This decorator ensures the output follows a specific format, making it easier to parse, display, or process the response in a consistent way.</p> <p>Category: Minimal</p>"},{"location":"api/decorators/OutputFormat/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>format</code> <code>enum</code> The format to use for the response <code>markdown</code>"},{"location":"api/decorators/OutputFormat/#format-options","title":"Format Options","text":"<ul> <li><code>json</code>: Format your response as a valid JSON object. Ensure proper use of quotes, brackets, and commas.</li> <li><code>markdown</code>: Format your response using Markdown syntax with appropriate headings, lists, code blocks, and formatting.</li> <li><code>yaml</code>: Format your response as YAML with proper indentation and structure.</li> <li><code>xml</code>: Format your response as valid XML with proper tags and structure.</li> <li><code>plaintext</code>: Format your response as plain text without any special formatting.</li> </ul>"},{"location":"api/decorators/OutputFormat/#examples","title":"Examples","text":""},{"location":"api/decorators/OutputFormat/#json-output-for-structured-data","title":"JSON output for structured data","text":"<pre><code>+++OutputFormat(format=json)\nList the top 5 programming languages and their key features.\n</code></pre> <p>Returns a JSON object with programming languages and their features</p>"},{"location":"api/decorators/OutputFormat/#markdown-output-for-formatted-text","title":"Markdown output for formatted text","text":"<pre><code>+++OutputFormat(format=markdown)\nWrite a tutorial on setting up a React project.\n</code></pre> <p>Returns a nicely formatted markdown document with headings, code blocks, and lists</p>"},{"location":"api/decorators/OutputFormat/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/OutputFormat/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Your response must be formatted exactly as specified. For JSON, ensure valid JSON syntax. For Markdown, use proper Markdown syntax with headings, lists, and code blocks.</p> <p>Notes: This model may need more explicit formatting instructions to produce properly formatted output</p>"},{"location":"api/decorators/OutputFormat/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/OutputFormat/#json-format-implementation","title":"JSON format implementation","text":"<p>Original Prompt: <pre><code>List the top 5 programming languages and their key features.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please format your response according to the specified format. Format your response as a valid JSON object. Ensure proper use of quotes, brackets, and commas.\n\nList the top 5 programming languages and their key features.\n</code></pre></p>"},{"location":"api/decorators/OutputFormat/#markdown-format-implementation","title":"Markdown format implementation","text":"<p>Original Prompt: <pre><code>Write a tutorial on setting up a React project.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please format your response according to the specified format. Format your response using Markdown syntax with appropriate headings, lists, code blocks, and formatting.\n\nWrite a tutorial on setting up a React project.\n</code></pre></p>"},{"location":"api/decorators/OutputFormat/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please format your response according to the specified format.</p> <p>Placement: prepend</p> <p>Composition Behavior: override</p> <p>Parameter Effects:</p> <ul> <li><code>format</code>:</li> <li>When set to <code>json</code>: Format your response as a valid JSON object. Ensure proper use of quotes, brackets, and commas.</li> <li>When set to <code>markdown</code>: Format your response using Markdown syntax with appropriate headings, lists, code blocks, and formatting.</li> <li>When set to <code>yaml</code>: Format your response as YAML with proper indentation and structure.</li> <li>When set to <code>xml</code>: Format your response as valid XML with proper tags and structure.</li> <li>When set to <code>plaintext</code>: Format your response as plain text without any special formatting.</li> </ul>"},{"location":"api/decorators/OutputFormat/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: Schema, TableFormat, Bullet</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/OutputFormat/#related-decorators","title":"Related Decorators","text":"<ul> <li>Schema: Conflicts with OutputFormat Schema provides a more specific structure than OutputFormat and may conflict</li> <li>StepByStep: Enhances OutputFormat Can be combined with StepByStep to create formatted step-by-step guides</li> </ul>"},{"location":"api/decorators/Override/","title":"Override Decorator","text":"<p>A meta-decorator that overrides the default parameters or behaviors of other decorators. This enables customization of standard decorators without modifying their definitions, allowing for reuse of established patterns with specific adjustments.</p> <p>Category: Meta</p>"},{"location":"api/decorators/Override/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>decorator</code> <code>string</code> The specific decorator whose behavior to override <code>Required</code> <code>parameters</code> <code>string</code> JSON string specifying the parameters to override (e.g., '{\"depth\": \"comprehensive\", \"focus\": \"methodology\"}') `` <code>behavior</code> <code>string</code> Optional custom behavior modification instructions that override the standard decorator interpretation ``"},{"location":"api/decorators/Override/#examples","title":"Examples","text":""},{"location":"api/decorators/Override/#basic-parameter-override-for-a-standard-decorator","title":"Basic parameter override for a standard decorator","text":"<pre><code>+++Override(decorator=StepByStep, parameters={\"numbered\": true, \"steps\": 7})\nExplain how to bake bread.\n</code></pre> <p>Applies the StepByStep decorator to explain bread baking, but overrides its default parameters to ensure exactly 7 numbered steps</p>"},{"location":"api/decorators/Override/#complex-behavior-override-with-custom-instructions","title":"Complex behavior override with custom instructions","text":"<pre><code>+++Override(decorator=Debate, parameters={\"perspectives\": 2}, behavior=instead of presenting neutral perspectives, adopt strongly opposing viewpoints with clear advocacy for each position)\nDiscuss the ethics of gene editing.\n</code></pre> <p>Uses the Debate decorator structure for discussing gene editing ethics, but modifies its standard neutral approach to present strongly advocated opposing positions</p>"},{"location":"api/decorators/Override/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Override/#gpt-4o","title":"gpt-4o","text":"<p>Instruction: Apply the {decorator} decorator with these custom settings: {parameters}. {behavior} Follow the standard behavior of the decorator in all other aspects not explicitly modified.</p> <p>Notes: This model handles behavior overrides well but benefits from explicit instructions about which aspects of behavior to preserve</p>"},{"location":"api/decorators/Override/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Override/#basic-parameter-override-for-stepbystep","title":"Basic parameter override for StepByStep","text":"<p>Original Prompt: <pre><code>Explain how to bake bread.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please apply a customized version of a standard decorator with specific modifications to its default parameters or behavior. Apply the StepByStep decorator, but with the following modifications to its standard implementation. Override the default parameters of the decorator with these specific values: {\"numbered\": true, \"steps\": 7}.\n\nExplain how to bake bread.\n</code></pre></p>"},{"location":"api/decorators/Override/#complex-behavior-override-for-debate","title":"Complex behavior override for Debate","text":"<p>Original Prompt: <pre><code>Discuss the ethics of gene editing.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please apply a customized version of a standard decorator with specific modifications to its default parameters or behavior. Apply the Debate decorator, but with the following modifications to its standard implementation. Override the default parameters of the decorator with these specific values: {\"perspectives\": 2}. Additionally, modify the standard behavior of the decorator as follows: instead of presenting neutral perspectives, adopt strongly opposing viewpoints with clear advocacy for each position.\n\nDiscuss the ethics of gene editing.\n</code></pre></p>"},{"location":"api/decorators/Override/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please apply a customized version of a standard decorator with specific modifications to its default parameters or behavior.</p> <p>Placement: prepend</p> <p>Composition Behavior: override</p> <p>Parameter Effects:</p> <ul> <li><code>decorator</code>:</li> <li> <p>Format: Apply the {value} decorator, but with the following modifications to its standard implementation.</p> </li> <li> <p><code>parameters</code>:</p> </li> <li> <p>Format: Override the default parameters of the decorator with these specific values: {value}.</p> </li> <li> <p><code>behavior</code>:</p> </li> <li>Format: Additionally, modify the standard behavior of the decorator as follows: {value}.</li> </ul>"},{"location":"api/decorators/Override/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Override/#related-decorators","title":"Related Decorators","text":"<ul> <li>All: Enhances Override Override can work with any decorator, as its purpose is to modify their behavior</li> <li>Priority: Enhances Override Priority can help determine which Override takes precedence when multiple are applied</li> <li>Custom: Enhances Override Override and Custom provide complementary approaches to customization - Override modifies existing decorators while Custom creates new behaviors</li> </ul>"},{"location":"api/decorators/PeerReview/","title":"PeerReview Decorator","text":"<p>Augments the response with a simulated peer review of the content. This decorator enhances critical thinking by evaluating the response's strengths, weaknesses, methodological soundness, and potential improvements as an academic reviewer would.</p> <p>Category: Verification</p>"},{"location":"api/decorators/PeerReview/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>criteria</code> <code>enum</code> Primary criteria to focus on in the review <code>all</code> <code>style</code> <code>enum</code> The tone and approach of the peer review <code>balanced</code> <code>position</code> <code>enum</code> Where to place the peer review relative to the main content <code>after</code>"},{"location":"api/decorators/PeerReview/#criteria-options","title":"Criteria Options","text":"<ul> <li><code>accuracy</code>: Focus the peer review primarily on the factual accuracy and precision of the information presented.</li> <li><code>methodology</code>: Focus the peer review primarily on the methodological approach, analytical framework, or reasoning process used.</li> <li><code>limitations</code>: Focus the peer review primarily on identifying limitations, gaps, or unaddressed aspects in the analysis.</li> <li><code>completeness</code>: Focus the peer review primarily on how thoroughly the topic is covered and whether key elements are missing.</li> <li><code>all</code>: Include a comprehensive peer review addressing accuracy, methodology, limitations, and completeness of the content.</li> </ul>"},{"location":"api/decorators/PeerReview/#style-options","title":"Style Options","text":"<ul> <li><code>constructive</code>: Maintain a supportive tone in the peer review, emphasizing positive aspects while gently suggesting improvements.</li> <li><code>critical</code>: Adopt a rigorously critical stance in the peer review, thoroughly identifying weaknesses and challenging assumptions.</li> <li><code>balanced</code>: Provide a balanced peer review that equally addresses strengths and weaknesses with a neutral academic tone.</li> </ul>"},{"location":"api/decorators/PeerReview/#position-options","title":"Position Options","text":"<ul> <li><code>after</code>: Present the main content first, followed by the peer review section.</li> <li><code>before</code>: Begin with the peer review section, then present the main content.</li> <li><code>alongside</code>: Integrate the peer review comments throughout the content, marking them clearly as reviewer notes.</li> </ul>"},{"location":"api/decorators/PeerReview/#examples","title":"Examples","text":""},{"location":"api/decorators/PeerReview/#basic-peer-review-of-content-accuracy","title":"Basic peer review of content accuracy","text":"<pre><code>+++PeerReview(criteria=accuracy)\nExplain the current understanding of dark matter in astrophysics.\n</code></pre> <p>Provides an explanation of dark matter, followed by a balanced peer review focusing on the accuracy of the information presented</p>"},{"location":"api/decorators/PeerReview/#critical-peer-review-of-multiple-aspects-shown-alongside-content","title":"Critical peer review of multiple aspects, shown alongside content","text":"<pre><code>+++PeerReview(criteria=all, style=critical, position=alongside)\nAnalyze the methodology used in Stanford's prison experiment.\n</code></pre> <p>Delivers an analysis of the Stanford prison experiment methodology with a parallel critical peer review addressing accuracy, methodology, limitations, and completeness</p>"},{"location":"api/decorators/PeerReview/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/PeerReview/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: First, generate your response to the query. Then, adopt the role of an academic peer reviewer to evaluate that content. In your review, focus on {criteria} with a {style} approach. Format your response with the review {position} the main content. Clearly label the peer review section.</p> <p>Notes: This model sometimes needs explicit prompting to maintain appropriate critical distance between the content creation and review aspects</p>"},{"location":"api/decorators/PeerReview/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/PeerReview/#basic-peer-review-of-dark-matter-content","title":"Basic peer review of dark matter content","text":"<p>Original Prompt: <pre><code>Explain the current understanding of dark matter in astrophysics.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please include a simulated peer review of your response, evaluating the content as an academic reviewer would. Focus the peer review primarily on the factual accuracy and precision of the information presented. Provide a balanced peer review that equally addresses strengths and weaknesses with a neutral academic tone. Present the main content first, followed by the peer review section.\n\nExplain the current understanding of dark matter in astrophysics.\n</code></pre></p>"},{"location":"api/decorators/PeerReview/#critical-comprehensive-review-alongside-content","title":"Critical comprehensive review alongside content","text":"<p>Original Prompt: <pre><code>Analyze the methodology used in Stanford's prison experiment.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please include a simulated peer review of your response, evaluating the content as an academic reviewer would. Include a comprehensive peer review addressing accuracy, methodology, limitations, and completeness of the content. Adopt a rigorously critical stance in the peer review, thoroughly identifying weaknesses and challenging assumptions. Integrate the peer review comments throughout the content, marking them clearly as reviewer notes.\n\nAnalyze the methodology used in Stanford's prison experiment.\n</code></pre></p>"},{"location":"api/decorators/PeerReview/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please include a simulated peer review of your response, evaluating the content as an academic reviewer would.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>criteria</code>:</li> <li>When set to <code>accuracy</code>: Focus the peer review primarily on the factual accuracy and precision of the information presented.</li> <li>When set to <code>methodology</code>: Focus the peer review primarily on the methodological approach, analytical framework, or reasoning process used.</li> <li>When set to <code>limitations</code>: Focus the peer review primarily on identifying limitations, gaps, or unaddressed aspects in the analysis.</li> <li>When set to <code>completeness</code>: Focus the peer review primarily on how thoroughly the topic is covered and whether key elements are missing.</li> <li> <p>When set to <code>all</code>: Include a comprehensive peer review addressing accuracy, methodology, limitations, and completeness of the content.</p> </li> <li> <p><code>style</code>:</p> </li> <li>When set to <code>constructive</code>: Maintain a supportive tone in the peer review, emphasizing positive aspects while gently suggesting improvements.</li> <li>When set to <code>critical</code>: Adopt a rigorously critical stance in the peer review, thoroughly identifying weaknesses and challenging assumptions.</li> <li> <p>When set to <code>balanced</code>: Provide a balanced peer review that equally addresses strengths and weaknesses with a neutral academic tone.</p> </li> <li> <p><code>position</code>:</p> </li> <li>When set to <code>after</code>: Present the main content first, followed by the peer review section.</li> <li>When set to <code>before</code>: Begin with the peer review section, then present the main content.</li> <li>When set to <code>alongside</code>: Integrate the peer review comments throughout the content, marking them clearly as reviewer notes.</li> </ul>"},{"location":"api/decorators/PeerReview/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/PeerReview/#related-decorators","title":"Related Decorators","text":"<ul> <li>Academic: Enhances PeerReview Academic style complements PeerReview by maintaining scholarly language throughout both content and review</li> <li>CiteSources: Enhances PeerReview CiteSources works well with PeerReview to provide academic references that the peer review can evaluate</li> <li>Limitations: Enhances PeerReview Limitations pairs well with PeerReview when focusing on limitation criteria, offering complementary perspectives</li> </ul>"},{"location":"api/decorators/Performance/","title":"Performance Decorator","text":"<p>Optimizes system performance focusing on specific bottlenecks.</p> <p>Category: Devops And Infrastructure</p>"},{"location":"api/decorators/Performance/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>bottleneck</code> <code>enum</code> Performance limitation area <code>context-dependent</code> <code>approach</code> <code>enum</code> Performance analysis methodology <code>comprehensive</code> <code>constraints</code> <code>enum</code> Optimization constraints <code>none</code>"},{"location":"api/decorators/Performance/#bottleneck-options","title":"Bottleneck Options","text":"<ul> <li><code>cpu</code>: Focus on CPU optimization strategies including algorithm efficiency, parallel processing, and computational load balancing.</li> <li><code>memory</code>: Focus on memory usage optimization including allocation patterns, garbage collection, caching strategies, and memory leaks.</li> <li><code>io</code>: Focus on I/O performance including disk access patterns, buffering strategies, and asynchronous operations.</li> <li><code>network</code>: Focus on network performance including latency reduction, bandwidth optimization, and connection management.</li> <li><code>database</code>: Focus on database performance including query optimization, indexing strategies, connection pooling, and data access patterns.</li> <li><code>algorithm</code>: Focus on algorithmic efficiency including time complexity, space complexity, and algorithm selection.</li> </ul>"},{"location":"api/decorators/Performance/#approach-options","title":"Approach Options","text":"<ul> <li><code>identify</code>: Identify the specific performance bottlenecks through profiling and analysis without implementing solutions.</li> <li><code>measure</code>: Measure and quantify performance metrics to establish baselines and identify improvement opportunities.</li> <li><code>optimize</code>: Implement specific optimization techniques to address known performance issues.</li> <li><code>comprehensive</code>: Perform a comprehensive performance analysis including identification, measurement, and optimization recommendations.</li> </ul>"},{"location":"api/decorators/Performance/#constraints-options","title":"Constraints Options","text":"<ul> <li><code>cost</code>: Optimize within cost constraints, prioritizing solutions with minimal additional resource requirements.</li> <li><code>time</code>: Optimize with time constraints in mind, focusing on solutions that can be implemented quickly.</li> <li><code>complexity</code>: Optimize while maintaining code simplicity and maintainability.</li> <li><code>compatibility</code>: Optimize while ensuring compatibility with existing systems and interfaces.</li> <li><code>none</code>: Optimize for maximum performance without specific constraints.</li> </ul>"},{"location":"api/decorators/Performance/#examples","title":"Examples","text":""},{"location":"api/decorators/Performance/#database-performance-optimization-with-compatibility-constraints","title":"Database performance optimization with compatibility constraints","text":"<pre><code>+++Performance(bottleneck=database, approach=comprehensive, constraints=compatibility)\nOptimize the performance of our product search functionality which is currently taking 5+ seconds to return results.\n</code></pre> <p>A comprehensive analysis of database performance issues affecting the product search functionality, with optimization recommendations that maintain compatibility with existing systems.</p>"},{"location":"api/decorators/Performance/#cpu-performance-identification","title":"CPU performance identification","text":"<pre><code>+++Performance(bottleneck=cpu, approach=identify)\nOur image processing service is using 100% CPU during peak loads.\n</code></pre> <p>An analysis identifying specific CPU bottlenecks in the image processing service without implementation details.</p>"},{"location":"api/decorators/Performance/#algorithm-optimization-with-time-constraints","title":"Algorithm optimization with time constraints","text":"<pre><code>+++Performance(bottleneck=algorithm, approach=optimize, constraints=time)\nOur sorting algorithm needs to be faster for the upcoming release.\n</code></pre> <p>Specific algorithm optimization recommendations that can be implemented quickly before the upcoming release.</p>"},{"location":"api/decorators/Performance/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Performance/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Analyze and improve system performance by identifying and resolving bottlenecks.</p> <p>Notes: Simplified instruction for models with more limited context windows.</p>"},{"location":"api/decorators/Performance/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Performance/#database-query-optimization","title":"Database query optimization","text":"<p>Original Prompt: <pre><code>Optimize the performance of our product search functionality which is currently taking 5+ seconds to return results.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Analyze and optimize system performance with a focus on efficiency and scalability. Focus on database performance including query optimization, indexing strategies, connection pooling, and data access patterns. Perform a comprehensive performance analysis including identification, measurement, and optimization recommendations. Optimize while ensuring compatibility with existing systems and interfaces.\n\nOptimize the performance of our product search functionality which is currently taking 5+ seconds to return results.\n</code></pre></p> <p>Notes: This example focuses on database optimization with a comprehensive approach while maintaining compatibility with existing systems.</p>"},{"location":"api/decorators/Performance/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Analyze and optimize system performance with a focus on efficiency and scalability.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>bottleneck</code>:</li> <li>When set to <code>cpu</code>: Focus on CPU optimization strategies including algorithm efficiency, parallel processing, and computational load balancing.</li> <li>When set to <code>memory</code>: Focus on memory usage optimization including allocation patterns, garbage collection, caching strategies, and memory leaks.</li> <li>When set to <code>io</code>: Focus on I/O performance including disk access patterns, buffering strategies, and asynchronous operations.</li> <li>When set to <code>network</code>: Focus on network performance including latency reduction, bandwidth optimization, and connection management.</li> <li>When set to <code>database</code>: Focus on database performance including query optimization, indexing strategies, connection pooling, and data access patterns.</li> <li> <p>When set to <code>algorithm</code>: Focus on algorithmic efficiency including time complexity, space complexity, and algorithm selection.</p> </li> <li> <p><code>approach</code>:</p> </li> <li>When set to <code>identify</code>: Identify the specific performance bottlenecks through profiling and analysis without implementing solutions.</li> <li>When set to <code>measure</code>: Measure and quantify performance metrics to establish baselines and identify improvement opportunities.</li> <li>When set to <code>optimize</code>: Implement specific optimization techniques to address known performance issues.</li> <li> <p>When set to <code>comprehensive</code>: Perform a comprehensive performance analysis including identification, measurement, and optimization recommendations.</p> </li> <li> <p><code>constraints</code>:</p> </li> <li>When set to <code>cost</code>: Optimize within cost constraints, prioritizing solutions with minimal additional resource requirements.</li> <li>When set to <code>time</code>: Optimize with time constraints in mind, focusing on solutions that can be implemented quickly.</li> <li>When set to <code>complexity</code>: Optimize while maintaining code simplicity and maintainability.</li> <li>When set to <code>compatibility</code>: Optimize while ensuring compatibility with existing systems and interfaces.</li> <li>When set to <code>none</code>: Optimize for maximum performance without specific constraints.</li> </ul>"},{"location":"api/decorators/Performance/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Performance/#related-decorators","title":"Related Decorators","text":"<ul> <li>CodeReview: Enhances Performance Performance decorator can enhance code review by focusing specifically on performance aspects of the code.</li> <li>Simplify: Conflicts with Performance Performance optimizations sometimes increase code complexity, which may conflict with simplification goals.</li> </ul>"},{"location":"api/decorators/Persona/","title":"Persona Decorator","text":"<p>Adapts the response to reflect the perspective and concerns of a specific persona. This decorator helps explore how different stakeholders or personality types would view a situation or topic.</p> <p>Category: Tone</p>"},{"location":"api/decorators/Persona/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>role</code> <code>string</code> The specific persona or stakeholder role to adopt <code>Required</code> <code>traits</code> <code>array</code> Key personality traits or characteristics of the persona `` <code>goals</code> <code>array</code> Primary goals or concerns of the persona ``"},{"location":"api/decorators/Persona/#examples","title":"Examples","text":""},{"location":"api/decorators/Persona/#response-from-the-perspective-of-a-specific-stakeholder","title":"Response from the perspective of a specific stakeholder","text":"<pre><code>+++Persona(role=customer)\nWhat are the implications of implementing a new subscription model?\n</code></pre> <p>Analyzes the subscription model from a customer's perspective, focusing on value, convenience, and potential concerns</p>"},{"location":"api/decorators/Persona/#detailed-persona-with-specific-traits-and-goals","title":"Detailed persona with specific traits and goals","text":"<pre><code>+++Persona(role=senior software engineer, traits=[pragmatic,detail-oriented,experienced], goals=[code quality,maintainability,efficiency])\nEvaluate the proposal to switch from monolith to microservices.\n</code></pre> <p>Provides a detailed analysis of the monolith-to-microservices transition from the perspective of a pragmatic, detail-oriented senior engineer who prioritizes code quality and maintainability</p>"},{"location":"api/decorators/Persona/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Persona/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Respond as a {role} with these characteristics: {traits}. Your main priorities are: {goals}. Think about how someone in this position with these traits and goals would naturally approach this topic. Use appropriate vocabulary, concerns, and priorities for this persona.</p> <p>Notes: This model sometimes needs reminders to maintain consistent persona characteristics throughout longer responses</p>"},{"location":"api/decorators/Persona/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Persona/#customer-perspective-on-subscription-model","title":"Customer perspective on subscription model","text":"<p>Original Prompt: <pre><code>What are the implications of implementing a new subscription model?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please respond from the perspective of the specified persona, adapting your analysis and viewpoint to reflect how this persona would naturally view and respond to the situation or topic. Adopt the perspective and viewpoint of a customer, considering how someone in this role would approach the topic.\n\nWhat are the implications of implementing a new subscription model?\n</code></pre></p>"},{"location":"api/decorators/Persona/#detailed-senior-engineer-persona-evaluating-architecture-change","title":"Detailed senior engineer persona evaluating architecture change","text":"<p>Original Prompt: <pre><code>Evaluate the proposal to switch from monolith to microservices.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please respond from the perspective of the specified persona, adapting your analysis and viewpoint to reflect how this persona would naturally view and respond to the situation or topic. Adopt the perspective and viewpoint of a senior software engineer, considering how someone in this role would approach the topic. Incorporate these key personality traits into the persona: [pragmatic,detail-oriented,experienced]. Let these characteristics influence how the persona perceives and reacts to the topic. Prioritize these primary goals and concerns that drive the persona's thinking: [code quality,maintainability,efficiency]. Ensure these priorities shape the perspective and recommendations offered.\n\nEvaluate the proposal to switch from monolith to microservices.\n</code></pre></p>"},{"location":"api/decorators/Persona/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please respond from the perspective of the specified persona, adapting your analysis and viewpoint to reflect how this persona would naturally view and respond to the situation or topic.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>role</code>:</li> <li> <p>Format: Adopt the perspective and viewpoint of a {value}, considering how someone in this role would approach the topic.</p> </li> <li> <p><code>traits</code>:</p> </li> <li> <p>Format: Incorporate these key personality traits into the persona: {value}. Let these characteristics influence how the persona perceives and reacts to the topic.</p> </li> <li> <p><code>goals</code>:</p> </li> <li>Format: Prioritize these primary goals and concerns that drive the persona's thinking: {value}. Ensure these priorities shape the perspective and recommendations offered.</li> </ul>"},{"location":"api/decorators/Persona/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Persona/#related-decorators","title":"Related Decorators","text":"<ul> <li>AsExpert: Enhances Persona Persona can be combined with AsExpert to create a character who is both in a specific role and has domain expertise</li> <li>Audience: Enhances Persona Persona (for the speaker) works well with Audience (for the listener) to create targeted communication</li> <li>Balanced: Conflicts with Persona Persona intentionally presents a single perspective, which may conflict with Balanced's goal of presenting multiple viewpoints</li> </ul>"},{"location":"api/decorators/PerspectiveCascade/","title":"PerspectiveCascade Decorator","text":"<p>Systematically explores a topic through a sequence of diverse, interconnected viewpoints, with each perspective building upon previous ones to reveal multidimensional insights</p> <p>Category: Reasoning</p>"},{"location":"api/decorators/PerspectiveCascade/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>perspectives</code> <code>number</code> Number of distinct perspectives to explore in the cascade <code>4</code> <code>domain</code> <code>enum</code> Domain-specific perspective set to use <code>custom</code> <code>integrationLevel</code> <code>enum</code> How tightly to integrate perspectives in the cascade <code>moderate</code> <code>interactionStyle</code> <code>enum</code> How to manage the interaction through perspectives <code>guided</code> <code>customPerspectives</code> <code>string</code> Custom list of perspectives to explore (comma-separated) ``"},{"location":"api/decorators/PerspectiveCascade/#domain-options","title":"Domain Options","text":"<ul> <li><code>business</code>: Use a business-oriented cascade that explores: 1) Operational considerations, 2) Human/stakeholder impacts, 3) Organizational culture implications, 4) Market/competitive positioning.</li> <li><code>product</code>: Use a product development cascade that explores: 1) User needs and pain points, 2) Technical feasibility and constraints, 3) Market viability and positioning, 4) Future adaptability and scaling.</li> <li><code>research</code>: Use a research-oriented cascade that explores: 1) Methodological approaches, 2) Theoretical frameworks, 3) Practical implementation considerations, 4) Implications and applications.</li> <li><code>problem-solving</code>: Use a problem-solving cascade that explores: 1) Problem definition and framing, 2) Causal factors and systems analysis, 3) Solution approaches and evaluation, 4) Implementation and adaptation.</li> <li><code>decision-making</code>: Use a decision-making cascade that explores: 1) Practical considerations, 2) Ethical dimensions, 3) Strategic alignment, 4) Emotional and intuitive aspects.</li> <li><code>content-creation</code>: Use a content-creation cascade that explores: 1) Core message and purpose, 2) Audience needs and perspectives, 3) Format and delivery considerations, 4) Engagement and impact potential.</li> <li><code>negotiation</code>: Use a negotiation-focused cascade that explores: 1) Your interests and priorities, 2) Counterparty perspectives and needs, 3) Contextual factors and constraints, 4) Creative options and integrative solutions.</li> <li><code>custom</code>: Develop a custom perspective cascade appropriate to the specific topic and context.</li> </ul>"},{"location":"api/decorators/PerspectiveCascade/#integrationlevel-options","title":"Integrationlevel Options","text":"<ul> <li><code>basic</code>: Ensure basic connections between perspectives, highlighting key relationship points.</li> <li><code>moderate</code>: Create moderate integration with explicit connections and reflections on how each perspective transforms understanding of previous viewpoints.</li> <li><code>comprehensive</code>: Implement comprehensive integration where perspectives deeply inform each other, with explicit synthesis of insights across the full cascade.</li> </ul>"},{"location":"api/decorators/PerspectiveCascade/#interactionstyle-options","title":"Interactionstyle Options","text":"<ul> <li><code>guided</code>: Guide the user through each perspective with explicit questions to elicit their input before moving to the next perspective.</li> <li><code>autonomous</code>: Present the full cascade of perspectives with minimal interruption, providing a comprehensive analysis.</li> <li><code>hybrid</code>: Balance guidance and autonomy by presenting initial perspectives, then pausing for input at key integration points.</li> </ul>"},{"location":"api/decorators/PerspectiveCascade/#examples","title":"Examples","text":""},{"location":"api/decorators/PerspectiveCascade/#business-strategy-exploration","title":"Business strategy exploration","text":"<pre><code>+++PerspectiveCascade(domain=business, perspectives=4, integrationLevel=comprehensive)\n</code></pre> <p>Analyzes business strategy through four perspectives (operational, human, cultural, and market) with comprehensive integration between viewpoints</p>"},{"location":"api/decorators/PerspectiveCascade/#product-development-with-custom-perspectives","title":"Product development with custom perspectives","text":"<pre><code>+++PerspectiveCascade(customPerspectives=technical,financial,ethical,user-experience, integrationLevel=moderate)\n</code></pre> <p>Explores product development through a cascade of technical, financial, ethical, and user experience perspectives with moderate integration</p>"},{"location":"api/decorators/PerspectiveCascade/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/PerspectiveCascade/#corporate-policy-development","title":"Corporate policy development","text":"<p>Original Prompt: <pre><code>Help me develop a sustainability policy for my manufacturing company.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Approach this topic using Perspective Cascading, a method that systematically explores the subject through a sequence of diverse, interconnected viewpoints. Each new perspective should build upon previous ones while introducing novel elements, creating a flowing exploration that reveals insights at the boundaries between different perspectives. Use a business-oriented cascade that explores: 1) Operational considerations, 2) Human/stakeholder impacts, 3) Organizational culture implications, 4) Market/competitive positioning. Create moderate integration with explicit connections and reflections on how each perspective transforms understanding of previous viewpoints. Guide the user through each perspective with explicit questions to elicit their input before moving to the next perspective.\n\nHelp me develop a sustainability policy for my manufacturing company.\n</code></pre></p>"},{"location":"api/decorators/PerspectiveCascade/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Approach this topic using Perspective Cascading, a method that systematically explores the subject through a sequence of diverse, interconnected viewpoints. Each new perspective should build upon previous ones while introducing novel elements, creating a flowing exploration that reveals insights at the boundaries between different perspectives.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>perspectives</code>:</li> <li>When set to <code>3</code>: Explore three key perspectives in sequence, ensuring each builds upon previous insights.</li> <li>When set to <code>4</code>: Develop a four-perspective cascade that provides a comprehensive exploration of the topic.</li> <li>When set to <code>5</code>: Create a rich five-perspective cascade that thoroughly examines the topic from multiple angles.</li> <li> <p>When set to <code>6</code>: Implement an extensive six-perspective cascade for maximum insight generation.</p> </li> <li> <p><code>domain</code>:</p> </li> <li>When set to <code>business</code>: Use a business-oriented cascade that explores: 1) Operational considerations, 2) Human/stakeholder impacts, 3) Organizational culture implications, 4) Market/competitive positioning.</li> <li>When set to <code>product</code>: Use a product development cascade that explores: 1) User needs and pain points, 2) Technical feasibility and constraints, 3) Market viability and positioning, 4) Future adaptability and scaling.</li> <li>When set to <code>research</code>: Use a research-oriented cascade that explores: 1) Methodological approaches, 2) Theoretical frameworks, 3) Practical implementation considerations, 4) Implications and applications.</li> <li>When set to <code>problem-solving</code>: Use a problem-solving cascade that explores: 1) Problem definition and framing, 2) Causal factors and systems analysis, 3) Solution approaches and evaluation, 4) Implementation and adaptation.</li> <li>When set to <code>decision-making</code>: Use a decision-making cascade that explores: 1) Practical considerations, 2) Ethical dimensions, 3) Strategic alignment, 4) Emotional and intuitive aspects.</li> <li>When set to <code>content-creation</code>: Use a content-creation cascade that explores: 1) Core message and purpose, 2) Audience needs and perspectives, 3) Format and delivery considerations, 4) Engagement and impact potential.</li> <li>When set to <code>negotiation</code>: Use a negotiation-focused cascade that explores: 1) Your interests and priorities, 2) Counterparty perspectives and needs, 3) Contextual factors and constraints, 4) Creative options and integrative solutions.</li> <li> <p>When set to <code>custom</code>: Develop a custom perspective cascade appropriate to the specific topic and context.</p> </li> <li> <p><code>integrationLevel</code>:</p> </li> <li>When set to <code>basic</code>: Ensure basic connections between perspectives, highlighting key relationship points.</li> <li>When set to <code>moderate</code>: Create moderate integration with explicit connections and reflections on how each perspective transforms understanding of previous viewpoints.</li> <li> <p>When set to <code>comprehensive</code>: Implement comprehensive integration where perspectives deeply inform each other, with explicit synthesis of insights across the full cascade.</p> </li> <li> <p><code>interactionStyle</code>:</p> </li> <li>When set to <code>guided</code>: Guide the user through each perspective with explicit questions to elicit their input before moving to the next perspective.</li> <li>When set to <code>autonomous</code>: Present the full cascade of perspectives with minimal interruption, providing a comprehensive analysis.</li> <li>When set to <code>hybrid</code>: Balance guidance and autonomy by presenting initial perspectives, then pausing for input at key integration points.</li> </ul>"},{"location":"api/decorators/PerspectiveCascade/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: claude-3-opus-20240229, claude-3-sonnet-20240229, gpt-4o, gpt-4o-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/PerspectiveCascade/#related-decorators","title":"Related Decorators","text":"<ul> <li>DeepDive: Enhances PerspectiveCascade DeepDive can be used to explore individual perspectives more thoroughly when needed</li> <li>Socratic: Enhances PerspectiveCascade Socratic questioning works well with the guided interaction style to facilitate perspective exploration</li> <li>Debate: Conflicts with PerspectiveCascade Debate focuses on oppositional perspectives rather than the flowing cascade approach</li> </ul>"},{"location":"api/decorators/PostMortem/","title":"PostMortem Decorator","text":"<p>Creates incident reviews and postmortem documents.</p> <p>Category: Developer Workflow</p>"},{"location":"api/decorators/PostMortem/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>format</code> <code>enum</code> Document structure <code>comprehensive</code> <code>focus</code> <code>enum</code> Analysis emphasis <code>balanced</code> <code>audience</code> <code>enum</code> Target readers <code>team</code>"},{"location":"api/decorators/PostMortem/#format-options","title":"Format Options","text":"<ul> <li><code>timeline</code>: Structure the postmortem as a chronological timeline of events.</li> <li><code>5-whys</code>: Use the 5 Whys technique to identify the root cause by repeatedly asking why the problem occurred.</li> <li><code>fishbone</code>: Organize the analysis using a fishbone (Ishikawa) diagram approach to categorize potential causes.</li> <li><code>comprehensive</code>: Create a comprehensive postmortem covering timeline, root cause analysis, impact assessment, and future prevention.</li> </ul>"},{"location":"api/decorators/PostMortem/#focus-options","title":"Focus Options","text":"<ul> <li><code>what-happened</code>: Focus primarily on documenting what happened during the incident in detail.</li> <li><code>why</code>: Emphasize root cause analysis and why the incident occurred.</li> <li><code>prevention</code>: Concentrate on preventive measures and future safeguards.</li> <li><code>balanced</code>: Provide balanced coverage of what happened, why it happened, and how to prevent recurrence.</li> </ul>"},{"location":"api/decorators/PostMortem/#audience-options","title":"Audience Options","text":"<ul> <li><code>team</code>: Write for the technical team with appropriate technical details.</li> <li><code>leadership</code>: Format for leadership with executive summary and business impact.</li> <li><code>stakeholders</code>: Address concerns of all stakeholders with both technical and business perspectives.</li> <li><code>public</code>: Create a public-facing document that explains the incident without revealing sensitive details.</li> </ul>"},{"location":"api/decorators/PostMortem/#examples","title":"Examples","text":""},{"location":"api/decorators/PostMortem/#basic-postmortem-for-a-database-outage","title":"Basic postmortem for a database outage","text":"<pre><code>+++PostMortem(format=comprehensive, focus=balanced, audience=team)\nCreate a postmortem for the database outage we experienced yesterday that caused 45 minutes of downtime.\n</code></pre> <p>A comprehensive postmortem document analyzing the database outage, including timeline, root cause analysis, impact assessment, and preventive measures, written for a technical team audience.</p>"},{"location":"api/decorators/PostMortem/#executive-focused-incident-review","title":"Executive-focused incident review","text":"<pre><code>+++PostMortem(format=timeline, focus=prevention, audience=leadership)\nAnalyze the recent security breach that affected our customer data.\n</code></pre> <p>A timeline-based postmortem focused on prevention strategies, formatted for leadership with executive summary and business impact assessment.</p>"},{"location":"api/decorators/PostMortem/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/PostMortem/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Create a detailed postmortem document for the incident. Include what happened, why it happened, and how to prevent it in the future.</p> <p>Notes: Simplified instruction for models with more limited context windows.</p>"},{"location":"api/decorators/PostMortem/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/PostMortem/#software-development-team","title":"Software development team","text":"<p>Original Prompt: <pre><code>Create a postmortem for the database outage we experienced yesterday that caused 45 minutes of downtime.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Create a detailed postmortem document that analyzes the incident, identifies root causes, and proposes preventive measures. Create a comprehensive postmortem covering timeline, root cause analysis, impact assessment, and future prevention. Provide balanced coverage of what happened, why it happened, and how to prevent recurrence. Write for the technical team with appropriate technical details.\n\nCreate a postmortem for the database outage we experienced yesterday that caused 45 minutes of downtime.\n</code></pre></p> <p>Notes: The decorator adds structure and guidance for creating a comprehensive postmortem document tailored to the technical team.</p>"},{"location":"api/decorators/PostMortem/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Create a detailed postmortem document that analyzes the incident, identifies root causes, and proposes preventive measures.</p> <p>Placement: prepend</p> <p>Composition Behavior: override</p> <p>Parameter Effects:</p> <ul> <li><code>format</code>:</li> <li>When set to <code>timeline</code>: Structure the postmortem as a chronological timeline of events.</li> <li>When set to <code>5-whys</code>: Use the 5 Whys technique to identify the root cause by repeatedly asking why the problem occurred.</li> <li>When set to <code>fishbone</code>: Organize the analysis using a fishbone (Ishikawa) diagram approach to categorize potential causes.</li> <li> <p>When set to <code>comprehensive</code>: Create a comprehensive postmortem covering timeline, root cause analysis, impact assessment, and future prevention.</p> </li> <li> <p><code>focus</code>:</p> </li> <li>When set to <code>what-happened</code>: Focus primarily on documenting what happened during the incident in detail.</li> <li>When set to <code>why</code>: Emphasize root cause analysis and why the incident occurred.</li> <li>When set to <code>prevention</code>: Concentrate on preventive measures and future safeguards.</li> <li> <p>When set to <code>balanced</code>: Provide balanced coverage of what happened, why it happened, and how to prevent recurrence.</p> </li> <li> <p><code>audience</code>:</p> </li> <li>When set to <code>team</code>: Write for the technical team with appropriate technical details.</li> <li>When set to <code>leadership</code>: Format for leadership with executive summary and business impact.</li> <li>When set to <code>stakeholders</code>: Address concerns of all stakeholders with both technical and business perspectives.</li> <li>When set to <code>public</code>: Create a public-facing document that explains the incident without revealing sensitive details.</li> </ul>"},{"location":"api/decorators/PostMortem/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/PostMortem/#related-decorators","title":"Related Decorators","text":"<ul> <li>RootCauseAnalysis: Enhances PostMortem RootCauseAnalysis can enhance the 'why' aspect of PostMortem analysis.</li> <li>TechnicalDocumentation: Enhances PostMortem TechnicalDocumentation can improve the structure and clarity of the postmortem document.</li> </ul>"},{"location":"api/decorators/PreciseModification/","title":"PreciseModification Decorator","text":"<p>Guides careful, targeted modifications to sensitive parts of the codebase.</p> <p>Category: Systematic Debugging</p>"},{"location":"api/decorators/PreciseModification/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>sensitivity</code> <code>enum</code> Code sensitivity level <code>sensitive</code> <code>scope</code> <code>enum</code> Modification scope <code>minimal</code> <code>validation</code> <code>enum</code> Required validation approach <code>both</code>"},{"location":"api/decorators/PreciseModification/#sensitivity-options","title":"Sensitivity Options","text":"<ul> <li><code>normal</code>: This code has standard sensitivity. Apply normal caution when modifying.</li> <li><code>sensitive</code>: This code has elevated sensitivity. Be careful with modifications and consider potential side effects.</li> <li><code>critical</code>: This code is critical to system operation. Exercise extreme caution with any modifications.</li> <li><code>fragile</code>: This code is fragile and prone to breaking. Make minimal, precise changes with thorough testing.</li> </ul>"},{"location":"api/decorators/PreciseModification/#scope-options","title":"Scope Options","text":"<ul> <li><code>isolated</code>: Make changes that are completely isolated from other components.</li> <li><code>contained</code>: Ensure changes are contained to a specific module or subsystem.</li> <li><code>minimal</code>: Make the smallest possible changes to achieve the objective.</li> <li><code>precise</code>: Make surgical, precise modifications targeting only the specific issue.</li> </ul>"},{"location":"api/decorators/PreciseModification/#validation-options","title":"Validation Options","text":"<ul> <li><code>review</code>: All changes must be carefully reviewed before implementation.</li> <li><code>tests</code>: All changes must be validated with appropriate test coverage.</li> <li><code>both</code>: All changes require both code review and test validation.</li> <li><code>comprehensive</code>: All changes require comprehensive validation including code review, testing, and integration verification.</li> </ul>"},{"location":"api/decorators/PreciseModification/#examples","title":"Examples","text":""},{"location":"api/decorators/PreciseModification/#modifying-fragile-payment-processing-code","title":"Modifying fragile payment processing code","text":"<pre><code>+++PreciseModification(sensitivity=fragile, scope=precise, validation=comprehensive)\nUpdate the payment processing calculation without affecting any other components. This is a critical system that requires extensive validation.\n</code></pre> <p>The model will provide a solution that makes extremely careful, surgical changes to the payment processing calculation, with comprehensive validation steps and awareness of the code's fragility.</p>"},{"location":"api/decorators/PreciseModification/#normal-sensitivity-code-modification-with-minimal-scope","title":"Normal sensitivity code modification with minimal scope","text":"<pre><code>+++PreciseModification(sensitivity=normal, scope=minimal)\nRefactor this utility function to improve performance.\n</code></pre> <p>The model will provide a solution that makes minimal changes to the utility function while maintaining normal caution appropriate for non-critical code.</p>"},{"location":"api/decorators/PreciseModification/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/PreciseModification/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Be extremely careful when modifying this code. Make precise, targeted changes based on the sensitivity level, scope requirements, and validation needs specified below:</p> <p>Notes: More explicit instruction for models with less context understanding.</p>"},{"location":"api/decorators/PreciseModification/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/PreciseModification/#payment-processing-system-modification","title":"Payment processing system modification","text":"<p>Original Prompt: <pre><code>Update the payment processing calculation without affecting any other components.\n</code></pre></p> <p>Transformed Prompt: <pre><code>When modifying code, ensure changes are carefully targeted and appropriate for the sensitivity level of the codebase. Consider the scope of changes and implement proper validation procedures. This code is fragile and prone to breaking. Make minimal, precise changes with thorough testing. Make surgical, precise modifications targeting only the specific issue. All changes require comprehensive validation including code review, testing, and integration verification. Update the payment processing calculation without affecting any other components.\n</code></pre></p> <p>Notes: The decorator adds specific guidance on how to approach modifying fragile payment processing code with precise scope and comprehensive validation.</p>"},{"location":"api/decorators/PreciseModification/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: When modifying code, ensure changes are carefully targeted and appropriate for the sensitivity level of the codebase. Consider the scope of changes and implement proper validation procedures.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>sensitivity</code>:</li> <li>When set to <code>normal</code>: This code has standard sensitivity. Apply normal caution when modifying.</li> <li>When set to <code>sensitive</code>: This code has elevated sensitivity. Be careful with modifications and consider potential side effects.</li> <li>When set to <code>critical</code>: This code is critical to system operation. Exercise extreme caution with any modifications.</li> <li> <p>When set to <code>fragile</code>: This code is fragile and prone to breaking. Make minimal, precise changes with thorough testing.</p> </li> <li> <p><code>scope</code>:</p> </li> <li>When set to <code>isolated</code>: Make changes that are completely isolated from other components.</li> <li>When set to <code>contained</code>: Ensure changes are contained to a specific module or subsystem.</li> <li>When set to <code>minimal</code>: Make the smallest possible changes to achieve the objective.</li> <li> <p>When set to <code>precise</code>: Make surgical, precise modifications targeting only the specific issue.</p> </li> <li> <p><code>validation</code>:</p> </li> <li>When set to <code>review</code>: All changes must be carefully reviewed before implementation.</li> <li>When set to <code>tests</code>: All changes must be validated with appropriate test coverage.</li> <li>When set to <code>both</code>: All changes require both code review and test validation.</li> <li>When set to <code>comprehensive</code>: All changes require comprehensive validation including code review, testing, and integration verification.</li> </ul>"},{"location":"api/decorators/PreciseModification/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/PreciseModification/#related-decorators","title":"Related Decorators","text":"<ul> <li>CodeReview: Enhances PreciseModification PreciseModification works well with CodeReview to ensure changes are properly scrutinized.</li> <li>TestDrivenDevelopment: Enhances PreciseModification Combining with TestDrivenDevelopment ensures proper test coverage for sensitive modifications.</li> </ul>"},{"location":"api/decorators/Precision/","title":"Precision Decorator","text":"<p>Enhances responses with exact, specific, and precisely defined information. This decorator prioritizes accuracy in measurements, terms, definitions, and claims, avoiding vague language in favor of concrete specificity.</p> <p>Category: Verification</p>"},{"location":"api/decorators/Precision/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>level</code> <code>enum</code> The degree of precision to apply <code>high</code> <code>units</code> <code>boolean</code> Whether to consistently provide units for all measurements <code>True</code> <code>definitions</code> <code>boolean</code> Whether to include precise definitions for key terms <code>False</code>"},{"location":"api/decorators/Precision/#level-options","title":"Level Options","text":"<ul> <li><code>moderate</code>: Use moderately precise language with specific details where important, while maintaining accessibility and clarity for a general audience.</li> <li><code>high</code>: Use highly precise language throughout the response, with exact figures, specific terminology, and detailed descriptions that leave minimal room for ambiguity.</li> <li><code>scientific</code>: Use scientific-grade precision with rigorous accuracy, including error margins where appropriate, precise technical terminology, and specific quantitative measurements.</li> </ul>"},{"location":"api/decorators/Precision/#examples","title":"Examples","text":""},{"location":"api/decorators/Precision/#basic-precise-explanation-of-a-scientific-concept","title":"Basic precise explanation of a scientific concept","text":"<pre><code>+++Precision\nExplain how vaccines work.\n</code></pre> <p>Provides an explanation of vaccine mechanisms using precise terminology, specific examples, and accurate measurements where relevant</p>"},{"location":"api/decorators/Precision/#highly-precise-response-with-scientific-rigor","title":"Highly precise response with scientific rigor","text":"<pre><code>+++Precision(level=scientific, units=true, definitions=true)\nDescribe the process of photosynthesis.\n</code></pre> <p>Delivers a scientifically precise explanation of photosynthesis with exact units for all measurements, precise definitions for key terms, and specific chemical reactions</p>"},{"location":"api/decorators/Precision/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Precision/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Provide information with {level} precision. Use exact numbers, specific terminology, and avoid vague language. {units} {definitions} For every claim, aim for the highest possible accuracy and specificity. If you're uncertain about a precise value, acknowledge the uncertainty rather than giving approximate information.</p> <p>Notes: This model may need explicit reminders to maintain precision throughout, especially for longer responses or complex topics</p>"},{"location":"api/decorators/Precision/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Precision/#precise-explanation-of-vaccine-function","title":"Precise explanation of vaccine function","text":"<p>Original Prompt: <pre><code>Explain how vaccines work.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please provide information with a high degree of precision and specificity. Use exact measurements, specific terminology, and concrete details rather than vague or general statements. Prioritize accuracy in all claims and descriptions. Use highly precise language throughout the response, with exact figures, specific terminology, and detailed descriptions that leave minimal room for ambiguity. Always include appropriate units for all measurements and quantities, using standard notation (SI units preferred where applicable). Use precise terminology without interrupting the flow with explicit definitions unless absolutely necessary for understanding.\n\nExplain how vaccines work.\n</code></pre></p>"},{"location":"api/decorators/Precision/#scientific-precision-for-photosynthesis-explanation","title":"Scientific precision for photosynthesis explanation","text":"<p>Original Prompt: <pre><code>Describe the process of photosynthesis.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please provide information with a high degree of precision and specificity. Use exact measurements, specific terminology, and concrete details rather than vague or general statements. Prioritize accuracy in all claims and descriptions. Use scientific-grade precision with rigorous accuracy, including error margins where appropriate, precise technical terminology, and specific quantitative measurements. Always include appropriate units for all measurements and quantities, using standard notation (SI units preferred where applicable). Include precise definitions for key terms and concepts when first introduced, ensuring clarity and exact understanding of specialized vocabulary.\n\nDescribe the process of photosynthesis.\n</code></pre></p>"},{"location":"api/decorators/Precision/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please provide information with a high degree of precision and specificity. Use exact measurements, specific terminology, and concrete details rather than vague or general statements. Prioritize accuracy in all claims and descriptions.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>level</code>:</li> <li>When set to <code>moderate</code>: Use moderately precise language with specific details where important, while maintaining accessibility and clarity for a general audience.</li> <li>When set to <code>high</code>: Use highly precise language throughout the response, with exact figures, specific terminology, and detailed descriptions that leave minimal room for ambiguity.</li> <li> <p>When set to <code>scientific</code>: Use scientific-grade precision with rigorous accuracy, including error margins where appropriate, precise technical terminology, and specific quantitative measurements.</p> </li> <li> <p><code>units</code>:</p> </li> <li>When set to <code>true</code>: Always include appropriate units for all measurements and quantities, using standard notation (SI units preferred where applicable).</li> <li> <p>When set to <code>false</code>: Include units where necessary for clarity, but prioritize readability over comprehensive unit notation.</p> </li> <li> <p><code>definitions</code>:</p> </li> <li>When set to <code>true</code>: Include precise definitions for key terms and concepts when first introduced, ensuring clarity and exact understanding of specialized vocabulary.</li> <li>When set to <code>false</code>: Use precise terminology without interrupting the flow with explicit definitions unless absolutely necessary for understanding.</li> </ul>"},{"location":"api/decorators/Precision/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: ELI5</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Precision/#related-decorators","title":"Related Decorators","text":"<ul> <li>Fact-Check: Enhances Precision Precision complements Fact-Check by ensuring the verified information is presented with appropriate specificity</li> <li>Academic: Enhances Precision Precision enhances Academic by adding scientific rigor and exactitude to scholarly content</li> <li>ELI5: Conflicts with Precision The high precision and technical specificity conflicts with ELI5's goal of simplified, accessible explanations</li> </ul>"},{"location":"api/decorators/Prioritize/","title":"Prioritize Decorator","text":"<p>Structures the response by ranking information according to importance, urgency, or impact. This decorator helps identify the most critical aspects of a topic and presents information in a hierarchical manner from most to least important.</p> <p>Category: Structure</p>"},{"location":"api/decorators/Prioritize/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>criteria</code> <code>string</code> The specific criterion to use for prioritization (e.g., importance, urgency, ROI) <code>importance</code> <code>count</code> <code>number</code> Number of prioritized items to include <code>5</code> <code>showRationale</code> <code>boolean</code> Whether to explain the reasoning behind each priority ranking <code>False</code>"},{"location":"api/decorators/Prioritize/#examples","title":"Examples","text":""},{"location":"api/decorators/Prioritize/#basic-prioritization-of-key-factors","title":"Basic prioritization of key factors","text":"<pre><code>+++Prioritize\nWhat factors should be considered when designing a mobile app?\n</code></pre> <p>Presents the top 5 factors for mobile app design, ranked by importance from most to least critical</p>"},{"location":"api/decorators/Prioritize/#detailed-prioritization-with-custom-criteria-and-rationale","title":"Detailed prioritization with custom criteria and rationale","text":"<pre><code>+++Prioritize(criteria=ROI, count=7, showRationale=true)\nWhat marketing strategies should our startup focus on?\n</code></pre> <p>Provides 7 marketing strategies ranked by return on investment, with explanations for each ranking position</p>"},{"location":"api/decorators/Prioritize/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Prioritize/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Create a prioritized list of the {count} most important items related to this topic, ranked by {criteria}. Number them from 1 to {count}, with 1 being the highest priority. {showRationale} Make sure each item is distinct and clearly relevant to the question.</p> <p>Notes: This model may need explicit reminders to maintain strict ordering throughout the response and to avoid adding unprioritized items after the ranked list</p>"},{"location":"api/decorators/Prioritize/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Prioritize/#prioritizing-mobile-app-design-factors","title":"Prioritizing mobile app design factors","text":"<p>Original Prompt: <pre><code>What factors should be considered when designing a mobile app?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please prioritize the information in your response by ranking it according to specific criteria. Organize the content hierarchically from most to least critical, clearly distinguishing different levels of priority. Rank the information based specifically on importance, with the highest importance items appearing first and lowest appearing last. Include exactly 5 prioritized items in your response, focusing on those with the highest priority according to the specified criteria. Focus on presenting the prioritized items in order without explaining the rationale for each ranking position.\n\nWhat factors should be considered when designing a mobile app?\n</code></pre></p>"},{"location":"api/decorators/Prioritize/#prioritizing-marketing-strategies-by-roi-with-rationale","title":"Prioritizing marketing strategies by ROI with rationale","text":"<p>Original Prompt: <pre><code>What marketing strategies should our startup focus on?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please prioritize the information in your response by ranking it according to specific criteria. Organize the content hierarchically from most to least critical, clearly distinguishing different levels of priority. Rank the information based specifically on ROI, with the highest ROI items appearing first and lowest appearing last. Include exactly 7 prioritized items in your response, focusing on those with the highest priority according to the specified criteria. For each prioritized item, provide a clear explanation of the reasoning behind its ranking position.\n\nWhat marketing strategies should our startup focus on?\n</code></pre></p>"},{"location":"api/decorators/Prioritize/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please prioritize the information in your response by ranking it according to specific criteria. Organize the content hierarchically from most to least critical, clearly distinguishing different levels of priority.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>criteria</code>:</li> <li> <p>Format: Rank the information based specifically on {value}, with the highest {value} items appearing first and lowest appearing last.</p> </li> <li> <p><code>count</code>:</p> </li> <li> <p>Format: Include exactly {value} prioritized items in your response, focusing on those with the highest priority according to the specified criteria.</p> </li> <li> <p><code>showRationale</code>:</p> </li> <li>When set to <code>true</code>: For each prioritized item, provide a clear explanation of the reasoning behind its ranking position.</li> <li>When set to <code>false</code>: Focus on presenting the prioritized items in order without explaining the rationale for each ranking position.</li> </ul>"},{"location":"api/decorators/Prioritize/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Prioritize/#related-decorators","title":"Related Decorators","text":"<ul> <li>MECE: Enhances Prioritize MECE ensures comprehensive coverage of categories while Prioritize ranks them by importance</li> <li>Alternatives: Enhances Prioritize Alternatives generates multiple options that Prioritize can then rank according to the specified criteria</li> <li>DecisionMatrix: Enhances Prioritize DecisionMatrix provides multi-criteria evaluation that can inform and complement the single-criterion ranking of Prioritize</li> </ul>"},{"location":"api/decorators/Priority/","title":"Priority Decorator","text":"<p>A meta-decorator that establishes a precedence hierarchy among multiple decorators. This allows explicit control over which decorator's parameters or behaviors take precedence when conflicts arise, overriding the default last-decorator-wins behavior.</p> <p>Category: Meta</p>"},{"location":"api/decorators/Priority/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>decorators</code> <code>array</code> Ordered list of decorators by priority (highest priority first) <code>Required</code> <code>explicit</code> <code>boolean</code> Whether to explicitly mention overridden behaviors in the response <code>False</code> <code>mode</code> <code>enum</code> How to handle conflicts between decorators <code>override</code>"},{"location":"api/decorators/Priority/#mode-options","title":"Mode Options","text":"<ul> <li><code>override</code>: When decorators conflict, completely override lower-priority decorator instructions with those from higher-priority decorators.</li> <li><code>merge</code>: When decorators conflict, attempt to merge their instructions by integrating compatible aspects of each.</li> <li><code>cascade</code>: When decorators conflict, apply higher-priority decorator instructions first, then apply lower-priority instructions where they don't directly conflict.</li> </ul>"},{"location":"api/decorators/Priority/#examples","title":"Examples","text":""},{"location":"api/decorators/Priority/#basic-priority-ordering-between-potentially-conflicting-decorators","title":"Basic priority ordering between potentially conflicting decorators","text":"<pre><code>+++Priority(decorators=[Concise,Detailed])\nExplain quantum computing.\n</code></pre> <p>Applies both decorators, but when conflicts arise, Concise takes precedence over Detailed, resulting in a more concise explanation of quantum computing</p>"},{"location":"api/decorators/Priority/#complex-priority-with-explicit-conflict-resolution","title":"Complex priority with explicit conflict resolution","text":"<pre><code>+++Priority(decorators=[Academic,Creative,StepByStep], explicit=true, mode=cascade)\nExplain the water cycle.\n</code></pre> <p>Implements a cascading priority where Academic style dominates, with Creative elements where they don't conflict with Academic style, and StepByStep structure throughout, explicitly noting where decorator behaviors were modified due to conflicts</p>"},{"location":"api/decorators/Priority/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Priority/#gpt-4o","title":"gpt-4o","text":"<p>Instruction: Follow a strict priority order when applying these decorators: {decorators}. When conflicts occur between decorators, resolve them using '{mode}' approach. Focus on implementing each decorator's functionality according to this priority hierarchy.</p> <p>Notes: Even gpt-4o sometimes needs explicit reminders about priority order when multiple decorators have complex interactions</p>"},{"location":"api/decorators/Priority/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Priority/#simple-priority-between-conflicting-decorators","title":"Simple priority between conflicting decorators","text":"<p>Original Prompt: <pre><code>Explain quantum computing.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please apply the following decorators with a specific priority hierarchy to resolve any conflicts between them. Apply these decorators in priority order (highest priority first): Concise, Detailed. When decorators conflict, completely override lower-priority decorator instructions with those from higher-priority decorators. Handle conflicts between decorators without explicitly mentioning the resolution in your response.\n\nExplain quantum computing.\n</code></pre></p>"},{"location":"api/decorators/Priority/#complex-cascading-priority-with-explicit-notes","title":"Complex cascading priority with explicit notes","text":"<p>Original Prompt: <pre><code>Explain the water cycle.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please apply the following decorators with a specific priority hierarchy to resolve any conflicts between them. Apply these decorators in priority order (highest priority first): Academic, Creative, StepByStep. When decorators conflict, apply higher-priority decorator instructions first, then apply lower-priority instructions where they don't directly conflict. When a conflict between decorators occurs, explicitly note in your response which decorator's behavior took precedence.\n\nExplain the water cycle.\n</code></pre></p>"},{"location":"api/decorators/Priority/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please apply the following decorators with a specific priority hierarchy to resolve any conflicts between them.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>decorators</code>:</li> <li> <p>Format: Apply these decorators in priority order (highest priority first): {value}.</p> </li> <li> <p><code>explicit</code>:</p> </li> <li>When set to <code>true</code>: When a conflict between decorators occurs, explicitly note in your response which decorator's behavior took precedence.</li> <li> <p>When set to <code>false</code>: Handle conflicts between decorators without explicitly mentioning the resolution in your response.</p> </li> <li> <p><code>mode</code>:</p> </li> <li>When set to <code>override</code>: When decorators conflict, completely override lower-priority decorator instructions with those from higher-priority decorators.</li> <li>When set to <code>merge</code>: When decorators conflict, attempt to merge their instructions by integrating compatible aspects of each.</li> <li>When set to <code>cascade</code>: When decorators conflict, apply higher-priority decorator instructions first, then apply lower-priority instructions where they don't directly conflict.</li> </ul>"},{"location":"api/decorators/Priority/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Priority/#related-decorators","title":"Related Decorators","text":"<ul> <li>Conditional: Enhances Priority Priority complements Conditional by determining which decorators take precedence when conditions are met</li> <li>Override: Conflicts with Priority Priority and Override both attempt to control decorator behavior conflicts in different ways</li> </ul>"},{"location":"api/decorators/Professional/","title":"Professional Decorator","text":"<p>Adapts the response to use business-oriented language appropriate for professional contexts. This decorator generates content using formal business terminology, clear and concise phrasing, and industry-appropriate jargon when relevant.</p> <p>Category: Tone</p>"},{"location":"api/decorators/Professional/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>industry</code> <code>string</code> The specific industry context to adapt the language for <code>general</code> <code>formality</code> <code>enum</code> The level of formality to maintain in the response <code>standard</code>"},{"location":"api/decorators/Professional/#formality-options","title":"Formality Options","text":"<ul> <li><code>standard</code>: Use standard professional business language that is clear, concise, and respectful without being overly formal.</li> <li><code>high</code>: Use a high level of formality with careful attention to precise language, proper business terminology, and structured communication.</li> <li><code>executive</code>: Use executive-level communication style with strategic framing, high-level insights, and language appropriate for senior leadership or board presentations.</li> </ul>"},{"location":"api/decorators/Professional/#examples","title":"Examples","text":""},{"location":"api/decorators/Professional/#standard-professional-business-communication","title":"Standard professional business communication","text":"<pre><code>+++Professional\nExplain the benefits of implementing a CRM system.\n</code></pre> <p>Delivers a clear, professional explanation of CRM benefits using business-appropriate language and structure</p>"},{"location":"api/decorators/Professional/#industry-specific-executive-level-communication","title":"Industry-specific executive-level communication","text":"<pre><code>+++Professional(industry=healthcare, formality=executive)\nSummarize the impact of telehealth adoption on patient outcomes.\n</code></pre> <p>Produces an executive-level analysis of telehealth impacts using healthcare industry terminology and highly formal business language</p>"},{"location":"api/decorators/Professional/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Professional/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Use formal business language appropriate for a professional {industry} context. Maintain {formality} level of formality. Ensure proper structure, avoid colloquialisms, and use industry-appropriate terminology where relevant.</p> <p>Notes: This model sometimes needs explicit reminders to maintain consistent professional tone throughout longer responses</p>"},{"location":"api/decorators/Professional/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Professional/#standard-professional-response-about-business-systems","title":"Standard professional response about business systems","text":"<p>Original Prompt: <pre><code>Explain the benefits of implementing a CRM system.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please respond using professional, business-oriented language appropriate for formal workplace communication. Use standard professional business language that is clear, concise, and respectful without being overly formal. Adapt the language and terminology to be appropriate for the general industry, using relevant terminology and frameworks where applicable.\n\nExplain the benefits of implementing a CRM system.\n</code></pre></p>"},{"location":"api/decorators/Professional/#executive-level-healthcare-industry-communication","title":"Executive-level healthcare industry communication","text":"<p>Original Prompt: <pre><code>Summarize the impact of telehealth adoption on patient outcomes.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please respond using professional, business-oriented language appropriate for formal workplace communication. Use executive-level communication style with strategic framing, high-level insights, and language appropriate for senior leadership or board presentations. Adapt the language and terminology to be appropriate for the healthcare industry, using relevant terminology and frameworks where applicable.\n\nSummarize the impact of telehealth adoption on patient outcomes.\n</code></pre></p>"},{"location":"api/decorators/Professional/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please respond using professional, business-oriented language appropriate for formal workplace communication.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>industry</code>:</li> <li> <p>Format: Adapt the language and terminology to be appropriate for the {value} industry, using relevant terminology and frameworks where applicable.</p> </li> <li> <p><code>formality</code>:</p> </li> <li>When set to <code>standard</code>: Use standard professional business language that is clear, concise, and respectful without being overly formal.</li> <li>When set to <code>high</code>: Use a high level of formality with careful attention to precise language, proper business terminology, and structured communication.</li> <li>When set to <code>executive</code>: Use executive-level communication style with strategic framing, high-level insights, and language appropriate for senior leadership or board presentations.</li> </ul>"},{"location":"api/decorators/Professional/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: ELI5, Creative</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Professional/#related-decorators","title":"Related Decorators","text":"<ul> <li>ELI5: Conflicts with Professional Professional's formal business language directly conflicts with ELI5's simplified explanations</li> <li>Creative: Conflicts with Professional Professional's structured business approach conflicts with Creative's artistic expression</li> <li>Audience: Enhances Professional Professional works well with Audience to further refine the target business context</li> </ul>"},{"location":"api/decorators/PullRequest/","title":"PullRequest Decorator","text":"<p>Generates descriptive pull request templates and descriptions.</p> <p>Category: Developer Workflow</p>"},{"location":"api/decorators/PullRequest/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>detail</code> <code>enum</code> Description depth <code>standard</code> <code>sections</code> <code>enum</code> PR sections to include <code>all</code> <code>reviewers</code> <code>enum</code> Guidance for reviewers <code>focused</code>"},{"location":"api/decorators/PullRequest/#detail-options","title":"Detail Options","text":"<ul> <li><code>minimal</code>: Keep the description concise and focus only on essential information.</li> <li><code>standard</code>: Provide a balanced level of detail that covers the main aspects of the changes.</li> <li><code>comprehensive</code>: Create a detailed description that thoroughly explains all aspects of the changes.</li> </ul>"},{"location":"api/decorators/PullRequest/#sections-options","title":"Sections Options","text":"<ul> <li><code>summary</code>: Include only a summary section that briefly describes the changes.</li> <li><code>changes</code>: Include sections for summary and detailed changes made.</li> <li><code>testing</code>: Include sections for summary, changes, and testing information.</li> <li><code>screenshots</code>: Include sections for summary, changes, testing, and visual references/screenshots.</li> <li><code>dependencies</code>: Include sections for summary, changes, testing, and dependency information.</li> <li><code>all</code>: Include all standard PR sections: summary, changes made, testing information, visual references/screenshots if applicable, and dependency changes.</li> </ul>"},{"location":"api/decorators/PullRequest/#reviewers-options","title":"Reviewers Options","text":"<ul> <li><code>none</code>: Do not include specific guidance for reviewers.</li> <li><code>focused</code>: Include targeted guidance for reviewers, highlighting specific areas that need attention.</li> <li><code>detailed</code>: Include comprehensive guidance for reviewers with specific questions and areas to focus on.</li> </ul>"},{"location":"api/decorators/PullRequest/#examples","title":"Examples","text":""},{"location":"api/decorators/PullRequest/#comprehensive-pr-description-for-a-new-feature","title":"Comprehensive PR description for a new feature","text":"<pre><code>+++PullRequest(detail=comprehensive, sections=all, reviewers=detailed)\nCreate a pull request description for a feature that adds social login options to our authentication system.\n</code></pre> <p>Generates a detailed PR description with all sections and comprehensive reviewer guidance for a social login feature.</p>"},{"location":"api/decorators/PullRequest/#minimal-pr-description-focusing-on-changes-only","title":"Minimal PR description focusing on changes only","text":"<pre><code>+++PullRequest(detail=minimal, sections=changes, reviewers=none)\nCreate a pull request description for a bug fix in the payment processing system.\n</code></pre> <p>Generates a concise PR description focusing only on the changes made to fix the payment processing bug.</p>"},{"location":"api/decorators/PullRequest/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/PullRequest/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Create a pull request description with the following sections and level of detail:</p> <p>Notes: Simplified instruction for models with less context capacity.</p>"},{"location":"api/decorators/PullRequest/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/PullRequest/#web-development-project","title":"Web development project","text":"<p>Original Prompt: <pre><code>Create a pull request description for a feature that adds social login options to our authentication system.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Generate a pull request description with the following structure and content: Provide a balanced level of detail that covers the main aspects of the changes. Include all standard PR sections: summary, changes made, testing information, visual references/screenshots if applicable, and dependency changes. Include targeted guidance for reviewers, highlighting specific areas that need attention.\n\nCreate a pull request description for a feature that adds social login options to our authentication system.\n</code></pre></p> <p>Notes: The decorator prepends instructions for generating a structured PR description with standard detail, all sections, and focused reviewer guidance.</p>"},{"location":"api/decorators/PullRequest/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Generate a pull request description with the following structure and content:</p> <p>Placement: prepend</p> <p>Composition Behavior: override</p> <p>Parameter Effects:</p> <ul> <li><code>detail</code>:</li> <li>When set to <code>minimal</code>: Keep the description concise and focus only on essential information.</li> <li>When set to <code>standard</code>: Provide a balanced level of detail that covers the main aspects of the changes.</li> <li> <p>When set to <code>comprehensive</code>: Create a detailed description that thoroughly explains all aspects of the changes.</p> </li> <li> <p><code>sections</code>:</p> </li> <li>When set to <code>summary</code>: Include only a summary section that briefly describes the changes.</li> <li>When set to <code>changes</code>: Include sections for summary and detailed changes made.</li> <li>When set to <code>testing</code>: Include sections for summary, changes, and testing information.</li> <li>When set to <code>screenshots</code>: Include sections for summary, changes, testing, and visual references/screenshots.</li> <li>When set to <code>dependencies</code>: Include sections for summary, changes, testing, and dependency information.</li> <li> <p>When set to <code>all</code>: Include all standard PR sections: summary, changes made, testing information, visual references/screenshots if applicable, and dependency changes.</p> </li> <li> <p><code>reviewers</code>:</p> </li> <li>When set to <code>none</code>: Do not include specific guidance for reviewers.</li> <li>When set to <code>focused</code>: Include targeted guidance for reviewers, highlighting specific areas that need attention.</li> <li>When set to <code>detailed</code>: Include comprehensive guidance for reviewers with specific questions and areas to focus on.</li> </ul>"},{"location":"api/decorators/PullRequest/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 1.5.0</li> </ul>"},{"location":"api/decorators/PullRequest/#related-decorators","title":"Related Decorators","text":"<ul> <li>CodeReview: Enhances PullRequest PullRequest works well with CodeReview, as they address different aspects of the development workflow.</li> <li>TechnicalDocumentation: Enhances PullRequest Can be combined to generate both PR descriptions and related documentation.</li> </ul>"},{"location":"api/decorators/QualityMetrics/","title":"QualityMetrics Decorator","text":"<p>Applies specific quality measurements to evaluate content against defined criteria. This decorator enhances verification by providing quantifiable assessments of aspects like accuracy, completeness, clarity, or other custom metrics.</p> <p>Category: Verification</p>"},{"location":"api/decorators/QualityMetrics/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>metrics</code> <code>array</code> Specific quality metrics to measure (e.g., accuracy, completeness, clarity, usefulness) `` <code>scale</code> <code>enum</code> Rating scale to use for evaluations <code>1-5</code> <code>explanation</code> <code>boolean</code> Whether to provide detailed explanations for each metric score <code>True</code>"},{"location":"api/decorators/QualityMetrics/#scale-options","title":"Scale Options","text":"<ul> <li><code>1-5</code>: Use a 1-5 scale for your ratings, where 1 represents the lowest quality and 5 represents the highest quality.</li> <li><code>1-10</code>: Use a 1-10 scale for your ratings, where 1 represents the lowest quality and 10 represents the highest quality.</li> <li><code>percentage</code>: Express your ratings as percentages, ranging from 0% (lowest quality) to 100% (highest quality).</li> <li><code>qualitative</code>: Use qualitative ratings (poor, fair, good, excellent) rather than numerical scores.</li> </ul>"},{"location":"api/decorators/QualityMetrics/#examples","title":"Examples","text":""},{"location":"api/decorators/QualityMetrics/#basic-quality-assessment-of-an-analysis","title":"Basic quality assessment of an analysis","text":"<pre><code>+++QualityMetrics\nMy analysis of the financial market trends is as follows...\n</code></pre> <p>Provides the analysis of financial market trends, followed by 1-5 ratings across standard quality metrics with explanations for each score</p>"},{"location":"api/decorators/QualityMetrics/#specific-custom-metrics-with-detailed-qualitative-assessment","title":"Specific custom metrics with detailed qualitative assessment","text":"<pre><code>+++QualityMetrics(metrics=[factual accuracy,predictive value,consideration of alternatives,logical flow], scale=qualitative, explanation=true)\nHere's my policy proposal for urban housing...\n</code></pre> <p>Delivers the policy proposal, followed by qualitative assessments (poor/fair/good/excellent) of the four specified metrics, with detailed explanations for each evaluation</p>"},{"location":"api/decorators/QualityMetrics/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/QualityMetrics/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: After providing your main response on this topic, evaluate the quality of your own response. Rate it on these metrics: {metrics} using a {scale} scale. {explanation} Present this evaluation in a clear 'Quality Assessment' section at the end of your response. Be honest and critical in your self-assessment.</p> <p>Notes: This model may need explicit instructions to be sufficiently critical in its self-assessment rather than defaulting to consistently high ratings</p>"},{"location":"api/decorators/QualityMetrics/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/QualityMetrics/#financial-market-trend-analysis-with-standard-metrics","title":"Financial market trend analysis with standard metrics","text":"<p>Original Prompt: <pre><code>My analysis of the financial market trends is as follows...\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please include a quality assessment of your response using specific metrics. After presenting your main content, evaluate it against defined quality criteria with appropriate ratings and explanations where needed. Use a 1-5 scale for your ratings, where 1 represents the lowest quality and 5 represents the highest quality. For each metric, provide a detailed explanation that justifies the rating, citing specific aspects of the content.\n\nMy analysis of the financial market trends is as follows...\n</code></pre></p>"},{"location":"api/decorators/QualityMetrics/#urban-housing-policy-proposal-with-custom-qualitative-metrics","title":"Urban housing policy proposal with custom qualitative metrics","text":"<p>Original Prompt: <pre><code>Here's my policy proposal for urban housing...\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please include a quality assessment of your response using specific metrics. After presenting your main content, evaluate it against defined quality criteria with appropriate ratings and explanations where needed. Evaluate your response against these specific quality metrics: [factual accuracy,predictive value,consideration of alternatives,logical flow]. For each metric, provide a rating and assess how well the content meets that particular quality standard. Use qualitative ratings (poor, fair, good, excellent) rather than numerical scores. For each metric, provide a detailed explanation that justifies the rating, citing specific aspects of the content.\n\nHere's my policy proposal for urban housing...\n</code></pre></p>"},{"location":"api/decorators/QualityMetrics/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please include a quality assessment of your response using specific metrics. After presenting your main content, evaluate it against defined quality criteria with appropriate ratings and explanations where needed.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>metrics</code>:</li> <li> <p>Format: Evaluate your response against these specific quality metrics: {value}. For each metric, provide a rating and assess how well the content meets that particular quality standard.</p> </li> <li> <p><code>scale</code>:</p> </li> <li>When set to <code>1-5</code>: Use a 1-5 scale for your ratings, where 1 represents the lowest quality and 5 represents the highest quality.</li> <li>When set to <code>1-10</code>: Use a 1-10 scale for your ratings, where 1 represents the lowest quality and 10 represents the highest quality.</li> <li>When set to <code>percentage</code>: Express your ratings as percentages, ranging from 0% (lowest quality) to 100% (highest quality).</li> <li> <p>When set to <code>qualitative</code>: Use qualitative ratings (poor, fair, good, excellent) rather than numerical scores.</p> </li> <li> <p><code>explanation</code>:</p> </li> <li>When set to <code>true</code>: For each metric, provide a detailed explanation that justifies the rating, citing specific aspects of the content.</li> <li>When set to <code>false</code>: Provide ratings for each metric without detailed explanations.</li> </ul>"},{"location":"api/decorators/QualityMetrics/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/QualityMetrics/#related-decorators","title":"Related Decorators","text":"<ul> <li>PeerReview: Enhances QualityMetrics QualityMetrics provides structured quantitative assessment while PeerReview offers broader critique and improvement suggestions</li> <li>FactCheck: Enhances QualityMetrics FactCheck verifies specific claims while QualityMetrics assesses broader aspects including but not limited to factual accuracy</li> <li>Confidence: Enhances QualityMetrics Confidence indicates certainty in content while QualityMetrics evaluates multiple dimensions of quality</li> </ul>"},{"location":"api/decorators/Reasoning/","title":"Reasoning Decorator","text":"<p>Modifies the AI's response to provide explicit reasoning paths before reaching conclusions. This decorator encourages the model to show its thought process, making responses more transparent and trustworthy.</p> <p>Category: Minimal</p>"},{"location":"api/decorators/Reasoning/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>depth</code> <code>enum</code> The level of detail in the reasoning process <code>moderate</code>"},{"location":"api/decorators/Reasoning/#depth-options","title":"Depth Options","text":"<ul> <li><code>basic</code>: Focus on the most important logical steps.</li> <li><code>moderate</code>: Balance detail with clarity in your reasoning.</li> <li><code>comprehensive</code>: Provide a very thorough and detailed analysis with multiple perspectives.</li> </ul>"},{"location":"api/decorators/Reasoning/#examples","title":"Examples","text":""},{"location":"api/decorators/Reasoning/#basic-reasoning-for-a-simple-question","title":"Basic reasoning for a simple question","text":"<pre><code>+++Reasoning(depth=basic)\nWhat is the best programming language for beginners?\n</code></pre> <p>Provides a brief explanation of key factors before recommending a language</p>"},{"location":"api/decorators/Reasoning/#comprehensive-analysis-of-a-complex-topic","title":"Comprehensive analysis of a complex topic","text":"<pre><code>+++Reasoning(depth=comprehensive)\nWhat are the implications of quantum computing for cybersecurity?\n</code></pre> <p>Delivers an in-depth analysis covering multiple aspects and their interconnections</p>"},{"location":"api/decorators/Reasoning/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Reasoning/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Explain your reasoning step by step before giving your final answer. Show your thought process clearly.</p> <p>Notes: This model may require more explicit instructions to produce detailed reasoning</p>"},{"location":"api/decorators/Reasoning/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Reasoning/#standard-implementation","title":"Standard implementation","text":"<p>Original Prompt: <pre><code>What are the implications of artificial intelligence for education?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please provide detailed reasoning in your response. Show your thought process before reaching a conclusion. Provide a very thorough and detailed analysis with multiple perspectives.\n\nWhat are the implications of artificial intelligence for education?\n</code></pre></p>"},{"location":"api/decorators/Reasoning/#basic-depth-implementation","title":"Basic depth implementation","text":"<p>Original Prompt: <pre><code>How does compound interest work?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please provide detailed reasoning in your response. Show your thought process before reaching a conclusion. Focus on the most important logical steps.\n\nHow does compound interest work?\n</code></pre></p>"},{"location":"api/decorators/Reasoning/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please provide detailed reasoning in your response. Show your thought process before reaching a conclusion.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>depth</code>:</li> <li>When set to <code>basic</code>: Focus on the most important logical steps.</li> <li>When set to <code>moderate</code>: Balance detail with clarity in your reasoning.</li> <li>When set to <code>comprehensive</code>: Provide a very thorough and detailed analysis with multiple perspectives.</li> </ul>"},{"location":"api/decorators/Reasoning/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Reasoning/#related-decorators","title":"Related Decorators","text":"<ul> <li>Concise: Conflicts with Reasoning The objectives of comprehensive reasoning and concise responses may contradict each other</li> <li>StepByStep: Enhances Reasoning Combining these decorators produces structured reasoning with clear steps</li> </ul>"},{"location":"api/decorators/RedTeam/","title":"RedTeam Decorator","text":"<p>Applies adversarial analysis to test assumptions, identify vulnerabilities, and strengthen proposals by actively looking for flaws. This decorator simulates how an opponent or critic would evaluate and attack ideas, plans, or arguments.</p> <p>Category: Reasoning</p>"},{"location":"api/decorators/RedTeam/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>strength</code> <code>enum</code> How aggressive or challenging the red team analysis should be <code>moderate</code> <code>focus</code> <code>array</code> Specific aspects to focus the red team analysis on `` <code>constructive</code> <code>boolean</code> Whether to include constructive suggestions for improvement after critiques <code>True</code>"},{"location":"api/decorators/RedTeam/#strength-options","title":"Strength Options","text":"<ul> <li><code>moderate</code>: Apply a balanced adversarial analysis that identifies significant issues while maintaining a fair and reasonable perspective.</li> <li><code>aggressive</code>: Apply an intensely critical adversarial analysis that aggressively challenges all aspects of the content, including fundamental assumptions and approaches.</li> <li><code>steelman</code>: Apply the most sophisticated possible critique by first strengthening the argument to its best form, then finding its most substantive vulnerabilities.</li> </ul>"},{"location":"api/decorators/RedTeam/#examples","title":"Examples","text":""},{"location":"api/decorators/RedTeam/#basic-red-team-analysis-of-a-business-proposal","title":"Basic red team analysis of a business proposal","text":"<pre><code>+++RedTeam\nHere's our plan to launch a new subscription service...\n</code></pre> <p>Analyzes the subscription service plan from an adversarial perspective, identifying potential weaknesses, oversights, and challenges</p>"},{"location":"api/decorators/RedTeam/#aggressive-red-team-analysis-with-specific-focus-areas","title":"Aggressive red team analysis with specific focus areas","text":"<pre><code>+++RedTeam(strength=aggressive, focus=[security,scalability,market-fit], constructive=true)\nReview our new authentication system design.\n</code></pre> <p>Aggressively challenges the authentication system design, specifically targeting security, scalability, and market-fit concerns, followed by constructive improvement suggestions</p>"},{"location":"api/decorators/RedTeam/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/RedTeam/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Act as a {strength} critic examining this content. Look for all possible problems, weaknesses, and vulnerabilities. {focus} Challenge underlying assumptions. Think about what could go wrong, what's missing, and why this might fail. {constructive} Be thorough and consider multiple angles of attack.</p> <p>Notes: This model may need more explicit direction to maintain a consistently critical stance throughout the analysis</p>"},{"location":"api/decorators/RedTeam/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/RedTeam/#moderate-red-team-analysis-of-a-subscription-service-plan","title":"Moderate red team analysis of a subscription service plan","text":"<p>Original Prompt: <pre><code>Here's our plan to launch a new subscription service...\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please analyze the content from an adversarial perspective, actively looking for flaws, vulnerabilities, and weak points. Simulate how a critic or opponent would evaluate and challenge the ideas, plans, or arguments presented. Apply a balanced adversarial analysis that identifies significant issues while maintaining a fair and reasonable perspective. After identifying vulnerabilities and weaknesses, provide constructive suggestions for addressing each issue and strengthening the overall approach.\n\nHere's our plan to launch a new subscription service...\n</code></pre></p>"},{"location":"api/decorators/RedTeam/#aggressive-focused-red-team-analysis-of-an-authentication-system","title":"Aggressive focused red team analysis of an authentication system","text":"<p>Original Prompt: <pre><code>Review our new authentication system design.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please analyze the content from an adversarial perspective, actively looking for flaws, vulnerabilities, and weak points. Simulate how a critic or opponent would evaluate and challenge the ideas, plans, or arguments presented. Apply an intensely critical adversarial analysis that aggressively challenges all aspects of the content, including fundamental assumptions and approaches. Focus your adversarial analysis specifically on these aspects: [security,scalability,market-fit]. After identifying vulnerabilities and weaknesses, provide constructive suggestions for addressing each issue and strengthening the overall approach.\n\nReview our new authentication system design.\n</code></pre></p>"},{"location":"api/decorators/RedTeam/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please analyze the content from an adversarial perspective, actively looking for flaws, vulnerabilities, and weak points. Simulate how a critic or opponent would evaluate and challenge the ideas, plans, or arguments presented.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>strength</code>:</li> <li>When set to <code>moderate</code>: Apply a balanced adversarial analysis that identifies significant issues while maintaining a fair and reasonable perspective.</li> <li>When set to <code>aggressive</code>: Apply an intensely critical adversarial analysis that aggressively challenges all aspects of the content, including fundamental assumptions and approaches.</li> <li> <p>When set to <code>steelman</code>: Apply the most sophisticated possible critique by first strengthening the argument to its best form, then finding its most substantive vulnerabilities.</p> </li> <li> <p><code>focus</code>:</p> </li> <li> <p>Format: Focus your adversarial analysis specifically on these aspects: {value}.</p> </li> <li> <p><code>constructive</code>:</p> </li> <li>When set to <code>true</code>: After identifying vulnerabilities and weaknesses, provide constructive suggestions for addressing each issue and strengthening the overall approach.</li> <li>When set to <code>false</code>: Focus solely on identifying weaknesses and vulnerabilities without providing suggestions for improvement.</li> </ul>"},{"location":"api/decorators/RedTeam/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/RedTeam/#related-decorators","title":"Related Decorators","text":"<ul> <li>Limitations: Enhances RedTeam RedTeam and Limitations work together to identify both external challenges and inherent constraints</li> <li>Steelman: Enhances RedTeam When RedTeam is set to 'steelman' strength, it works particularly well with the Steelman decorator</li> <li>FindGaps: Enhances RedTeam FindGaps complements RedTeam by identifying missing elements while RedTeam challenges existing elements</li> </ul>"},{"location":"api/decorators/Refactor/","title":"Refactor Decorator","text":"<p>Improves existing code structure while preserving functionality.</p> <p>Category: Code Generation</p>"},{"location":"api/decorators/Refactor/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>goal</code> <code>enum</code> Primary objective of the refactoring <code>maintainability</code> <code>level</code> <code>enum</code> Extent of changes to make <code>moderate</code> <code>preserve</code> <code>enum</code> Aspects that must be preserved <code>both</code>"},{"location":"api/decorators/Refactor/#goal-options","title":"Goal Options","text":"<ul> <li><code>performance</code>: Refactor the code to optimize for performance. Look for inefficient algorithms, unnecessary computations, and opportunities for caching or parallelization.</li> <li><code>readability</code>: Refactor the code to improve readability. Focus on clear naming, consistent formatting, and logical organization of code elements.</li> <li><code>maintainability</code>: Refactor the code to enhance maintainability. Reduce complexity, improve modularity, and ensure the code follows best practices and design patterns.</li> <li><code>security</code>: Refactor the code to address security concerns. Identify and fix potential vulnerabilities, implement proper input validation, and follow security best practices.</li> <li><code>testability</code>: Refactor the code to improve testability. Make functions more modular, reduce dependencies, and ensure components can be tested in isolation.</li> </ul>"},{"location":"api/decorators/Refactor/#level-options","title":"Level Options","text":"<ul> <li><code>minor</code>: Make minimal changes to the code structure while addressing the main issues.</li> <li><code>moderate</code>: Perform a balanced refactoring that addresses key issues without completely rewriting the code.</li> <li><code>major</code>: Conduct a comprehensive refactoring that may involve significant restructuring of the code.</li> </ul>"},{"location":"api/decorators/Refactor/#preserve-options","title":"Preserve Options","text":"<ul> <li><code>api</code>: Ensure the public API (function signatures, return values, etc.) remains unchanged during refactoring.</li> <li><code>behavior</code>: Maintain the exact same behavior and output for all inputs, even if the API changes.</li> <li><code>both</code>: Preserve both the API and behavior of the code during refactoring.</li> </ul>"},{"location":"api/decorators/Refactor/#examples","title":"Examples","text":""},{"location":"api/decorators/Refactor/#refactoring-for-performance-with-moderate-changes","title":"Refactoring for performance with moderate changes","text":"<pre><code>+++Refactor(goal=performance, level=moderate)\nRefactor this database query function that's causing performance issues.\n</code></pre> <p>The model will refactor the code focusing on performance optimizations while making moderate changes to the structure.</p>"},{"location":"api/decorators/Refactor/#improving-code-readability-while-preserving-api","title":"Improving code readability while preserving API","text":"<pre><code>+++Refactor(goal=readability, preserve=api)\nCan you refactor this legacy code to make it more readable?\n</code></pre> <p>The model will focus on improving naming, formatting, and organization while ensuring the function signatures remain unchanged.</p>"},{"location":"api/decorators/Refactor/#major-security-refactoring","title":"Major security refactoring","text":"<pre><code>+++Refactor(goal=security, level=major)\nThis authentication code has security issues. Please refactor it.\n</code></pre> <p>The model will perform extensive refactoring to address security vulnerabilities while maintaining the code's core functionality.</p>"},{"location":"api/decorators/Refactor/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Refactor/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Refactor this code to improve its {goal} while making {level} changes and preserving {preserve}. Don't rewrite it completely - focus on structural improvements.</p> <p>Notes: More explicit instructions help gpt-4 maintain the refactoring constraints.</p>"},{"location":"api/decorators/Refactor/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Refactor/#python-function-refactoring","title":"Python function refactoring","text":"<p>Original Prompt: <pre><code>Can you help me improve this function?\n\ndef get_user_data(id):\n  data = db.query(\"SELECT * FROM users WHERE id = \" + id)\n  return data\n</code></pre></p> <p>Transformed Prompt: <pre><code>Refactor the provided code to improve its structure while preserving its functionality. Focus on making the code more maintainable. Perform a balanced refactoring that addresses key issues without completely rewriting the code. Preserve both the API and behavior of the code during refactoring.\n\nCan you help me improve this function?\n\ndef get_user_data(id):\n  data = db.query(\"SELECT * FROM users WHERE id = \" + id)\n  return data\n</code></pre></p> <p>Notes: The refactoring should address the SQL injection vulnerability while maintaining the function signature and behavior.</p>"},{"location":"api/decorators/Refactor/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Refactor the provided code to improve its structure while preserving its functionality. Focus on making the code more maintainable.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>goal</code>:</li> <li>When set to <code>performance</code>: Refactor the code to optimize for performance. Look for inefficient algorithms, unnecessary computations, and opportunities for caching or parallelization.</li> <li>When set to <code>readability</code>: Refactor the code to improve readability. Focus on clear naming, consistent formatting, and logical organization of code elements.</li> <li>When set to <code>maintainability</code>: Refactor the code to enhance maintainability. Reduce complexity, improve modularity, and ensure the code follows best practices and design patterns.</li> <li>When set to <code>security</code>: Refactor the code to address security concerns. Identify and fix potential vulnerabilities, implement proper input validation, and follow security best practices.</li> <li> <p>When set to <code>testability</code>: Refactor the code to improve testability. Make functions more modular, reduce dependencies, and ensure components can be tested in isolation.</p> </li> <li> <p><code>level</code>:</p> </li> <li>When set to <code>minor</code>: Make minimal changes to the code structure while addressing the main issues.</li> <li>When set to <code>moderate</code>: Perform a balanced refactoring that addresses key issues without completely rewriting the code.</li> <li> <p>When set to <code>major</code>: Conduct a comprehensive refactoring that may involve significant restructuring of the code.</p> </li> <li> <p><code>preserve</code>:</p> </li> <li>When set to <code>api</code>: Ensure the public API (function signatures, return values, etc.) remains unchanged during refactoring.</li> <li>When set to <code>behavior</code>: Maintain the exact same behavior and output for all inputs, even if the API changes.</li> <li>When set to <code>both</code>: Preserve both the API and behavior of the code during refactoring.</li> </ul>"},{"location":"api/decorators/Refactor/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: Rewrite, GenerateFromScratch</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, llama-3.2</li> <li>Minimum Standard Version: 1.0.0</li> </ul>"},{"location":"api/decorators/Refactor/#related-decorators","title":"Related Decorators","text":"<ul> <li>CodeReview: Enhances Refactor CodeReview can be used before Refactor to identify issues that need to be addressed.</li> <li>Rewrite: Conflicts with Refactor Rewrite typically creates new code from scratch, while Refactor preserves existing structure and functionality.</li> </ul>"},{"location":"api/decorators/Refine/","title":"Refine Decorator","text":"<p>A meta-decorator that iteratively improves the output based on specified criteria or dimensions. This decorator simulates multiple drafts or revisions of content, with each iteration focusing on enhancing particular aspects of the response.</p> <p>Category: Meta</p>"},{"location":"api/decorators/Refine/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>iterations</code> <code>number</code> Number of refinement cycles to perform <code>2</code> <code>focus</code> <code>array</code> Specific aspects to focus on during refinement (e.g., clarity, conciseness, evidence) `` <code>showProcess</code> <code>boolean</code> Whether to show the intermediate steps in the refinement process <code>False</code>"},{"location":"api/decorators/Refine/#examples","title":"Examples","text":""},{"location":"api/decorators/Refine/#basic-refinement-of-a-complex-explanation","title":"Basic refinement of a complex explanation","text":"<pre><code>+++Refine\nExplain the implications of quantum computing for cybersecurity.\n</code></pre> <p>Provides a refined explanation of quantum computing implications for cybersecurity, with two hidden iterations improving clarity and accuracy</p>"},{"location":"api/decorators/Refine/#detailed-refinement-with-visible-iterations","title":"Detailed refinement with visible iterations","text":"<pre><code>+++Refine(iterations=3, focus=[clarity,evidence,conciseness], showProcess=true)\nAnalyze the economic impacts of artificial intelligence.\n</code></pre> <p>Shows three visible iterations of analyzing AI economic impacts, with each step focusing on improving clarity, strengthening evidence, and enhancing conciseness</p>"},{"location":"api/decorators/Refine/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Refine/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: For this response, you will create multiple drafts, with each draft improving on the previous one. Think carefully about how to enhance each version.</p> <p>Notes: This model may require more explicit instructions about the refinement process</p>"},{"location":"api/decorators/Refine/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Refine/#standard-implementation-with-two-iterations","title":"Standard implementation with two iterations","text":"<p>Original Prompt: <pre><code>Explain the implications of quantum computing for cybersecurity.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please apply an iterative refinement process to your response, with each iteration improving upon the previous version. Perform 2 refinement iterations to improve your response. Only provide the final refined response without showing the intermediate steps.\n\nExplain the implications of quantum computing for cybersecurity.\n</code></pre></p>"},{"location":"api/decorators/Refine/#comprehensive-refinement-with-visible-process","title":"Comprehensive refinement with visible process","text":"<p>Original Prompt: <pre><code>Analyze the economic impacts of artificial intelligence.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please apply an iterative refinement process to your response, with each iteration improving upon the previous version. Perform 3 refinement iterations to improve your response. Focus your refinements on improving these specific aspects: clarity,evidence,conciseness. Show each iteration separately in your response, labeling them as 'Draft 1', 'Draft 2', etc., to demonstrate the refinement process.\n\nAnalyze the economic impacts of artificial intelligence.\n</code></pre></p>"},{"location":"api/decorators/Refine/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please apply an iterative refinement process to your response, with each iteration improving upon the previous version.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>iterations</code>:</li> <li> <p>Format: Perform {value} refinement iterations to improve your response.</p> </li> <li> <p><code>focus</code>:</p> </li> <li> <p>Format: Focus your refinements on improving these specific aspects: {value}.</p> </li> <li> <p><code>showProcess</code>:</p> </li> <li>When set to <code>true</code>: Show each iteration separately in your response, labeling them as 'Draft 1', 'Draft 2', etc., to demonstrate the refinement process.</li> <li>When set to <code>false</code>: Only provide the final refined response without showing the intermediate steps.</li> </ul>"},{"location":"api/decorators/Refine/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Refine/#related-decorators","title":"Related Decorators","text":"<ul> <li>StepByStep: Enhances Refine Refine can improve a StepByStep response by making each step clearer and more precise</li> <li>Chain: Conflicts with Refine Chain and Refine both control multi-step processing and may conflict</li> </ul>"},{"location":"api/decorators/ReleaseNotes/","title":"ReleaseNotes Decorator","text":"<p>Creates structured release notes for product updates.</p> <p>Category: Developer Workflow</p>"},{"location":"api/decorators/ReleaseNotes/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>audience</code> <code>enum</code> Target reader <code>users</code> <code>detail</code> <code>enum</code> Information depth <code>detailed</code> <code>format</code> <code>enum</code> Release note structure <code>categorized</code>"},{"location":"api/decorators/ReleaseNotes/#audience-options","title":"Audience Options","text":"<ul> <li><code>users</code>: Target the release notes for end users, focusing on benefits and user-facing changes.</li> <li><code>developers</code>: Target the release notes for developers, including technical details and API changes.</li> <li><code>stakeholders</code>: Target the release notes for business stakeholders, emphasizing business impact and strategic value.</li> <li><code>public</code>: Target the release notes for public consumption, balancing technical details with accessible language.</li> </ul>"},{"location":"api/decorators/ReleaseNotes/#detail-options","title":"Detail Options","text":"<ul> <li><code>high-level</code>: Provide a concise overview of major changes without extensive details.</li> <li><code>detailed</code>: Include comprehensive details about all changes, including minor improvements and fixes.</li> </ul>"},{"location":"api/decorators/ReleaseNotes/#format-options","title":"Format Options","text":"<ul> <li><code>changelog</code>: Structure as a traditional changelog with version numbers and dated entries.</li> <li><code>narrative</code>: Present as a narrative story highlighting the evolution and improvements.</li> <li><code>categorized</code>: Organize changes into categories (Features, Improvements, Fixes, etc.).</li> <li><code>markdown</code>: Format using Markdown syntax for easy integration with documentation systems.</li> <li><code>html</code>: Format using HTML for web publication with appropriate tags and structure.</li> </ul>"},{"location":"api/decorators/ReleaseNotes/#examples","title":"Examples","text":""},{"location":"api/decorators/ReleaseNotes/#creating-detailed-release-notes-for-users-in-markdown-format","title":"Creating detailed release notes for users in markdown format","text":"<pre><code>+++ReleaseNotes(audience=users, detail=detailed, format=markdown)\nCreate release notes for version 2.3.0 which includes new payment methods, performance improvements, and bug fixes.\n</code></pre> <p>Produces comprehensive, user-focused release notes in markdown format, categorizing the new payment methods, performance improvements, and bug fixes.</p>"},{"location":"api/decorators/ReleaseNotes/#high-level-release-notes-for-stakeholders","title":"High-level release notes for stakeholders","text":"<pre><code>+++ReleaseNotes(audience=stakeholders, detail=high-level, format=narrative)\nCreate release notes for our quarterly update with revenue impact features.\n</code></pre> <p>Generates concise, business-focused release notes in a narrative style, emphasizing strategic value and business impact.</p>"},{"location":"api/decorators/ReleaseNotes/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/ReleaseNotes/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Generate structured release notes for this product update. Organize information clearly for the specified audience.</p> <p>Notes: Simpler instruction for models with less context capacity.</p>"},{"location":"api/decorators/ReleaseNotes/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/ReleaseNotes/#software-product-update","title":"Software product update","text":"<p>Original Prompt: <pre><code>Create release notes for version 2.3.0 which includes new payment methods, performance improvements, and bug fixes.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Create structured release notes for the product update. Focus on clarity and organization. Target the release notes for end users, focusing on benefits and user-facing changes. Include comprehensive details about all changes, including minor improvements and fixes. Organize changes into categories (Features, Improvements, Fixes, etc.).\n\nCreate release notes for version 2.3.0 which includes new payment methods, performance improvements, and bug fixes.\n</code></pre></p> <p>Notes: The decorator adds structure and guidance for creating professional release notes tailored to the specified audience and format.</p>"},{"location":"api/decorators/ReleaseNotes/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Create structured release notes for the product update. Focus on clarity and organization.</p> <p>Placement: prepend</p> <p>Composition Behavior: override</p> <p>Parameter Effects:</p> <ul> <li><code>audience</code>:</li> <li>When set to <code>users</code>: Target the release notes for end users, focusing on benefits and user-facing changes.</li> <li>When set to <code>developers</code>: Target the release notes for developers, including technical details and API changes.</li> <li>When set to <code>stakeholders</code>: Target the release notes for business stakeholders, emphasizing business impact and strategic value.</li> <li> <p>When set to <code>public</code>: Target the release notes for public consumption, balancing technical details with accessible language.</p> </li> <li> <p><code>detail</code>:</p> </li> <li>When set to <code>high-level</code>: Provide a concise overview of major changes without extensive details.</li> <li> <p>When set to <code>detailed</code>: Include comprehensive details about all changes, including minor improvements and fixes.</p> </li> <li> <p><code>format</code>:</p> </li> <li>When set to <code>changelog</code>: Structure as a traditional changelog with version numbers and dated entries.</li> <li>When set to <code>narrative</code>: Present as a narrative story highlighting the evolution and improvements.</li> <li>When set to <code>categorized</code>: Organize changes into categories (Features, Improvements, Fixes, etc.).</li> <li>When set to <code>markdown</code>: Format using Markdown syntax for easy integration with documentation systems.</li> <li>When set to <code>html</code>: Format using HTML for web publication with appropriate tags and structure.</li> </ul>"},{"location":"api/decorators/ReleaseNotes/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: Summarize</li> <li>Compatible Models: gpt-4o, gpt-4-turbo, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/ReleaseNotes/#related-decorators","title":"Related Decorators","text":"<ul> <li>TechnicalWriting: Enhances ReleaseNotes TechnicalWriting can enhance the clarity and professionalism of the release notes.</li> <li>Summarize: Conflicts with ReleaseNotes Summarize may contradict the detailed nature of release notes, especially when detail=detailed.</li> </ul>"},{"location":"api/decorators/Remix/","title":"Remix Decorator","text":"<p>Reframes or adapts content for a different context, purpose, or audience than originally intended. This decorator transforms the presentation style while preserving core information, making it accessible and relevant to specific scenarios or demographics.</p> <p>Category: Tone</p>"},{"location":"api/decorators/Remix/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>target</code> <code>string</code> The specific audience or context to adapt the content for (e.g., 'executives', 'teenagers', 'technical team', 'sales pitch') <code>Required</code> <code>preserve</code> <code>enum</code> What aspects of the original content to prioritize preserving <code>facts</code> <code>contrast</code> <code>boolean</code> Whether to highlight differences between the original framing and the remixed version <code>False</code>"},{"location":"api/decorators/Remix/#preserve-options","title":"Preserve Options","text":"<ul> <li><code>facts</code>: Prioritize preserving the accurate factual content while allowing flexibility in presentation style, structure, and level of detail.</li> <li><code>structure</code>: Maintain the original organizational structure and flow of ideas while adapting language, examples, and level of detail.</li> <li><code>tone</code>: Keep the original tone and voice consistent while adapting other elements like vocabulary, examples, and level of detail.</li> <li><code>comprehensiveness</code>: Ensure all key points and details from the original content are included, even while completely adapting the presentation style.</li> </ul>"},{"location":"api/decorators/Remix/#examples","title":"Examples","text":""},{"location":"api/decorators/Remix/#basic-remix-for-a-different-audience","title":"Basic remix for a different audience","text":"<pre><code>+++Remix(target=high school students)\nExplain how neural networks function in artificial intelligence.\n</code></pre> <p>Reframes the technical explanation of neural networks to be accessible and engaging for high school students while preserving the core facts</p>"},{"location":"api/decorators/Remix/#business-remix-with-contrasting-approach","title":"Business remix with contrasting approach","text":"<pre><code>+++Remix(target=board presentation, preserve=comprehensiveness, contrast=true)\nDescribe the technical details of our new software architecture.\n</code></pre> <p>Transforms the technical software architecture description into a board-appropriate presentation format, maintaining comprehensive coverage while highlighting how this differs from a technical explanation</p>"},{"location":"api/decorators/Remix/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Remix/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Reimagine this content specifically for {target}. Think about: 1) What this audience already knows, 2) What they care about most, 3) What vocabulary and examples will resonate with them, and 4) How to structure the information for maximum impact. Make sure to {preserve} above all else. {contrast} Use terminology, examples, and a communication style that would feel natural and engaging to this specific audience.</p> <p>Notes: This model may need explicit reminders to maintain the core information while significantly transforming the presentation style</p>"},{"location":"api/decorators/Remix/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Remix/#neural-networks-explanation-for-high-school-students","title":"Neural networks explanation for high school students","text":"<p>Original Prompt: <pre><code>Explain how neural networks function in artificial intelligence.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please reframe or adapt this content for a different audience or context than might normally be expected. Transform the presentation style while preserving core information to make it relevant to the specified target audience. Adapt this content specifically for high school students. Consider the background, needs, interests, and communication preferences of this audience when reframing the material. Prioritize preserving the accurate factual content while allowing flexibility in presentation style, structure, and level of detail. Focus solely on the adapted version without explicitly comparing it to how the content might be presented in other contexts.\n\nExplain how neural networks function in artificial intelligence.\n</code></pre></p>"},{"location":"api/decorators/Remix/#technical-software-architecture-for-board-presentation","title":"Technical software architecture for board presentation","text":"<p>Original Prompt: <pre><code>Describe the technical details of our new software architecture.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please reframe or adapt this content for a different audience or context than might normally be expected. Transform the presentation style while preserving core information to make it relevant to the specified target audience. Adapt this content specifically for board presentation. Consider the background, needs, interests, and communication preferences of this audience when reframing the material. Ensure all key points and details from the original content are included, even while completely adapting the presentation style. Include an explicit comparison highlighting key differences between how this content would typically be presented versus how it's being adapted for the target audience.\n\nDescribe the technical details of our new software architecture.\n</code></pre></p>"},{"location":"api/decorators/Remix/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please reframe or adapt this content for a different audience or context than might normally be expected. Transform the presentation style while preserving core information to make it relevant to the specified target audience.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>target</code>:</li> <li> <p>Format: Adapt this content specifically for {value}. Consider the background, needs, interests, and communication preferences of this audience when reframing the material.</p> </li> <li> <p><code>preserve</code>:</p> </li> <li>When set to <code>facts</code>: Prioritize preserving the accurate factual content while allowing flexibility in presentation style, structure, and level of detail.</li> <li>When set to <code>structure</code>: Maintain the original organizational structure and flow of ideas while adapting language, examples, and level of detail.</li> <li>When set to <code>tone</code>: Keep the original tone and voice consistent while adapting other elements like vocabulary, examples, and level of detail.</li> <li> <p>When set to <code>comprehensiveness</code>: Ensure all key points and details from the original content are included, even while completely adapting the presentation style.</p> </li> <li> <p><code>contrast</code>:</p> </li> <li>When set to <code>true</code>: Include an explicit comparison highlighting key differences between how this content would typically be presented versus how it's being adapted for the target audience.</li> <li>When set to <code>false</code>: Focus solely on the adapted version without explicitly comparing it to how the content might be presented in other contexts.</li> </ul>"},{"location":"api/decorators/Remix/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Remix/#related-decorators","title":"Related Decorators","text":"<ul> <li>Audience: Enhances Remix Remix provides more transformative adaptation than Audience alone, reframing content rather than just adjusting to audience expertise level</li> <li>ELI5: Enhances Remix Remix can target specific audiences beyond simplification, while ELI5 focuses exclusively on making content extremely simple</li> <li>StyleShift: Enhances Remix StyleShift modifies specific style aspects, while Remix performs comprehensive reframing for different contexts</li> </ul>"},{"location":"api/decorators/Reproduce/","title":"Reproduce Decorator","text":"<p>Creates detailed steps to reproduce a reported issue.</p> <p>Category: Testing And Debugging</p>"},{"location":"api/decorators/Reproduce/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>environment</code> <code>enum</code> Target environment for reproduction <code>local</code> <code>detail</code> <code>enum</code> Level of detail in steps <code>comprehensive</code> <code>format</code> <code>enum</code> Output format <code>steps</code>"},{"location":"api/decorators/Reproduce/#environment-options","title":"Environment Options","text":"<ul> <li><code>local</code>: Provide reproduction steps for a local development environment.</li> <li><code>staging</code>: Provide reproduction steps specifically for a staging environment.</li> <li><code>prod</code>: Provide reproduction steps that can be safely executed in a production environment.</li> <li><code>docker</code>: Provide reproduction steps using Docker containers.</li> <li><code>specific-version</code>: Provide reproduction steps for a specific software version, noting version dependencies.</li> </ul>"},{"location":"api/decorators/Reproduce/#detail-options","title":"Detail Options","text":"<ul> <li><code>minimal</code>: Provide only the essential steps needed to reproduce the issue.</li> <li><code>comprehensive</code>: Provide detailed steps including setup, execution, and verification of the issue.</li> <li><code>debug-oriented</code>: Provide extremely detailed steps with debugging information, logging points, and state verification throughout the process.</li> </ul>"},{"location":"api/decorators/Reproduce/#format-options","title":"Format Options","text":"<ul> <li><code>steps</code>: Format the reproduction as numbered steps with clear instructions.</li> <li><code>script</code>: Format the reproduction as a script that can be executed to reproduce the issue.</li> <li><code>docker-compose</code>: Format the reproduction as a docker-compose configuration and associated commands.</li> <li><code>video-script</code>: Format the reproduction as a script for creating a demonstration video, including visual cues and narration points.</li> </ul>"},{"location":"api/decorators/Reproduce/#examples","title":"Examples","text":""},{"location":"api/decorators/Reproduce/#creating-docker-based-reproduction-steps-for-a-race-condition","title":"Creating Docker-based reproduction steps for a race condition","text":"<pre><code>+++Reproduce(environment=docker, detail=comprehensive, format=script)\nCreate reproduction steps for a race condition we're seeing in our payment processing service.\n</code></pre> <p>A comprehensive script that can be executed to reproduce the race condition in a Docker environment, including setup, execution steps, and verification points.</p>"},{"location":"api/decorators/Reproduce/#minimal-reproduction-steps-for-a-ui-bug","title":"Minimal reproduction steps for a UI bug","text":"<pre><code>+++Reproduce(detail=minimal)\nCreate steps to reproduce the dropdown menu disappearing in our admin panel.\n</code></pre> <p>A concise list of essential steps needed to observe the dropdown menu bug in a local environment.</p>"},{"location":"api/decorators/Reproduce/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Reproduce/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Create clear, step-by-step instructions to reproduce the reported issue. Be specific about environment setup, actions to take, and expected results.</p> <p>Notes: Simpler instruction for models with less context capacity.</p>"},{"location":"api/decorators/Reproduce/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Reproduce/#bug-reproduction-for-web-application","title":"Bug reproduction for web application","text":"<p>Original Prompt: <pre><code>Create reproduction steps for a race condition we're seeing in our payment processing service.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Create detailed steps to reproduce the reported issue. Focus on clarity and completeness so that someone else can follow these steps to observe the same behavior. Provide reproduction steps using Docker containers. Provide detailed steps including setup, execution, and verification of the issue. Format the reproduction as a script that can be executed to reproduce the issue.\n\nCreate reproduction steps for a race condition we're seeing in our payment processing service.\n</code></pre></p> <p>Notes: The decorator adds specific instructions about environment (Docker), detail level (comprehensive), and format (script) to guide the reproduction creation.</p>"},{"location":"api/decorators/Reproduce/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Create detailed steps to reproduce the reported issue. Focus on clarity and completeness so that someone else can follow these steps to observe the same behavior.</p> <p>Placement: prepend</p> <p>Composition Behavior: override</p> <p>Parameter Effects:</p> <ul> <li><code>environment</code>:</li> <li>When set to <code>local</code>: Provide reproduction steps for a local development environment.</li> <li>When set to <code>staging</code>: Provide reproduction steps specifically for a staging environment.</li> <li>When set to <code>prod</code>: Provide reproduction steps that can be safely executed in a production environment.</li> <li>When set to <code>docker</code>: Provide reproduction steps using Docker containers.</li> <li> <p>When set to <code>specific-version</code>: Provide reproduction steps for a specific software version, noting version dependencies.</p> </li> <li> <p><code>detail</code>:</p> </li> <li>When set to <code>minimal</code>: Provide only the essential steps needed to reproduce the issue.</li> <li>When set to <code>comprehensive</code>: Provide detailed steps including setup, execution, and verification of the issue.</li> <li> <p>When set to <code>debug-oriented</code>: Provide extremely detailed steps with debugging information, logging points, and state verification throughout the process.</p> </li> <li> <p><code>format</code>:</p> </li> <li>When set to <code>steps</code>: Format the reproduction as numbered steps with clear instructions.</li> <li>When set to <code>script</code>: Format the reproduction as a script that can be executed to reproduce the issue.</li> <li>When set to <code>docker-compose</code>: Format the reproduction as a docker-compose configuration and associated commands.</li> <li>When set to <code>video-script</code>: Format the reproduction as a script for creating a demonstration video, including visual cues and narration points.</li> </ul>"},{"location":"api/decorators/Reproduce/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: Summarize, Condense</li> <li>Compatible Models: gpt-4o, gpt-4-turbo, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Reproduce/#related-decorators","title":"Related Decorators","text":"<ul> <li>Debug: Enhances Reproduce The Debug decorator can enhance Reproduce by adding specific debugging techniques to the reproduction steps.</li> <li>Summarize: Conflicts with Reproduce The Summarize decorator conflicts with Reproduce as it would condense the detailed steps needed for proper reproduction.</li> </ul>"},{"location":"api/decorators/Roadmap/","title":"Roadmap Decorator","text":"<p>Plans development timelines and feature sequencing.</p> <p>Category: Developer Workflow</p>"},{"location":"api/decorators/Roadmap/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>timeframe</code> <code>enum</code> Planning horizon <code>quarter</code> <code>focus</code> <code>enum</code> Roadmap emphasis <code>balanced</code> <code>detail</code> <code>enum</code> Depth of planning <code>milestones</code>"},{"location":"api/decorators/Roadmap/#timeframe-options","title":"Timeframe Options","text":"<ul> <li><code>sprint</code>: Plan for a 2-4 week sprint cycle.</li> <li><code>quarter</code>: Plan for a 3-month quarterly timeline.</li> <li><code>halfyear</code>: Plan for a 6-month timeline.</li> <li><code>year</code>: Plan for a 12-month annual timeline.</li> </ul>"},{"location":"api/decorators/Roadmap/#focus-options","title":"Focus Options","text":"<ul> <li><code>features</code>: Prioritize new feature development and enhancements.</li> <li><code>technical-debt</code>: Focus on addressing technical debt and code quality improvements.</li> <li><code>security</code>: Emphasize security improvements and vulnerability remediation.</li> <li><code>performance</code>: Concentrate on performance optimizations and efficiency gains.</li> <li><code>balanced</code>: Maintain a balanced approach across features, maintenance, security, and performance.</li> </ul>"},{"location":"api/decorators/Roadmap/#detail-options","title":"Detail Options","text":"<ul> <li><code>high-level</code>: Provide high-level objectives and general direction.</li> <li><code>milestones</code>: Include key milestones and deliverables with approximate timelines.</li> <li><code>detailed</code>: Create a detailed plan with specific tasks, dependencies, and precise timelines.</li> </ul>"},{"location":"api/decorators/Roadmap/#examples","title":"Examples","text":""},{"location":"api/decorators/Roadmap/#quarterly-feature-focused-roadmap-with-milestone-planning","title":"Quarterly feature-focused roadmap with milestone planning","text":"<pre><code>+++Roadmap(timeframe=quarter, focus=features, detail=milestones)\nCreate a product roadmap for our e-commerce platform focusing on enhancing the checkout experience.\n</code></pre> <p>A 3-month roadmap with feature development emphasis and key milestones for improving an e-commerce checkout experience.</p>"},{"location":"api/decorators/Roadmap/#sprint-level-technical-debt-planning","title":"Sprint-level technical debt planning","text":"<pre><code>+++Roadmap(timeframe=sprint, focus=technical-debt, detail=detailed)\nDevelop a plan to address our authentication service's code quality issues.\n</code></pre> <p>A detailed 2-4 week sprint plan focusing specifically on technical debt remediation for the authentication service.</p>"},{"location":"api/decorators/Roadmap/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Roadmap/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Create a development roadmap with clear timelines and priorities as specified below:</p> <p>Notes: Simplified instruction for models with less context handling capability.</p>"},{"location":"api/decorators/Roadmap/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Roadmap/#software-development-planning","title":"Software development planning","text":"<p>Original Prompt: <pre><code>Create a product roadmap for our e-commerce platform focusing on enhancing the checkout experience.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Create a development roadmap with the following specifications:\nPlan for a 3-month quarterly timeline.\nPrioritize new feature development and enhancements.\nInclude key milestones and deliverables with approximate timelines.\n\nCreate a product roadmap for our e-commerce platform focusing on enhancing the checkout experience.\n</code></pre></p> <p>Notes: The decorator adds specific planning parameters to guide the roadmap creation process.</p>"},{"location":"api/decorators/Roadmap/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Create a development roadmap with the following specifications:</p> <p>Placement: prepend</p> <p>Composition Behavior: override</p> <p>Parameter Effects:</p> <ul> <li><code>timeframe</code>:</li> <li>When set to <code>sprint</code>: Plan for a 2-4 week sprint cycle.</li> <li>When set to <code>quarter</code>: Plan for a 3-month quarterly timeline.</li> <li>When set to <code>halfyear</code>: Plan for a 6-month timeline.</li> <li> <p>When set to <code>year</code>: Plan for a 12-month annual timeline.</p> </li> <li> <p><code>focus</code>:</p> </li> <li>When set to <code>features</code>: Prioritize new feature development and enhancements.</li> <li>When set to <code>technical-debt</code>: Focus on addressing technical debt and code quality improvements.</li> <li>When set to <code>security</code>: Emphasize security improvements and vulnerability remediation.</li> <li>When set to <code>performance</code>: Concentrate on performance optimizations and efficiency gains.</li> <li> <p>When set to <code>balanced</code>: Maintain a balanced approach across features, maintenance, security, and performance.</p> </li> <li> <p><code>detail</code>:</p> </li> <li>When set to <code>high-level</code>: Provide high-level objectives and general direction.</li> <li>When set to <code>milestones</code>: Include key milestones and deliverables with approximate timelines.</li> <li>When set to <code>detailed</code>: Create a detailed plan with specific tasks, dependencies, and precise timelines.</li> </ul>"},{"location":"api/decorators/Roadmap/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: QuickSolution, Brainstorm</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, gemini-pro</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Roadmap/#related-decorators","title":"Related Decorators","text":"<ul> <li>ProjectManagement: Enhances Roadmap Roadmap works well with ProjectManagement decorator to create more comprehensive project plans.</li> <li>QuickSolution: Conflicts with Roadmap Roadmap is focused on structured planning which conflicts with quick, immediate solutions.</li> </ul>"},{"location":"api/decorators/RootCause/","title":"RootCause Decorator","text":"<p>Structures the response to systematically analyze underlying causes of problems or situations. This decorator applies formal root cause analysis methodologies to identify fundamental factors rather than just symptoms or immediate causes.</p> <p>Category: Reasoning</p>"},{"location":"api/decorators/RootCause/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>method</code> <code>enum</code> The specific root cause analysis methodology to apply <code>fivewhys</code> <code>depth</code> <code>number</code> Level of detail in the analysis (for fivewhys, represents number of 'why' iterations) <code>5</code>"},{"location":"api/decorators/RootCause/#method-options","title":"Method Options","text":"<ul> <li><code>fivewhys</code>: Use the '5 Whys' technique by repeatedly asking why to drill down to the root cause(s). For each identified factor, ask 'why' to go deeper until reaching fundamental causes.</li> <li><code>fishbone</code>: Apply the Fishbone (Ishikawa) diagram approach by categorizing potential causes into major categories (e.g., People, Process, Equipment, Environment, Management, Materials) and analyzing each systematically.</li> <li><code>pareto</code>: Use the Pareto principle (80/20 rule) to identify and focus on the vital few causes that likely contribute to most of the problem, prioritizing them by impact.</li> </ul>"},{"location":"api/decorators/RootCause/#examples","title":"Examples","text":""},{"location":"api/decorators/RootCause/#basic-5-whys-analysis-of-a-business-problem","title":"Basic 5 Whys analysis of a business problem","text":"<pre><code>+++RootCause\nWhy is our website's bounce rate increasing?\n</code></pre> <p>Performs a systematic 5 Whys analysis to trace the increasing bounce rate back to its fundamental causes</p>"},{"location":"api/decorators/RootCause/#fishbone-diagram-approach-to-a-technical-issue","title":"Fishbone diagram approach to a technical issue","text":"<pre><code>+++RootCause(method=fishbone)\nWhy do our application servers crash under moderate load?\n</code></pre> <p>Analyzes the server crashes using the fishbone (Ishikawa) methodology, categorizing potential causes into major categories like People, Process, Equipment, etc.</p>"},{"location":"api/decorators/RootCause/#pareto-analysis-with-deeper-investigation","title":"Pareto analysis with deeper investigation","text":"<pre><code>+++RootCause(method=pareto, depth=7)\nWhat factors are causing our manufacturing defects?\n</code></pre> <p>Uses Pareto principle to identify the vital few causes responsible for most manufacturing defects, with an exceptionally thorough analysis</p>"},{"location":"api/decorators/RootCause/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/RootCause/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Perform a systematic root cause analysis using the {method} approach. Don't stop at surface-level causes - keep investigating until you find the fundamental underlying factors. Be methodical and thorough in your analysis.</p> <p>Notes: This model benefits from more explicit instruction about the need to go beyond superficial causes</p>"},{"location":"api/decorators/RootCause/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/RootCause/#five-whys-analysis-of-a-business-problem","title":"Five Whys analysis of a business problem","text":"<p>Original Prompt: <pre><code>Why is our website's bounce rate increasing?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please analyze the problem using formal root cause analysis to identify the underlying fundamental causes rather than just symptoms or immediate factors. Use the '5 Whys' technique by repeatedly asking why to drill down to the root cause(s). For each identified factor, ask 'why' to go deeper until reaching fundamental causes. Conduct the analysis with 5 levels of depth, ensuring a thorough investigation of causal chains.\n\nWhy is our website's bounce rate increasing?\n</code></pre></p>"},{"location":"api/decorators/RootCause/#fishbone-analysis-of-a-technical-issue","title":"Fishbone analysis of a technical issue","text":"<p>Original Prompt: <pre><code>Why do our application servers crash under moderate load?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please analyze the problem using formal root cause analysis to identify the underlying fundamental causes rather than just symptoms or immediate factors. Apply the Fishbone (Ishikawa) diagram approach by categorizing potential causes into major categories (e.g., People, Process, Equipment, Environment, Management, Materials) and analyzing each systematically. Conduct the analysis with 5 levels of depth, ensuring a thorough investigation of causal chains.\n\nWhy do our application servers crash under moderate load?\n</code></pre></p>"},{"location":"api/decorators/RootCause/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please analyze the problem using formal root cause analysis to identify the underlying fundamental causes rather than just symptoms or immediate factors.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>method</code>:</li> <li>When set to <code>fivewhys</code>: Use the '5 Whys' technique by repeatedly asking why to drill down to the root cause(s). For each identified factor, ask 'why' to go deeper until reaching fundamental causes.</li> <li>When set to <code>fishbone</code>: Apply the Fishbone (Ishikawa) diagram approach by categorizing potential causes into major categories (e.g., People, Process, Equipment, Environment, Management, Materials) and analyzing each systematically.</li> <li> <p>When set to <code>pareto</code>: Use the Pareto principle (80/20 rule) to identify and focus on the vital few causes that likely contribute to most of the problem, prioritizing them by impact.</p> </li> <li> <p><code>depth</code>:</p> </li> <li>Format: Conduct the analysis with {value} levels of depth, ensuring a thorough investigation of causal chains.</li> </ul>"},{"location":"api/decorators/RootCause/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/RootCause/#related-decorators","title":"Related Decorators","text":"<ul> <li>FirstPrinciples: Enhances RootCause FirstPrinciples complements RootCause by providing a philosophical foundation for the causal analysis</li> <li>StepByStep: Enhances RootCause StepByStep can help organize the progressive analysis of causes in a clear sequence</li> </ul>"},{"location":"api/decorators/RootCauseAnalysis/","title":"RootCauseAnalysis Decorator","text":"<p>Guides a methodical approach to identify the fundamental cause of an issue.</p> <p>Category: Systematic Debugging</p>"},{"location":"api/decorators/RootCauseAnalysis/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>depth</code> <code>enum</code> Analysis depth <code>deep</code> <code>method</code> <code>enum</code> Analysis method <code>systematic</code> <code>approach</code> <code>enum</code> Investigation approach <code>isolation</code>"},{"location":"api/decorators/RootCauseAnalysis/#depth-options","title":"Depth Options","text":"<ul> <li><code>surface</code>: Conduct a basic analysis to identify immediate causes.</li> <li><code>intermediate</code>: Investigate beyond immediate causes to identify contributing factors.</li> <li><code>deep</code>: Perform a thorough analysis to uncover underlying systemic issues.</li> <li><code>comprehensive</code>: Conduct an exhaustive investigation examining all possible factors and their interactions.</li> </ul>"},{"location":"api/decorators/RootCauseAnalysis/#method-options","title":"Method Options","text":"<ul> <li><code>5-whys</code>: Use the 5 Whys technique, repeatedly asking why to drill down to the root cause.</li> <li><code>fishbone</code>: Apply the fishbone (Ishikawa) diagram approach to categorize potential causes.</li> <li><code>fault-tree</code>: Employ fault tree analysis to identify combinations of events leading to the issue.</li> <li><code>systematic</code>: Follow a structured, step-by-step approach to eliminate possible causes.</li> </ul>"},{"location":"api/decorators/RootCauseAnalysis/#approach-options","title":"Approach Options","text":"<ul> <li><code>elimination</code>: Systematically rule out potential causes until the root cause is identified.</li> <li><code>reproduction</code>: Attempt to reproduce the issue under controlled conditions to identify triggers.</li> <li><code>isolation</code>: Isolate components or variables to determine their contribution to the issue.</li> <li><code>comparison</code>: Compare working and non-working systems to identify differences.</li> </ul>"},{"location":"api/decorators/RootCauseAnalysis/#examples","title":"Examples","text":""},{"location":"api/decorators/RootCauseAnalysis/#basic-root-cause-analysis-for-a-technical-issue","title":"Basic root cause analysis for a technical issue","text":"<pre><code>+++RootCauseAnalysis()\nWhy does our database connection fail intermittently?\n</code></pre> <p>A systematic analysis using default parameters (deep depth, systematic method, isolation approach) to identify the fundamental cause of database connection issues.</p>"},{"location":"api/decorators/RootCauseAnalysis/#comprehensive-analysis-using-the-5-whys-method","title":"Comprehensive analysis using the 5-whys method","text":"<pre><code>+++RootCauseAnalysis(depth=comprehensive, method=5-whys, approach=isolation)\nDetermine the root cause of the data inconsistency issue that occurs during concurrent updates.\n</code></pre> <p>An exhaustive investigation using the 5-whys technique and isolation approach to identify the fundamental cause of data inconsistency during concurrent updates.</p>"},{"location":"api/decorators/RootCauseAnalysis/#surface-level-analysis-for-quick-troubleshooting","title":"Surface-level analysis for quick troubleshooting","text":"<pre><code>+++RootCauseAnalysis(depth=surface, method=fishbone)\nWhy is the customer checkout process failing?\n</code></pre> <p>A basic analysis using the fishbone diagram approach to categorize potential immediate causes of checkout failures.</p>"},{"location":"api/decorators/RootCauseAnalysis/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/RootCauseAnalysis/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Analyze the root cause of this problem systematically. Don't just address symptoms. {depth_instruction} {method_instruction} {approach_instruction}</p> <p>Notes: Simplified instruction format for models with more limited context windows.</p>"},{"location":"api/decorators/RootCauseAnalysis/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/RootCauseAnalysis/#software-debugging","title":"Software debugging","text":"<p>Original Prompt: <pre><code>Why is my application crashing when multiple users log in simultaneously?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Perform a root cause analysis to identify the fundamental cause of the issue. Focus on methodical investigation rather than symptoms. Perform a thorough analysis to uncover underlying systemic issues. Follow a structured, step-by-step approach to eliminate possible causes. Isolate components or variables to determine their contribution to the issue.\n\nWhy is my application crashing when multiple users log in simultaneously?\n</code></pre></p> <p>Notes: The decorator adds structured analysis guidance before the original question.</p>"},{"location":"api/decorators/RootCauseAnalysis/#business-process-troubleshooting","title":"Business process troubleshooting","text":"<p>Original Prompt: <pre><code>Help me understand why our order fulfillment process is experiencing delays.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Perform a root cause analysis to identify the fundamental cause of the issue. Focus on methodical investigation rather than symptoms. Conduct an exhaustive investigation examining all possible factors and their interactions. Use the 5 Whys technique, repeatedly asking why to drill down to the root cause. Systematically rule out potential causes until the root cause is identified.\n\nHelp me understand why our order fulfillment process is experiencing delays.\n</code></pre></p> <p>Notes: Parameters are set to comprehensive depth, 5-whys method, and elimination approach.</p>"},{"location":"api/decorators/RootCauseAnalysis/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Perform a root cause analysis to identify the fundamental cause of the issue. Focus on methodical investigation rather than symptoms.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>depth</code>:</li> <li>When set to <code>surface</code>: Conduct a basic analysis to identify immediate causes.</li> <li>When set to <code>intermediate</code>: Investigate beyond immediate causes to identify contributing factors.</li> <li>When set to <code>deep</code>: Perform a thorough analysis to uncover underlying systemic issues.</li> <li> <p>When set to <code>comprehensive</code>: Conduct an exhaustive investigation examining all possible factors and their interactions.</p> </li> <li> <p><code>method</code>:</p> </li> <li>When set to <code>5-whys</code>: Use the 5 Whys technique, repeatedly asking why to drill down to the root cause.</li> <li>When set to <code>fishbone</code>: Apply the fishbone (Ishikawa) diagram approach to categorize potential causes.</li> <li>When set to <code>fault-tree</code>: Employ fault tree analysis to identify combinations of events leading to the issue.</li> <li> <p>When set to <code>systematic</code>: Follow a structured, step-by-step approach to eliminate possible causes.</p> </li> <li> <p><code>approach</code>:</p> </li> <li>When set to <code>elimination</code>: Systematically rule out potential causes until the root cause is identified.</li> <li>When set to <code>reproduction</code>: Attempt to reproduce the issue under controlled conditions to identify triggers.</li> <li>When set to <code>isolation</code>: Isolate components or variables to determine their contribution to the issue.</li> <li>When set to <code>comparison</code>: Compare working and non-working systems to identify differences.</li> </ul>"},{"location":"api/decorators/RootCauseAnalysis/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: QuickFix, SimpleAnswer</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/RootCauseAnalysis/#related-decorators","title":"Related Decorators","text":"<ul> <li>SystematicThinking: Enhances RootCauseAnalysis RootCauseAnalysis works well with SystematicThinking as both promote structured problem-solving approaches.</li> <li>QuickFix: Conflicts with RootCauseAnalysis RootCauseAnalysis focuses on finding underlying causes rather than quick solutions.</li> </ul>"},{"location":"api/decorators/SRE/","title":"SRE Decorator","text":"<p>Applies Site Reliability Engineering practices.</p> <p>Category: Devops And Infrastructure</p>"},{"location":"api/decorators/SRE/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>focus</code> <code>enum</code> SRE practice area <code>context-dependent</code> <code>maturity</code> <code>enum</code> Organization SRE maturity <code>intermediate</code> <code>output</code> <code>enum</code> Deliverable type <code>implementation</code>"},{"location":"api/decorators/SRE/#focus-options","title":"Focus Options","text":"<ul> <li><code>slos</code>: Focus on defining appropriate Service Level Objectives (SLOs) that balance reliability with innovation velocity.</li> <li><code>error-budgets</code>: Implement error budgets to quantify acceptable service disruption and guide development priorities.</li> <li><code>runbooks</code>: Develop clear, actionable runbooks for operational procedures and incident response.</li> <li><code>postmortems</code>: Create blameless postmortem processes to learn from incidents and prevent recurrence.</li> <li><code>chaos-eng</code>: Apply chaos engineering principles to proactively identify system weaknesses.</li> <li><code>automation</code>: Prioritize automation to reduce toil and increase operational efficiency.</li> </ul>"},{"location":"api/decorators/SRE/#maturity-options","title":"Maturity Options","text":"<ul> <li><code>beginner</code>: Provide foundational SRE concepts and implementation steps suitable for organizations new to SRE practices.</li> <li><code>intermediate</code>: Offer more sophisticated SRE strategies for organizations with established but evolving SRE practices.</li> <li><code>advanced</code>: Present cutting-edge SRE approaches for organizations with mature SRE functions seeking optimization.</li> </ul>"},{"location":"api/decorators/SRE/#output-options","title":"Output Options","text":"<ul> <li><code>implementation</code>: Provide specific, actionable implementation guidance with concrete examples and code where appropriate.</li> <li><code>roadmap</code>: Develop a phased approach to implementing or improving the specified SRE practices over time.</li> <li><code>assessment</code>: Evaluate current practices against SRE best practices and identify gaps and improvement opportunities.</li> </ul>"},{"location":"api/decorators/SRE/#examples","title":"Examples","text":""},{"location":"api/decorators/SRE/#creating-slos-for-an-e-commerce-platform","title":"Creating SLOs for an e-commerce platform","text":"<pre><code>+++SRE(focus=slos, maturity=intermediate, output=implementation)\nDevelop SLOs and error budgets for our e-commerce platform focusing on checkout and payment processing.\n</code></pre> <p>Provides specific implementation guidance for creating appropriate SLOs and error budgets for checkout and payment processing systems, tailored to an organization with intermediate SRE maturity.</p>"},{"location":"api/decorators/SRE/#developing-a-chaos-engineering-roadmap","title":"Developing a chaos engineering roadmap","text":"<pre><code>+++SRE(focus=chaos-eng, maturity=beginner, output=roadmap)\nHow should we introduce chaos engineering to our organization?\n</code></pre> <p>Delivers a phased roadmap for introducing chaos engineering practices to an organization new to SRE, starting with basic principles and progressing to more advanced techniques.</p>"},{"location":"api/decorators/SRE/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/SRE/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Use Site Reliability Engineering (SRE) principles in your response. Consider system reliability, monitoring, automation, and incident management.</p> <p>Notes: Simplified instruction for models with less context capacity.</p>"},{"location":"api/decorators/SRE/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/SRE/#cloud-infrastructure-reliability","title":"Cloud infrastructure reliability","text":"<p>Original Prompt: <pre><code>How can we improve our AWS infrastructure reliability?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Apply Site Reliability Engineering practices to this task. Consider reliability, scalability, and operational excellence in your response. Focus on defining appropriate Service Level Objectives (SLOs) that balance reliability with innovation velocity. Offer more sophisticated SRE strategies for organizations with established but evolving SRE practices. Provide specific, actionable implementation guidance with concrete examples and code where appropriate.\n\nHow can we improve our AWS infrastructure reliability?\n</code></pre></p> <p>Notes: This example shows how the decorator adds SRE context with a focus on SLOs for an intermediate organization seeking implementation guidance.</p>"},{"location":"api/decorators/SRE/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Apply Site Reliability Engineering practices to this task. Consider reliability, scalability, and operational excellence in your response.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>focus</code>:</li> <li>When set to <code>slos</code>: Focus on defining appropriate Service Level Objectives (SLOs) that balance reliability with innovation velocity.</li> <li>When set to <code>error-budgets</code>: Implement error budgets to quantify acceptable service disruption and guide development priorities.</li> <li>When set to <code>runbooks</code>: Develop clear, actionable runbooks for operational procedures and incident response.</li> <li>When set to <code>postmortems</code>: Create blameless postmortem processes to learn from incidents and prevent recurrence.</li> <li>When set to <code>chaos-eng</code>: Apply chaos engineering principles to proactively identify system weaknesses.</li> <li> <p>When set to <code>automation</code>: Prioritize automation to reduce toil and increase operational efficiency.</p> </li> <li> <p><code>maturity</code>:</p> </li> <li>When set to <code>beginner</code>: Provide foundational SRE concepts and implementation steps suitable for organizations new to SRE practices.</li> <li>When set to <code>intermediate</code>: Offer more sophisticated SRE strategies for organizations with established but evolving SRE practices.</li> <li> <p>When set to <code>advanced</code>: Present cutting-edge SRE approaches for organizations with mature SRE functions seeking optimization.</p> </li> <li> <p><code>output</code>:</p> </li> <li>When set to <code>implementation</code>: Provide specific, actionable implementation guidance with concrete examples and code where appropriate.</li> <li>When set to <code>roadmap</code>: Develop a phased approach to implementing or improving the specified SRE practices over time.</li> <li>When set to <code>assessment</code>: Evaluate current practices against SRE best practices and identify gaps and improvement opportunities.</li> </ul>"},{"location":"api/decorators/SRE/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, claude-instant</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/SRE/#related-decorators","title":"Related Decorators","text":"<ul> <li>DevOps: Enhances SRE SRE complements DevOps practices by adding reliability engineering focus.</li> <li>CloudArchitecture: Enhances SRE SRE provides reliability considerations for cloud architecture designs.</li> </ul>"},{"location":"api/decorators/Scalability/","title":"Scalability Decorator","text":"<p>Designs for various dimensions of system scaling.</p> <p>Category: Architecture And Design</p>"},{"location":"api/decorators/Scalability/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>dimension</code> <code>enum</code> Scaling aspect to focus on <code>users</code> <code>target</code> <code>enum</code> Scale magnitude <code>100x</code> <code>approach</code> <code>enum</code> Scaling strategy <code>horizontal</code>"},{"location":"api/decorators/Scalability/#dimension-options","title":"Dimension Options","text":"<ul> <li><code>users</code>: Focus on scaling to support a growing user base with considerations for authentication, session management, and user experience.</li> <li><code>data</code>: Focus on scaling data storage and retrieval systems with considerations for database sharding, replication, and data access patterns.</li> <li><code>transactions</code>: Focus on scaling transaction processing capabilities with considerations for throughput, concurrency, and consistency.</li> <li><code>geographic</code>: Focus on scaling across geographic regions with considerations for latency, data sovereignty, and regional availability.</li> <li><code>complexity</code>: Focus on scaling to handle increasing system complexity with considerations for modularity, service boundaries, and technical debt.</li> </ul>"},{"location":"api/decorators/Scalability/#target-options","title":"Target Options","text":"<ul> <li><code>10x</code>: Design for moderate growth, approximately 10 times current scale.</li> <li><code>100x</code>: Design for significant growth, approximately 100 times current scale.</li> <li><code>1000x</code>: Design for massive growth, approximately 1000 times current scale.</li> <li><code>all</code>: Option: all</li> </ul>"},{"location":"api/decorators/Scalability/#approach-options","title":"Approach Options","text":"<ul> <li><code>horizontal</code>: Utilize horizontal scaling approaches by adding more machines or instances to distribute load.</li> <li><code>vertical</code>: Utilize vertical scaling approaches by increasing the resources (CPU, memory, storage) of existing machines.</li> <li><code>hybrid</code>: Utilize a hybrid scaling approach that combines both horizontal and vertical scaling strategies as appropriate.</li> <li><code>cloud-native</code>: Utilize cloud-native architectures and services designed specifically for elastic scaling.</li> </ul>"},{"location":"api/decorators/Scalability/#examples","title":"Examples","text":""},{"location":"api/decorators/Scalability/#designing-a-payment-system-for-high-transaction-volume","title":"Designing a payment system for high transaction volume","text":"<pre><code>+++Scalability(dimension=transactions, target=1000x, approach=horizontal)\nDesign a scalable payment processing system that can handle Black Friday-level traffic spikes.\n</code></pre> <p>A payment processing system design that focuses on transaction scalability, capable of handling 1000x normal load using horizontal scaling techniques appropriate for high-volume payment processing during peak events.</p>"},{"location":"api/decorators/Scalability/#designing-a-social-media-platform-for-global-user-growth","title":"Designing a social media platform for global user growth","text":"<pre><code>+++Scalability(dimension=users, target=global, approach=cloud-native)\nDesign a social media platform architecture that can grow from regional to worldwide usage.\n</code></pre> <p>A social media platform architecture that focuses on user scalability, designed for global-scale deployment using cloud-native approaches to handle unlimited user growth across different regions.</p>"},{"location":"api/decorators/Scalability/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Scalability/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Design a scalable system architecture with the following characteristics: {dimension} scaling to {target} levels using {approach} scaling approaches.</p> <p>Notes: Simplified instruction format works better with gpt-4 Turbo's context handling.</p>"},{"location":"api/decorators/Scalability/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Scalability/#web-application-architecture","title":"Web application architecture","text":"<p>Original Prompt: <pre><code>Design a payment processing system that can handle Black Friday-level traffic spikes.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Design a system architecture that addresses scalability concerns. Consider appropriate scaling strategies and techniques. Focus on scaling transaction processing capabilities with considerations for throughput, concurrency, and consistency. Design for massive growth, approximately 1000 times current scale. Utilize horizontal scaling approaches by adding more machines or instances to distribute load.\n\nDesign a payment processing system that can handle Black Friday-level traffic spikes.\n</code></pre></p> <p>Notes: The decorator adds specific guidance on transaction scaling for high-volume scenarios using horizontal scaling approaches.</p>"},{"location":"api/decorators/Scalability/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Design a system architecture that addresses scalability concerns. Consider appropriate scaling strategies and techniques.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>dimension</code>:</li> <li>When set to <code>users</code>: Focus on scaling to support a growing user base with considerations for authentication, session management, and user experience.</li> <li>When set to <code>data</code>: Focus on scaling data storage and retrieval systems with considerations for database sharding, replication, and data access patterns.</li> <li>When set to <code>transactions</code>: Focus on scaling transaction processing capabilities with considerations for throughput, concurrency, and consistency.</li> <li>When set to <code>geographic</code>: Focus on scaling across geographic regions with considerations for latency, data sovereignty, and regional availability.</li> <li> <p>When set to <code>complexity</code>: Focus on scaling to handle increasing system complexity with considerations for modularity, service boundaries, and technical debt.</p> </li> <li> <p><code>target</code>:</p> </li> <li>When set to <code>10x</code>: Design for moderate growth, approximately 10 times current scale.</li> <li>When set to <code>100x</code>: Design for significant growth, approximately 100 times current scale.</li> <li>When set to <code>1000x</code>: Design for massive growth, approximately 1000 times current scale.</li> <li> <p>When set to <code>global</code>: Design for global-scale deployment with virtually unlimited growth potential.</p> </li> <li> <p><code>approach</code>:</p> </li> <li>When set to <code>horizontal</code>: Utilize horizontal scaling approaches by adding more machines or instances to distribute load.</li> <li>When set to <code>vertical</code>: Utilize vertical scaling approaches by increasing the resources (CPU, memory, storage) of existing machines.</li> <li>When set to <code>hybrid</code>: Utilize a hybrid scaling approach that combines both horizontal and vertical scaling strategies as appropriate.</li> <li>When set to <code>cloud-native</code>: Utilize cloud-native architectures and services designed specifically for elastic scaling.</li> </ul>"},{"location":"api/decorators/Scalability/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Scalability/#related-decorators","title":"Related Decorators","text":"<ul> <li>Performance: Enhances Scalability Scalability and Performance decorators work well together to create systems that are both scalable and performant.</li> <li>Reliability: Enhances Scalability Scalability and Reliability decorators complement each other for creating robust systems that can scale while maintaining reliability.</li> </ul>"},{"location":"api/decorators/Schema/","title":"Schema Decorator","text":"<p>Defines a custom structure for the AI's response using a specified schema format. This decorator enables precise control over the output structure, ensuring responses follow a consistent, well-defined format optimized for specific use cases or data processing needs.</p> <p>Category: Structure</p>"},{"location":"api/decorators/Schema/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>schema</code> <code>string</code> JSON Schema definition or reference to a predefined schema that defines the structure of the response <code>Required</code> <code>strict</code> <code>boolean</code> Whether to enforce strict schema compliance or allow flexibility <code>False</code>"},{"location":"api/decorators/Schema/#examples","title":"Examples","text":""},{"location":"api/decorators/Schema/#basic-schema-for-a-persons-information","title":"Basic schema for a person's information","text":"<pre><code>+++Schema(schema={\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"age\":{\"type\":\"number\"},\"interests\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}}}})\nDescribe a fictional character.\n</code></pre> <p>Returns information about a fictional character structured according to the specified schema with name, age, and interests</p>"},{"location":"api/decorators/Schema/#strict-schema-for-product-information","title":"Strict schema for product information","text":"<pre><code>+++Schema(schema={\"type\":\"object\",\"required\":[\"productName\",\"price\",\"features\"],\"properties\":{\"productName\":{\"type\":\"string\"},\"price\":{\"type\":\"number\"},\"features\":{\"type\":\"array\"},\"availability\":{\"type\":\"boolean\"}}}, strict=true)\nDescribe a smartphone.\n</code></pre> <p>Returns smartphone information strictly following the specified schema with all required fields and proper data types</p>"},{"location":"api/decorators/Schema/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Schema/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Format your entire response according to this schema: {schema}</p> <p>Make sure to follow the exact data types and structure. {strict} Present the final output as valid JSON that follows this schema precisely. Do not include markdown code blocks or any explanatory text outside the JSON structure.</p> <p>Notes: This model may need explicit reminders to avoid adding explanatory text outside the schema structure, especially for complex schemas</p>"},{"location":"api/decorators/Schema/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Schema/#character-description-with-basic-schema","title":"Character description with basic schema","text":"<p>Original Prompt: <pre><code>Describe a fictional character.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please structure your response according to the following schema definition. Ensure that your content follows this specific structure while maintaining the information's accuracy and completeness. Use this specific schema definition to structure your response: {\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"age\":{\"type\":\"number\"},\"interests\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}}}}. Make sure your content adheres to all property types and constraints defined in the schema. Apply the schema as a general guide, allowing reasonable flexibility while maintaining the core structure. You may include additional helpful information if it enhances understanding.\n\nDescribe a fictional character.\n</code></pre></p>"},{"location":"api/decorators/Schema/#strict-schema-for-smartphone-description","title":"Strict schema for smartphone description","text":"<p>Original Prompt: <pre><code>Describe a smartphone.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please structure your response according to the following schema definition. Ensure that your content follows this specific structure while maintaining the information's accuracy and completeness. Use this specific schema definition to structure your response: {\"type\":\"object\",\"required\":[\"productName\",\"price\",\"features\"],\"properties\":{\"productName\":{\"type\":\"string\"},\"price\":{\"type\":\"number\"},\"features\":{\"type\":\"array\"},\"availability\":{\"type\":\"boolean\"}}}. Make sure your content adheres to all property types and constraints defined in the schema. Apply the schema definition strictly, ensuring perfect compliance with all property types, required fields, and constraints without any deviations or additional properties.\n\nDescribe a smartphone.\n</code></pre></p>"},{"location":"api/decorators/Schema/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please structure your response according to the following schema definition. Ensure that your content follows this specific structure while maintaining the information's accuracy and completeness.</p> <p>Placement: prepend</p> <p>Composition Behavior: override</p> <p>Parameter Effects:</p> <ul> <li><code>schema</code>:</li> <li> <p>Format: Use this specific schema definition to structure your response: {value}. Make sure your content adheres to all property types and constraints defined in the schema.</p> </li> <li> <p><code>strict</code>:</p> </li> <li>When set to <code>true</code>: Apply the schema definition strictly, ensuring perfect compliance with all property types, required fields, and constraints without any deviations or additional properties.</li> <li>When set to <code>false</code>: Apply the schema as a general guide, allowing reasonable flexibility while maintaining the core structure. You may include additional helpful information if it enhances understanding.</li> </ul>"},{"location":"api/decorators/Schema/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: OutputFormat</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Schema/#related-decorators","title":"Related Decorators","text":"<ul> <li>OutputFormat: Conflicts with Schema Schema provides custom structural definitions while OutputFormat specifies predefined formats like JSON or YAML</li> <li>TableFormat: Conflicts with Schema Schema defines arbitrary structures that may not be compatible with tabular representation</li> <li>MECE: Enhances Schema MECE can provide logical organization principles within Schema's structural framework</li> </ul>"},{"location":"api/decorators/SecurityAudit/","title":"SecurityAudit Decorator","text":"<p>Performs security-focused analysis following industry standards.</p> <p>Category: Testing And Debugging</p>"},{"location":"api/decorators/SecurityAudit/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>standard</code> <code>enum</code> Security standard to follow <code>owasp-top10</code> <code>risk-level</code> <code>enum</code> Sensitivity for flagging issues <code>medium</code> <code>scope</code> <code>enum</code> Areas to evaluate <code>all</code>"},{"location":"api/decorators/SecurityAudit/#standard-options","title":"Standard Options","text":"<ul> <li><code>owasp-top10</code>: Follow OWASP Top 10 guidelines to identify common web application security risks.</li> <li><code>sans-top25</code>: Use SANS Top 25 Most Dangerous Software Errors as a reference framework.</li> <li><code>cwe</code>: Reference the Common Weakness Enumeration (CWE) database for vulnerability identification.</li> <li><code>nist</code>: Apply NIST Cybersecurity Framework standards for the security assessment.</li> <li><code>gdpr</code>: Evaluate compliance with GDPR data protection and privacy requirements.</li> <li><code>hipaa</code>: Assess against HIPAA security and privacy standards for healthcare information.</li> </ul>"},{"location":"api/decorators/SecurityAudit/#risk-level-options","title":"Risk-Level Options","text":"<ul> <li><code>low</code>: Flag only critical and high-severity security issues.</li> <li><code>medium</code>: Identify critical, high, and medium-severity security concerns.</li> <li><code>high</code>: Report all security issues including low-severity and potential future concerns.</li> </ul>"},{"location":"api/decorators/SecurityAudit/#scope-options","title":"Scope Options","text":"<ul> <li><code>input-validation</code>: Focus on input validation vulnerabilities such as injection attacks, XSS, and input sanitization.</li> <li><code>authentication</code>: Concentrate on authentication mechanisms, credential management, and session handling.</li> <li><code>authorization</code>: Examine authorization controls, access rights, and privilege escalation risks.</li> <li><code>data-protection</code>: Analyze data encryption, storage practices, and sensitive information handling.</li> <li><code>all</code>: Conduct a comprehensive security review across all potential vulnerability categories.</li> </ul>"},{"location":"api/decorators/SecurityAudit/#examples","title":"Examples","text":""},{"location":"api/decorators/SecurityAudit/#basic-security-audit-of-a-web-api-endpoint","title":"Basic security audit of a web API endpoint","text":"<pre><code>+++SecurityAudit(standard=owasp-top10, risk-level=medium, scope=input-validation)\nAudit this express.js API endpoint for security vulnerabilities.\n</code></pre> <p>Performs a security audit focused on input validation vulnerabilities according to OWASP Top 10, with medium risk sensitivity.</p>"},{"location":"api/decorators/SecurityAudit/#comprehensive-hipaa-compliance-check","title":"Comprehensive HIPAA compliance check","text":"<pre><code>+++SecurityAudit(standard=hipaa, risk-level=high, scope=all)\nReview this patient data handling code for security issues.\n</code></pre> <p>Conducts a thorough security assessment against HIPAA standards across all security domains with high sensitivity to potential issues.</p>"},{"location":"api/decorators/SecurityAudit/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/SecurityAudit/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Analyze the following for security vulnerabilities according to industry standards. Identify risks and suggest fixes.</p> <p>Notes: Simplified instruction for models with less security expertise.</p>"},{"location":"api/decorators/SecurityAudit/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/SecurityAudit/#code-review-for-a-web-application","title":"Code review for a web application","text":"<p>Original Prompt: <pre><code>Review this login function for issues:\n\nfunction login(username, password) {\n  const user = db.findUser(username);\n  if (user &amp;&amp; user.password === password) {\n    return generateToken(user);\n  }\n  return null;\n}\n</code></pre></p> <p>Transformed Prompt: <pre><code>Perform a security audit on the following content. Identify potential security vulnerabilities and provide recommendations for remediation. Follow OWASP Top 10 guidelines to identify common web application security risks. Identify critical, high, and medium-severity security concerns. Conduct a comprehensive security review across all potential vulnerability categories.\n\nReview this login function for issues:\n\nfunction login(username, password) {\n  const user = db.findUser(username);\n  if (user &amp;&amp; user.password === password) {\n    return generateToken(user);\n  }\n  return null;\n}\n</code></pre></p> <p>Notes: The security audit decorator adds specific instructions to evaluate the code against security standards with appropriate risk sensitivity.</p>"},{"location":"api/decorators/SecurityAudit/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Perform a security audit on the following content. Identify potential security vulnerabilities and provide recommendations for remediation.</p> <p>Placement: prepend</p> <p>Composition Behavior: override</p> <p>Parameter Effects:</p> <ul> <li><code>standard</code>:</li> <li>When set to <code>owasp-top10</code>: Follow OWASP Top 10 guidelines to identify common web application security risks.</li> <li>When set to <code>sans-top25</code>: Use SANS Top 25 Most Dangerous Software Errors as a reference framework.</li> <li>When set to <code>cwe</code>: Reference the Common Weakness Enumeration (CWE) database for vulnerability identification.</li> <li>When set to <code>nist</code>: Apply NIST Cybersecurity Framework standards for the security assessment.</li> <li>When set to <code>gdpr</code>: Evaluate compliance with GDPR data protection and privacy requirements.</li> <li> <p>When set to <code>hipaa</code>: Assess against HIPAA security and privacy standards for healthcare information.</p> </li> <li> <p><code>risk-level</code>:</p> </li> <li>When set to <code>low</code>: Flag only critical and high-severity security issues.</li> <li>When set to <code>medium</code>: Identify critical, high, and medium-severity security concerns.</li> <li> <p>When set to <code>high</code>: Report all security issues including low-severity and potential future concerns.</p> </li> <li> <p><code>scope</code>:</p> </li> <li>When set to <code>input-validation</code>: Focus on input validation vulnerabilities such as injection attacks, XSS, and input sanitization.</li> <li>When set to <code>authentication</code>: Concentrate on authentication mechanisms, credential management, and session handling.</li> <li>When set to <code>authorization</code>: Examine authorization controls, access rights, and privilege escalation risks.</li> <li>When set to <code>data-protection</code>: Analyze data encryption, storage practices, and sensitive information handling.</li> <li>When set to <code>all</code>: Conduct a comprehensive security review across all potential vulnerability categories.</li> </ul>"},{"location":"api/decorators/SecurityAudit/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: Simplify, CreativeWriting</li> <li>Compatible Models: gpt-4o, gpt-4-turbo, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/SecurityAudit/#related-decorators","title":"Related Decorators","text":"<ul> <li>CodeReview: Enhances SecurityAudit SecurityAudit adds security-specific analysis to general code reviews.</li> <li>Simplify: Conflicts with SecurityAudit Security audits require detailed analysis which conflicts with simplification.</li> </ul>"},{"location":"api/decorators/Socratic/","title":"Socratic Decorator","text":"<p>Structures the response as a series of questions that guide the user through a problem or topic. This decorator encourages critical thinking through question-based exploration, helping to uncover assumptions and lead to deeper understanding.</p> <p>Category: Reasoning</p>"},{"location":"api/decorators/Socratic/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>iterations</code> <code>number</code> Number of question-answer cycles to include <code>3</code>"},{"location":"api/decorators/Socratic/#examples","title":"Examples","text":""},{"location":"api/decorators/Socratic/#basic-socratic-exploration-of-a-philosophical-concept","title":"Basic socratic exploration of a philosophical concept","text":"<pre><code>+++Socratic\nWhat is justice?\n</code></pre> <p>Explores the concept of justice through a series of guiding questions</p>"},{"location":"api/decorators/Socratic/#deep-socratic-analysis-with-5-iterations","title":"Deep socratic analysis with 5 iterations","text":"<pre><code>+++Socratic(iterations=5)\nHow do we know what we know?\n</code></pre> <p>Provides an extended series of 5 question-answer cycles to explore epistemology</p>"},{"location":"api/decorators/Socratic/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Socratic/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Format your response as a series of thought-provoking questions. For each question, provide a thoughtful answer that leads to the next question. This creates a step-by-step exploration of the topic.</p> <p>Notes: This model benefits from more explicit instructions on the question-answer structure</p>"},{"location":"api/decorators/Socratic/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Socratic/#standard-implementation-with-3-iterations","title":"Standard implementation with 3 iterations","text":"<p>Original Prompt: <pre><code>What is justice?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please structure your response as a Socratic dialogue that guides through the topic using thought-provoking questions followed by answers. Include approximately 3 question-answer cycles in your exploration.\n\nWhat is justice?\n</code></pre></p>"},{"location":"api/decorators/Socratic/#extended-exploration-with-5-iterations","title":"Extended exploration with 5 iterations","text":"<p>Original Prompt: <pre><code>How do we know what we know?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please structure your response as a Socratic dialogue that guides through the topic using thought-provoking questions followed by answers. Include approximately 5 question-answer cycles in your exploration.\n\nHow do we know what we know?\n</code></pre></p>"},{"location":"api/decorators/Socratic/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please structure your response as a Socratic dialogue that guides through the topic using thought-provoking questions followed by answers.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>iterations</code>:</li> <li>Format: Include approximately {value} question-answer cycles in your exploration.</li> </ul>"},{"location":"api/decorators/Socratic/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Socratic/#related-decorators","title":"Related Decorators","text":"<ul> <li>StepByStep: Enhances Socratic Can be combined with StepByStep to create a structured Socratic analysis</li> <li>OutputFormat: Enhances Socratic Can be combined with OutputFormat for consistent presentation</li> </ul>"},{"location":"api/decorators/Steelman/","title":"Steelman Decorator","text":"<p>Presents the strongest possible version of an argument or position, even those the AI might not agree with. This decorator opposes strawman fallacies by ensuring each viewpoint is represented in its most compelling and charitable form.</p> <p>Category: Verification</p>"},{"location":"api/decorators/Steelman/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>sides</code> <code>number</code> Number of different viewpoints to steel-man <code>2</code> <code>critique</code> <code>boolean</code> Whether to include critique after presenting the steel-manned arguments <code>False</code> <code>separation</code> <code>boolean</code> Whether to clearly separate the steel-manned presentations from any analysis <code>True</code>"},{"location":"api/decorators/Steelman/#examples","title":"Examples","text":""},{"location":"api/decorators/Steelman/#steel-manning-both-sides-of-a-controversial-issue","title":"Steel-manning both sides of a controversial issue","text":"<pre><code>+++Steelman\nIs universal basic income a good policy?\n</code></pre> <p>Presents the strongest possible cases both for and against universal basic income, with each position articulated in its most compelling form</p>"},{"location":"api/decorators/Steelman/#steel-manning-one-position-with-subsequent-critique","title":"Steel-manning one position with subsequent critique","text":"<pre><code>+++Steelman(sides=1, critique=true, separation=true)\nWhat is the strongest case for cryptocurrency as the future of finance?\n</code></pre> <p>Provides the most compelling possible argument for cryptocurrency as the future of finance, clearly separated from a subsequent balanced critique</p>"},{"location":"api/decorators/Steelman/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Steelman/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Present the most compelling and charitable version of {sides} positions on this topic. For each position, include the strongest evidence, most persuasive reasoning, and most thoughtful responses to potential objections. Make each position as convincing as possible, even those you might disagree with. {critique} {separation} Avoid straw-manning any position.</p> <p>Notes: This model sometimes needs explicit reminders to avoid unconsciously weakening positions it might not favor</p>"},{"location":"api/decorators/Steelman/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Steelman/#steel-manning-both-sides-of-universal-basic-income-debate","title":"Steel-manning both sides of universal basic income debate","text":"<p>Original Prompt: <pre><code>Is universal basic income a good policy?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please present the strongest possible version of each position or argument related to this topic, ensuring each viewpoint is represented in its most compelling and charitable form, even those you might not personally agree with. Present the strongest possible version of 2 different viewpoints or positions on this topic. Focus solely on presenting the strongest versions of each position without providing your own critique or evaluation. Clearly separate the presentation of steel-manned arguments from any subsequent analysis or critique using distinct sections.\n\nIs universal basic income a good policy?\n</code></pre></p>"},{"location":"api/decorators/Steelman/#steel-manning-cryptocurrency-position-with-critique","title":"Steel-manning cryptocurrency position with critique","text":"<p>Original Prompt: <pre><code>What is the strongest case for cryptocurrency as the future of finance?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please present the strongest possible version of each position or argument related to this topic, ensuring each viewpoint is represented in its most compelling and charitable form, even those you might not personally agree with. Present the strongest possible version of 1 different viewpoints or positions on this topic. After presenting each steel-manned position, provide a balanced critique that evaluates its strengths and weaknesses. Clearly separate the presentation of steel-manned arguments from any subsequent analysis or critique using distinct sections.\n\nWhat is the strongest case for cryptocurrency as the future of finance?\n</code></pre></p>"},{"location":"api/decorators/Steelman/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please present the strongest possible version of each position or argument related to this topic, ensuring each viewpoint is represented in its most compelling and charitable form, even those you might not personally agree with.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>sides</code>:</li> <li> <p>Format: Present the strongest possible version of {value} different viewpoints or positions on this topic.</p> </li> <li> <p><code>critique</code>:</p> </li> <li>When set to <code>true</code>: After presenting each steel-manned position, provide a balanced critique that evaluates its strengths and weaknesses.</li> <li> <p>When set to <code>false</code>: Focus solely on presenting the strongest versions of each position without providing your own critique or evaluation.</p> </li> <li> <p><code>separation</code>:</p> </li> <li>When set to <code>true</code>: Clearly separate the presentation of steel-manned arguments from any subsequent analysis or critique using distinct sections.</li> <li>When set to <code>false</code>: Integrate the presentation of steel-manned arguments with any analysis or critique in a more flowing format.</li> </ul>"},{"location":"api/decorators/Steelman/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Steelman/#related-decorators","title":"Related Decorators","text":"<ul> <li>Debate: Enhances Steelman Steelman works effectively with Debate to ensure all positions are presented in their strongest form before being debated</li> <li>Critique: Enhances Steelman When critique=true, Steelman pairs well with Critique to first present the strongest form of a position, then analyze it critically</li> <li>Balanced: Enhances Steelman Steelman helps ensure the Balance decorator presents the strongest form of each position when discussing multiple viewpoints</li> </ul>"},{"location":"api/decorators/StepByStep/","title":"StepByStep Decorator","text":"<p>Structures the AI's response as a sequence of clearly labeled steps. This decorator helps break down complex processes, explanations, or solutions into manageable, sequential parts for better understanding.</p> <p>Category: Minimal</p>"},{"location":"api/decorators/StepByStep/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>numbered</code> <code>boolean</code> Whether to number the steps or use bullet points <code>True</code>"},{"location":"api/decorators/StepByStep/#examples","title":"Examples","text":""},{"location":"api/decorators/StepByStep/#numbered-steps-for-a-technical-process","title":"Numbered steps for a technical process","text":"<pre><code>+++StepByStep(numbered=true)\nHow do I set up a Python virtual environment?\n</code></pre> <p>Provides numbered steps for creating and activating a virtual environment</p>"},{"location":"api/decorators/StepByStep/#bullet-point-steps-for-a-creative-process","title":"Bullet-point steps for a creative process","text":"<pre><code>+++StepByStep(numbered=false)\nHow do I brainstorm effectively?\n</code></pre> <p>Delivers bullet-pointed steps for conducting a brainstorming session</p>"},{"location":"api/decorators/StepByStep/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/StepByStep/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Please provide a step-by-step guide with each step clearly labeled and explained. Break down the process into clear, manageable steps.</p> <p>Notes: This model may need more explicit instructions to create well-structured steps</p>"},{"location":"api/decorators/StepByStep/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/StepByStep/#standard-implementation-with-numbered-steps","title":"Standard implementation with numbered steps","text":"<p>Original Prompt: <pre><code>How do I create a sourdough starter?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please break down your response into clear, sequential steps. Number each step sequentially (Step 1, Step 2, etc.).\n\nHow do I create a sourdough starter?\n</code></pre></p>"},{"location":"api/decorators/StepByStep/#implementation-with-bullet-points","title":"Implementation with bullet points","text":"<p>Original Prompt: <pre><code>What's the process for conducting user research?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please break down your response into clear, sequential steps. Use bullet points for each step instead of numbers.\n\nWhat's the process for conducting user research?\n</code></pre></p>"},{"location":"api/decorators/StepByStep/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please break down your response into clear, sequential steps.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>numbered</code>:</li> <li>When set to <code>true</code>: Number each step sequentially (Step 1, Step 2, etc.).</li> <li>When set to <code>false</code>: Use bullet points for each step instead of numbers.</li> </ul>"},{"location":"api/decorators/StepByStep/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/StepByStep/#related-decorators","title":"Related Decorators","text":"<ul> <li>Reasoning: Enhances StepByStep Combining these decorators produces step-by-step reasoning that is both structured and logical</li> <li>OutputFormat: Enhances StepByStep Can be combined with OutputFormat for structured formatting of the steps</li> </ul>"},{"location":"api/decorators/StepByStepImpl/","title":"StepByStepImpl Decorator","text":"<p>Requests a step-by-step implementation approach, with explicitly labeled stages.</p> <p>Category: Implementation-Focused</p>"},{"location":"api/decorators/StepByStepImpl/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>detail</code> <code>enum</code> Level of explanation and comments <code>moderate</code> <code>steps</code> <code>string</code> Number of implementation steps <code>auto</code> <code>output</code> <code>enum</code> What to include in each step <code>code-with-explanation</code>"},{"location":"api/decorators/StepByStepImpl/#detail-options","title":"Detail Options","text":"<ul> <li><code>minimal</code>: Keep explanations and comments minimal, focusing on essential information only.</li> <li><code>moderate</code>: Provide balanced explanations and comments that clarify the implementation without being excessive.</li> <li><code>comprehensive</code>: Include detailed explanations and comprehensive comments for each part of the implementation.</li> </ul>"},{"location":"api/decorators/StepByStepImpl/#output-options","title":"Output Options","text":"<ul> <li><code>code-only</code>: Present only the code for each step, with minimal explanation.</li> <li><code>code-with-explanation</code>: For each step, present the code along with explanations of what it does.</li> <li><code>explanation-then-code</code>: For each step, first explain the concept or approach, then provide the implementation code.</li> </ul>"},{"location":"api/decorators/StepByStepImpl/#examples","title":"Examples","text":""},{"location":"api/decorators/StepByStepImpl/#comprehensive-implementation-with-explanation-first-approach","title":"Comprehensive implementation with explanation-first approach","text":"<pre><code>+++StepByStepImpl(detail=comprehensive, steps=5, output=explanation-then-code)\nImplement a JWT authentication middleware for Express.js that verifies tokens and extracts user roles.\n</code></pre> <p>The model will provide a 5-step implementation process for JWT authentication middleware, with detailed explanations followed by code for each step.</p>"},{"location":"api/decorators/StepByStepImpl/#minimal-code-focused-implementation","title":"Minimal code-focused implementation","text":"<pre><code>+++StepByStepImpl(detail=minimal, output=code-only)\nCreate a React component that fetches and displays user data from an API.\n</code></pre> <p>The model will provide a step-by-step implementation with minimal comments, focusing primarily on the code for each step.</p>"},{"location":"api/decorators/StepByStepImpl/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/StepByStepImpl/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Break down the implementation into clearly labeled steps. For each step, {output_style}. Provide {detail_level} explanations.</p> <p>Notes: For gpt-4 Turbo, more explicit instructions about the step structure may be needed.</p>"},{"location":"api/decorators/StepByStepImpl/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/StepByStepImpl/#web-development-implementation","title":"Web Development Implementation","text":"<p>Original Prompt: <pre><code>Implement a JWT authentication middleware for Express.js that verifies tokens and extracts user roles.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please provide a step-by-step implementation approach with explicitly labeled stages. Include detailed explanations and comprehensive comments for each part of the implementation. For each step, first explain the concept or approach, then provide the implementation code.\n\nImplement a JWT authentication middleware for Express.js that verifies tokens and extracts user roles.\n</code></pre></p> <p>Notes: This example shows the decorator applied with comprehensive detail and explanation-then-code format.</p>"},{"location":"api/decorators/StepByStepImpl/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please provide a step-by-step implementation approach with explicitly labeled stages.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>detail</code>:</li> <li>When set to <code>minimal</code>: Keep explanations and comments minimal, focusing on essential information only.</li> <li>When set to <code>moderate</code>: Provide balanced explanations and comments that clarify the implementation without being excessive.</li> <li> <p>When set to <code>comprehensive</code>: Include detailed explanations and comprehensive comments for each part of the implementation.</p> </li> <li> <p><code>steps</code>:</p> </li> <li> <p>Format: Organize the implementation into {value} distinct steps.</p> </li> <li> <p><code>output</code>:</p> </li> <li>When set to <code>code-only</code>: Present only the code for each step, with minimal explanation.</li> <li>When set to <code>code-with-explanation</code>: For each step, present the code along with explanations of what it does.</li> <li>When set to <code>explanation-then-code</code>: For each step, first explain the concept or approach, then provide the implementation code.</li> </ul>"},{"location":"api/decorators/StepByStepImpl/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: Concise, OneShot</li> <li>Compatible Models: gpt-4o, gpt-4-turbo, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/StepByStepImpl/#related-decorators","title":"Related Decorators","text":"<ul> <li>CodeQuality: Enhances StepByStepImpl StepByStepImpl works well with CodeQuality to produce well-structured, high-quality implementation code.</li> <li>Concise: Conflicts with StepByStepImpl StepByStepImpl with detailed explanations conflicts with the Concise decorator's goal of brevity.</li> </ul>"},{"location":"api/decorators/StressTest/","title":"StressTest Decorator","text":"<p>Tests the robustness of ideas, theories, plans, or systems by applying extreme conditions, edge cases, and unlikely scenarios. This decorator helps identify vulnerabilities, limitations, and breaking points that might not be apparent under normal circumstances.</p> <p>Category: Verification</p>"},{"location":"api/decorators/StressTest/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>scenarios</code> <code>number</code> Number of stress test scenarios to apply <code>3</code> <code>severity</code> <code>enum</code> The intensity level of the stress conditions <code>severe</code> <code>domain</code> <code>string</code> Optional specific domain or dimension to stress test (e.g., financial, ethical, scalability) ``"},{"location":"api/decorators/StressTest/#severity-options","title":"Severity Options","text":"<ul> <li><code>moderate</code>: Apply realistic but challenging conditions that test important aspects without going to extremes.</li> <li><code>severe</code>: Apply highly challenging conditions that push the subject to its likely breaking points and reveal significant vulnerabilities.</li> <li><code>extreme</code>: Apply worst-case scenarios and highly improbable but catastrophic conditions to find absolute breaking points and critical vulnerabilities.</li> </ul>"},{"location":"api/decorators/StressTest/#examples","title":"Examples","text":""},{"location":"api/decorators/StressTest/#basic-stress-test-of-a-business-model","title":"Basic stress test of a business model","text":"<pre><code>+++StressTest\nEvaluate this subscription-based SaaS business model.\n</code></pre> <p>Provides an analysis of the business model followed by three severe stress test scenarios that challenge its core assumptions and viability</p>"},{"location":"api/decorators/StressTest/#extreme-stress-test-focused-on-a-specific-domain","title":"Extreme stress test focused on a specific domain","text":"<pre><code>+++StressTest(scenarios=5, severity=extreme, domain=security)\nAssess our new authentication protocol design.\n</code></pre> <p>Delivers an assessment of the authentication protocol followed by five extreme security-focused stress test scenarios that identify potential vulnerabilities and breaking points</p>"},{"location":"api/decorators/StressTest/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/StressTest/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: First, provide a standard analysis of this topic. Then, apply {scenarios} different stress test scenarios at a {severity} level of intensity to find weaknesses and vulnerabilities. {domain} Each stress test should focus on a different aspect and clearly explain the scenario, the likely outcome, and what this reveals about potential weaknesses.</p> <p>Notes: This model sometimes needs guidance to develop truly challenging scenarios rather than obvious or simplistic tests</p>"},{"location":"api/decorators/StressTest/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/StressTest/#basic-stress-test-of-a-business-model_1","title":"Basic stress test of a business model","text":"<p>Original Prompt: <pre><code>Evaluate this subscription-based SaaS business model.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please first provide a standard analysis or assessment of the topic, then test its robustness by applying challenging conditions, edge cases, and unlikely scenarios to identify potential vulnerabilities and limitations. Apply 3 distinct stress test scenarios that challenge different aspects of the idea, plan, or system. Apply highly challenging conditions that push the subject to its likely breaking points and reveal significant vulnerabilities.\n\nEvaluate this subscription-based SaaS business model.\n</code></pre></p>"},{"location":"api/decorators/StressTest/#extreme-security-stress-test","title":"Extreme security stress test","text":"<p>Original Prompt: <pre><code>Assess our new authentication protocol design.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please first provide a standard analysis or assessment of the topic, then test its robustness by applying challenging conditions, edge cases, and unlikely scenarios to identify potential vulnerabilities and limitations. Apply 5 distinct stress test scenarios that challenge different aspects of the idea, plan, or system. Apply worst-case scenarios and highly improbable but catastrophic conditions to find absolute breaking points and critical vulnerabilities. Focus your stress testing specifically on the security aspects or dimensions of the subject.\n\nAssess our new authentication protocol design.\n</code></pre></p>"},{"location":"api/decorators/StressTest/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please first provide a standard analysis or assessment of the topic, then test its robustness by applying challenging conditions, edge cases, and unlikely scenarios to identify potential vulnerabilities and limitations.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>scenarios</code>:</li> <li> <p>Format: Apply {value} distinct stress test scenarios that challenge different aspects of the idea, plan, or system.</p> </li> <li> <p><code>severity</code>:</p> </li> <li>When set to <code>moderate</code>: Apply realistic but challenging conditions that test important aspects without going to extremes.</li> <li>When set to <code>severe</code>: Apply highly challenging conditions that push the subject to its likely breaking points and reveal significant vulnerabilities.</li> <li> <p>When set to <code>extreme</code>: Apply worst-case scenarios and highly improbable but catastrophic conditions to find absolute breaking points and critical vulnerabilities.</p> </li> <li> <p><code>domain</code>:</p> </li> <li>Format: Focus your stress testing specifically on the {value} aspects or dimensions of the subject.</li> </ul>"},{"location":"api/decorators/StressTest/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/StressTest/#related-decorators","title":"Related Decorators","text":"<ul> <li>RedTeam: Enhances StressTest RedTeam and StressTest complement each other well, with RedTeam providing adversarial thinking and StressTest providing scenario-based challenges</li> <li>BreakAndBuild: Enhances StressTest StressTest can identify weaknesses that BreakAndBuild can then reconstruct solutions for</li> <li>FindGaps: Enhances StressTest FindGaps works well with StressTest to identify both what's missing and what might break</li> </ul>"},{"location":"api/decorators/StyleShift/","title":"StyleShift Decorator","text":"<p>Modifies specific style characteristics of responses such as formality, persuasiveness, or urgency. This decorator enables fine-tuned control over particular aspects of communication style without changing the overall tone.</p> <p>Category: Tone</p>"},{"location":"api/decorators/StyleShift/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>aspect</code> <code>enum</code> The specific style aspect to modify <code>Required</code> <code>level</code> <code>number</code> The intensity level of the style aspect (1-5, where 1 is minimal and 5 is maximal) <code>3</code> <code>maintain</code> <code>array</code> Style aspects to explicitly maintain while modifying the target aspect ``"},{"location":"api/decorators/StyleShift/#aspect-options","title":"Aspect Options","text":"<ul> <li><code>formality</code>: Adjust the formality level of your response, paying attention to word choice, sentence structure, and adherence to communication conventions.</li> <li><code>persuasion</code>: Adjust the persuasiveness of your response, focusing on rhetorical techniques, compelling arguments, and call-to-action elements.</li> <li><code>urgency</code>: Adjust the sense of urgency in your response, emphasizing time sensitivity, immediate relevance, and priority framing.</li> <li><code>confidence</code>: Adjust the level of confidence expressed in your response, through certainty markers, hedging language, and the strength of assertions.</li> <li><code>complexity</code>: Adjust the complexity of your response, considering vocabulary, sentence structure, conceptual depth, and assumed background knowledge.</li> </ul>"},{"location":"api/decorators/StyleShift/#examples","title":"Examples","text":""},{"location":"api/decorators/StyleShift/#highly-formal-style-while-maintaining-normal-complexity","title":"Highly formal style while maintaining normal complexity","text":"<pre><code>+++StyleShift(aspect=formality, level=5, maintain=[complexity])\nExplain the process of photosynthesis.\n</code></pre> <p>Provides a highly formal explanation of photosynthesis with elevated language and structure, while keeping the complexity at a moderate level</p>"},{"location":"api/decorators/StyleShift/#increased-urgency-for-a-business-communication","title":"Increased urgency for a business communication","text":"<pre><code>+++StyleShift(aspect=urgency, level=4)\nDescribe the steps needed to prepare for the upcoming product launch.\n</code></pre> <p>Delivers a description of product launch preparation steps with heightened sense of urgency and time-sensitivity in the language and framing</p>"},{"location":"api/decorators/StyleShift/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/StyleShift/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Adjust the {aspect} of your response to level {level}/5 (where 1 is minimal and 5 is maximal). {maintain} Pay special attention to word choice, sentence structure, and tone that reflects this specific style adjustment. Keep all other aspects of your communication style consistent.</p> <p>Notes: This model may need more explicit examples of the target style aspect at the specified level to maintain consistency throughout the response</p>"},{"location":"api/decorators/StyleShift/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/StyleShift/#highly-formal-explanation-maintaining-normal-complexity","title":"Highly formal explanation maintaining normal complexity","text":"<p>Original Prompt: <pre><code>Explain the process of photosynthesis.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please modify a specific aspect of your communication style while keeping the content and overall tone consistent. Adjust the formality level of your response, paying attention to word choice, sentence structure, and adherence to communication conventions. Set the intensity of this style aspect to level 5 (on a scale of 1-5, where 1 is minimal and 5 is maximal). While adjusting the target style aspect, make sure to maintain your current level of these aspects: [complexity].\n\nExplain the process of photosynthesis.\n</code></pre></p>"},{"location":"api/decorators/StyleShift/#increased-urgency-for-product-launch-preparation","title":"Increased urgency for product launch preparation","text":"<p>Original Prompt: <pre><code>Describe the steps needed to prepare for the upcoming product launch.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please modify a specific aspect of your communication style while keeping the content and overall tone consistent. Adjust the sense of urgency in your response, emphasizing time sensitivity, immediate relevance, and priority framing. Set the intensity of this style aspect to level 4 (on a scale of 1-5, where 1 is minimal and 5 is maximal).\n\nDescribe the steps needed to prepare for the upcoming product launch.\n</code></pre></p>"},{"location":"api/decorators/StyleShift/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please modify a specific aspect of your communication style while keeping the content and overall tone consistent.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>aspect</code>:</li> <li>When set to <code>formality</code>: Adjust the formality level of your response, paying attention to word choice, sentence structure, and adherence to communication conventions.</li> <li>When set to <code>persuasion</code>: Adjust the persuasiveness of your response, focusing on rhetorical techniques, compelling arguments, and call-to-action elements.</li> <li>When set to <code>urgency</code>: Adjust the sense of urgency in your response, emphasizing time sensitivity, immediate relevance, and priority framing.</li> <li>When set to <code>confidence</code>: Adjust the level of confidence expressed in your response, through certainty markers, hedging language, and the strength of assertions.</li> <li> <p>When set to <code>complexity</code>: Adjust the complexity of your response, considering vocabulary, sentence structure, conceptual depth, and assumed background knowledge.</p> </li> <li> <p><code>level</code>:</p> </li> <li> <p>Format: Set the intensity of this style aspect to level {value} (on a scale of 1-5, where 1 is minimal and 5 is maximal).</p> </li> <li> <p><code>maintain</code>:</p> </li> <li>Format: While adjusting the target style aspect, make sure to maintain your current level of these aspects: {value}.</li> </ul>"},{"location":"api/decorators/StyleShift/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/StyleShift/#related-decorators","title":"Related Decorators","text":"<ul> <li>Audience: Enhances StyleShift StyleShift works well with Audience to fine-tune specific style aspects for particular target groups</li> <li>Professional: Enhances StyleShift StyleShift can enhance Professional by adjusting specific aspects like formality or confidence while maintaining professionalism</li> <li>Persona: Enhances StyleShift StyleShift allows for subtle style adjustments within the broader context of a Persona's voice</li> </ul>"},{"location":"api/decorators/Summary/","title":"Summary Decorator","text":"<p>Provides a condensed summary of information that would otherwise be presented in a more detailed format. This decorator is useful for generating executive summaries, article summaries, or concise overviews of complex topics.</p> <p>Category: Structure</p>"},{"location":"api/decorators/Summary/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>length</code> <code>enum</code> Relative length of the summary <code>medium</code> <code>wordCount</code> <code>number</code> Approximate target word count for the summary `` <code>position</code> <code>enum</code> Where to position the summary in relation to any full content <code>standalone</code>"},{"location":"api/decorators/Summary/#length-options","title":"Length Options","text":"<ul> <li><code>short</code>: Make the summary very concise (approximately 2-3 sentences) capturing only the most essential points.</li> <li><code>medium</code>: Create a moderate-length summary that includes main ideas and key supporting details (approximately 1 paragraph).</li> <li><code>long</code>: Provide a comprehensive summary that covers all significant points while still being more condensed than a full explanation (approximately 2-3 paragraphs).</li> </ul>"},{"location":"api/decorators/Summary/#position-options","title":"Position Options","text":"<ul> <li><code>beginning</code>: Place the summary at the beginning of your response, before any detailed content.</li> <li><code>end</code>: Place the summary at the end of your response, after providing the detailed content.</li> <li><code>standalone</code>: Provide only the summary without additional detailed content.</li> </ul>"},{"location":"api/decorators/Summary/#examples","title":"Examples","text":""},{"location":"api/decorators/Summary/#short-standalone-summary-of-a-complex-topic","title":"Short standalone summary of a complex topic","text":"<pre><code>+++Summary(length=short)\nExplain quantum computing and its potential applications.\n</code></pre> <p>Delivers a concise overview of quantum computing and its applications in approximately 2-3 sentences</p>"},{"location":"api/decorators/Summary/#specific-word-count-summary-at-the-beginning-of-a-response","title":"Specific word count summary at the beginning of a response","text":"<pre><code>+++Summary(wordCount=100, position=beginning)\nDescribe the causes and effects of climate change.\n</code></pre> <p>Starts with a 100-word summary of climate change causes and effects, followed by more detailed information</p>"},{"location":"api/decorators/Summary/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Summary/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Create a brief summary that captures the key points of your response. Focus on the most important information.</p> <p>Notes: This model sometimes requires more explicit instructions about brevity</p>"},{"location":"api/decorators/Summary/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Summary/#short-standalone-summary","title":"Short standalone summary","text":"<p>Original Prompt: <pre><code>Explain quantum computing and its potential applications.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please provide a condensed summary of the information in your response. Make the summary very concise (approximately 2-3 sentences) capturing only the most essential points. Provide only the summary without additional detailed content.\n\nExplain quantum computing and its potential applications.\n</code></pre></p>"},{"location":"api/decorators/Summary/#word-count-limited-summary-at-beginning","title":"Word-count limited summary at beginning","text":"<p>Original Prompt: <pre><code>Describe the causes and effects of climate change.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please provide a condensed summary of the information in your response. The summary should be approximately 100 words in length. Place the summary at the beginning of your response, before any detailed content.\n\nDescribe the causes and effects of climate change.\n</code></pre></p>"},{"location":"api/decorators/Summary/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please provide a condensed summary of the information in your response.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>length</code>:</li> <li>When set to <code>short</code>: Make the summary very concise (approximately 2-3 sentences) capturing only the most essential points.</li> <li>When set to <code>medium</code>: Create a moderate-length summary that includes main ideas and key supporting details (approximately 1 paragraph).</li> <li> <p>When set to <code>long</code>: Provide a comprehensive summary that covers all significant points while still being more condensed than a full explanation (approximately 2-3 paragraphs).</p> </li> <li> <p><code>wordCount</code>:</p> </li> <li> <p>Format: The summary should be approximately {value} words in length.</p> </li> <li> <p><code>position</code>:</p> </li> <li>When set to <code>beginning</code>: Place the summary at the beginning of your response, before any detailed content.</li> <li>When set to <code>end</code>: Place the summary at the end of your response, after providing the detailed content.</li> <li>When set to <code>standalone</code>: Provide only the summary without additional detailed content.</li> </ul>"},{"location":"api/decorators/Summary/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: Detailed</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Summary/#related-decorators","title":"Related Decorators","text":"<ul> <li>Detailed: Conflicts with Summary Summary aims for concise information, which directly conflicts with Detailed's expansive approach</li> <li>Concise: Enhances Summary Summary and Concise work well together for extremely brief outputs</li> </ul>"},{"location":"api/decorators/SystemDiagram/","title":"SystemDiagram Decorator","text":"<p>Creates architectural diagrams and visual representations.</p> <p>Category: Architecture And Design</p>"},{"location":"api/decorators/SystemDiagram/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>notation</code> <code>enum</code> Diagram notation system <code>c4</code> <code>level</code> <code>enum</code> Detail level of the diagram <code>container</code> <code>focus</code> <code>enum</code> Diagram emphasis <code>structure</code>"},{"location":"api/decorators/SystemDiagram/#notation-options","title":"Notation Options","text":"<ul> <li><code>uml</code>: Use UML (Unified Modeling Language) notation for the diagram.</li> <li><code>c4</code>: Follow the C4 model notation for the diagram.</li> <li><code>archimate</code>: Apply ArchiMate notation standards to the diagram.</li> <li><code>informal</code>: Create an informal, easy-to-understand diagram without strict notation rules.</li> <li><code>flowchart</code>: Use standard flowchart notation for the diagram.</li> </ul>"},{"location":"api/decorators/SystemDiagram/#level-options","title":"Level Options","text":"<ul> <li><code>context</code>: Focus on the context level showing the system and its relationships with users and other systems.</li> <li><code>container</code>: Show containers (applications, data stores, microservices) within the system.</li> <li><code>component</code>: Break down into components showing the major structural building blocks and their interactions.</li> <li><code>code</code>: Provide code-level details showing classes, interfaces, and relationships.</li> </ul>"},{"location":"api/decorators/SystemDiagram/#focus-options","title":"Focus Options","text":"<ul> <li><code>structure</code>: Emphasize the structural elements and their relationships.</li> <li><code>behavior</code>: Highlight the behavioral aspects and processes within the system.</li> <li><code>interaction</code>: Focus on interactions and communications between system elements.</li> <li><code>deployment</code>: Show the deployment architecture and infrastructure components.</li> </ul>"},{"location":"api/decorators/SystemDiagram/#examples","title":"Examples","text":""},{"location":"api/decorators/SystemDiagram/#creating-a-c4-container-diagram-showing-interactions","title":"Creating a C4 container diagram showing interactions","text":"<pre><code>+++SystemDiagram(notation=c4, level=container, focus=interaction)\nCreate a system diagram showing how a user authentication service interacts with other system components.\n</code></pre> <p>Produces a C4 notation diagram at container level focusing on the interactions between the authentication service and other system components.</p>"},{"location":"api/decorators/SystemDiagram/#uml-class-diagram-for-a-software-system","title":"UML class diagram for a software system","text":"<pre><code>+++SystemDiagram(notation=uml, level=code, focus=structure)\nCreate a diagram for a blog system with User, Post, and Comment classes.\n</code></pre> <p>Generates a UML class diagram showing the structure of the blog system classes and their relationships.</p>"},{"location":"api/decorators/SystemDiagram/#high-level-system-context-diagram","title":"High-level system context diagram","text":"<pre><code>+++SystemDiagram(notation=informal, level=context)\nShow how our e-commerce platform connects to external systems.\n</code></pre> <p>Creates an informal context diagram showing the e-commerce platform and its connections to external systems like payment processors, shipping services, etc.</p>"},{"location":"api/decorators/SystemDiagram/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/SystemDiagram/#gpt-4o","title":"gpt-4o","text":"<p>Instruction: Create a system diagram that visually represents the architecture or design described. Use clear notation and appropriate level of detail. The diagram should be described in text format that can be easily converted to a visual representation using tools like PlantUML, Mermaid, or similar diagramming tools.</p> <p>Notes: gpt-4o has enhanced capabilities for structured outputs that can be converted to diagrams.</p>"},{"location":"api/decorators/SystemDiagram/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/SystemDiagram/#software-architecture-design","title":"Software Architecture Design","text":"<p>Original Prompt: <pre><code>Create a system diagram showing how a user authentication service interacts with other system components.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Create a system diagram that visually represents the architecture or design described. Use clear notation and appropriate level of detail. Follow the C4 model notation for the diagram. Show containers (applications, data stores, microservices) within the system. Focus on interactions and communications between system elements.\n\nCreate a system diagram showing how a user authentication service interacts with other system components.\n</code></pre></p> <p>Notes: The decorator adds specific instructions about the diagram notation, level, and focus before the original prompt.</p>"},{"location":"api/decorators/SystemDiagram/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Create a system diagram that visually represents the architecture or design described. Use clear notation and appropriate level of detail.</p> <p>Placement: prepend</p> <p>Composition Behavior: override</p> <p>Parameter Effects:</p> <ul> <li><code>notation</code>:</li> <li>When set to <code>uml</code>: Use UML (Unified Modeling Language) notation for the diagram.</li> <li>When set to <code>c4</code>: Follow the C4 model notation for the diagram.</li> <li>When set to <code>archimate</code>: Apply ArchiMate notation standards to the diagram.</li> <li>When set to <code>informal</code>: Create an informal, easy-to-understand diagram without strict notation rules.</li> <li> <p>When set to <code>flowchart</code>: Use standard flowchart notation for the diagram.</p> </li> <li> <p><code>level</code>:</p> </li> <li>When set to <code>context</code>: Focus on the context level showing the system and its relationships with users and other systems.</li> <li>When set to <code>container</code>: Show containers (applications, data stores, microservices) within the system.</li> <li>When set to <code>component</code>: Break down into components showing the major structural building blocks and their interactions.</li> <li> <p>When set to <code>code</code>: Provide code-level details showing classes, interfaces, and relationships.</p> </li> <li> <p><code>focus</code>:</p> </li> <li>When set to <code>structure</code>: Emphasize the structural elements and their relationships.</li> <li>When set to <code>behavior</code>: Highlight the behavioral aspects and processes within the system.</li> <li>When set to <code>interaction</code>: Focus on interactions and communications between system elements.</li> <li>When set to <code>deployment</code>: Show the deployment architecture and infrastructure components.</li> </ul>"},{"location":"api/decorators/SystemDiagram/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo, claude-3-7-sonnet-latest, gemini-pro</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/SystemDiagram/#related-decorators","title":"Related Decorators","text":"<ul> <li>CodeGeneration: Enhances SystemDiagram Can be used to generate diagrams that complement code generation tasks.</li> <li>ArchitecturalPatterns: Enhances SystemDiagram Works well with architectural pattern recommendations to visualize the suggested patterns.</li> </ul>"},{"location":"api/decorators/SystemIntegration/","title":"SystemIntegration Decorator","text":"<p>Provides guidance for integrating with existing systems and services.</p> <p>Category: Implementation-Focused</p>"},{"location":"api/decorators/SystemIntegration/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>systems</code> <code>string</code> External systems to integrate with <code>none</code> <code>approach</code> <code>enum</code> Integration approach <code>adapter</code> <code>coupling</code> <code>enum</code> Desired coupling level <code>loose</code>"},{"location":"api/decorators/SystemIntegration/#approach-options","title":"Approach Options","text":"<ul> <li><code>adapter</code>: Use an adapter pattern to create a compatible interface between systems.</li> <li><code>direct</code>: Implement direct integration with minimal abstraction layers.</li> <li><code>facade</code>: Create a facade to provide a simplified interface to the complex subsystems.</li> <li><code>proxy</code>: Implement a proxy pattern to control access to the external systems.</li> <li><code>bridge</code>: Use a bridge pattern to decouple abstraction from implementation.</li> </ul>"},{"location":"api/decorators/SystemIntegration/#coupling-options","title":"Coupling Options","text":"<ul> <li><code>loose</code>: Maintain loose coupling to minimize dependencies between systems.</li> <li><code>moderate</code>: Balance coupling with performance considerations.</li> <li><code>tight</code>: Implement tight coupling where performance is critical.</li> </ul>"},{"location":"api/decorators/SystemIntegration/#examples","title":"Examples","text":""},{"location":"api/decorators/SystemIntegration/#basic-integration-with-payment-gateway-using-facade-pattern","title":"Basic integration with payment gateway using facade pattern","text":"<pre><code>+++SystemIntegration(systems=payment-gateway,inventory-service, approach=facade, coupling=loose)\n</code></pre> <p>Provides guidance for implementing a facade-based integration with payment gateway and inventory services while maintaining loose coupling.</p>"},{"location":"api/decorators/SystemIntegration/#direct-integration-with-tight-coupling-for-performance","title":"Direct integration with tight coupling for performance","text":"<pre><code>+++SystemIntegration(systems=database, approach=direct, coupling=tight)\n</code></pre> <p>Guides implementation of direct database integration with tight coupling for performance-critical operations.</p>"},{"location":"api/decorators/SystemIntegration/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/SystemIntegration/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: When implementing the solution, consider these system integration guidelines:</p> <p>Notes: Simplified instruction for models with less context capacity.</p>"},{"location":"api/decorators/SystemIntegration/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/SystemIntegration/#e-commerce-application","title":"E-commerce application","text":"<p>Original Prompt: <pre><code>Implement an order processing service that integrates with our payment gateway and inventory system.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Consider the following system integration requirements when developing your solution:\nIntegrate with the following systems: payment-gateway,inventory-service.\nCreate a facade to provide a simplified interface to the complex subsystems.\nMaintain loose coupling to minimize dependencies between systems.\n\nImplement an order processing service that integrates with our payment gateway and inventory system.\n</code></pre></p> <p>Notes: The decorator adds specific integration guidance while preserving the original implementation request.</p>"},{"location":"api/decorators/SystemIntegration/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Consider the following system integration requirements when developing your solution:</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>systems</code>:</li> <li> <p>Format: Integrate with the following systems: {value}.</p> </li> <li> <p><code>approach</code>:</p> </li> <li>When set to <code>adapter</code>: Use an adapter pattern to create a compatible interface between systems.</li> <li>When set to <code>direct</code>: Implement direct integration with minimal abstraction layers.</li> <li>When set to <code>facade</code>: Create a facade to provide a simplified interface to the complex subsystems.</li> <li>When set to <code>proxy</code>: Implement a proxy pattern to control access to the external systems.</li> <li> <p>When set to <code>bridge</code>: Use a bridge pattern to decouple abstraction from implementation.</p> </li> <li> <p><code>coupling</code>:</p> </li> <li>When set to <code>loose</code>: Maintain loose coupling to minimize dependencies between systems.</li> <li>When set to <code>moderate</code>: Balance coupling with performance considerations.</li> <li>When set to <code>tight</code>: Implement tight coupling where performance is critical.</li> </ul>"},{"location":"api/decorators/SystemIntegration/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/SystemIntegration/#related-decorators","title":"Related Decorators","text":"<ul> <li>DesignPatterns: Enhances SystemIntegration SystemIntegration works well with DesignPatterns to provide comprehensive architectural guidance.</li> <li>CodeQuality: Enhances SystemIntegration Can be combined with CodeQuality to ensure integration code meets quality standards.</li> </ul>"},{"location":"api/decorators/TableFormat/","title":"TableFormat Decorator","text":"<p>Structures the AI's response in a tabular format with defined columns. This decorator is ideal for presenting comparative data, lists of items with attributes, or any information that benefits from clear columnar organization.</p> <p>Category: Structure</p>"},{"location":"api/decorators/TableFormat/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>columns</code> <code>array</code> List of column names for the table <code>Required</code> <code>format</code> <code>enum</code> Format style for the table representation <code>markdown</code> <code>alignment</code> <code>enum</code> Text alignment within table cells <code>left</code>"},{"location":"api/decorators/TableFormat/#format-options","title":"Format Options","text":"<ul> <li><code>markdown</code>: Format the table using markdown syntax with headers and cell separators (e.g., | Column1 | Column2 |).</li> <li><code>ascii</code>: Format the table using ASCII characters for borders and separators to create a plain text table.</li> <li><code>csv</code>: Format the table as comma-separated values (CSV) with each row on a new line and values separated by commas.</li> </ul>"},{"location":"api/decorators/TableFormat/#alignment-options","title":"Alignment Options","text":"<ul> <li><code>left</code>: Align all text within cells to the left.</li> <li><code>center</code>: Center all text within cells.</li> <li><code>right</code>: Align all text within cells to the right.</li> </ul>"},{"location":"api/decorators/TableFormat/#examples","title":"Examples","text":""},{"location":"api/decorators/TableFormat/#simple-comparison-table-in-markdown-format","title":"Simple comparison table in markdown format","text":"<pre><code>+++TableFormat(columns=[Feature, TypeScript, JavaScript])\nCompare TypeScript and JavaScript features.\n</code></pre> <p>Presents a markdown table comparing features of TypeScript and JavaScript with three columns</p>"},{"location":"api/decorators/TableFormat/#detailed-csv-table-with-specific-columns","title":"Detailed CSV table with specific columns","text":"<pre><code>+++TableFormat(columns=[Planet, Diameter, Distance from Sun, Orbital Period, Number of Moons], format=csv)\nList the planets in our solar system with their key characteristics.\n</code></pre> <p>Generates a CSV-formatted table containing detailed information about each planet with the specified columns</p>"},{"location":"api/decorators/TableFormat/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/TableFormat/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Create a table with these columns: {columns}. Use {format} formatting and make sure all columns are properly aligned and formatted consistently.</p> <p>Notes: This model sometimes needs more explicit instructions to maintain consistent table formatting throughout the response</p>"},{"location":"api/decorators/TableFormat/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/TableFormat/#markdown-table-for-comparison","title":"Markdown table for comparison","text":"<p>Original Prompt: <pre><code>Compare TypeScript and JavaScript features.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please present your response in a tabular format with clearly defined columns to organize the information effectively. The table should include the following columns: Feature, TypeScript, JavaScript. Format the table using markdown syntax with headers and cell separators (e.g., | Column1 | Column2 |). Align all text within cells to the left.\n\nCompare TypeScript and JavaScript features.\n</code></pre></p>"},{"location":"api/decorators/TableFormat/#csv-table-for-planets-data","title":"CSV table for planets data","text":"<p>Original Prompt: <pre><code>List the planets in our solar system with their key characteristics.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please present your response in a tabular format with clearly defined columns to organize the information effectively. The table should include the following columns: Planet, Diameter, Distance from Sun, Orbital Period, Number of Moons. Format the table as comma-separated values (CSV) with each row on a new line and values separated by commas. Align all text within cells to the left.\n\nList the planets in our solar system with their key characteristics.\n</code></pre></p>"},{"location":"api/decorators/TableFormat/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please present your response in a tabular format with clearly defined columns to organize the information effectively.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>columns</code>:</li> <li> <p>Format: The table should include the following columns: {value}.</p> </li> <li> <p><code>format</code>:</p> </li> <li>When set to <code>markdown</code>: Format the table using markdown syntax with headers and cell separators (e.g., | Column1 | Column2 |).</li> <li>When set to <code>ascii</code>: Format the table using ASCII characters for borders and separators to create a plain text table.</li> <li> <p>When set to <code>csv</code>: Format the table as comma-separated values (CSV) with each row on a new line and values separated by commas.</p> </li> <li> <p><code>alignment</code>:</p> </li> <li>When set to <code>left</code>: Align all text within cells to the left.</li> <li>When set to <code>center</code>: Center all text within cells.</li> <li>When set to <code>right</code>: Align all text within cells to the right.</li> </ul>"},{"location":"api/decorators/TableFormat/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: OutputFormat</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/TableFormat/#related-decorators","title":"Related Decorators","text":"<ul> <li>OutputFormat: Conflicts with TableFormat OutputFormat may specify a different structure that conflicts with TableFormat's tabular presentation</li> <li>Bullet: Conflicts with TableFormat Bullet's list structure conflicts with TableFormat's tabular organization</li> </ul>"},{"location":"api/decorators/TaskBreakdown/","title":"TaskBreakdown Decorator","text":"<p>Requests identification and prioritization of tasks needed to fix an issue or implement a change.</p> <p>Category: Systematic Debugging</p>"},{"location":"api/decorators/TaskBreakdown/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>detail</code> <code>enum</code> Task breakdown detail level <code>detailed</code> <code>priority</code> <code>enum</code> Task prioritization approach <code>dependency-order</code> <code>format</code> <code>enum</code> Task output format <code>checklist</code>"},{"location":"api/decorators/TaskBreakdown/#detail-options","title":"Detail Options","text":"<ul> <li><code>high-level</code>: Provide a high-level breakdown of the main tasks required.</li> <li><code>detailed</code>: Provide a detailed breakdown of tasks with subtasks where appropriate.</li> <li><code>comprehensive</code>: Provide a comprehensive breakdown with detailed subtasks, considerations, and potential challenges for each step.</li> </ul>"},{"location":"api/decorators/TaskBreakdown/#priority-options","title":"Priority Options","text":"<ul> <li><code>dependency-order</code>: Order tasks based on dependencies, with prerequisite tasks first.</li> <li><code>impact</code>: Prioritize tasks based on their impact on resolving the overall issue.</li> <li><code>effort</code>: Prioritize tasks based on effort required, starting with quick wins.</li> <li><code>risk</code>: Prioritize tasks based on risk level, addressing high-risk items first.</li> </ul>"},{"location":"api/decorators/TaskBreakdown/#format-options","title":"Format Options","text":"<ul> <li><code>list</code>: Present the tasks as a numbered list.</li> <li><code>checklist</code>: Present the tasks as a checklist with checkable items.</li> <li><code>kanban</code>: Organize tasks into 'To Do', 'In Progress', and 'Done' categories.</li> <li><code>detailed</code>: Present each task with a title, description, priority level, and estimated effort.</li> </ul>"},{"location":"api/decorators/TaskBreakdown/#examples","title":"Examples","text":""},{"location":"api/decorators/TaskBreakdown/#basic-task-breakdown-for-debugging-a-software-issue","title":"Basic task breakdown for debugging a software issue","text":"<pre><code>+++TaskBreakdown(detail=comprehensive, priority=risk, format=checklist)\nBreak down the tasks needed to fix the data synchronization issues.\n</code></pre> <p>The model will provide a comprehensive checklist of tasks needed to fix data synchronization issues, prioritized by risk level.</p>"},{"location":"api/decorators/TaskBreakdown/#high-level-project-planning","title":"High-level project planning","text":"<pre><code>+++TaskBreakdown(detail=high-level, priority=dependency-order, format=kanban)\nWhat steps should we take to implement the new user authentication system?\n</code></pre> <p>The model will provide a high-level kanban board of tasks organized by dependencies for implementing a new authentication system.</p>"},{"location":"api/decorators/TaskBreakdown/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/TaskBreakdown/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Please break down this problem into specific tasks that need to be completed. For each task, include details based on the specified level and prioritize according to the given approach.</p> <p>Notes: For models with more limited context windows, the instruction is simplified while maintaining the core functionality.</p>"},{"location":"api/decorators/TaskBreakdown/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/TaskBreakdown/#software-debugging-scenario","title":"Software debugging scenario","text":"<p>Original Prompt: <pre><code>Fix the data synchronization issues in our application.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Break down this task into discrete steps or components. Identify the key tasks needed to address this issue. Provide a comprehensive breakdown with detailed subtasks, considerations, and potential challenges for each step. Prioritize tasks based on risk level, addressing high-risk items first. Present the tasks as a checklist with checkable items.\n\nFix the data synchronization issues in our application.\n</code></pre></p> <p>Notes: The decorator adds structure to a vague request by asking for specific task breakdown with prioritization.</p>"},{"location":"api/decorators/TaskBreakdown/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Break down this task into discrete steps or components. Identify the key tasks needed to address this issue.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>detail</code>:</li> <li>When set to <code>high-level</code>: Provide a high-level breakdown of the main tasks required.</li> <li>When set to <code>detailed</code>: Provide a detailed breakdown of tasks with subtasks where appropriate.</li> <li> <p>When set to <code>comprehensive</code>: Provide a comprehensive breakdown with detailed subtasks, considerations, and potential challenges for each step.</p> </li> <li> <p><code>priority</code>:</p> </li> <li>When set to <code>dependency-order</code>: Order tasks based on dependencies, with prerequisite tasks first.</li> <li>When set to <code>impact</code>: Prioritize tasks based on their impact on resolving the overall issue.</li> <li>When set to <code>effort</code>: Prioritize tasks based on effort required, starting with quick wins.</li> <li> <p>When set to <code>risk</code>: Prioritize tasks based on risk level, addressing high-risk items first.</p> </li> <li> <p><code>format</code>:</p> </li> <li>When set to <code>list</code>: Present the tasks as a numbered list.</li> <li>When set to <code>checklist</code>: Present the tasks as a checklist with checkable items.</li> <li>When set to <code>kanban</code>: Organize tasks into 'To Do', 'In Progress', and 'Done' categories.</li> <li>When set to <code>detailed</code>: Present each task with a title, description, priority level, and estimated effort.</li> </ul>"},{"location":"api/decorators/TaskBreakdown/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 1.0.0</li> </ul>"},{"location":"api/decorators/TaskBreakdown/#related-decorators","title":"Related Decorators","text":"<ul> <li>StepByStep: Enhances TaskBreakdown TaskBreakdown works well with StepByStep, as it identifies the tasks that can then be executed in sequence.</li> <li>PrioritizationFramework: Enhances TaskBreakdown Can be combined with PrioritizationFramework for more sophisticated prioritization approaches.</li> </ul>"},{"location":"api/decorators/TechDebt/","title":"TechDebt Decorator","text":"<p>Analyzes technical debt and provides remediation strategies.</p> <p>Category: Developer Education</p>"},{"location":"api/decorators/TechDebt/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>categorization</code> <code>enum</code> Classification approach <code>severity</code> <code>output</code> <code>enum</code> Analysis result <code>comprehensive</code> <code>scope</code> <code>enum</code> Analysis breadth <code>all</code>"},{"location":"api/decorators/TechDebt/#categorization-options","title":"Categorization Options","text":"<ul> <li><code>martin-fowler</code>: Categorize technical debt according to Martin Fowler's quadrants (Reckless/Prudent vs. Deliberate/Inadvertent).</li> <li><code>severity</code>: Categorize technical debt by severity level (Critical, High, Medium, Low).</li> <li><code>age</code>: Categorize technical debt by age (Legacy, Recent, New).</li> <li><code>custom</code>: Use a custom categorization approach based on the context provided.</li> </ul>"},{"location":"api/decorators/TechDebt/#output-options","title":"Output Options","text":"<ul> <li><code>identification</code>: Focus on identifying and documenting technical debt without detailed remediation plans.</li> <li><code>prioritization</code>: Focus on prioritizing technical debt items based on business impact, risk, and effort to fix.</li> <li><code>remediation</code>: Focus on detailed remediation strategies for the identified technical debt.</li> <li><code>comprehensive</code>: Provide a comprehensive analysis including identification, prioritization, and remediation strategies.</li> </ul>"},{"location":"api/decorators/TechDebt/#scope-options","title":"Scope Options","text":"<ul> <li><code>code</code>: Focus analysis on code-level technical debt (e.g., code smells, duplications, complexity).</li> <li><code>architecture</code>: Focus analysis on architectural technical debt (e.g., design patterns, component coupling).</li> <li><code>process</code>: Focus analysis on process-related technical debt (e.g., CI/CD, development workflows).</li> <li><code>testing</code>: Focus analysis on testing-related technical debt (e.g., test coverage, test quality).</li> <li><code>all</code>: Analyze all aspects of technical debt across code, architecture, process, and testing.</li> </ul>"},{"location":"api/decorators/TechDebt/#examples","title":"Examples","text":""},{"location":"api/decorators/TechDebt/#basic-technical-debt-analysis-with-default-parameters","title":"Basic technical debt analysis with default parameters","text":"<pre><code>+++TechDebt\nReview our payment processing service for technical debt.\n</code></pre> <p>Provides a comprehensive analysis of technical debt categorized by severity across all aspects of the payment processing service.</p>"},{"location":"api/decorators/TechDebt/#code-focused-technical-debt-analysis-with-martin-fowler-categorization","title":"Code-focused technical debt analysis with Martin Fowler categorization","text":"<pre><code>+++TechDebt(categorization=martin-fowler, scope=code)\nAnalyze technical debt in our authentication module.\n</code></pre> <p>Analyzes code-level technical debt in the authentication module using Martin Fowler's quadrants for categorization.</p>"},{"location":"api/decorators/TechDebt/#comprehensive-technical-debt-analysis-with-custom-parameters","title":"Comprehensive technical debt analysis with custom parameters","text":"<pre><code>+++TechDebt(categorization=severity, output=comprehensive, scope=code)\nAnalyze technical debt in our authentication module and suggest a remediation plan.\n</code></pre> <p>Provides a comprehensive analysis of code-level technical debt in the authentication module, categorized by severity, with identification, prioritization, and remediation strategies.</p>"},{"location":"api/decorators/TechDebt/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/TechDebt/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Analyze the technical debt in the described system or codebase. Be specific about problems, their impact, and how to fix them.</p> <p>Notes: Simplified instruction for models with less context capacity.</p>"},{"location":"api/decorators/TechDebt/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/TechDebt/#code-review-for-a-legacy-system","title":"Code review for a legacy system","text":"<p>Original Prompt: <pre><code>Analyze technical debt in our authentication module and suggest a remediation plan.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Analyze the technical debt in the described system or codebase. Identify problematic areas, assess their impact, and provide actionable remediation strategies. Categorize technical debt by severity level (Critical, High, Medium, Low). Provide a comprehensive analysis including identification, prioritization, and remediation strategies. Focus analysis on code-level technical debt (e.g., code smells, duplications, complexity).\n\nAnalyze technical debt in our authentication module and suggest a remediation plan.\n</code></pre></p> <p>Notes: The decorator adds specific guidance on how to approach technical debt analysis with severity categorization, comprehensive output, and code-level scope.</p>"},{"location":"api/decorators/TechDebt/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Analyze the technical debt in the described system or codebase. Identify problematic areas, assess their impact, and provide actionable remediation strategies.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>categorization</code>:</li> <li>When set to <code>martin-fowler</code>: Categorize technical debt according to Martin Fowler's quadrants (Reckless/Prudent vs. Deliberate/Inadvertent).</li> <li>When set to <code>severity</code>: Categorize technical debt by severity level (Critical, High, Medium, Low).</li> <li>When set to <code>age</code>: Categorize technical debt by age (Legacy, Recent, New).</li> <li> <p>When set to <code>custom</code>: Use a custom categorization approach based on the context provided.</p> </li> <li> <p><code>output</code>:</p> </li> <li>When set to <code>identification</code>: Focus on identifying and documenting technical debt without detailed remediation plans.</li> <li>When set to <code>prioritization</code>: Focus on prioritizing technical debt items based on business impact, risk, and effort to fix.</li> <li>When set to <code>remediation</code>: Focus on detailed remediation strategies for the identified technical debt.</li> <li> <p>When set to <code>comprehensive</code>: Provide a comprehensive analysis including identification, prioritization, and remediation strategies.</p> </li> <li> <p><code>scope</code>:</p> </li> <li>When set to <code>code</code>: Focus analysis on code-level technical debt (e.g., code smells, duplications, complexity).</li> <li>When set to <code>architecture</code>: Focus analysis on architectural technical debt (e.g., design patterns, component coupling).</li> <li>When set to <code>process</code>: Focus analysis on process-related technical debt (e.g., CI/CD, development workflows).</li> <li>When set to <code>testing</code>: Focus analysis on testing-related technical debt (e.g., test coverage, test quality).</li> <li>When set to <code>all</code>: Analyze all aspects of technical debt across code, architecture, process, and testing.</li> </ul>"},{"location":"api/decorators/TechDebt/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/TechDebt/#related-decorators","title":"Related Decorators","text":"<ul> <li>CodeReview: Enhances TechDebt TechDebt can enhance CodeReview by adding specific focus on technical debt aspects.</li> <li>RefactorGuide: Enhances TechDebt TechDebt works well with RefactorGuide to provide comprehensive code improvement strategies.</li> </ul>"},{"location":"api/decorators/TechDebtControl/","title":"TechDebtControl Decorator","text":"<p>Guides how technical debt should be handled during implementation.</p> <p>Category: Implementation-Focused</p>"},{"location":"api/decorators/TechDebtControl/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>accept</code> <code>enum</code> Level of acceptable technical debt <code>minimal</code> <code>document</code> <code>enum</code> How tech debt should be documented <code>todos</code> <code>tradeoff</code> <code>enum</code> What can be traded for quality <code>elegance</code>"},{"location":"api/decorators/TechDebtControl/#accept-options","title":"Accept Options","text":"<ul> <li><code>none</code>: Do not introduce any technical debt. Implement a complete, high-quality solution even if it takes longer.</li> <li><code>minimal</code>: Minimize technical debt. Only accept small compromises that can be easily addressed later.</li> <li><code>moderate</code>: Accept a moderate amount of technical debt where necessary to meet deadlines, but keep it manageable.</li> <li><code>pragmatic</code>: Prioritize shipping working code. Technical debt is acceptable if it helps meet immediate business needs.</li> </ul>"},{"location":"api/decorators/TechDebtControl/#document-options","title":"Document Options","text":"<ul> <li><code>none</code>: No documentation of technical debt is required.</li> <li><code>comments</code>: Document technical debt with inline code comments where compromises were made.</li> <li><code>todos</code>: Use TODO comments to mark areas of technical debt that need future improvement.</li> <li><code>issues</code>: Create formal issue tickets for each piece of technical debt introduced.</li> <li><code>comprehensive</code>: Provide comprehensive documentation including inline comments, TODOs, and a separate technical debt register with prioritization.</li> </ul>"},{"location":"api/decorators/TechDebtControl/#tradeoff-options","title":"Tradeoff Options","text":"<ul> <li><code>nothing</code>: Do not trade off any aspect of quality.</li> <li><code>completeness</code>: It's acceptable to implement a partial solution now and complete it later.</li> <li><code>performance</code>: Optimize for correctness first; performance optimizations can come later.</li> <li><code>elegance</code>: Focus on functional correctness over code elegance or perfect architecture.</li> </ul>"},{"location":"api/decorators/TechDebtControl/#examples","title":"Examples","text":""},{"location":"api/decorators/TechDebtControl/#pragmatic-approach-for-a-demo-feature","title":"Pragmatic approach for a demo feature","text":"<pre><code>+++TechDebtControl(accept=pragmatic, document=todos, tradeoff=elegance)\nImplement a quick solution for the file upload feature we need for the demo next week. Note areas that will need improvement.\n</code></pre> <p>The model will implement a functional file upload solution prioritizing speed over perfection, using TODO comments to mark areas needing improvement, and focusing on functionality over elegant code.</p>"},{"location":"api/decorators/TechDebtControl/#high-quality-implementation-for-critical-component","title":"High-quality implementation for critical component","text":"<pre><code>+++TechDebtControl(accept=none, document=comprehensive, tradeoff=nothing)\nImplement the authentication system for our banking application.\n</code></pre> <p>The model will create a complete, high-quality authentication system with no technical debt, comprehensive documentation, and no quality trade-offs.</p>"},{"location":"api/decorators/TechDebtControl/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/TechDebtControl/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: For this implementation, follow these technical debt guidelines: {accept} {document} {tradeoff}</p> <p>Notes: Simplified format works better with gpt-4's context handling.</p>"},{"location":"api/decorators/TechDebtControl/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/TechDebtControl/#web-development-sprint-with-tight-deadline","title":"Web development sprint with tight deadline","text":"<p>Original Prompt: <pre><code>Implement a file upload feature for our web application.\n</code></pre></p> <p>Transformed Prompt: <pre><code>When implementing this solution, consider the following technical debt guidelines:\nPrioritize shipping working code. Technical debt is acceptable if it helps meet immediate business needs.\nUse TODO comments to mark areas of technical debt that need future improvement.\nFocus on functional correctness over code elegance or perfect architecture.\n\nImplement a file upload feature for our web application.\n</code></pre></p> <p>Notes: The decorator sets clear expectations about technical debt tolerance for time-sensitive features.</p>"},{"location":"api/decorators/TechDebtControl/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: When implementing this solution, consider the following technical debt guidelines:</p> <p>Placement: prepend</p> <p>Composition Behavior: override</p> <p>Parameter Effects:</p> <ul> <li><code>accept</code>:</li> <li>When set to <code>none</code>: Do not introduce any technical debt. Implement a complete, high-quality solution even if it takes longer.</li> <li>When set to <code>minimal</code>: Minimize technical debt. Only accept small compromises that can be easily addressed later.</li> <li>When set to <code>moderate</code>: Accept a moderate amount of technical debt where necessary to meet deadlines, but keep it manageable.</li> <li> <p>When set to <code>pragmatic</code>: Prioritize shipping working code. Technical debt is acceptable if it helps meet immediate business needs.</p> </li> <li> <p><code>document</code>:</p> </li> <li>When set to <code>none</code>: No documentation of technical debt is required.</li> <li>When set to <code>comments</code>: Document technical debt with inline code comments where compromises were made.</li> <li>When set to <code>todos</code>: Use TODO comments to mark areas of technical debt that need future improvement.</li> <li>When set to <code>issues</code>: Create formal issue tickets for each piece of technical debt introduced.</li> <li> <p>When set to <code>comprehensive</code>: Provide comprehensive documentation including inline comments, TODOs, and a separate technical debt register with prioritization.</p> </li> <li> <p><code>tradeoff</code>:</p> </li> <li>When set to <code>nothing</code>: Do not trade off any aspect of quality.</li> <li>When set to <code>completeness</code>: It's acceptable to implement a partial solution now and complete it later.</li> <li>When set to <code>performance</code>: Optimize for correctness first; performance optimizations can come later.</li> <li>When set to <code>elegance</code>: Focus on functional correctness over code elegance or perfect architecture.</li> </ul>"},{"location":"api/decorators/TechDebtControl/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: PerfectionistCode</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/TechDebtControl/#related-decorators","title":"Related Decorators","text":"<ul> <li>CodeQuality: Conflicts with TechDebtControl CodeQuality decorator typically enforces stricter quality standards that may conflict with permissive technical debt settings.</li> <li>DeadlineOriented: Enhances TechDebtControl Works well with DeadlineOriented to balance speed and quality considerations.</li> </ul>"},{"location":"api/decorators/TechStack/","title":"TechStack Decorator","text":"<p>Recommends technology combinations based on requirements.</p> <p>Category: Architecture And Design</p>"},{"location":"api/decorators/TechStack/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>for</code> <code>enum</code> Target application type <code>web</code> <code>constraints</code> <code>enum</code> Project limitations <code>none</code> <code>maturity</code> <code>enum</code> Technology maturity preference <code>modern-stable</code>"},{"location":"api/decorators/TechStack/#for-options","title":"For Options","text":"<ul> <li><code>web</code>: Focus on web development technologies, frameworks, and hosting solutions.</li> <li><code>mobile</code>: Focus on mobile app development frameworks, languages, and deployment platforms.</li> <li><code>desktop</code>: Focus on desktop application frameworks, languages, and distribution methods.</li> <li><code>iot</code>: Focus on IoT device programming, connectivity solutions, and data processing.</li> <li><code>data</code>: Focus on data storage, processing, analysis, and visualization technologies.</li> <li><code>ai</code>: Focus on AI/ML frameworks, model deployment, and supporting infrastructure.</li> <li><code>enterprise</code>: Focus on enterprise-grade technologies with strong support and integration capabilities.</li> </ul>"},{"location":"api/decorators/TechStack/#constraints-options","title":"Constraints Options","text":"<ul> <li><code>budget</code>: Prioritize cost-effective or open-source solutions that minimize licensing and operational costs.</li> <li><code>scale</code>: Prioritize technologies that can handle significant growth in users, data, or traffic.</li> <li><code>team-size</code>: Consider the learning curve and required expertise for the recommended technologies.</li> <li><code>performance</code>: Emphasize high-performance technologies and optimization strategies.</li> <li><code>security</code>: Prioritize technologies with strong security features and established security practices.</li> <li><code>timeline</code>: Recommend technologies that enable rapid development and deployment.</li> </ul>"},{"location":"api/decorators/TechStack/#maturity-options","title":"Maturity Options","text":"<ul> <li><code>bleeding-edge</code>: Include cutting-edge technologies that may still be in beta or early adoption phases.</li> <li><code>modern-stable</code>: Recommend modern technologies that are stable and have good community support.</li> <li><code>established</code>: Focus on well-established technologies with proven track records.</li> <li><code>enterprise-proven</code>: Recommend only technologies with enterprise support, extensive documentation, and long-term stability guarantees.</li> </ul>"},{"location":"api/decorators/TechStack/#examples","title":"Examples","text":""},{"location":"api/decorators/TechStack/#web-application-tech-stack-for-a-startup","title":"Web application tech stack for a startup","text":"<pre><code>+++TechStack(for=web, constraints=budget, maturity=modern-stable)\nRecommend a technology stack for a B2B SaaS application with emphasis on rapid development and scalability.\n</code></pre> <p>A detailed recommendation of web technologies suitable for a B2B SaaS application, focusing on cost-effective solutions that are modern and stable, with explanations for why each component is appropriate.</p>"},{"location":"api/decorators/TechStack/#enterprise-mobile-application-tech-stack","title":"Enterprise mobile application tech stack","text":"<pre><code>+++TechStack(for=mobile, constraints=security, maturity=enterprise-proven)\nWhat technologies should we use for a financial services mobile app that needs to comply with banking regulations?\n</code></pre> <p>A comprehensive recommendation of enterprise-proven mobile technologies with strong security features, suitable for financial services applications with regulatory requirements.</p>"},{"location":"api/decorators/TechStack/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/TechStack/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Recommend a technology stack for the following requirements. List specific technologies, frameworks, libraries, and tools that work well together. For each component, briefly explain why it's appropriate for the requirements.</p> <p>Notes: More explicit instruction for models with less context understanding.</p>"},{"location":"api/decorators/TechStack/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/TechStack/#web-application-recommendation","title":"Web application recommendation","text":"<p>Original Prompt: <pre><code>Recommend a technology stack for a B2B SaaS application with emphasis on rapid development and scalability.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Recommend a technology stack that is appropriate for the specified requirements. Include specific technologies, frameworks, and tools that work well together. Explain why each component is suitable for the requirements. Focus on web development technologies, frameworks, and hosting solutions. Prioritize technologies that can handle significant growth in users, data, or traffic. Recommend modern technologies that are stable and have good community support.\n\nRecommend a technology stack for a B2B SaaS application with emphasis on rapid development and scalability.\n</code></pre></p> <p>Notes: The decorator adds specific guidance about the type of application, constraints, and technology maturity preferences.</p>"},{"location":"api/decorators/TechStack/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Recommend a technology stack that is appropriate for the specified requirements. Include specific technologies, frameworks, and tools that work well together. Explain why each component is suitable for the requirements.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>for</code>:</li> <li>When set to <code>web</code>: Focus on web development technologies, frameworks, and hosting solutions.</li> <li>When set to <code>mobile</code>: Focus on mobile app development frameworks, languages, and deployment platforms.</li> <li>When set to <code>desktop</code>: Focus on desktop application frameworks, languages, and distribution methods.</li> <li>When set to <code>iot</code>: Focus on IoT device programming, connectivity solutions, and data processing.</li> <li>When set to <code>data</code>: Focus on data storage, processing, analysis, and visualization technologies.</li> <li>When set to <code>ai</code>: Focus on AI/ML frameworks, model deployment, and supporting infrastructure.</li> <li> <p>When set to <code>enterprise</code>: Focus on enterprise-grade technologies with strong support and integration capabilities.</p> </li> <li> <p><code>constraints</code>:</p> </li> <li>When set to <code>budget</code>: Prioritize cost-effective or open-source solutions that minimize licensing and operational costs.</li> <li>When set to <code>scale</code>: Prioritize technologies that can handle significant growth in users, data, or traffic.</li> <li>When set to <code>team-size</code>: Consider the learning curve and required expertise for the recommended technologies.</li> <li>When set to <code>performance</code>: Emphasize high-performance technologies and optimization strategies.</li> <li>When set to <code>security</code>: Prioritize technologies with strong security features and established security practices.</li> <li> <p>When set to <code>timeline</code>: Recommend technologies that enable rapid development and deployment.</p> </li> <li> <p><code>maturity</code>:</p> </li> <li>When set to <code>bleeding-edge</code>: Include cutting-edge technologies that may still be in beta or early adoption phases.</li> <li>When set to <code>modern-stable</code>: Recommend modern technologies that are stable and have good community support.</li> <li>When set to <code>established</code>: Focus on well-established technologies with proven track records.</li> <li>When set to <code>enterprise-proven</code>: Recommend only technologies with enterprise support, extensive documentation, and long-term stability guarantees.</li> </ul>"},{"location":"api/decorators/TechStack/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/TechStack/#related-decorators","title":"Related Decorators","text":"<ul> <li>ArchitecturalPattern: Enhances TechStack TechStack works well with ArchitecturalPattern to provide both high-level architecture and specific technology recommendations.</li> <li>CodeGeneration: Enhances TechStack TechStack can provide context for CodeGeneration to generate code in the appropriate languages and frameworks.</li> </ul>"},{"location":"api/decorators/TemporalResonance/","title":"TemporalResonance Decorator","text":"<p>Analyzes topics across multiple time horizons to identify patterns, principles, and possibilities that transcend present-focused thinking</p> <p>Category: Reasoning</p>"},{"location":"api/decorators/TemporalResonance/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>horizons</code> <code>number</code> Number of distinct time horizons to explore <code>3</code> <code>resonancePoints</code> <code>number</code> Number of resonance points to identify across time horizons <code>3</code> <code>futureScenarios</code> <code>number</code> Number of potential future scenarios to consider <code>3</code> <code>domain</code> <code>enum</code> Specific domain context for the temporal analysis <code>general</code> <code>depth</code> <code>enum</code> Depth of historical analysis and future projection <code>moderate</code>"},{"location":"api/decorators/TemporalResonance/#domain-options","title":"Domain Options","text":"<ul> <li><code>business</code>: Focus on organizational patterns, market cycles, and business model evolution across time periods.</li> <li><code>technology</code>: Examine technological adoption cycles, innovation patterns, and digital transformation dynamics across different eras.</li> <li><code>society</code>: Analyze social movements, cultural shifts, and institutional changes across historical periods.</li> <li><code>personal</code>: Focus on individual development patterns, career trajectories, and personal growth cycles.</li> <li><code>science</code>: Examine scientific paradigm shifts, research methodologies, and knowledge development across different periods.</li> <li><code>general</code>: Apply a general temporal analysis approach appropriate to the topic.</li> </ul>"},{"location":"api/decorators/TemporalResonance/#depth-options","title":"Depth Options","text":"<ul> <li><code>shallow</code>: Conduct a brief analysis of obvious patterns across time horizons.</li> <li><code>moderate</code>: Perform a balanced temporal analysis that identifies substantive patterns without excessive historical detail.</li> <li><code>deep</code>: Conduct a comprehensive temporal analysis with detailed historical context, nuanced present assessment, and well-developed future projections.</li> </ul>"},{"location":"api/decorators/TemporalResonance/#examples","title":"Examples","text":""},{"location":"api/decorators/TemporalResonance/#business-transformation-analysis","title":"Business transformation analysis","text":"<pre><code>+++TemporalResonance(domain=business, resonancePoints=3, depth=moderate)\n</code></pre> <p>Analyzes business transformation through three time horizons, identifying three key resonance points with moderate historical depth</p>"},{"location":"api/decorators/TemporalResonance/#personal-career-planning","title":"Personal career planning","text":"<pre><code>+++TemporalResonance(domain=personal, futureScenarios=4, depth=deep)\n</code></pre> <p>Provides deep analysis of personal career development across time horizons with four detailed future scenarios</p>"},{"location":"api/decorators/TemporalResonance/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/TemporalResonance/#organizational-change-management","title":"Organizational change management","text":"<p>Original Prompt: <pre><code>How can I approach implementing a new CRM system effectively?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Analyze the topic using the Temporal Resonance approach, which examines patterns across different time horizons (past, present, and future) to generate insights that transcend present limitations. Identify recurring patterns, underlying principles, and resonance points where insights from different time periods amplify each other. Explore three distinct time horizons: historical patterns, current dynamics, and emergent possibilities. Identify three powerful resonance points that demonstrate persistent patterns across different time contexts. Develop three distinct future scenarios representing different potential trajectories. Focus on organizational patterns, market cycles, and business model evolution across time periods. Perform a balanced temporal analysis that identifies substantive patterns without excessive historical detail.\n\nHow can I approach implementing a new CRM system effectively?\n</code></pre></p>"},{"location":"api/decorators/TemporalResonance/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Analyze the topic using the Temporal Resonance approach, which examines patterns across different time horizons (past, present, and future) to generate insights that transcend present limitations. Identify recurring patterns, underlying principles, and resonance points where insights from different time periods amplify each other.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>horizons</code>:</li> <li>When set to <code>2</code>: Explore two primary time horizons.</li> <li>When set to <code>3</code>: Explore three distinct time horizons: historical patterns, current dynamics, and emergent possibilities.</li> <li>When set to <code>4</code>: Explore four time horizons, including distant past, recent past, present, and future possibilities.</li> <li> <p>When set to <code>5</code>: Conduct a comprehensive exploration across five time horizons, ranging from distant historical patterns to long-term future possibilities.</p> </li> <li> <p><code>resonancePoints</code>:</p> </li> <li>When set to <code>1</code>: Identify one key resonance point where patterns across time horizons converge.</li> <li>When set to <code>2</code>: Identify two significant resonance points that reveal patterns transcending specific time periods.</li> <li>When set to <code>3</code>: Identify three powerful resonance points that demonstrate persistent patterns across different time contexts.</li> <li> <p>When set to <code>4</code>: Conduct an extensive analysis to identify four or more resonance points that reveal deep underlying principles.</p> </li> <li> <p><code>futureScenarios</code>:</p> </li> <li>When set to <code>1</code>: Consider one primary future trajectory.</li> <li>When set to <code>2</code>: Explore two contrasting future scenarios.</li> <li>When set to <code>3</code>: Develop three distinct future scenarios representing different potential trajectories.</li> <li> <p>When set to <code>4</code>: Create a comprehensive set of four or more future scenarios to capture a wide range of possibilities.</p> </li> <li> <p><code>domain</code>:</p> </li> <li>When set to <code>business</code>: Focus on organizational patterns, market cycles, and business model evolution across time periods.</li> <li>When set to <code>technology</code>: Examine technological adoption cycles, innovation patterns, and digital transformation dynamics across different eras.</li> <li>When set to <code>society</code>: Analyze social movements, cultural shifts, and institutional changes across historical periods.</li> <li>When set to <code>personal</code>: Focus on individual development patterns, career trajectories, and personal growth cycles.</li> <li>When set to <code>science</code>: Examine scientific paradigm shifts, research methodologies, and knowledge development across different periods.</li> <li> <p>When set to <code>general</code>: Apply a general temporal analysis approach appropriate to the topic.</p> </li> <li> <p><code>depth</code>:</p> </li> <li>When set to <code>shallow</code>: Conduct a brief analysis of obvious patterns across time horizons.</li> <li>When set to <code>moderate</code>: Perform a balanced temporal analysis that identifies substantive patterns without excessive historical detail.</li> <li>When set to <code>deep</code>: Conduct a comprehensive temporal analysis with detailed historical context, nuanced present assessment, and well-developed future projections.</li> </ul>"},{"location":"api/decorators/TemporalResonance/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: claude-3-opus-20240229, claude-3-sonnet-20240229, gpt-4o, gpt-4o-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/TemporalResonance/#related-decorators","title":"Related Decorators","text":"<ul> <li>StepByStep: Enhances TemporalResonance StepByStep can be used to structure the temporal analysis process</li> <li>Debate: Enhances TemporalResonance Debate can be used to explore contrasting views across different time horizons</li> </ul>"},{"location":"api/decorators/TestCases/","title":"TestCases Decorator","text":"<p>Generates specific test cases for functionality, edge cases, or regressions.</p> <p>Category: Testing And Debugging</p>"},{"location":"api/decorators/TestCases/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>coverage</code> <code>enum</code> Types of test cases to generate <code>happy-path</code> <code>format</code> <code>enum</code> Output format of the test cases <code>code</code> <code>assertions</code> <code>enum</code> Level of assertion detail <code>comprehensive</code>"},{"location":"api/decorators/TestCases/#coverage-options","title":"Coverage Options","text":"<ul> <li><code>happy-path</code>: Focus on testing the main functionality with valid inputs and expected behavior.</li> <li><code>edge-cases</code>: Focus on testing edge cases and unusual inputs that might cause unexpected behavior.</li> <li><code>error-conditions</code>: Focus on testing error conditions and how the system handles invalid inputs.</li> <li><code>boundary</code>: Focus on testing boundary conditions and limits of the functionality.</li> <li><code>all</code>: Provide comprehensive test coverage including happy paths, edge cases, error conditions, and boundary tests.</li> </ul>"},{"location":"api/decorators/TestCases/#format-options","title":"Format Options","text":"<ul> <li><code>table</code>: Present the test cases in a tabular format with inputs, expected outputs, and test descriptions.</li> <li><code>code</code>: Present the test cases as executable code with proper test functions and assertions.</li> <li><code>gherkin</code>: Present the test cases in Gherkin format (Given-When-Then) suitable for behavior-driven development.</li> </ul>"},{"location":"api/decorators/TestCases/#assertions-options","title":"Assertions Options","text":"<ul> <li><code>basic</code>: Include basic assertions that verify the core functionality.</li> <li><code>comprehensive</code>: Include comprehensive assertions that verify both the core functionality and important side effects.</li> <li><code>advanced</code>: Include advanced assertions that verify all aspects of the functionality, including edge cases and performance considerations.</li> </ul>"},{"location":"api/decorators/TestCases/#examples","title":"Examples","text":""},{"location":"api/decorators/TestCases/#generating-edge-case-tests-for-a-date-processing-function","title":"Generating edge case tests for a date processing function","text":"<pre><code>+++TestCases(coverage=edge-cases, format=code, assertions=comprehensive)\nGenerate test cases for a function that processes date ranges, including edge cases like leap years and timezone transitions.\n</code></pre> <p>The model will generate code-based test cases focusing on edge cases for date processing, with comprehensive assertions.</p>"},{"location":"api/decorators/TestCases/#creating-tabular-test-cases-for-error-conditions","title":"Creating tabular test cases for error conditions","text":"<pre><code>+++TestCases(coverage=error-conditions, format=table)\nGenerate test cases for a user registration form validation.\n</code></pre> <p>The model will generate a table of test cases focusing on error conditions in form validation, with comprehensive assertions (the default).</p>"},{"location":"api/decorators/TestCases/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/TestCases/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Create test cases for the following functionality. Be thorough and consider different scenarios.</p> <p>Notes: Simplified instruction for models with less context capacity.</p>"},{"location":"api/decorators/TestCases/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/TestCases/#unit-testing-a-date-range-function","title":"Unit testing a date range function","text":"<p>Original Prompt: <pre><code>Generate test cases for a function that processes date ranges.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Generate test cases for the following functionality. Focus on providing thorough test coverage. Focus on testing edge cases and unusual inputs that might cause unexpected behavior. Present the test cases as executable code with proper test functions and assertions. Include comprehensive assertions that verify both the core functionality and important side effects.\n\nGenerate test cases for a function that processes date ranges.\n</code></pre></p> <p>Notes: The decorator adds specific guidance on test coverage, format, and assertion level.</p>"},{"location":"api/decorators/TestCases/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Generate test cases for the following functionality. Focus on providing thorough test coverage.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>coverage</code>:</li> <li>When set to <code>happy-path</code>: Focus on testing the main functionality with valid inputs and expected behavior.</li> <li>When set to <code>edge-cases</code>: Focus on testing edge cases and unusual inputs that might cause unexpected behavior.</li> <li>When set to <code>error-conditions</code>: Focus on testing error conditions and how the system handles invalid inputs.</li> <li>When set to <code>boundary</code>: Focus on testing boundary conditions and limits of the functionality.</li> <li> <p>When set to <code>all</code>: Provide comprehensive test coverage including happy paths, edge cases, error conditions, and boundary tests.</p> </li> <li> <p><code>format</code>:</p> </li> <li>When set to <code>table</code>: Present the test cases in a tabular format with inputs, expected outputs, and test descriptions.</li> <li>When set to <code>code</code>: Present the test cases as executable code with proper test functions and assertions.</li> <li> <p>When set to <code>gherkin</code>: Present the test cases in Gherkin format (Given-When-Then) suitable for behavior-driven development.</p> </li> <li> <p><code>assertions</code>:</p> </li> <li>When set to <code>basic</code>: Include basic assertions that verify the core functionality.</li> <li>When set to <code>comprehensive</code>: Include comprehensive assertions that verify both the core functionality and important side effects.</li> <li>When set to <code>advanced</code>: Include advanced assertions that verify all aspects of the functionality, including edge cases and performance considerations.</li> </ul>"},{"location":"api/decorators/TestCases/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 1.5.0</li> </ul>"},{"location":"api/decorators/TestCases/#related-decorators","title":"Related Decorators","text":"<ul> <li>CodeReview: Enhances TestCases TestCases works well with CodeReview as it can generate tests that verify issues identified in code reviews.</li> <li>Debugging: Enhances TestCases TestCases can be used to create regression tests for bugs identified during debugging.</li> </ul>"},{"location":"api/decorators/TestStrategy/","title":"TestStrategy Decorator","text":"<p>Designs comprehensive testing approaches for software components or systems.</p> <p>Category: Testing And Debugging</p>"},{"location":"api/decorators/TestStrategy/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>level</code> <code>enum</code> Testing scope level <code>unit</code> <code>framework</code> <code>enum</code> Testing framework to use <code>language-appropriate</code> <code>approach</code> <code>enum</code> Testing methodology <code>tdd</code>"},{"location":"api/decorators/TestStrategy/#level-options","title":"Level Options","text":"<ul> <li><code>unit</code>: Focus on unit testing individual components in isolation.</li> <li><code>integration</code>: Design integration tests that verify interactions between components.</li> <li><code>e2e</code>: Create end-to-end tests that validate complete user workflows.</li> <li><code>performance</code>: Develop performance tests to measure system responsiveness and stability under load.</li> <li><code>security</code>: Implement security tests to identify vulnerabilities and ensure data protection.</li> </ul>"},{"location":"api/decorators/TestStrategy/#framework-options","title":"Framework Options","text":"<ul> <li><code>jest</code>: Use Jest as the testing framework.</li> <li><code>pytest</code>: Implement tests using the pytest framework.</li> <li><code>junit</code>: Develop tests with the JUnit framework.</li> <li><code>mocha</code>: Create tests using the Mocha framework.</li> <li><code>cypress</code>: Build tests with the Cypress framework.</li> </ul>"},{"location":"api/decorators/TestStrategy/#approach-options","title":"Approach Options","text":"<ul> <li><code>tdd</code>: Follow Test-Driven Development methodology (write tests before implementation).</li> <li><code>bdd</code>: Use Behavior-Driven Development with descriptive scenarios that reflect user requirements.</li> <li><code>property</code>: Implement property-based testing to verify invariants across many generated inputs.</li> <li><code>snapshot</code>: Utilize snapshot testing to detect unexpected UI or data structure changes.</li> </ul>"},{"location":"api/decorators/TestStrategy/#examples","title":"Examples","text":""},{"location":"api/decorators/TestStrategy/#integration-testing-strategy-for-an-authentication-service","title":"Integration testing strategy for an authentication service","text":"<pre><code>+++TestStrategy(level=integration, framework=jest, approach=bdd)\nDesign a testing strategy for an authentication service with database and external API dependencies.\n</code></pre> <p>A comprehensive integration testing strategy using Jest and BDD approach, focusing on testing interactions between the authentication service, database, and external APIs.</p>"},{"location":"api/decorators/TestStrategy/#unit-testing-strategy-with-default-parameters","title":"Unit testing strategy with default parameters","text":"<pre><code>+++TestStrategy()\nDesign tests for a string manipulation utility library.\n</code></pre> <p>A unit testing strategy using TDD methodology with an appropriate framework for the implementation language, focusing on testing individual functions in isolation.</p>"},{"location":"api/decorators/TestStrategy/#performance-testing-for-a-high-traffic-api","title":"Performance testing for a high-traffic API","text":"<pre><code>+++TestStrategy(level=performance, framework=junit)\nCreate tests for a payment processing API that handles 1000 transactions per second.\n</code></pre> <p>A performance testing strategy using JUnit to measure throughput, response time, and stability of the payment API under high load conditions.</p>"},{"location":"api/decorators/TestStrategy/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/TestStrategy/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Create a detailed testing strategy that includes test cases, methodologies, and frameworks for the following scenario:</p> <p>Notes: More explicit instruction for models with less context understanding.</p>"},{"location":"api/decorators/TestStrategy/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/TestStrategy/#web-application-testing","title":"Web application testing","text":"<p>Original Prompt: <pre><code>Design a testing strategy for an authentication service with database and external API dependencies.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Design a testing strategy for the following, considering best practices for software quality assurance. Focus on integration tests that verify interactions between components. Use Jest as the testing framework. Use Behavior-Driven Development with descriptive scenarios that reflect user requirements.\n\nDesign a testing strategy for an authentication service with database and external API dependencies.\n</code></pre></p> <p>Notes: This example shows how the decorator adds specific guidance for integration testing with Jest using BDD methodology.</p>"},{"location":"api/decorators/TestStrategy/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Design a testing strategy for the following, considering best practices for software quality assurance.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>level</code>:</li> <li>When set to <code>unit</code>: Focus on unit testing individual components in isolation.</li> <li>When set to <code>integration</code>: Design integration tests that verify interactions between components.</li> <li>When set to <code>e2e</code>: Create end-to-end tests that validate complete user workflows.</li> <li>When set to <code>performance</code>: Develop performance tests to measure system responsiveness and stability under load.</li> <li> <p>When set to <code>security</code>: Implement security tests to identify vulnerabilities and ensure data protection.</p> </li> <li> <p><code>framework</code>:</p> </li> <li>When set to <code>jest</code>: Use Jest as the testing framework.</li> <li>When set to <code>pytest</code>: Implement tests using the pytest framework.</li> <li>When set to <code>junit</code>: Develop tests with the JUnit framework.</li> <li>When set to <code>mocha</code>: Create tests using the Mocha framework.</li> <li>When set to <code>cypress</code>: Build tests with the Cypress framework.</li> <li> <p>When set to <code>language-appropriate</code>: Select an appropriate testing framework based on the implementation language.</p> </li> <li> <p><code>approach</code>:</p> </li> <li>When set to <code>tdd</code>: Follow Test-Driven Development methodology (write tests before implementation).</li> <li>When set to <code>bdd</code>: Use Behavior-Driven Development with descriptive scenarios that reflect user requirements.</li> <li>When set to <code>property</code>: Implement property-based testing to verify invariants across many generated inputs.</li> <li>When set to <code>snapshot</code>: Utilize snapshot testing to detect unexpected UI or data structure changes.</li> </ul>"},{"location":"api/decorators/TestStrategy/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/TestStrategy/#related-decorators","title":"Related Decorators","text":"<ul> <li>CodeReview: Enhances TestStrategy TestStrategy works well with CodeReview to ensure both testing strategy and implementation quality.</li> <li>ArchitectureDesign: Enhances TestStrategy Can be used after ArchitectureDesign to develop tests that validate the architectural requirements.</li> </ul>"},{"location":"api/decorators/Timeline/","title":"Timeline Decorator","text":"<p>Organizes information in chronological order, highlighting key events or developments over time. This decorator is ideal for historical accounts, project planning, process evolution, or any topic with a temporal dimension.</p> <p>Category: Structure</p>"},{"location":"api/decorators/Timeline/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>granularity</code> <code>enum</code> The level of time detail to include in the timeline <code>year</code> <code>format</code> <code>enum</code> The presentation format for the timeline <code>list</code> <code>details</code> <code>enum</code> The level of detail to include for each timeline event <code>moderate</code>"},{"location":"api/decorators/Timeline/#granularity-options","title":"Granularity Options","text":"<ul> <li><code>day</code>: Structure the timeline with day-level precision, including specific dates for events where relevant.</li> <li><code>month</code>: Structure the timeline with month-level precision, grouping events by month and year.</li> <li><code>year</code>: Structure the timeline with year-level precision, organizing events by year.</li> <li><code>decade</code>: Structure the timeline by decades, grouping events into 10-year periods.</li> <li><code>century</code>: Structure the timeline by centuries, organizing events into 100-year periods.</li> <li><code>era</code>: Structure the timeline by broad historical eras or epochs, labeling each period appropriately.</li> </ul>"},{"location":"api/decorators/Timeline/#format-options","title":"Format Options","text":"<ul> <li><code>list</code>: Present the timeline as a chronological list with clear dates/periods and descriptions for each entry.</li> <li><code>narrative</code>: Present the timeline as a flowing narrative that moves chronologically through time while maintaining clear temporal markers.</li> <li><code>table</code>: Present the timeline as a table with columns for date/period and description/events.</li> </ul>"},{"location":"api/decorators/Timeline/#details-options","title":"Details Options","text":"<ul> <li><code>minimal</code>: For each timeline entry, include only the most essential information - key events, dates, and primary actors.</li> <li><code>moderate</code>: For each timeline entry, include balanced information with important details, context, and significance.</li> <li><code>comprehensive</code>: For each timeline entry, provide extensive details including background context, significance, consequences, and connections to other events.</li> </ul>"},{"location":"api/decorators/Timeline/#examples","title":"Examples","text":""},{"location":"api/decorators/Timeline/#basic-chronological-timeline-of-major-events","title":"Basic chronological timeline of major events","text":"<pre><code>+++Timeline\nDescribe the key developments in artificial intelligence.\n</code></pre> <p>Presents a year-by-year list of important AI milestones and breakthroughs from earliest developments to present day</p>"},{"location":"api/decorators/Timeline/#detailed-narrative-timeline-with-specific-date-granularity","title":"Detailed narrative timeline with specific date granularity","text":"<pre><code>+++Timeline(granularity=month, format=narrative, details=comprehensive)\nWhat were the major events of the Apollo 11 mission?\n</code></pre> <p>Provides a flowing narrative account of the Apollo 11 mission with month/day dates and comprehensive details of each significant event</p>"},{"location":"api/decorators/Timeline/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Timeline/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Create a chronological timeline that shows the sequence of events or developments. Include clear time markers ({granularity} level) and organize the information in {format} format. For each entry, provide {details} level of detail.</p> <p>Notes: This model sometimes needs more explicit instructions to maintain consistent chronological ordering throughout a response</p>"},{"location":"api/decorators/Timeline/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Timeline/#year-level-timeline-of-ai-developments","title":"Year-level timeline of AI developments","text":"<p>Original Prompt: <pre><code>Describe the key developments in artificial intelligence.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please organize your response as a timeline that presents information chronologically, highlighting key events or developments over time. Structure the timeline with year-level precision, organizing events by year. Present the timeline as a chronological list with clear dates/periods and descriptions for each entry. For each timeline entry, include balanced information with important details, context, and significance.\n\nDescribe the key developments in artificial intelligence.\n</code></pre></p>"},{"location":"api/decorators/Timeline/#detailed-narrative-of-space-mission-by-month","title":"Detailed narrative of space mission by month","text":"<p>Original Prompt: <pre><code>What were the major events of the Apollo 11 mission?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please organize your response as a timeline that presents information chronologically, highlighting key events or developments over time. Structure the timeline with month-level precision, grouping events by month and year. Present the timeline as a flowing narrative that moves chronologically through time while maintaining clear temporal markers. For each timeline entry, provide extensive details including background context, significance, consequences, and connections to other events.\n\nWhat were the major events of the Apollo 11 mission?\n</code></pre></p>"},{"location":"api/decorators/Timeline/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please organize your response as a timeline that presents information chronologically, highlighting key events or developments over time.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>granularity</code>:</li> <li>When set to <code>day</code>: Structure the timeline with day-level precision, including specific dates for events where relevant.</li> <li>When set to <code>month</code>: Structure the timeline with month-level precision, grouping events by month and year.</li> <li>When set to <code>year</code>: Structure the timeline with year-level precision, organizing events by year.</li> <li>When set to <code>decade</code>: Structure the timeline by decades, grouping events into 10-year periods.</li> <li>When set to <code>century</code>: Structure the timeline by centuries, organizing events into 100-year periods.</li> <li> <p>When set to <code>era</code>: Structure the timeline by broad historical eras or epochs, labeling each period appropriately.</p> </li> <li> <p><code>format</code>:</p> </li> <li>When set to <code>list</code>: Present the timeline as a chronological list with clear dates/periods and descriptions for each entry.</li> <li>When set to <code>narrative</code>: Present the timeline as a flowing narrative that moves chronologically through time while maintaining clear temporal markers.</li> <li> <p>When set to <code>table</code>: Present the timeline as a table with columns for date/period and description/events.</p> </li> <li> <p><code>details</code>:</p> </li> <li>When set to <code>minimal</code>: For each timeline entry, include only the most essential information - key events, dates, and primary actors.</li> <li>When set to <code>moderate</code>: For each timeline entry, include balanced information with important details, context, and significance.</li> <li>When set to <code>comprehensive</code>: For each timeline entry, provide extensive details including background context, significance, consequences, and connections to other events.</li> </ul>"},{"location":"api/decorators/Timeline/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Timeline/#related-decorators","title":"Related Decorators","text":"<ul> <li>StepByStep: Enhances Timeline StepByStep can complement Timeline by clarifying the sequential nature of chronological events</li> <li>TableFormat: Enhances Timeline When Timeline uses table format, TableFormat can further refine the presentation with additional formatting options</li> </ul>"},{"location":"api/decorators/Tone/","title":"Tone Decorator","text":"<p>Adjusts the writing style and tone of the AI's response. This decorator helps ensure that responses are appropriately styled for different audiences and contexts, from formal technical documentation to casual explanations.</p> <p>Category: Minimal</p>"},{"location":"api/decorators/Tone/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>style</code> <code>enum</code> The desired tone and style for the response <code>formal</code>"},{"location":"api/decorators/Tone/#style-options","title":"Style Options","text":"<ul> <li><code>formal</code>: Use a formal, professional tone with proper terminology and minimal contractions. Maintain a structured approach with clear organization.</li> <li><code>casual</code>: Use a casual, conversational tone as if speaking to a friend. Feel free to use contractions and a more relaxed writing style.</li> <li><code>friendly</code>: Use a warm, approachable tone that builds rapport. Be encouraging and personable while still being informative.</li> <li><code>technical</code>: Use precise technical language and terminology appropriate for a knowledgeable audience. Include specific details and technical concepts.</li> <li><code>humorous</code>: Incorporate appropriate humor and a light-hearted tone in your response, while still providing accurate information.</li> </ul>"},{"location":"api/decorators/Tone/#examples","title":"Examples","text":""},{"location":"api/decorators/Tone/#technical-documentation-tone","title":"Technical documentation tone","text":"<pre><code>+++Tone(style=technical)\nExplain how garbage collection works in Python\n</code></pre> <p>Provides a technically precise explanation using appropriate terminology</p>"},{"location":"api/decorators/Tone/#casual-explanation","title":"Casual explanation","text":"<pre><code>+++Tone(style=casual)\nWhy is the sky blue?\n</code></pre> <p>Delivers a relaxed, conversational explanation of atmospheric optics</p>"},{"location":"api/decorators/Tone/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Tone/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Please write your response in the following tone and style:</p> <p>Notes: This model benefits from more direct tone instructions</p>"},{"location":"api/decorators/Tone/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Tone/#technical-style","title":"Technical style","text":"<p>Original Prompt: <pre><code>Explain how cloud computing works.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please adjust your writing style and tone for this response. Use precise technical language and terminology appropriate for a knowledgeable audience. Include specific details and technical concepts.\n\nExplain how cloud computing works.\n</code></pre></p>"},{"location":"api/decorators/Tone/#casual-style","title":"Casual style","text":"<p>Original Prompt: <pre><code>Why do leaves change color in autumn?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please adjust your writing style and tone for this response. Use a casual, conversational tone as if speaking to a friend. Feel free to use contractions and a more relaxed writing style.\n\nWhy do leaves change color in autumn?\n</code></pre></p>"},{"location":"api/decorators/Tone/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please adjust your writing style and tone for this response.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>style</code>:</li> <li>When set to <code>formal</code>: Use a formal, professional tone with proper terminology and minimal contractions. Maintain a structured approach with clear organization.</li> <li>When set to <code>casual</code>: Use a casual, conversational tone as if speaking to a friend. Feel free to use contractions and a more relaxed writing style.</li> <li>When set to <code>friendly</code>: Use a warm, approachable tone that builds rapport. Be encouraging and personable while still being informative.</li> <li>When set to <code>technical</code>: Use precise technical language and terminology appropriate for a knowledgeable audience. Include specific details and technical concepts.</li> <li>When set to <code>humorous</code>: Incorporate appropriate humor and a light-hearted tone in your response, while still providing accurate information.</li> </ul>"},{"location":"api/decorators/Tone/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: ELI5</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Tone/#related-decorators","title":"Related Decorators","text":"<ul> <li>ELI5: Conflicts with Tone ELI5 requires a specific tone that may contradict certain tone settings</li> <li>Academic: Conflicts with Tone The Academic decorator enforces a scholarly tone that may conflict with casual or humorous tones</li> </ul>"},{"location":"api/decorators/Tradeoffs/","title":"Tradeoffs Decorator","text":"<p>Analyzes design tradeoffs across multiple dimensions.</p> <p>Category: Architecture And Design</p>"},{"location":"api/decorators/Tradeoffs/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>axes</code> <code>enum</code> Dimensions to analyze <code>performance,cost,complexity,maintainability</code> <code>format</code> <code>enum</code> Presentation format <code>decision-matrix</code> <code>depth</code> <code>enum</code> Analysis depth <code>detailed</code>"},{"location":"api/decorators/Tradeoffs/#axes-options","title":"Axes Options","text":"<ul> <li><code>performance</code>: Option: performance</li> <li><code>cost</code>: Option: cost</li> <li><code>complexity</code>: Option: complexity</li> <li><code>maintainability</code>: Option: maintainability</li> <li><code>security</code>: Option: security</li> <li><code>time-to-market</code>: Option: time-to-market</li> </ul>"},{"location":"api/decorators/Tradeoffs/#format-options","title":"Format Options","text":"<ul> <li><code>table</code>: Present your analysis in a tabular format with options as rows and dimensions as columns.</li> <li><code>prose</code>: Present your analysis as a structured prose discussion of each option across the dimensions.</li> <li><code>radar-chart</code>: Describe how a radar chart would represent these tradeoffs, with each axis representing one dimension.</li> <li><code>decision-matrix</code>: Create a decision matrix that scores each option across the dimensions, with a final recommendation based on the overall scores.</li> </ul>"},{"location":"api/decorators/Tradeoffs/#depth-options","title":"Depth Options","text":"<ul> <li><code>overview</code>: Provide a high-level overview of the key tradeoffs without detailed analysis.</li> <li><code>detailed</code>: Provide a thorough analysis with specific examples and reasoning for each dimension.</li> <li><code>quantitative</code>: Where possible, include quantitative metrics and measurements to support your analysis.</li> </ul>"},{"location":"api/decorators/Tradeoffs/#examples","title":"Examples","text":""},{"location":"api/decorators/Tradeoffs/#analyzing-database-hosting-options","title":"Analyzing database hosting options","text":"<pre><code>+++Tradeoffs(axes=performance,cost,security,maintainability, format=decision-matrix)\nAnalyze the tradeoffs between using a managed database service versus self-hosted for a financial application.\n</code></pre> <p>A decision matrix comparing managed vs. self-hosted database options across performance, cost, security, and maintainability dimensions, with scores and a final recommendation.</p>"},{"location":"api/decorators/Tradeoffs/#comparing-programming-languages","title":"Comparing programming languages","text":"<pre><code>+++Tradeoffs(axes=performance,complexity,time-to-market, format=table, depth=overview)\nCompare Python, Java, and Rust for developing a new data processing pipeline.\n</code></pre> <p>A table showing a high-level overview of how Python, Java, and Rust compare across performance, complexity, and time-to-market dimensions.</p>"},{"location":"api/decorators/Tradeoffs/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Tradeoffs/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Create a detailed comparison of the options across multiple dimensions. For each dimension, explain the tradeoffs between the different approaches.</p> <p>Notes: Simpler instruction for models with less analytical capability.</p>"},{"location":"api/decorators/Tradeoffs/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Tradeoffs/#software-architecture-decision","title":"Software architecture decision","text":"<p>Original Prompt: <pre><code>Compare microservices vs monolithic architecture for our e-commerce platform.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Analyze the tradeoffs between different options considering the specified dimensions. Present a balanced assessment that highlights the advantages and disadvantages of each approach. Analyze the following dimensions: performance,cost,complexity,maintainability. Create a decision matrix that scores each option across the dimensions, with a final recommendation based on the overall scores. Provide a thorough analysis with specific examples and reasoning for each dimension.\n\nCompare microservices vs monolithic architecture for our e-commerce platform.\n</code></pre></p> <p>Notes: The decorator adds structure to the comparison by specifying dimensions and format.</p>"},{"location":"api/decorators/Tradeoffs/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Analyze the tradeoffs between different options considering the specified dimensions. Present a balanced assessment that highlights the advantages and disadvantages of each approach.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>axes</code>:</li> <li> <p>Format: Analyze the following dimensions: {value}.</p> </li> <li> <p><code>format</code>:</p> </li> <li>When set to <code>table</code>: Present your analysis in a tabular format with options as rows and dimensions as columns.</li> <li>When set to <code>prose</code>: Present your analysis as a structured prose discussion of each option across the dimensions.</li> <li>When set to <code>radar-chart</code>: Describe how a radar chart would represent these tradeoffs, with each axis representing one dimension.</li> <li> <p>When set to <code>decision-matrix</code>: Create a decision matrix that scores each option across the dimensions, with a final recommendation based on the overall scores.</p> </li> <li> <p><code>depth</code>:</p> </li> <li>When set to <code>overview</code>: Provide a high-level overview of the key tradeoffs without detailed analysis.</li> <li>When set to <code>detailed</code>: Provide a thorough analysis with specific examples and reasoning for each dimension.</li> <li>When set to <code>quantitative</code>: Where possible, include quantitative metrics and measurements to support your analysis.</li> </ul>"},{"location":"api/decorators/Tradeoffs/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: Pros</li> <li>Compatible Models: gpt-4o, gpt-4-turbo, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 1.5.0</li> </ul>"},{"location":"api/decorators/Tradeoffs/#related-decorators","title":"Related Decorators","text":"<ul> <li>Reasoning: Enhances Tradeoffs Tradeoffs works well with Reasoning to provide more structured analytical thinking.</li> <li>Pros: Conflicts with Tradeoffs Tradeoffs provides a more comprehensive analysis than simple pros/cons and should not be used together.</li> </ul>"},{"location":"api/decorators/TreeOfThought/","title":"TreeOfThought Decorator","text":"<p>Organizes the response as a branching exploration of multiple reasoning paths. This decorator enables the AI to consider several possible approaches or hypotheses simultaneously, exploring the implications of each before reaching conclusions.</p> <p>Category: Reasoning</p>"},{"location":"api/decorators/TreeOfThought/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>branches</code> <code>number</code> Number of different reasoning branches to explore <code>3</code> <code>depth</code> <code>number</code> Maximum depth of reasoning in each branch <code>3</code> <code>pruning</code> <code>boolean</code> Whether to eliminate less promising branches early <code>False</code>"},{"location":"api/decorators/TreeOfThought/#examples","title":"Examples","text":""},{"location":"api/decorators/TreeOfThought/#multi-branch-problem-solving-for-a-complex-question","title":"Multi-branch problem solving for a complex question","text":"<pre><code>+++TreeOfThought\nWhat might explain the Fermi Paradox?\n</code></pre> <p>Explores three different reasoning branches about potential explanations for the Fermi Paradox, developing each path to moderate depth</p>"},{"location":"api/decorators/TreeOfThought/#deep-focused-exploration-with-pruning","title":"Deep, focused exploration with pruning","text":"<pre><code>+++TreeOfThought(branches=5, depth=5, pruning=true)\nHow might we solve the climate change crisis?\n</code></pre> <p>Starts with five different approaches to climate change, explores each in depth, and eliminates less promising branches to focus on the most viable solutions</p>"},{"location":"api/decorators/TreeOfThought/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/TreeOfThought/#gpt-4o","title":"gpt-4o","text":"<p>Instruction: Consider {branches} distinct approaches to this problem. For each approach, think step-by-step to a depth of {depth} levels. Label each branch clearly (e.g., 'Approach 1', 'Approach 2') and use subheadings to indicate depth levels. {pruning}</p> <p>Notes: This model handles complex branching reasoning well, but benefits from clear formatting instructions</p>"},{"location":"api/decorators/TreeOfThought/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Explore {branches} different ways to approach this problem. Be very explicit about which approach you're discussing, and break down each approach into {depth} levels of detailed analysis. Start each approach with a clear label and keep them separated.</p> <p>Notes: This model may need additional structure to manage multiple reasoning branches effectively</p>"},{"location":"api/decorators/TreeOfThought/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/TreeOfThought/#multi-branch-exploration-of-a-scientific-question","title":"Multi-branch exploration of a scientific question","text":"<p>Original Prompt: <pre><code>What might explain the Fermi Paradox?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please explore multiple reasoning paths simultaneously for this problem, considering different approaches or hypotheses before reaching conclusions. Generate 3 distinct reasoning branches, each exploring a different approach or hypothesis. For each branch, pursue the reasoning to a depth of 3 levels of analysis. Fully explore all branches to their complete depth regardless of their apparent promise.\n\nWhat might explain the Fermi Paradox?\n</code></pre></p>"},{"location":"api/decorators/TreeOfThought/#deep-analysis-with-pruning-for-a-complex-problem","title":"Deep analysis with pruning for a complex problem","text":"<p>Original Prompt: <pre><code>How might we solve the climate change crisis?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please explore multiple reasoning paths simultaneously for this problem, considering different approaches or hypotheses before reaching conclusions. Generate 5 distinct reasoning branches, each exploring a different approach or hypothesis. For each branch, pursue the reasoning to a depth of 5 levels of analysis. Evaluate the promise of each branch as you go, and stop pursuing less promising paths to focus on the most viable ones.\n\nHow might we solve the climate change crisis?\n</code></pre></p>"},{"location":"api/decorators/TreeOfThought/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please explore multiple reasoning paths simultaneously for this problem, considering different approaches or hypotheses before reaching conclusions.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>branches</code>:</li> <li> <p>Format: Generate {value} distinct reasoning branches, each exploring a different approach or hypothesis.</p> </li> <li> <p><code>depth</code>:</p> </li> <li> <p>Format: For each branch, pursue the reasoning to a depth of {value} levels of analysis.</p> </li> <li> <p><code>pruning</code>:</p> </li> <li>When set to <code>true</code>: Evaluate the promise of each branch as you go, and stop pursuing less promising paths to focus on the most viable ones.</li> <li>When set to <code>false</code>: Fully explore all branches to their complete depth regardless of their apparent promise.</li> </ul>"},{"location":"api/decorators/TreeOfThought/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/TreeOfThought/#related-decorators","title":"Related Decorators","text":"<ul> <li>StepByStep: Enhances TreeOfThought StepByStep can help organize the reasoning within each branch of the tree</li> <li>Debate: Enhances TreeOfThought TreeOfThought and Debate work well together to explore multiple perspectives with structured reasoning</li> </ul>"},{"location":"api/decorators/Troubleshoot/","title":"Troubleshoot Decorator","text":"<p>Creates troubleshooting guides for resolving system issues.</p> <p>Category: Devops And Infrastructure</p>"},{"location":"api/decorators/Troubleshoot/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>component</code> <code>enum</code> System area <code>application</code> <code>format</code> <code>enum</code> Guide structure <code>step-by-step</code> <code>audience</code> <code>enum</code> Target user <code>sre</code>"},{"location":"api/decorators/Troubleshoot/#component-options","title":"Component Options","text":"<ul> <li><code>network</code>: Focus on network-related issues such as connectivity, latency, DNS problems, and routing.</li> <li><code>database</code>: Address database issues including performance problems, query optimization, data integrity, and availability.</li> <li><code>application</code>: Cover application-level problems including bugs, performance bottlenecks, error handling, and service integration.</li> <li><code>infrastructure</code>: Examine infrastructure concerns like server health, resource utilization, scaling issues, and deployment problems.</li> <li><code>security</code>: Focus on security vulnerabilities, access control issues, authentication problems, and potential breaches.</li> </ul>"},{"location":"api/decorators/Troubleshoot/#format-options","title":"Format Options","text":"<ul> <li><code>decision-tree</code>: Structure the guide as a decision tree with clear branching paths based on symptoms and diagnostic results.</li> <li><code>step-by-step</code>: Present a sequential, ordered list of troubleshooting steps with clear instructions at each stage.</li> <li><code>flowchart</code>: Organize the troubleshooting process as a visual flowchart with decision points and action steps.</li> <li><code>runbook</code>: Create a detailed operational runbook with procedures, commands, and expected outputs for each scenario.</li> </ul>"},{"location":"api/decorators/Troubleshoot/#audience-options","title":"Audience Options","text":"<ul> <li><code>developer</code>: Target the guide for software developers with appropriate technical depth and code-level details.</li> <li><code>sre</code>: Design for Site Reliability Engineers with focus on system-level diagnostics and operational concerns.</li> <li><code>support</code>: Create for support personnel with clear escalation paths and customer-facing considerations.</li> <li><code>end-user</code>: Simplify for end-users with minimal technical jargon and focus on user interface interactions.</li> </ul>"},{"location":"api/decorators/Troubleshoot/#examples","title":"Examples","text":""},{"location":"api/decorators/Troubleshoot/#database-troubleshooting-guide-in-decision-tree-format-for-sres","title":"Database troubleshooting guide in decision tree format for SREs","text":"<pre><code>+++Troubleshoot(component=database, format=decision-tree, audience=sre)\nCreate a troubleshooting guide for PostgreSQL performance issues in production.\n</code></pre> <p>A decision tree-structured troubleshooting guide for PostgreSQL performance issues, targeted at Site Reliability Engineers with appropriate technical depth.</p>"},{"location":"api/decorators/Troubleshoot/#network-troubleshooting-guide-for-support-staff","title":"Network troubleshooting guide for support staff","text":"<pre><code>+++Troubleshoot(component=network, format=step-by-step, audience=support)\nCreate a guide for diagnosing and resolving VPN connection failures.\n</code></pre> <p>A step-by-step troubleshooting guide for VPN connection issues, designed for support personnel with appropriate escalation paths.</p>"},{"location":"api/decorators/Troubleshoot/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Troubleshoot/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Create a troubleshooting guide for {component} issues. Use a {format} format designed for {audience} users. Include clear steps, diagnostic procedures, and solutions.</p> <p>Notes: Simplified instruction for models with more limited context windows.</p>"},{"location":"api/decorators/Troubleshoot/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Troubleshoot/#database-troubleshooting-for-sres","title":"Database troubleshooting for SREs","text":"<p>Original Prompt: <pre><code>Create a troubleshooting guide for PostgreSQL performance issues in production.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Create a comprehensive troubleshooting guide that helps identify and resolve issues. The guide should be clear, methodical, and focused on practical solutions. Address database issues including performance problems, query optimization, data integrity, and availability. Present a sequential, ordered list of troubleshooting steps with clear instructions at each stage. Design for Site Reliability Engineers with focus on system-level diagnostics and operational concerns.\n\nCreate a troubleshooting guide for PostgreSQL performance issues in production.\n</code></pre></p> <p>Notes: The decorator adds specific guidance on the type of troubleshooting content to create, tailored to the specified component, format, and audience.</p>"},{"location":"api/decorators/Troubleshoot/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Create a comprehensive troubleshooting guide that helps identify and resolve issues. The guide should be clear, methodical, and focused on practical solutions.</p> <p>Placement: prepend</p> <p>Composition Behavior: override</p> <p>Parameter Effects:</p> <ul> <li><code>component</code>:</li> <li>When set to <code>network</code>: Focus on network-related issues such as connectivity, latency, DNS problems, and routing.</li> <li>When set to <code>database</code>: Address database issues including performance problems, query optimization, data integrity, and availability.</li> <li>When set to <code>application</code>: Cover application-level problems including bugs, performance bottlenecks, error handling, and service integration.</li> <li>When set to <code>infrastructure</code>: Examine infrastructure concerns like server health, resource utilization, scaling issues, and deployment problems.</li> <li> <p>When set to <code>security</code>: Focus on security vulnerabilities, access control issues, authentication problems, and potential breaches.</p> </li> <li> <p><code>format</code>:</p> </li> <li>When set to <code>decision-tree</code>: Structure the guide as a decision tree with clear branching paths based on symptoms and diagnostic results.</li> <li>When set to <code>step-by-step</code>: Present a sequential, ordered list of troubleshooting steps with clear instructions at each stage.</li> <li>When set to <code>flowchart</code>: Organize the troubleshooting process as a visual flowchart with decision points and action steps.</li> <li> <p>When set to <code>runbook</code>: Create a detailed operational runbook with procedures, commands, and expected outputs for each scenario.</p> </li> <li> <p><code>audience</code>:</p> </li> <li>When set to <code>developer</code>: Target the guide for software developers with appropriate technical depth and code-level details.</li> <li>When set to <code>sre</code>: Design for Site Reliability Engineers with focus on system-level diagnostics and operational concerns.</li> <li>When set to <code>support</code>: Create for support personnel with clear escalation paths and customer-facing considerations.</li> <li>When set to <code>end-user</code>: Simplify for end-users with minimal technical jargon and focus on user interface interactions.</li> </ul>"},{"location":"api/decorators/Troubleshoot/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: StepByStep</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, llama-3.2</li> <li>Standard Version: 1.0.0 - 1.5.0</li> </ul>"},{"location":"api/decorators/Troubleshoot/#related-decorators","title":"Related Decorators","text":"<ul> <li>Explain: Enhances Troubleshoot Can be combined with Explain to create more detailed explanations within the troubleshooting steps.</li> <li>StepByStep: Conflicts with Troubleshoot The format parameter with 'step-by-step' value overlaps with StepByStep decorator functionality.</li> </ul>"},{"location":"api/decorators/TypeDefinition/","title":"TypeDefinition Decorator","text":"<p>Generates type definitions for improved code safety and documentation.</p> <p>Category: Code Generation</p>"},{"location":"api/decorators/TypeDefinition/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>system</code> <code>enum</code> Type system or annotation format <code>language-appropriate</code> <code>strictness</code> <code>enum</code> Level of type enforcement <code>moderate</code> <code>style</code> <code>enum</code> Type definition pattern <code>language-convention</code>"},{"location":"api/decorators/TypeDefinition/#system-options","title":"System Options","text":"<ul> <li><code>typescript</code>: Use TypeScript's static type system with interfaces, type aliases, and generics as appropriate.</li> <li><code>flow</code>: Apply Flow type annotations with appropriate syntax and features.</li> <li><code>jsdoc</code>: Create JSDoc comments with type annotations for JavaScript code.</li> <li><code>python-typing</code>: Implement Python's typing module annotations for type hints.</li> <li><code>java-generics</code>: Use Java's generic type system with appropriate class and interface definitions.</li> </ul>"},{"location":"api/decorators/TypeDefinition/#strictness-options","title":"Strictness Options","text":"<ul> <li><code>loose</code>: Allow some type flexibility and implicit conversions where reasonable.</li> <li><code>moderate</code>: Balance type safety with pragmatic flexibility, using union types where appropriate.</li> <li><code>strict</code>: Enforce rigorous type checking with no implicit conversions and exhaustive type coverage.</li> </ul>"},{"location":"api/decorators/TypeDefinition/#style-options","title":"Style Options","text":"<ul> <li><code>inline</code>: Define types directly within the code as inline annotations.</li> <li><code>declaration-file</code>: Create separate declaration files for type definitions.</li> <li><code>interface-based</code>: Prefer interfaces over other type constructs when possible.</li> <li><code>type-alias</code>: Use type aliases as the primary means of type definition.</li> <li><code>generics</code>: Leverage generic types extensively for maximum reusability.</li> </ul>"},{"location":"api/decorators/TypeDefinition/#examples","title":"Examples","text":""},{"location":"api/decorators/TypeDefinition/#typescript-interface-based-type-definitions-for-an-e-commerce-application","title":"TypeScript interface-based type definitions for an e-commerce application","text":"<pre><code>+++TypeDefinition(system=typescript, strictness=strict, style=interface-based)\nDefine types for an e-commerce application's product catalog and shopping cart.\n</code></pre> <p>The model will generate TypeScript interfaces with strict type checking for product catalog and shopping cart functionality.</p>"},{"location":"api/decorators/TypeDefinition/#python-type-annotations-for-a-data-processing-pipeline","title":"Python type annotations for a data processing pipeline","text":"<pre><code>+++TypeDefinition(system=python-typing, strictness=moderate)\nCreate a data processing pipeline that handles CSV files and outputs JSON.\n</code></pre> <p>The model will generate Python code with appropriate type annotations from the typing module, with a moderate level of strictness.</p>"},{"location":"api/decorators/TypeDefinition/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/TypeDefinition/#gpt-4o","title":"gpt-4o","text":"<p>Instruction: Generate comprehensive type definitions for the code according to the specified parameters. Focus on creating clear, well-structured types that enhance code safety and documentation. Consider edge cases and ensure type definitions are complete and accurate.</p> <p>Notes: gpt-4o has stronger capabilities for understanding complex type systems and can handle more nuanced type definitions.</p>"},{"location":"api/decorators/TypeDefinition/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/TypeDefinition/#typescript-e-commerce-application","title":"TypeScript e-commerce application","text":"<p>Original Prompt: <pre><code>Define types for an e-commerce application's product catalog and shopping cart.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Generate type definitions for the code according to the specified parameters. Focus on creating clear, well-structured types that enhance code safety and documentation. Use TypeScript's static type system with interfaces, type aliases, and generics as appropriate. Enforce rigorous type checking with no implicit conversions and exhaustive type coverage. Prefer interfaces over other type constructs when possible.\n\nDefine types for an e-commerce application's product catalog and shopping cart.\n</code></pre></p> <p>Notes: The decorator adds specific instructions for TypeScript with strict type checking and interface-based style.</p>"},{"location":"api/decorators/TypeDefinition/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Generate type definitions for the code according to the specified parameters. Focus on creating clear, well-structured types that enhance code safety and documentation.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>system</code>:</li> <li>When set to <code>typescript</code>: Use TypeScript's static type system with interfaces, type aliases, and generics as appropriate.</li> <li>When set to <code>flow</code>: Apply Flow type annotations with appropriate syntax and features.</li> <li>When set to <code>jsdoc</code>: Create JSDoc comments with type annotations for JavaScript code.</li> <li>When set to <code>python-typing</code>: Implement Python's typing module annotations for type hints.</li> <li> <p>When set to <code>java-generics</code>: Use Java's generic type system with appropriate class and interface definitions.</p> </li> <li> <p><code>strictness</code>:</p> </li> <li>When set to <code>loose</code>: Allow some type flexibility and implicit conversions where reasonable.</li> <li>When set to <code>moderate</code>: Balance type safety with pragmatic flexibility, using union types where appropriate.</li> <li> <p>When set to <code>strict</code>: Enforce rigorous type checking with no implicit conversions and exhaustive type coverage.</p> </li> <li> <p><code>style</code>:</p> </li> <li>When set to <code>inline</code>: Define types directly within the code as inline annotations.</li> <li>When set to <code>declaration-file</code>: Create separate declaration files for type definitions.</li> <li>When set to <code>interface-based</code>: Prefer interfaces over other type constructs when possible.</li> <li>When set to <code>type-alias</code>: Use type aliases as the primary means of type definition.</li> <li>When set to <code>generics</code>: Leverage generic types extensively for maximum reusability.</li> </ul>"},{"location":"api/decorators/TypeDefinition/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4-turbo, gpt-4o, claude-3-7-sonnet-latest, gemini-pro</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/TypeDefinition/#related-decorators","title":"Related Decorators","text":"<ul> <li>CodeGeneration: Enhances TypeDefinition TypeDefinition enhances CodeGeneration by adding strong typing to generated code.</li> <li>Documentation: Enhances TypeDefinition Type definitions serve as implicit documentation for code structure.</li> </ul>"},{"location":"api/decorators/Uncertainty/","title":"Uncertainty Decorator","text":"<p>Explicitly highlights areas of uncertainty in the response. This decorator promotes intellectual honesty by clearly indicating what is known with confidence versus what is speculative, unknown, or subject to debate.</p> <p>Category: Verification</p>"},{"location":"api/decorators/Uncertainty/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>format</code> <code>enum</code> How to format uncertainty indications in the response <code>inline</code> <code>threshold</code> <code>enum</code> The threshold for flagging uncertain content <code>medium</code> <code>reason</code> <code>boolean</code> Whether to explain the reason for uncertainty <code>False</code>"},{"location":"api/decorators/Uncertainty/#format-options","title":"Format Options","text":"<ul> <li><code>inline</code>: Mark uncertain statements directly within the text using phrases like 'may be', 'possibly', 'uncertain', or 'subject to debate' as appropriate.</li> <li><code>section</code>: Include a dedicated section at the end titled 'Areas of Uncertainty' that lists and discusses all uncertain aspects of the topic.</li> <li><code>confidence</code>: Assign explicit confidence levels (e.g., 'high confidence', 'medium confidence', 'low confidence', 'speculative') to different statements or claims throughout the response.</li> </ul>"},{"location":"api/decorators/Uncertainty/#threshold-options","title":"Threshold Options","text":"<ul> <li><code>low</code>: Flag even slightly uncertain information, being extremely cautious about presenting anything as definitive unless it is very well established.</li> <li><code>medium</code>: Flag moderately uncertain information while presenting consensus views and well-supported claims with confidence.</li> <li><code>high</code>: Only flag highly uncertain or speculative information, treating established scientific theories and widespread expert consensus as certain.</li> </ul>"},{"location":"api/decorators/Uncertainty/#examples","title":"Examples","text":""},{"location":"api/decorators/Uncertainty/#inline-uncertainty-markers-in-a-technical-explanation","title":"Inline uncertainty markers in a technical explanation","text":"<pre><code>+++Uncertainty\nExplain the potential timeline for achieving artificial general intelligence.\n</code></pre> <p>Explains AGI timelines with inline uncertainty markers highlighting speculative predictions, areas of expert disagreement, and knowledge gaps</p>"},{"location":"api/decorators/Uncertainty/#dedicated-uncertainty-section-with-detailed-reasoning","title":"Dedicated uncertainty section with detailed reasoning","text":"<pre><code>+++Uncertainty(format=section, reason=true, threshold=low)\nWhat are the environmental impacts of fusion energy?\n</code></pre> <p>Provides information about fusion energy's environmental impacts followed by a dedicated section discussing all points of uncertainty with explanations for why each point is uncertain</p>"},{"location":"api/decorators/Uncertainty/#model-specific-implementations","title":"Model-Specific Implementations","text":""},{"location":"api/decorators/Uncertainty/#gpt-4-turbo","title":"gpt-4-turbo","text":"<p>Instruction: Be explicit about what is uncertain in your response. Use {format} to mark uncertainty. Apply a {threshold} threshold for identifying uncertain information. {reason} Make sure to differentiate between established facts and more speculative claims.</p> <p>Notes: This model sometimes needs stronger prompting to acknowledge uncertainty in topics where it has high confidence</p>"},{"location":"api/decorators/Uncertainty/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Uncertainty/#inline-uncertainty-markers-in-agi-timeline-explanation","title":"Inline uncertainty markers in AGI timeline explanation","text":"<p>Original Prompt: <pre><code>Explain the potential timeline for achieving artificial general intelligence.\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please explicitly highlight areas of uncertainty in your response, clearly indicating what is known with confidence versus what is speculative, unknown, or subject to debate. Mark uncertain statements directly within the text using phrases like 'may be', 'possibly', 'uncertain', or 'subject to debate' as appropriate. Flag moderately uncertain information while presenting consensus views and well-supported claims with confidence. Simply mark uncertain information without explaining the reasons for the uncertainty.\n\nExplain the potential timeline for achieving artificial general intelligence.\n</code></pre></p>"},{"location":"api/decorators/Uncertainty/#dedicated-uncertainty-section-with-reasoning-for-fusion-energy","title":"Dedicated uncertainty section with reasoning for fusion energy","text":"<p>Original Prompt: <pre><code>What are the environmental impacts of fusion energy?\n</code></pre></p> <p>Transformed Prompt: <pre><code>Please explicitly highlight areas of uncertainty in your response, clearly indicating what is known with confidence versus what is speculative, unknown, or subject to debate. Include a dedicated section at the end titled 'Areas of Uncertainty' that lists and discusses all uncertain aspects of the topic. Flag even slightly uncertain information, being extremely cautious about presenting anything as definitive unless it is very well established. For each point of uncertainty, briefly explain why it is uncertain (e.g., limited data, conflicting studies, theoretical gaps, etc.).\n\nWhat are the environmental impacts of fusion energy?\n</code></pre></p>"},{"location":"api/decorators/Uncertainty/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: Please explicitly highlight areas of uncertainty in your response, clearly indicating what is known with confidence versus what is speculative, unknown, or subject to debate.</p> <p>Placement: prepend</p> <p>Composition Behavior: accumulate</p> <p>Parameter Effects:</p> <ul> <li><code>format</code>:</li> <li>When set to <code>inline</code>: Mark uncertain statements directly within the text using phrases like 'may be', 'possibly', 'uncertain', or 'subject to debate' as appropriate.</li> <li>When set to <code>section</code>: Include a dedicated section at the end titled 'Areas of Uncertainty' that lists and discusses all uncertain aspects of the topic.</li> <li> <p>When set to <code>confidence</code>: Assign explicit confidence levels (e.g., 'high confidence', 'medium confidence', 'low confidence', 'speculative') to different statements or claims throughout the response.</p> </li> <li> <p><code>threshold</code>:</p> </li> <li>When set to <code>low</code>: Flag even slightly uncertain information, being extremely cautious about presenting anything as definitive unless it is very well established.</li> <li>When set to <code>medium</code>: Flag moderately uncertain information while presenting consensus views and well-supported claims with confidence.</li> <li> <p>When set to <code>high</code>: Only flag highly uncertain or speculative information, treating established scientific theories and widespread expert consensus as certain.</p> </li> <li> <p><code>reason</code>:</p> </li> <li>When set to <code>true</code>: For each point of uncertainty, briefly explain why it is uncertain (e.g., limited data, conflicting studies, theoretical gaps, etc.).</li> <li>When set to <code>false</code>: Simply mark uncertain information without explaining the reasons for the uncertainty.</li> </ul>"},{"location":"api/decorators/Uncertainty/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Standard Version: 1.0.0 - 2.0.0</li> </ul>"},{"location":"api/decorators/Uncertainty/#related-decorators","title":"Related Decorators","text":"<ul> <li>Confidence: Enhances Uncertainty Confidence and Uncertainty are complementary, with Confidence focusing on quantifying certainty while Uncertainty highlights the unknown</li> <li>FactCheck: Enhances Uncertainty FactCheck pairs well with Uncertainty to verify claims while acknowledging limitations in knowledge</li> <li>Limitations: Enhances Uncertainty Limitations complements Uncertainty by addressing broader constraints in addition to specific uncertain points</li> </ul>"},{"location":"api/decorators/Version/","title":"Version Decorator","text":"<p>Specifies the version of the Prompt Decorators standard to use. This decorator must be the first in any sequence when used, ensuring proper interpretation of decorators according to the specified standard version.</p> <p>Category: Minimal</p>"},{"location":"api/decorators/Version/#parameters","title":"Parameters","text":"Parameter Type Description Default <code>standard</code> <code>string</code> The semantic version of the Prompt Decorators standard to use <code>1.0.0</code>"},{"location":"api/decorators/Version/#examples","title":"Examples","text":""},{"location":"api/decorators/Version/#specify-standard-version-for-compatibility","title":"Specify standard version for compatibility","text":"<pre><code>+++Version(standard=1.0.0)\n+++Reasoning(depth=comprehensive)\nExplain quantum entanglement\n</code></pre> <p>Ensures decorators are interpreted according to version 1.0.0 of the standard</p>"},{"location":"api/decorators/Version/#implementation-guidance","title":"Implementation Guidance","text":""},{"location":"api/decorators/Version/#version-specification","title":"Version specification","text":"<p>Original Prompt: <pre><code>+++Reasoning(depth=comprehensive)\nExplain quantum entanglement\n</code></pre></p> <p>Transformed Prompt: <pre><code>The following prompt uses Prompt Decorators standard version 1.0.0. Please interpret all decorators according to this version's specifications.\n\n+++Reasoning(depth=comprehensive)\nExplain quantum entanglement\n</code></pre></p>"},{"location":"api/decorators/Version/#transformation-details","title":"Transformation Details","text":"<p>Base Instruction: The following prompt uses Prompt Decorators standard version {standard}. Please interpret all decorators according to this version's specifications.</p> <p>Placement: prepend</p> <p>Composition Behavior: override</p> <p>Parameter Effects:</p> <ul> <li><code>standard</code>:</li> <li>Format: The following prompt uses Prompt Decorators standard version {value}. Please interpret all decorators according to this version's specifications.</li> </ul>"},{"location":"api/decorators/Version/#compatibility","title":"Compatibility","text":"<ul> <li>Requires: None</li> <li>Conflicts: None</li> <li>Compatible Models: gpt-4o, gpt-4-turbo</li> <li>Minimum Standard Version: 1.0.0</li> </ul>"},{"location":"api/decorators/Version/#related-decorators","title":"Related Decorators","text":"<ul> <li>All: Requires Version The Version decorator should always be the first in any sequence when used</li> </ul>"},{"location":"api/modules/","title":"API Reference","text":"<p>This section contains the API reference for the Prompt Decorators package. It provides detailed documentation for all modules, classes, functions, and properties in the package.</p>"},{"location":"api/modules/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Core Modules</li> <li>Schema Modules</li> <li>Utility Modules</li> <li>Integration Modules</li> <li>Other Modules</li> </ul>"},{"location":"api/modules/#core-modules","title":"Core Modules","text":"<ul> <li>prompt_decorators.core: Core components of the prompt decorators system.</li> <li>prompt_decorators.core.base: Base classes for prompt decorators.</li> <li>prompt_decorators.core.dynamic_decorator: Dynamic decorator functionality for prompt transformations.</li> <li>prompt_decorators.core.exceptions: Exceptions for the prompt-decorators package.</li> <li>prompt_decorators.core.model_specific: Model-Specific Decorator Module.</li> <li>prompt_decorators.core.parser: Parser module for extracting decorators from prompts.</li> <li>prompt_decorators.core.registry: Registry for prompt decorators.</li> <li>prompt_decorators.core.request: Request handling for prompt decorators.</li> <li>prompt_decorators.core.validation: Parameter Validation Module.</li> </ul>"},{"location":"api/modules/#schema-modules","title":"Schema Modules","text":"<ul> <li>prompt_decorators.schemas: Schema definitions for prompt decorators.</li> <li>prompt_decorators.schemas.decorator_schema: Schema definitions for prompt decorators.</li> </ul>"},{"location":"api/modules/#utility-modules","title":"Utility Modules","text":"<ul> <li>prompt_decorators.utils: Utility functions for prompt decorators.</li> <li>prompt_decorators.utils.cache: Decorator Cache Module.</li> <li>prompt_decorators.utils.compatibility: Decorator Compatibility Module.</li> <li>prompt_decorators.utils.discovery: Decorator discovery and registration utilities.</li> <li>prompt_decorators.utils.factory: Decorator Factory Module.</li> <li>prompt_decorators.utils.json_loader: JSON loading utilities for decorator definitions.</li> <li>prompt_decorators.utils.model_detection: Model detection and capability utilities.</li> <li>prompt_decorators.utils.plugins: Plugin System Module.</li> <li>prompt_decorators.utils.string_utils: String utilities for working with prompt decorators.</li> <li>prompt_decorators.utils.telemetry: Telemetry Module.</li> </ul>"},{"location":"api/modules/#integration-modules","title":"Integration Modules","text":"<ul> <li>prompt_decorators.integrations: Integration modules for Prompt Decorators.</li> <li>prompt_decorators.integrations.mcp: Model Context Protocol (MCP) integration for Prompt Decorators.</li> <li>prompt_decorators.integrations.mcp.main: Command-line entry point for running the Prompt Decorators MCP server.</li> <li>prompt_decorators.integrations.mcp.claude_desktop: Entry point for running the Prompt Decorators MCP server for Claude Desktop.</li> <li>prompt_decorators.integrations.mcp.install_claude_desktop: Installation helper for Claude Desktop integration.</li> <li>prompt_decorators.integrations.mcp.server: MCP Server for Prompt Decorators.</li> </ul>"},{"location":"api/modules/#other-modules","title":"Other Modules","text":"<ul> <li>prompt_decorators.config: Configuration settings for prompt decorators package.</li> <li>prompt_decorators.dynamic_decorators_module: Dynamic Prompt Decorators Module.</li> </ul>"},{"location":"api/modules/prompt_decorators.config/","title":"config","text":"<p>Configuration settings for prompt decorators package.</p>"},{"location":"api/modules/prompt_decorators.config/#module-variables","title":"Module Variables","text":""},{"location":"api/modules/prompt_decorators.config/#output_path","title":"<code>OUTPUT_PATH</code>","text":"<p>Type: <code>PosixPath</code></p> <p>Value: <code>PosixPath('/Users/danielbentes/prompt-decorators/prompt_decorators/decorators')</code></p>"},{"location":"api/modules/prompt_decorators.config/#paths","title":"<code>PATHS</code>","text":"<p>Type: <code>dict</code></p> <p>Value: <code>{'registry': {'core': PosixPath('/Users/danielbentes/prompt-decorators/registry/core'), 'extensions': PosixPath('/Users/danielbentes/prompt-decorators/registry/extensions')}, 'output': {'code': {'core': PosixPath('/Users/danielbentes/prompt-decorators/prompt_decorators/decorators/core'), 'extensions': PosixPath('/Users/danielbentes/prompt-decorators/prompt_decorators/decorators/extensions')}, 'tests': {'core': PosixPath('/Users/danielbentes/prompt-decorators/tests/auto/core'), 'extensions': PosixPath('/Users/danielbentes/prompt-decorators/tests/auto/extensions')}}, 'templates': PosixPath('/Users/danielbentes/prompt-decorators/prompt_decorators/generator/templates')}</code></p>"},{"location":"api/modules/prompt_decorators.config/#registry_path","title":"<code>REGISTRY_PATH</code>","text":"<p>Type: <code>PosixPath</code></p> <p>Value: <code>PosixPath('/Users/danielbentes/prompt-decorators/registry')</code></p>"},{"location":"api/modules/prompt_decorators.config/#repo_root","title":"<code>REPO_ROOT</code>","text":"<p>Type: <code>PosixPath</code></p> <p>Value: <code>PosixPath('/Users/danielbentes/prompt-decorators')</code></p>"},{"location":"api/modules/prompt_decorators.config/#test_path","title":"<code>TEST_PATH</code>","text":"<p>Type: <code>PosixPath</code></p> <p>Value: <code>PosixPath('/Users/danielbentes/prompt-decorators/tests')</code></p>"},{"location":"api/modules/prompt_decorators.config/#functions","title":"Functions","text":""},{"location":"api/modules/prompt_decorators.config/#ensure_paths_exist","title":"<code>ensure_paths_exist</code>","text":"<p>Ensure all required paths exist.</p> <p>Signature: <code>ensure_paths_exist() -&gt; None</code></p>"},{"location":"api/modules/prompt_decorators.core.base/","title":"base","text":"<p>Base classes for prompt decorators.</p> <p>This module provides the base classes and utilities for creating and using prompt decorators.</p>"},{"location":"api/modules/prompt_decorators.core.base/#classes","title":"Classes","text":""},{"location":"api/modules/prompt_decorators.core.base/#basedecorator","title":"<code>BaseDecorator</code>","text":"<p>Base class for all prompt decorators.</p> <p>This class defines the common interface and behavior for all decorators. Subclasses should implement the apply_to_prompt and transform_response methods.</p>"},{"location":"api/modules/prompt_decorators.core.base/#attributes","title":"Attributes","text":"<ul> <li><code>conflicts_with</code>: <code>set</code> = <code>set()</code></li> <li><code>description</code>: <code>str</code> = <code>'Base decorator class'</code></li> <li><code>from_dict</code>: <code>classmethod</code> = <code>&lt;classmethod(&lt;function DecoratorBase.from_dict at 0x105acf4c0&gt;)&gt;</code></li> <li><code>name</code>: <code>str</code> = <code>'DecoratorBase'</code></li> <li><code>parameters</code>: <code>dict</code> = <code>{}</code></li> <li><code>transformation_template</code>: <code>dict</code> = <code>{'instruction': '', 'parameterMapping': {}, 'placement': 'prepend', 'compositionBehavior': 'accumulate'}</code></li> </ul>"},{"location":"api/modules/prompt_decorators.core.base/#methods","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.core.base/#__init__","title":"<code>__init__</code>","text":"<p>Initialize a decorator with parameter values.</p> <p>Args:     **kwargs: Parameter values for the decorator</p> <p>Raises:     ValidationError: If any parameter values are invalid</p> <p>Signature: <code>__init__(self, **kwargs)</code></p> <p>Parameters:</p> <ul> <li><code>kwargs</code>:</li> </ul>"},{"location":"api/modules/prompt_decorators.core.base/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Apply the decorator to a prompt.</p> <p>This method uses the transformation_template to transform the prompt according to the decorator's intended behavior.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p> <p>Signature: <code>apply_to_prompt(self, prompt: str) -&gt; str</code></p> <p>Parameters:</p> <ul> <li><code>prompt</code>: <code>str</code></li> </ul> <p>Returns: <code>str</code></p>"},{"location":"api/modules/prompt_decorators.core.base/#transform_response","title":"<code>transform_response</code>","text":"<p>Transform the LLM response according to the decorator's behavior.</p> <p>The base implementation returns the response unchanged. Subclasses should override this method if they need to modify the response.</p> <p>Args:     response: The LLM response to transform</p> <p>Returns:     The transformed response</p> <p>Signature: <code>transform_response(self, response: str) -&gt; str</code></p> <p>Parameters:</p> <ul> <li><code>response</code>: <code>str</code></li> </ul> <p>Returns: <code>str</code></p>"},{"location":"api/modules/prompt_decorators.core.base/#decoratorbase","title":"<code>DecoratorBase</code>","text":"<p>Base class for all prompt decorators.</p> <p>This class defines the common interface and behavior for all decorators. Subclasses should implement the apply_to_prompt and transform_response methods.</p>"},{"location":"api/modules/prompt_decorators.core.base/#attributes_1","title":"Attributes","text":"<ul> <li><code>conflicts_with</code>: <code>set</code> = <code>set()</code></li> <li><code>description</code>: <code>str</code> = <code>'Base decorator class'</code></li> <li><code>from_dict</code>: <code>classmethod</code> = <code>&lt;classmethod(&lt;function DecoratorBase.from_dict at 0x105acf4c0&gt;)&gt;</code></li> <li><code>name</code>: <code>str</code> = <code>'DecoratorBase'</code></li> <li><code>parameters</code>: <code>dict</code> = <code>{}</code></li> <li><code>transformation_template</code>: <code>dict</code> = <code>{'instruction': '', 'parameterMapping': {}, 'placement': 'prepend', 'compositionBehavior': 'accumulate'}</code></li> </ul>"},{"location":"api/modules/prompt_decorators.core.base/#methods_1","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.core.base/#__init___1","title":"<code>__init__</code>","text":"<p>Initialize a decorator with parameter values.</p> <p>Args:     **kwargs: Parameter values for the decorator</p> <p>Raises:     ValidationError: If any parameter values are invalid</p> <p>Signature: <code>__init__(self, **kwargs)</code></p> <p>Parameters:</p> <ul> <li><code>kwargs</code>:</li> </ul>"},{"location":"api/modules/prompt_decorators.core.base/#apply_to_prompt_1","title":"<code>apply_to_prompt</code>","text":"<p>Apply the decorator to a prompt.</p> <p>This method uses the transformation_template to transform the prompt according to the decorator's intended behavior.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p> <p>Signature: <code>apply_to_prompt(self, prompt: str) -&gt; str</code></p> <p>Parameters:</p> <ul> <li><code>prompt</code>: <code>str</code></li> </ul> <p>Returns: <code>str</code></p>"},{"location":"api/modules/prompt_decorators.core.base/#transform_response_1","title":"<code>transform_response</code>","text":"<p>Transform the LLM response according to the decorator's behavior.</p> <p>The base implementation returns the response unchanged. Subclasses should override this method if they need to modify the response.</p> <p>Args:     response: The LLM response to transform</p> <p>Returns:     The transformed response</p> <p>Signature: <code>transform_response(self, response: str) -&gt; str</code></p> <p>Parameters:</p> <ul> <li><code>response</code>: <code>str</code></li> </ul> <p>Returns: <code>str</code></p>"},{"location":"api/modules/prompt_decorators.core.base/#decoratorparameter","title":"<code>DecoratorParameter</code>","text":"<p>Represents a parameter for a decorator.</p> <p>This class is used by dynamic decorators to define parameters and validate values.</p>"},{"location":"api/modules/prompt_decorators.core.base/#attributes_2","title":"Attributes","text":"<ul> <li><code>from_dict</code>: <code>classmethod</code> = <code>&lt;classmethod(&lt;function DecoratorParameter.from_dict at 0x105acf380&gt;)&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.core.base/#methods_2","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.core.base/#__init___2","title":"<code>__init__</code>","text":"<p>Initialize a decorator parameter.</p> <p>Args:     name: The name of the parameter     description: A description of the parameter     type_: The type of the parameter (string, integer, float, boolean, enum)     required: Whether the parameter is required     default: Default value for the parameter     enum_values: Possible values for enum type     min_value: Minimum value for numeric types     max_value: Maximum value for numeric types     min_length: Minimum length for string or array types     max_length: Maximum length for string or array types     pattern: Regex pattern for string validation</p> <p>Signature: <code>__init__(self, name: str, description: str, type_: str = 'string', required: bool = False, default: Any = None, enum_values: Optional[List[str]] = None, min_value: Union[int, float, NoneType] = None, max_value: Union[int, float, NoneType] = None, min_length: Optional[int] = None, max_length: Optional[int] = None, pattern: Optional[str] = None)</code></p> <p>Parameters:</p> <ul> <li><code>name</code>: <code>str</code></li> <li><code>description</code>: <code>str</code></li> <li><code>type_</code>: <code>str</code> (default: <code>string</code>)</li> <li><code>required</code>: <code>bool</code> (default: <code>False</code>)</li> <li><code>default</code>: <code>Any</code> (default: <code>None</code>)</li> <li><code>enum_values</code>: <code>Optional</code> (default: <code>None</code>)</li> <li><code>min_value</code>: <code>Union</code> (default: <code>None</code>)</li> <li><code>max_value</code>: <code>Union</code> (default: <code>None</code>)</li> <li><code>min_length</code>: <code>Optional</code> (default: <code>None</code>)</li> <li><code>max_length</code>: <code>Optional</code> (default: <code>None</code>)</li> <li><code>pattern</code>: <code>Optional</code> (default: <code>None</code>)</li> </ul>"},{"location":"api/modules/prompt_decorators.core.base/#to_dict","title":"<code>to_dict</code>","text":"<p>Convert the parameter to a dictionary representation.</p> <p>Signature: <code>to_dict(self) -&gt; Dict[str, Any]</code></p> <p>Parameters:</p> <p>Returns: <code>Dict</code></p>"},{"location":"api/modules/prompt_decorators.core.base/#validate","title":"<code>validate</code>","text":"<p>Validate a parameter value against constraints.</p> <p>Args:     value: The value to validate</p> <p>Returns:     The validated value (possibly converted to the correct type)</p> <p>Raises:     ValidationError: If the value is invalid</p> <p>Signature: <code>validate(self, value: Any) -&gt; Any</code></p> <p>Parameters:</p> <ul> <li><code>value</code>: <code>Any</code></li> </ul> <p>Returns: <code>Any</code></p>"},{"location":"api/modules/prompt_decorators.core.base/#parameter","title":"<code>Parameter</code>","text":"<p>Represents a parameter for a decorator.</p> <p>This class defines the metadata for a parameter, including its name, type, description, default value, and constraints.</p> <p>Bases: <code>pydantic.main.BaseModel</code></p>"},{"location":"api/modules/prompt_decorators.core.base/#attributes_3","title":"Attributes","text":"<ul> <li><code>model_config</code>: <code>dict</code> = <code>{}</code></li> </ul>"},{"location":"api/modules/prompt_decorators.core.base/#methods_3","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.core.base/#__init___3","title":"<code>__init__</code>","text":"<p>Create a new model by parsing and validating input data from keyword arguments.</p> <p>Raises <code>ValidationError</code> if the input data cannot be validated to form a valid model.</p> <p><code>self</code> is explicitly positional-only to allow <code>self</code> as a field name.</p> <p>Signature: <code>__init__(self, /, **data: 'Any') -&gt; 'None'</code></p> <p>Parameters:</p> <ul> <li><code>data</code>: <code>Any</code></li> </ul> <p>Returns: <code>None</code></p>"},{"location":"api/modules/prompt_decorators.core.base/#copy","title":"<code>copy</code>","text":"<p>Returns a copy of the model.</p> <p>Deprecated</p> <p>This method is now deprecated; use <code>model_copy</code> instead.</p> <p>If you need <code>include</code> or <code>exclude</code>, use:</p> <pre><code>data = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n</code></pre> <p>Args:     include: Optional set or mapping specifying which fields to include in the copied model.     exclude: Optional set or mapping specifying which fields to exclude in the copied model.     update: Optional dictionary of field-value pairs to override field values in the copied model.     deep: If True, the values of fields that are Pydantic models will be deep-copied.</p> <p>Returns:     A copy of the model with included, excluded and updated fields as specified.</p> <p>Signature: <code>copy(self, *, include: 'AbstractSetIntStr | MappingIntStrAny | None' = None, exclude: 'AbstractSetIntStr | MappingIntStrAny | None' = None, update: 'Dict[str, Any] | None' = None, deep: 'bool' = False) -&gt; 'Self'</code></p> <p>Parameters:</p> <ul> <li><code>include</code>: <code>AbstractSetIntStr | MappingIntStrAny | None</code> (default: <code>None</code>)</li> <li><code>exclude</code>: <code>AbstractSetIntStr | MappingIntStrAny | None</code> (default: <code>None</code>)</li> <li><code>update</code>: <code>Dict[str, Any] | None</code> (default: <code>None</code>)</li> <li><code>deep</code>: <code>bool</code> (default: <code>False</code>)</li> </ul> <p>Returns: <code>Self</code></p>"},{"location":"api/modules/prompt_decorators.core.base/#dict","title":"<code>dict</code>","text":"<p>Signature: <code>dict(self, *, include: 'IncEx | None' = None, exclude: 'IncEx | None' = None, by_alias: 'bool' = False, exclude_unset: 'bool' = False, exclude_defaults: 'bool' = False, exclude_none: 'bool' = False) -&gt; 'Dict[str, Any]'</code></p> <p>Parameters:</p> <ul> <li><code>include</code>: <code>IncEx | None</code> (default: <code>None</code>)</li> <li><code>exclude</code>: <code>IncEx | None</code> (default: <code>None</code>)</li> <li><code>by_alias</code>: <code>bool</code> (default: <code>False</code>)</li> <li><code>exclude_unset</code>: <code>bool</code> (default: <code>False</code>)</li> <li><code>exclude_defaults</code>: <code>bool</code> (default: <code>False</code>)</li> <li><code>exclude_none</code>: <code>bool</code> (default: <code>False</code>)</li> </ul> <p>Returns: <code>Dict[str, Any]</code></p>"},{"location":"api/modules/prompt_decorators.core.base/#json","title":"<code>json</code>","text":"<p>Signature: <code>json(self, *, include: 'IncEx | None' = None, exclude: 'IncEx | None' = None, by_alias: 'bool' = False, exclude_unset: 'bool' = False, exclude_defaults: 'bool' = False, exclude_none: 'bool' = False, encoder: 'Callable[[Any], Any] | None' = PydanticUndefined, models_as_dict: 'bool' = PydanticUndefined, **dumps_kwargs: 'Any') -&gt; 'str'</code></p> <p>Parameters:</p> <ul> <li><code>include</code>: <code>IncEx | None</code> (default: <code>None</code>)</li> <li><code>exclude</code>: <code>IncEx | None</code> (default: <code>None</code>)</li> <li><code>by_alias</code>: <code>bool</code> (default: <code>False</code>)</li> <li><code>exclude_unset</code>: <code>bool</code> (default: <code>False</code>)</li> <li><code>exclude_defaults</code>: <code>bool</code> (default: <code>False</code>)</li> <li><code>exclude_none</code>: <code>bool</code> (default: <code>False</code>)</li> <li><code>encoder</code>: <code>Callable[[Any], Any] | None</code> (default: <code>PydanticUndefined</code>)</li> <li><code>models_as_dict</code>: <code>bool</code> (default: <code>PydanticUndefined</code>)</li> <li><code>dumps_kwargs</code>: <code>Any</code></li> </ul> <p>Returns: <code>str</code></p>"},{"location":"api/modules/prompt_decorators.core.base/#model_copy","title":"<code>model_copy</code>","text":"<p>Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#model_copy</p> <p>Returns a copy of the model.</p> <p>Args:     update: Values to change/add in the new model. Note: the data is not validated         before creating the new model. You should trust this data.     deep: Set to <code>True</code> to make a deep copy of the model.</p> <p>Returns:     New model instance.</p> <p>Signature: <code>model_copy(self, *, update: 'Mapping[str, Any] | None' = None, deep: 'bool' = False) -&gt; 'Self'</code></p> <p>Parameters:</p> <ul> <li><code>update</code>: <code>Mapping[str, Any] | None</code> (default: <code>None</code>)</li> <li><code>deep</code>: <code>bool</code> (default: <code>False</code>)</li> </ul> <p>Returns: <code>Self</code></p>"},{"location":"api/modules/prompt_decorators.core.base/#model_dump","title":"<code>model_dump</code>","text":"<p>Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump</p> <p>Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.</p> <p>Args:     mode: The mode in which <code>to_python</code> should run.         If mode is 'json', the output will only contain JSON serializable types.         If mode is 'python', the output may contain non-JSON-serializable Python objects.     include: A set of fields to include in the output.     exclude: A set of fields to exclude from the output.     context: Additional context to pass to the serializer.     by_alias: Whether to use the field's alias in the dictionary key if defined.     exclude_unset: Whether to exclude fields that have not been explicitly set.     exclude_defaults: Whether to exclude fields that are set to their default value.     exclude_none: Whether to exclude fields that have a value of <code>None</code>.     round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].     warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,         \"error\" raises a <code>PydanticSerializationError</code>.     serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.</p> <p>Returns:     A dictionary representation of the model.</p> <p>Signature: <code>model_dump(self, *, mode: \"Literal['json', 'python'] | str\" = 'python', include: 'IncEx | None' = None, exclude: 'IncEx | None' = None, context: 'Any | None' = None, by_alias: 'bool' = False, exclude_unset: 'bool' = False, exclude_defaults: 'bool' = False, exclude_none: 'bool' = False, round_trip: 'bool' = False, warnings: \"bool | Literal['none', 'warn', 'error']\" = True, serialize_as_any: 'bool' = False) -&gt; 'dict[str, Any]'</code></p> <p>Parameters:</p> <ul> <li><code>mode</code>: <code>Literal['json', 'python'] | str</code> (default: <code>python</code>)</li> <li><code>include</code>: <code>IncEx | None</code> (default: <code>None</code>)</li> <li><code>exclude</code>: <code>IncEx | None</code> (default: <code>None</code>)</li> <li><code>context</code>: <code>Any | None</code> (default: <code>None</code>)</li> <li><code>by_alias</code>: <code>bool</code> (default: <code>False</code>)</li> <li><code>exclude_unset</code>: <code>bool</code> (default: <code>False</code>)</li> <li><code>exclude_defaults</code>: <code>bool</code> (default: <code>False</code>)</li> <li><code>exclude_none</code>: <code>bool</code> (default: <code>False</code>)</li> <li><code>round_trip</code>: <code>bool</code> (default: <code>False</code>)</li> <li><code>warnings</code>: <code>bool | Literal['none', 'warn', 'error']</code> (default: <code>True</code>)</li> <li><code>serialize_as_any</code>: <code>bool</code> (default: <code>False</code>)</li> </ul> <p>Returns: <code>dict[str, Any]</code></p>"},{"location":"api/modules/prompt_decorators.core.base/#model_dump_json","title":"<code>model_dump_json</code>","text":"<p>Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump_json</p> <p>Generates a JSON representation of the model using Pydantic's <code>to_json</code> method.</p> <p>Args:     indent: Indentation to use in the JSON output. If None is passed, the output will be compact.     include: Field(s) to include in the JSON output.     exclude: Field(s) to exclude from the JSON output.     context: Additional context to pass to the serializer.     by_alias: Whether to serialize using field aliases.     exclude_unset: Whether to exclude fields that have not been explicitly set.     exclude_defaults: Whether to exclude fields that are set to their default value.     exclude_none: Whether to exclude fields that have a value of <code>None</code>.     round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].     warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,         \"error\" raises a <code>PydanticSerializationError</code>.     serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.</p> <p>Returns:     A JSON string representation of the model.</p> <p>Signature: <code>model_dump_json(self, *, indent: 'int | None' = None, include: 'IncEx | None' = None, exclude: 'IncEx | None' = None, context: 'Any | None' = None, by_alias: 'bool' = False, exclude_unset: 'bool' = False, exclude_defaults: 'bool' = False, exclude_none: 'bool' = False, round_trip: 'bool' = False, warnings: \"bool | Literal['none', 'warn', 'error']\" = True, serialize_as_any: 'bool' = False) -&gt; 'str'</code></p> <p>Parameters:</p> <ul> <li><code>indent</code>: <code>int | None</code> (default: <code>None</code>)</li> <li><code>include</code>: <code>IncEx | None</code> (default: <code>None</code>)</li> <li><code>exclude</code>: <code>IncEx | None</code> (default: <code>None</code>)</li> <li><code>context</code>: <code>Any | None</code> (default: <code>None</code>)</li> <li><code>by_alias</code>: <code>bool</code> (default: <code>False</code>)</li> <li><code>exclude_unset</code>: <code>bool</code> (default: <code>False</code>)</li> <li><code>exclude_defaults</code>: <code>bool</code> (default: <code>False</code>)</li> <li><code>exclude_none</code>: <code>bool</code> (default: <code>False</code>)</li> <li><code>round_trip</code>: <code>bool</code> (default: <code>False</code>)</li> <li><code>warnings</code>: <code>bool | Literal['none', 'warn', 'error']</code> (default: <code>True</code>)</li> <li><code>serialize_as_any</code>: <code>bool</code> (default: <code>False</code>)</li> </ul> <p>Returns: <code>str</code></p>"},{"location":"api/modules/prompt_decorators.core.base/#model_post_init","title":"<code>model_post_init</code>","text":"<p>Override this method to perform additional initialization after <code>__init__</code> and <code>model_construct</code>. This is useful if you want to do some validation that requires the entire model to be initialized.</p> <p>Signature: <code>model_post_init(self, _BaseModel__context: 'Any') -&gt; 'None'</code></p> <p>Parameters:</p> <ul> <li><code>_BaseModel__context</code>: <code>Any</code></li> </ul> <p>Returns: <code>None</code></p>"},{"location":"api/modules/prompt_decorators.core.base/#validate_value","title":"<code>validate_value</code>","text":"<p>Validate a parameter value against the parameter's constraints.</p> <p>Args:     value: The value to validate</p> <p>Returns:     The validated value (possibly converted to the correct type)</p> <p>Raises:     ValidationError: If the value is invalid</p> <p>Signature: <code>validate_value(self, value: Any) -&gt; Any</code></p> <p>Parameters:</p> <ul> <li><code>value</code>: <code>Any</code></li> </ul> <p>Returns: <code>Any</code></p>"},{"location":"api/modules/prompt_decorators.core.base/#parametertype","title":"<code>ParameterType</code>","text":"<p>Types of parameters supported in decorators.</p> <p>Bases: <code>builtins.str</code>, <code>enum.Enum</code></p>"},{"location":"api/modules/prompt_decorators.core.base/#attributes_4","title":"Attributes","text":"<ul> <li><code>ARRAY</code>: <code>ParameterType</code> = <code>&lt;ParameterType.ARRAY: 'array'&gt;</code></li> <li><code>BOOLEAN</code>: <code>ParameterType</code> = <code>&lt;ParameterType.BOOLEAN: 'boolean'&gt;</code></li> <li><code>ENUM</code>: <code>ParameterType</code> = <code>&lt;ParameterType.ENUM: 'enum'&gt;</code></li> <li><code>FLOAT</code>: <code>ParameterType</code> = <code>&lt;ParameterType.FLOAT: 'float'&gt;</code></li> <li><code>INTEGER</code>: <code>ParameterType</code> = <code>&lt;ParameterType.INTEGER: 'integer'&gt;</code></li> <li><code>OBJECT</code>: <code>ParameterType</code> = <code>&lt;ParameterType.OBJECT: 'object'&gt;</code></li> <li><code>STRING</code>: <code>ParameterType</code> = <code>&lt;ParameterType.STRING: 'string'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.core.base/#methods_4","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.core.base/#__init___4","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(self, *args, **kwds)</code></p> <p>Parameters:</p> <ul> <li><code>args</code>:</li> <li><code>kwds</code>:</li> </ul>"},{"location":"api/modules/prompt_decorators.core.base/#validationerror","title":"<code>ValidationError</code>","text":"<p>Exception raised when decorator validation fails.</p> <p>Bases: <code>builtins.Exception</code></p>"},{"location":"api/modules/prompt_decorators.core.base/#methods_5","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.core.base/#__init___5","title":"<code>__init__</code>","text":"<p>Initialize ValidationError.</p> <p>Args:     message: The error message     decorator_name: Optional name of the decorator where validation failed</p> <p>Signature: <code>__init__(self, message: str, decorator_name: Optional[str] = None)</code></p> <p>Parameters:</p> <ul> <li><code>message</code>: <code>str</code></li> <li><code>decorator_name</code>: <code>Optional</code> (default: <code>None</code>)</li> </ul>"},{"location":"api/modules/prompt_decorators.core.dynamic_decorator/","title":"dynamic_decorator","text":"<p>Dynamic decorator functionality for prompt transformations.</p> <p>This module provides a dynamic approach to loading and applying prompt decorators from registry definitions. Instead of generating individual decorator classes for each decorator in the registry, this module loads decorator definitions at runtime directly from the JSON files in the registry.</p> <p>Typical usage:     &gt;&gt;&gt; from prompt_decorators.core.dynamic_decorator import DynamicDecorator, transform_prompt     &gt;&gt;&gt; result = transform_prompt(\"What is quantum computing?\", [\"+++StepByStep(numbered=true)\"])     &gt;&gt;&gt; decorated = DynamicDecorator(\"StepByStep\", numbered=True)     &gt;&gt;&gt; result = decorated(\"What is quantum computing?\")</p>"},{"location":"api/modules/prompt_decorators.core.dynamic_decorator/#module-variables","title":"Module Variables","text":""},{"location":"api/modules/prompt_decorators.core.dynamic_decorator/#decorator_pattern","title":"<code>DECORATOR_PATTERN</code>","text":"<p>Type: <code>str</code></p> <p>Value: <code>'\\\\+\\\\+\\\\+([A-Za-z][A-Za-z0-9]*(?::v[0-9]+(?:\\\\.[0-9]+(?:\\\\.[0-9]+)?)?)?)(?:\\\\(([^)]*)\\\\))?'</code></p>"},{"location":"api/modules/prompt_decorators.core.dynamic_decorator/#decorator_prefix","title":"<code>DECORATOR_PREFIX</code>","text":"<p>Type: <code>str</code></p> <p>Value: <code>'+++'</code></p>"},{"location":"api/modules/prompt_decorators.core.dynamic_decorator/#default_registry_dir","title":"<code>DEFAULT_REGISTRY_DIR</code>","text":"<p>Type: <code>str</code></p> <p>Value: <code>'registry'</code></p>"},{"location":"api/modules/prompt_decorators.core.dynamic_decorator/#parameter_pattern","title":"<code>PARAMETER_PATTERN</code>","text":"<p>Type: <code>str</code></p> <p>Value: <code>'([a-zA-Z0-9_]+)=(\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\"|[^,)]+)'</code></p>"},{"location":"api/modules/prompt_decorators.core.dynamic_decorator/#registry_env_var","title":"<code>REGISTRY_ENV_VAR</code>","text":"<p>Type: <code>str</code></p> <p>Value: <code>'DECORATOR_REGISTRY_DIR'</code></p>"},{"location":"api/modules/prompt_decorators.core.dynamic_decorator/#logger","title":"<code>logger</code>","text":"<p>Type: <code>Logger</code></p> <p>Value: <code>&lt;Logger prompt_decorators.core.dynamic_decorator (INFO)&gt;</code></p>"},{"location":"api/modules/prompt_decorators.core.dynamic_decorator/#classes","title":"Classes","text":""},{"location":"api/modules/prompt_decorators.core.dynamic_decorator/#decoratorparameter","title":"<code>DecoratorParameter</code>","text":"<p>Class representing a validated decorator parameter.</p>"},{"location":"api/modules/prompt_decorators.core.dynamic_decorator/#methods","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.core.dynamic_decorator/#__init__","title":"<code>__init__</code>","text":"<p>Initialize a decorator parameter.</p> <p>Args:     name: Name of the parameter     value: Value of the parameter     param_type: Type of the parameter (string, number, boolean, array, enum)     validation: Optional validation rules     enum_values: Optional list of allowed enum values</p> <p>Returns:     None</p> <p>Signature: <code>__init__(self, name: str, value: Any, param_type: str, validation: Optional[Dict[str, Any]] = None, enum_values: Optional[List[str]] = None) -&gt; None</code></p> <p>Parameters:</p> <ul> <li><code>name</code>: <code>str</code></li> <li><code>value</code>: <code>Any</code></li> <li><code>param_type</code>: <code>str</code></li> <li><code>validation</code>: <code>Optional</code> (default: <code>None</code>)</li> <li><code>enum_values</code>: <code>Optional</code> (default: <code>None</code>)</li> </ul>"},{"location":"api/modules/prompt_decorators.core.dynamic_decorator/#dynamicdecorator","title":"<code>DynamicDecorator</code>","text":"<p>Dynamic decorator class for prompt transformations.</p> <p>This class provides a dynamic approach to loading and applying prompt decorators from registry definitions. Instead of generating individual decorator classes for each decorator in the registry, this class loads decorator definitions at runtime directly from the JSON files in the registry.</p>"},{"location":"api/modules/prompt_decorators.core.dynamic_decorator/#attributes","title":"Attributes","text":"<ul> <li><code>from_definition</code>: <code>classmethod</code> = <code>&lt;classmethod(&lt;function DynamicDecorator.from_definition at 0x105a75080&gt;)&gt;</code></li> <li><code>get_available_decorators</code>: <code>classmethod</code> = <code>&lt;classmethod(&lt;function DynamicDecorator.get_available_decorators at 0x105a751c0&gt;)&gt;</code></li> <li><code>load_registry</code>: <code>classmethod</code> = <code>&lt;classmethod(&lt;function DynamicDecorator.load_registry at 0x105a74fe0&gt;)&gt;</code></li> <li><code>register_decorator</code>: <code>classmethod</code> = <code>&lt;classmethod(&lt;function DynamicDecorator.register_decorator at 0x105a75120&gt;)&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.core.dynamic_decorator/#methods_1","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.core.dynamic_decorator/#__init___1","title":"<code>__init__</code>","text":"<p>Initialize a dynamic decorator.</p> <p>Args:     name: Name of the decorator to load     **kwargs: Parameters for the decorator</p> <p>Raises:     ValueError: If the decorator is not found in the registry</p> <p>Returns:     None</p> <p>Signature: <code>__init__(self, name: str, **kwargs: Any) -&gt; None</code></p> <p>Parameters:</p> <ul> <li><code>name</code>: <code>str</code></li> <li><code>kwargs</code>: <code>Any</code></li> </ul>"},{"location":"api/modules/prompt_decorators.core.dynamic_decorator/#apply","title":"<code>apply</code>","text":"<p>Apply the decorator to a text.</p> <p>Args:     text: Text to transform</p> <p>Returns:     Transformed text</p> <p>Signature: <code>apply(self, text: str) -&gt; str</code></p> <p>Parameters:</p> <ul> <li><code>text</code>: <code>str</code></li> </ul> <p>Returns: <code>str</code></p>"},{"location":"api/modules/prompt_decorators.core.dynamic_decorator/#functions","title":"Functions","text":""},{"location":"api/modules/prompt_decorators.core.dynamic_decorator/#create_transform_function_from_template","title":"<code>create_transform_function_from_template</code>","text":"<p>Convert a transformation template to an executable transform function.</p> <p>Args:     template: The transformation template definition</p> <p>Returns:     A string containing executable Python code for the transform function</p> <p>Signature: <code>create_transform_function_from_template(template: Dict[str, Any]) -&gt; str</code></p> <p>Parameters:</p> <ul> <li><code>template</code>: <code>Dict</code></li> </ul> <p>Returns: <code>str</code></p>"},{"location":"api/modules/prompt_decorators.core.dynamic_decorator/#extract_decorators","title":"<code>extract_decorators</code>","text":"<p>Extract decorators from text.</p> <p>Args:     text: Text containing decorator definitions</p> <p>Returns:     Tuple of (decorators, clean_text)</p> <p>Signature: <code>extract_decorators(text: str) -&gt; Tuple[List[prompt_decorators.core.dynamic_decorator.DynamicDecorator], str]</code></p> <p>Parameters:</p> <ul> <li><code>text</code>: <code>str</code></li> </ul> <p>Returns: <code>Tuple</code></p>"},{"location":"api/modules/prompt_decorators.core.dynamic_decorator/#parse_decorator","title":"<code>parse_decorator</code>","text":"<p>Parse a decorator string into name and parameters.</p> <p>Args:     decorator_text: Text containing a decorator definition</p> <p>Returns:     Tuple of (name, parameters)</p> <p>Signature: <code>parse_decorator(decorator_text: str) -&gt; Tuple[str, Dict[str, Any]]</code></p> <p>Parameters:</p> <ul> <li><code>decorator_text</code>: <code>str</code></li> </ul> <p>Returns: <code>Tuple</code></p>"},{"location":"api/modules/prompt_decorators.core.dynamic_decorator/#transform_prompt","title":"<code>transform_prompt</code>","text":"<p>Transform a prompt using a list of decorator strings.</p> <p>Args:     prompt: The prompt to transform     decorators: List of decorator strings</p> <p>Returns:     The transformed prompt</p> <p>Signature: <code>transform_prompt(prompt: str, decorators: List[str]) -&gt; str</code></p> <p>Parameters:</p> <ul> <li><code>prompt</code>: <code>str</code></li> <li><code>decorators</code>: <code>List</code></li> </ul> <p>Returns: <code>str</code></p>"},{"location":"api/modules/prompt_decorators.core.exceptions/","title":"exceptions","text":"<p>Exceptions for the prompt-decorators package.</p> <p>This module defines custom exceptions used throughout the package.</p>"},{"location":"api/modules/prompt_decorators.core.exceptions/#classes","title":"Classes","text":""},{"location":"api/modules/prompt_decorators.core.exceptions/#incompatibleversionerror","title":"<code>IncompatibleVersionError</code>","text":"<p>Raised when a decorator version is incompatible.</p> <p>This exception is raised when attempting to use a decorator with a version that is not compatible with the current version of the package.</p> <p>Bases: <code>builtins.Exception</code></p>"},{"location":"api/modules/prompt_decorators.core.exceptions/#registryerror","title":"<code>RegistryError</code>","text":"<p>Raised when there is an error with the decorator registry.</p> <p>This exception is raised when there is an issue with registering or retrieving decorators from the registry.</p> <p>Bases: <code>builtins.Exception</code></p>"},{"location":"api/modules/prompt_decorators.core/","title":"core","text":"<p>Core components of the prompt decorators system.</p> <p>This package contains the core components and functionality that power the prompt decorators system, including the base decorator classes, validation logic, request handling, and model-specific adaptations.</p>"},{"location":"api/modules/prompt_decorators.core/#public-api","title":"Public API","text":"<p>This module exports the following components:</p> <ul> <li><code>DecoratorBase</code>: Class - Base class for all prompt decorators</li> <li><code>BaseDecorator</code>: Class - Base class for all prompt decorators</li> <li><code>DecoratorParameter</code>: Class - Represents a parameter for a decorator</li> <li><code>Parameter</code>: Class - Represents a parameter for a decorator</li> <li><code>ValidationError</code>: Class - Exception raised when decorator validation fails</li> <li><code>ParameterType</code>: Class - Types of parameters supported in decorators</li> <li><code>DecoratorParser</code>: Class - Parser for extracting decorator annotations from prompts</li> <li><code>DecoratorRegistry</code>: Class - Registry class for managing prompt decorators</li> </ul>"},{"location":"api/modules/prompt_decorators.core/#classes","title":"Classes","text":""},{"location":"api/modules/prompt_decorators.core/#basedecorator","title":"<code>BaseDecorator</code>","text":"<p>Imported from <code>prompt_decorators.core.base</code></p> <p>Base class for all prompt decorators.</p> <p>This class defines the common interface and behavior for all decorators. Subclasses should implement the apply_to_prompt and transform_response methods.</p>"},{"location":"api/modules/prompt_decorators.core/#attributes","title":"Attributes","text":"<ul> <li><code>conflicts_with</code>: <code>set</code> = <code>set()</code></li> <li><code>description</code>: <code>str</code> = <code>'Base decorator class'</code></li> <li><code>from_dict</code>: <code>classmethod</code> = <code>&lt;classmethod(&lt;function DecoratorBase.from_dict at 0x105acf4c0&gt;)&gt;</code></li> <li><code>name</code>: <code>str</code> = <code>'DecoratorBase'</code></li> <li><code>parameters</code>: <code>dict</code> = <code>{}</code></li> <li><code>transformation_template</code>: <code>dict</code> = <code>{'instruction': '', 'parameterMapping': {}, 'placement': 'prepend', 'compositionBehavior': 'accumulate'}</code></li> </ul>"},{"location":"api/modules/prompt_decorators.core/#methods","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.core/#__init__","title":"<code>__init__</code>","text":"<p>Initialize a decorator with parameter values.</p> <p>Args:     **kwargs: Parameter values for the decorator</p> <p>Raises:     ValidationError: If any parameter values are invalid</p> <p>Signature: <code>__init__(self, **kwargs)</code></p> <p>Parameters:</p> <ul> <li><code>kwargs</code>:</li> </ul>"},{"location":"api/modules/prompt_decorators.core/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Apply the decorator to a prompt.</p> <p>This method uses the transformation_template to transform the prompt according to the decorator's intended behavior.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p> <p>Signature: <code>apply_to_prompt(self, prompt: str) -&gt; str</code></p> <p>Parameters:</p> <ul> <li><code>prompt</code>: <code>str</code></li> </ul> <p>Returns: <code>str</code></p>"},{"location":"api/modules/prompt_decorators.core/#transform_response","title":"<code>transform_response</code>","text":"<p>Transform the LLM response according to the decorator's behavior.</p> <p>The base implementation returns the response unchanged. Subclasses should override this method if they need to modify the response.</p> <p>Args:     response: The LLM response to transform</p> <p>Returns:     The transformed response</p> <p>Signature: <code>transform_response(self, response: str) -&gt; str</code></p> <p>Parameters:</p> <ul> <li><code>response</code>: <code>str</code></li> </ul> <p>Returns: <code>str</code></p>"},{"location":"api/modules/prompt_decorators.core/#decoratorbase","title":"<code>DecoratorBase</code>","text":"<p>Imported from <code>prompt_decorators.core.base</code></p> <p>Base class for all prompt decorators.</p> <p>This class defines the common interface and behavior for all decorators. Subclasses should implement the apply_to_prompt and transform_response methods.</p>"},{"location":"api/modules/prompt_decorators.core/#attributes_1","title":"Attributes","text":"<ul> <li><code>conflicts_with</code>: <code>set</code> = <code>set()</code></li> <li><code>description</code>: <code>str</code> = <code>'Base decorator class'</code></li> <li><code>from_dict</code>: <code>classmethod</code> = <code>&lt;classmethod(&lt;function DecoratorBase.from_dict at 0x105acf4c0&gt;)&gt;</code></li> <li><code>name</code>: <code>str</code> = <code>'DecoratorBase'</code></li> <li><code>parameters</code>: <code>dict</code> = <code>{}</code></li> <li><code>transformation_template</code>: <code>dict</code> = <code>{'instruction': '', 'parameterMapping': {}, 'placement': 'prepend', 'compositionBehavior': 'accumulate'}</code></li> </ul>"},{"location":"api/modules/prompt_decorators.core/#methods_1","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.core/#__init___1","title":"<code>__init__</code>","text":"<p>Initialize a decorator with parameter values.</p> <p>Args:     **kwargs: Parameter values for the decorator</p> <p>Raises:     ValidationError: If any parameter values are invalid</p> <p>Signature: <code>__init__(self, **kwargs)</code></p> <p>Parameters:</p> <ul> <li><code>kwargs</code>:</li> </ul>"},{"location":"api/modules/prompt_decorators.core/#apply_to_prompt_1","title":"<code>apply_to_prompt</code>","text":"<p>Apply the decorator to a prompt.</p> <p>This method uses the transformation_template to transform the prompt according to the decorator's intended behavior.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p> <p>Signature: <code>apply_to_prompt(self, prompt: str) -&gt; str</code></p> <p>Parameters:</p> <ul> <li><code>prompt</code>: <code>str</code></li> </ul> <p>Returns: <code>str</code></p>"},{"location":"api/modules/prompt_decorators.core/#transform_response_1","title":"<code>transform_response</code>","text":"<p>Transform the LLM response according to the decorator's behavior.</p> <p>The base implementation returns the response unchanged. Subclasses should override this method if they need to modify the response.</p> <p>Args:     response: The LLM response to transform</p> <p>Returns:     The transformed response</p> <p>Signature: <code>transform_response(self, response: str) -&gt; str</code></p> <p>Parameters:</p> <ul> <li><code>response</code>: <code>str</code></li> </ul> <p>Returns: <code>str</code></p>"},{"location":"api/modules/prompt_decorators.core/#decoratorparameter","title":"<code>DecoratorParameter</code>","text":"<p>Imported from <code>prompt_decorators.core.base</code></p> <p>Represents a parameter for a decorator.</p> <p>This class is used by dynamic decorators to define parameters and validate values.</p>"},{"location":"api/modules/prompt_decorators.core/#attributes_2","title":"Attributes","text":"<ul> <li><code>from_dict</code>: <code>classmethod</code> = <code>&lt;classmethod(&lt;function DecoratorParameter.from_dict at 0x105acf380&gt;)&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.core/#methods_2","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.core/#__init___2","title":"<code>__init__</code>","text":"<p>Initialize a decorator parameter.</p> <p>Args:     name: The name of the parameter     description: A description of the parameter     type_: The type of the parameter (string, integer, float, boolean, enum)     required: Whether the parameter is required     default: Default value for the parameter     enum_values: Possible values for enum type     min_value: Minimum value for numeric types     max_value: Maximum value for numeric types     min_length: Minimum length for string or array types     max_length: Maximum length for string or array types     pattern: Regex pattern for string validation</p> <p>Signature: <code>__init__(self, name: str, description: str, type_: str = 'string', required: bool = False, default: Any = None, enum_values: Optional[List[str]] = None, min_value: Union[int, float, NoneType] = None, max_value: Union[int, float, NoneType] = None, min_length: Optional[int] = None, max_length: Optional[int] = None, pattern: Optional[str] = None)</code></p> <p>Parameters:</p> <ul> <li><code>name</code>: <code>str</code></li> <li><code>description</code>: <code>str</code></li> <li><code>type_</code>: <code>str</code> (default: <code>string</code>)</li> <li><code>required</code>: <code>bool</code> (default: <code>False</code>)</li> <li><code>default</code>: <code>Any</code> (default: <code>None</code>)</li> <li><code>enum_values</code>: <code>Optional</code> (default: <code>None</code>)</li> <li><code>min_value</code>: <code>Union</code> (default: <code>None</code>)</li> <li><code>max_value</code>: <code>Union</code> (default: <code>None</code>)</li> <li><code>min_length</code>: <code>Optional</code> (default: <code>None</code>)</li> <li><code>max_length</code>: <code>Optional</code> (default: <code>None</code>)</li> <li><code>pattern</code>: <code>Optional</code> (default: <code>None</code>)</li> </ul>"},{"location":"api/modules/prompt_decorators.core/#to_dict","title":"<code>to_dict</code>","text":"<p>Convert the parameter to a dictionary representation.</p> <p>Signature: <code>to_dict(self) -&gt; Dict[str, Any]</code></p> <p>Parameters:</p> <p>Returns: <code>Dict</code></p>"},{"location":"api/modules/prompt_decorators.core/#validate","title":"<code>validate</code>","text":"<p>Validate a parameter value against constraints.</p> <p>Args:     value: The value to validate</p> <p>Returns:     The validated value (possibly converted to the correct type)</p> <p>Raises:     ValidationError: If the value is invalid</p> <p>Signature: <code>validate(self, value: Any) -&gt; Any</code></p> <p>Parameters:</p> <ul> <li><code>value</code>: <code>Any</code></li> </ul> <p>Returns: <code>Any</code></p>"},{"location":"api/modules/prompt_decorators.core/#decoratorparser","title":"<code>DecoratorParser</code>","text":"<p>Imported from <code>prompt_decorators.core.parser</code></p> <p>Parser for extracting decorator annotations from prompts.</p> <p>This class handles the parsing of decorator annotations in the format: +++DecoratorName(param1=value1, param2=value2)</p>"},{"location":"api/modules/prompt_decorators.core/#attributes_3","title":"Attributes","text":"<ul> <li><code>DECORATOR_PATTERN</code>: <code>str</code> = <code>'\\\\+\\\\+\\\\+([A-Za-z0-9_]+)(?:\\\\(([^)]*)\\\\))?'</code></li> </ul>"},{"location":"api/modules/prompt_decorators.core/#methods_3","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.core/#__init___3","title":"<code>__init__</code>","text":"<p>Initialize the decorator parser.</p> <p>Args:     registry: Optional decorator registry to use for creating decorators. If not provided, the global registry will be used.</p> <p>Signature: <code>__init__(self, registry: Optional[prompt_decorators.core.registry.DecoratorRegistry] = None)</code></p> <p>Parameters:</p> <ul> <li><code>registry</code>: <code>Optional</code> (default: <code>None</code>)</li> </ul>"},{"location":"api/modules/prompt_decorators.core/#extract_decorators","title":"<code>extract_decorators</code>","text":"<p>Extract decorator annotations from a prompt.</p> <p>This method extracts all decorator annotations from the prompt text, creates decorator instances for each annotation, and returns both the list of decorators and the cleaned prompt text.</p> <p>Args:     prompt: The prompt text to parse</p> <p>Returns:     A tuple containing:         - A list of decorator instances         - The prompt text with decorator annotations removed</p> <p>Signature: <code>extract_decorators(self, prompt: str) -&gt; Tuple[List[prompt_decorators.core.base.DecoratorBase], str]</code></p> <p>Parameters:</p> <ul> <li><code>prompt</code>: <code>str</code></li> </ul> <p>Returns: <code>Tuple</code></p>"},{"location":"api/modules/prompt_decorators.core/#decoratorregistry","title":"<code>DecoratorRegistry</code>","text":"<p>Imported from <code>prompt_decorators.core.registry</code></p> <p>Registry class for managing prompt decorators.</p> <p>This class provides an object-oriented interface to the decorator registry, allowing for easier management and access to registered decorators.</p>"},{"location":"api/modules/prompt_decorators.core/#attributes_4","title":"Attributes","text":"<ul> <li><code>categories</code>: <code>property</code> = <code>&lt;property object at 0x105ac72e0&gt;</code></li> <li><code>decorators</code>: <code>property</code> = <code>&lt;property object at 0x105ac7100&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.core/#methods_4","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.core/#__init___4","title":"<code>__init__</code>","text":"<p>Initialize the decorator registry.</p> <p>Signature: <code>__init__(self) -&gt; None</code></p> <p>Parameters:</p>"},{"location":"api/modules/prompt_decorators.core/#clear","title":"<code>clear</code>","text":"<p>Clear the registry.</p> <p>Signature: <code>clear(self) -&gt; None</code></p> <p>Parameters:</p>"},{"location":"api/modules/prompt_decorators.core/#get_by_category","title":"<code>get_by_category</code>","text":"<p>Get all decorators in a category.</p> <p>Args:     category: The category to get decorators for</p> <p>Returns:     List of decorator classes in the category</p> <p>Signature: <code>get_by_category(self, category: str) -&gt; List[Type[prompt_decorators.core.base.DecoratorBase]]</code></p> <p>Parameters:</p> <ul> <li><code>category</code>: <code>str</code></li> </ul> <p>Returns: <code>List</code></p>"},{"location":"api/modules/prompt_decorators.core/#get_decorator","title":"<code>get_decorator</code>","text":"<p>Get a decorator class by name.</p> <p>Args:     name: The name of the decorator to get</p> <p>Returns:     The decorator class, or None if not found</p> <p>Signature: <code>get_decorator(self, name: str) -&gt; Optional[Type[prompt_decorators.core.base.DecoratorBase]]</code></p> <p>Parameters:</p> <ul> <li><code>name</code>: <code>str</code></li> </ul> <p>Returns: <code>Optional</code></p>"},{"location":"api/modules/prompt_decorators.core/#register","title":"<code>register</code>","text":"<p>Register a decorator class.</p> <p>Args:     decorator_class: The decorator class to register     category: The category to register the decorator under</p> <p>Returns:     None</p> <p>Signature: <code>register(self, decorator_class: Type[prompt_decorators.core.base.DecoratorBase], category: str = 'unknown') -&gt; None</code></p> <p>Parameters:</p> <ul> <li><code>decorator_class</code>: <code>Type</code></li> <li><code>category</code>: <code>str</code> (default: <code>unknown</code>)</li> </ul>"},{"location":"api/modules/prompt_decorators.core/#parameter","title":"<code>Parameter</code>","text":"<p>Imported from <code>prompt_decorators.core.base</code></p> <p>Represents a parameter for a decorator.</p> <p>This class defines the metadata for a parameter, including its name, type, description, default value, and constraints.</p> <p>Bases: <code>pydantic.main.BaseModel</code></p>"},{"location":"api/modules/prompt_decorators.core/#attributes_5","title":"Attributes","text":"<ul> <li><code>model_config</code>: <code>dict</code> = <code>{}</code></li> </ul>"},{"location":"api/modules/prompt_decorators.core/#methods_5","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.core/#__init___5","title":"<code>__init__</code>","text":"<p>Create a new model by parsing and validating input data from keyword arguments.</p> <p>Raises <code>ValidationError</code> if the input data cannot be validated to form a valid model.</p> <p><code>self</code> is explicitly positional-only to allow <code>self</code> as a field name.</p> <p>Signature: <code>__init__(self, /, **data: 'Any') -&gt; 'None'</code></p> <p>Parameters:</p> <ul> <li><code>data</code>: <code>Any</code></li> </ul> <p>Returns: <code>None</code></p>"},{"location":"api/modules/prompt_decorators.core/#copy","title":"<code>copy</code>","text":"<p>Returns a copy of the model.</p> <p>Deprecated</p> <p>This method is now deprecated; use <code>model_copy</code> instead.</p> <p>If you need <code>include</code> or <code>exclude</code>, use:</p> <pre><code>data = self.model_dump(include=include, exclude=exclude, round_trip=True)\ndata = {**data, **(update or {})}\ncopied = self.model_validate(data)\n</code></pre> <p>Args:     include: Optional set or mapping specifying which fields to include in the copied model.     exclude: Optional set or mapping specifying which fields to exclude in the copied model.     update: Optional dictionary of field-value pairs to override field values in the copied model.     deep: If True, the values of fields that are Pydantic models will be deep-copied.</p> <p>Returns:     A copy of the model with included, excluded and updated fields as specified.</p> <p>Signature: <code>copy(self, *, include: 'AbstractSetIntStr | MappingIntStrAny | None' = None, exclude: 'AbstractSetIntStr | MappingIntStrAny | None' = None, update: 'Dict[str, Any] | None' = None, deep: 'bool' = False) -&gt; 'Self'</code></p> <p>Parameters:</p> <ul> <li><code>include</code>: <code>AbstractSetIntStr | MappingIntStrAny | None</code> (default: <code>None</code>)</li> <li><code>exclude</code>: <code>AbstractSetIntStr | MappingIntStrAny | None</code> (default: <code>None</code>)</li> <li><code>update</code>: <code>Dict[str, Any] | None</code> (default: <code>None</code>)</li> <li><code>deep</code>: <code>bool</code> (default: <code>False</code>)</li> </ul> <p>Returns: <code>Self</code></p>"},{"location":"api/modules/prompt_decorators.core/#dict","title":"<code>dict</code>","text":"<p>Signature: <code>dict(self, *, include: 'IncEx | None' = None, exclude: 'IncEx | None' = None, by_alias: 'bool' = False, exclude_unset: 'bool' = False, exclude_defaults: 'bool' = False, exclude_none: 'bool' = False) -&gt; 'Dict[str, Any]'</code></p> <p>Parameters:</p> <ul> <li><code>include</code>: <code>IncEx | None</code> (default: <code>None</code>)</li> <li><code>exclude</code>: <code>IncEx | None</code> (default: <code>None</code>)</li> <li><code>by_alias</code>: <code>bool</code> (default: <code>False</code>)</li> <li><code>exclude_unset</code>: <code>bool</code> (default: <code>False</code>)</li> <li><code>exclude_defaults</code>: <code>bool</code> (default: <code>False</code>)</li> <li><code>exclude_none</code>: <code>bool</code> (default: <code>False</code>)</li> </ul> <p>Returns: <code>Dict[str, Any]</code></p>"},{"location":"api/modules/prompt_decorators.core/#json","title":"<code>json</code>","text":"<p>Signature: <code>json(self, *, include: 'IncEx | None' = None, exclude: 'IncEx | None' = None, by_alias: 'bool' = False, exclude_unset: 'bool' = False, exclude_defaults: 'bool' = False, exclude_none: 'bool' = False, encoder: 'Callable[[Any], Any] | None' = PydanticUndefined, models_as_dict: 'bool' = PydanticUndefined, **dumps_kwargs: 'Any') -&gt; 'str'</code></p> <p>Parameters:</p> <ul> <li><code>include</code>: <code>IncEx | None</code> (default: <code>None</code>)</li> <li><code>exclude</code>: <code>IncEx | None</code> (default: <code>None</code>)</li> <li><code>by_alias</code>: <code>bool</code> (default: <code>False</code>)</li> <li><code>exclude_unset</code>: <code>bool</code> (default: <code>False</code>)</li> <li><code>exclude_defaults</code>: <code>bool</code> (default: <code>False</code>)</li> <li><code>exclude_none</code>: <code>bool</code> (default: <code>False</code>)</li> <li><code>encoder</code>: <code>Callable[[Any], Any] | None</code> (default: <code>PydanticUndefined</code>)</li> <li><code>models_as_dict</code>: <code>bool</code> (default: <code>PydanticUndefined</code>)</li> <li><code>dumps_kwargs</code>: <code>Any</code></li> </ul> <p>Returns: <code>str</code></p>"},{"location":"api/modules/prompt_decorators.core/#model_copy","title":"<code>model_copy</code>","text":"<p>Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#model_copy</p> <p>Returns a copy of the model.</p> <p>Args:     update: Values to change/add in the new model. Note: the data is not validated         before creating the new model. You should trust this data.     deep: Set to <code>True</code> to make a deep copy of the model.</p> <p>Returns:     New model instance.</p> <p>Signature: <code>model_copy(self, *, update: 'Mapping[str, Any] | None' = None, deep: 'bool' = False) -&gt; 'Self'</code></p> <p>Parameters:</p> <ul> <li><code>update</code>: <code>Mapping[str, Any] | None</code> (default: <code>None</code>)</li> <li><code>deep</code>: <code>bool</code> (default: <code>False</code>)</li> </ul> <p>Returns: <code>Self</code></p>"},{"location":"api/modules/prompt_decorators.core/#model_dump","title":"<code>model_dump</code>","text":"<p>Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump</p> <p>Generate a dictionary representation of the model, optionally specifying which fields to include or exclude.</p> <p>Args:     mode: The mode in which <code>to_python</code> should run.         If mode is 'json', the output will only contain JSON serializable types.         If mode is 'python', the output may contain non-JSON-serializable Python objects.     include: A set of fields to include in the output.     exclude: A set of fields to exclude from the output.     context: Additional context to pass to the serializer.     by_alias: Whether to use the field's alias in the dictionary key if defined.     exclude_unset: Whether to exclude fields that have not been explicitly set.     exclude_defaults: Whether to exclude fields that are set to their default value.     exclude_none: Whether to exclude fields that have a value of <code>None</code>.     round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].     warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,         \"error\" raises a <code>PydanticSerializationError</code>.     serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.</p> <p>Returns:     A dictionary representation of the model.</p> <p>Signature: <code>model_dump(self, *, mode: \"Literal['json', 'python'] | str\" = 'python', include: 'IncEx | None' = None, exclude: 'IncEx | None' = None, context: 'Any | None' = None, by_alias: 'bool' = False, exclude_unset: 'bool' = False, exclude_defaults: 'bool' = False, exclude_none: 'bool' = False, round_trip: 'bool' = False, warnings: \"bool | Literal['none', 'warn', 'error']\" = True, serialize_as_any: 'bool' = False) -&gt; 'dict[str, Any]'</code></p> <p>Parameters:</p> <ul> <li><code>mode</code>: <code>Literal['json', 'python'] | str</code> (default: <code>python</code>)</li> <li><code>include</code>: <code>IncEx | None</code> (default: <code>None</code>)</li> <li><code>exclude</code>: <code>IncEx | None</code> (default: <code>None</code>)</li> <li><code>context</code>: <code>Any | None</code> (default: <code>None</code>)</li> <li><code>by_alias</code>: <code>bool</code> (default: <code>False</code>)</li> <li><code>exclude_unset</code>: <code>bool</code> (default: <code>False</code>)</li> <li><code>exclude_defaults</code>: <code>bool</code> (default: <code>False</code>)</li> <li><code>exclude_none</code>: <code>bool</code> (default: <code>False</code>)</li> <li><code>round_trip</code>: <code>bool</code> (default: <code>False</code>)</li> <li><code>warnings</code>: <code>bool | Literal['none', 'warn', 'error']</code> (default: <code>True</code>)</li> <li><code>serialize_as_any</code>: <code>bool</code> (default: <code>False</code>)</li> </ul> <p>Returns: <code>dict[str, Any]</code></p>"},{"location":"api/modules/prompt_decorators.core/#model_dump_json","title":"<code>model_dump_json</code>","text":"<p>Usage docs: https://docs.pydantic.dev/2.10/concepts/serialization/#modelmodel_dump_json</p> <p>Generates a JSON representation of the model using Pydantic's <code>to_json</code> method.</p> <p>Args:     indent: Indentation to use in the JSON output. If None is passed, the output will be compact.     include: Field(s) to include in the JSON output.     exclude: Field(s) to exclude from the JSON output.     context: Additional context to pass to the serializer.     by_alias: Whether to serialize using field aliases.     exclude_unset: Whether to exclude fields that have not been explicitly set.     exclude_defaults: Whether to exclude fields that are set to their default value.     exclude_none: Whether to exclude fields that have a value of <code>None</code>.     round_trip: If True, dumped values should be valid as input for non-idempotent types such as Json[T].     warnings: How to handle serialization errors. False/\"none\" ignores them, True/\"warn\" logs errors,         \"error\" raises a <code>PydanticSerializationError</code>.     serialize_as_any: Whether to serialize fields with duck-typing serialization behavior.</p> <p>Returns:     A JSON string representation of the model.</p> <p>Signature: <code>model_dump_json(self, *, indent: 'int | None' = None, include: 'IncEx | None' = None, exclude: 'IncEx | None' = None, context: 'Any | None' = None, by_alias: 'bool' = False, exclude_unset: 'bool' = False, exclude_defaults: 'bool' = False, exclude_none: 'bool' = False, round_trip: 'bool' = False, warnings: \"bool | Literal['none', 'warn', 'error']\" = True, serialize_as_any: 'bool' = False) -&gt; 'str'</code></p> <p>Parameters:</p> <ul> <li><code>indent</code>: <code>int | None</code> (default: <code>None</code>)</li> <li><code>include</code>: <code>IncEx | None</code> (default: <code>None</code>)</li> <li><code>exclude</code>: <code>IncEx | None</code> (default: <code>None</code>)</li> <li><code>context</code>: <code>Any | None</code> (default: <code>None</code>)</li> <li><code>by_alias</code>: <code>bool</code> (default: <code>False</code>)</li> <li><code>exclude_unset</code>: <code>bool</code> (default: <code>False</code>)</li> <li><code>exclude_defaults</code>: <code>bool</code> (default: <code>False</code>)</li> <li><code>exclude_none</code>: <code>bool</code> (default: <code>False</code>)</li> <li><code>round_trip</code>: <code>bool</code> (default: <code>False</code>)</li> <li><code>warnings</code>: <code>bool | Literal['none', 'warn', 'error']</code> (default: <code>True</code>)</li> <li><code>serialize_as_any</code>: <code>bool</code> (default: <code>False</code>)</li> </ul> <p>Returns: <code>str</code></p>"},{"location":"api/modules/prompt_decorators.core/#model_post_init","title":"<code>model_post_init</code>","text":"<p>Override this method to perform additional initialization after <code>__init__</code> and <code>model_construct</code>. This is useful if you want to do some validation that requires the entire model to be initialized.</p> <p>Signature: <code>model_post_init(self, _BaseModel__context: 'Any') -&gt; 'None'</code></p> <p>Parameters:</p> <ul> <li><code>_BaseModel__context</code>: <code>Any</code></li> </ul> <p>Returns: <code>None</code></p>"},{"location":"api/modules/prompt_decorators.core/#validate_value","title":"<code>validate_value</code>","text":"<p>Validate a parameter value against the parameter's constraints.</p> <p>Args:     value: The value to validate</p> <p>Returns:     The validated value (possibly converted to the correct type)</p> <p>Raises:     ValidationError: If the value is invalid</p> <p>Signature: <code>validate_value(self, value: Any) -&gt; Any</code></p> <p>Parameters:</p> <ul> <li><code>value</code>: <code>Any</code></li> </ul> <p>Returns: <code>Any</code></p>"},{"location":"api/modules/prompt_decorators.core/#parametertype","title":"<code>ParameterType</code>","text":"<p>Imported from <code>prompt_decorators.core.base</code></p> <p>Types of parameters supported in decorators.</p> <p>Bases: <code>builtins.str</code>, <code>enum.Enum</code></p>"},{"location":"api/modules/prompt_decorators.core/#attributes_6","title":"Attributes","text":"<ul> <li><code>ARRAY</code>: <code>ParameterType</code> = <code>&lt;ParameterType.ARRAY: 'array'&gt;</code></li> <li><code>BOOLEAN</code>: <code>ParameterType</code> = <code>&lt;ParameterType.BOOLEAN: 'boolean'&gt;</code></li> <li><code>ENUM</code>: <code>ParameterType</code> = <code>&lt;ParameterType.ENUM: 'enum'&gt;</code></li> <li><code>FLOAT</code>: <code>ParameterType</code> = <code>&lt;ParameterType.FLOAT: 'float'&gt;</code></li> <li><code>INTEGER</code>: <code>ParameterType</code> = <code>&lt;ParameterType.INTEGER: 'integer'&gt;</code></li> <li><code>OBJECT</code>: <code>ParameterType</code> = <code>&lt;ParameterType.OBJECT: 'object'&gt;</code></li> <li><code>STRING</code>: <code>ParameterType</code> = <code>&lt;ParameterType.STRING: 'string'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.core/#methods_6","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.core/#__init___6","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(self, *args, **kwds)</code></p> <p>Parameters:</p> <ul> <li><code>args</code>:</li> <li><code>kwds</code>:</li> </ul>"},{"location":"api/modules/prompt_decorators.core/#validationerror","title":"<code>ValidationError</code>","text":"<p>Imported from <code>prompt_decorators.core.base</code></p> <p>Exception raised when decorator validation fails.</p> <p>Bases: <code>builtins.Exception</code></p>"},{"location":"api/modules/prompt_decorators.core/#methods_7","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.core/#__init___7","title":"<code>__init__</code>","text":"<p>Initialize ValidationError.</p> <p>Args:     message: The error message     decorator_name: Optional name of the decorator where validation failed</p> <p>Signature: <code>__init__(self, message: str, decorator_name: Optional[str] = None)</code></p> <p>Parameters:</p> <ul> <li><code>message</code>: <code>str</code></li> <li><code>decorator_name</code>: <code>Optional</code> (default: <code>None</code>)</li> </ul>"},{"location":"api/modules/prompt_decorators.core.model_specific/","title":"model_specific","text":"<p>Model-Specific Decorator Module.</p> <p>This module provides base classes and utilities for model-specific decorator adaptations.</p>"},{"location":"api/modules/prompt_decorators.core.model_specific/#module-variables","title":"Module Variables","text":""},{"location":"api/modules/prompt_decorators.core.model_specific/#t","title":"<code>T</code>","text":"<p>Type: <code>TypeVar</code></p> <p>Value: <code>~T</code></p>"},{"location":"api/modules/prompt_decorators.core.model_specific/#logger","title":"<code>logger</code>","text":"<p>Type: <code>Logger</code></p> <p>Value: <code>&lt;Logger prompt_decorators.core.model_specific (INFO)&gt;</code></p>"},{"location":"api/modules/prompt_decorators.core.model_specific/#classes","title":"Classes","text":""},{"location":"api/modules/prompt_decorators.core.model_specific/#modelspecificdecorator","title":"<code>ModelSpecificDecorator</code>","text":"<p>Base class for model-specific decorator adaptations.</p> <p>This class extends BaseDecorator to support model-specific adaptations, allowing decorators to adjust their behavior based on the model being used.</p> <p>Bases: <code>prompt_decorators.core.base.DecoratorBase</code>, <code>typing.Generic</code></p>"},{"location":"api/modules/prompt_decorators.core.model_specific/#attributes","title":"Attributes","text":"<ul> <li><code>from_dict</code>: <code>classmethod</code> = <code>&lt;classmethod(&lt;function ModelSpecificDecorator.from_dict at 0x105c18d60&gt;)&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.core.model_specific/#methods","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.core.model_specific/#__init__","title":"<code>__init__</code>","text":"<p>Initialize a model-specific decorator.</p> <p>Args:     model_id: ID of the model to adapt for (optional)     **kwargs: Additional parameters for the decorator. These are passed to the parent class constructor.</p> <p>Signature: <code>__init__(self, model_id: Optional[str] = None, **kwargs)</code></p> <p>Parameters:</p> <ul> <li><code>model_id</code>: <code>Optional</code> (default: <code>None</code>)</li> <li><code>kwargs</code>:</li> </ul>"},{"location":"api/modules/prompt_decorators.core.model_specific/#apply","title":"<code>apply</code>","text":"<p>Apply the decorator to a prompt with model-specific adaptations.</p> <p>This implementation first checks if the decorator is supported by the model, then delegates to either apply_for_model or apply_fallback based on support.</p> <p>Args:     prompt: The original prompt to decorate</p> <p>Returns:     The decorated prompt</p> <p>Signature: <code>apply(self, prompt: str) -&gt; str</code></p> <p>Parameters:</p> <ul> <li><code>prompt</code>: <code>str</code></li> </ul> <p>Returns: <code>str</code></p>"},{"location":"api/modules/prompt_decorators.core.model_specific/#apply_fallback","title":"<code>apply_fallback</code>","text":"<p>Apply a fallback decoration when model doesn't support this decorator.</p> <p>This method provides a fallback implementation that still attempts to achieve a similar effect, but with simplified instructions.</p> <p>Args:     prompt: The original prompt to decorate</p> <p>Returns:     The decorated prompt</p> <p>Signature: <code>apply_fallback(self, prompt: str) -&gt; str</code></p> <p>Parameters:</p> <ul> <li><code>prompt</code>: <code>str</code></li> </ul> <p>Returns: <code>str</code></p>"},{"location":"api/modules/prompt_decorators.core.model_specific/#apply_for_model","title":"<code>apply_for_model</code>","text":"<p>Apply the decorator with model-specific adaptations.</p> <p>This method should be implemented by subclasses to provide model-specific adaptations.</p> <p>Args:     prompt: The original prompt to decorate</p> <p>Returns:     The decorated prompt</p> <p>Signature: <code>apply_for_model(self, prompt: str) -&gt; str</code></p> <p>Parameters:</p> <ul> <li><code>prompt</code>: <code>str</code></li> </ul> <p>Returns: <code>str</code></p>"},{"location":"api/modules/prompt_decorators.core.model_specific/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Apply the decorator to a prompt.</p> <p>This method uses the transformation_template to transform the prompt according to the decorator's intended behavior.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p> <p>Signature: <code>apply_to_prompt(self, prompt: str) -&gt; str</code></p> <p>Parameters:</p> <ul> <li><code>prompt</code>: <code>str</code></li> </ul> <p>Returns: <code>str</code></p>"},{"location":"api/modules/prompt_decorators.core.model_specific/#is_supported_by_model","title":"<code>is_supported_by_model</code>","text":"<p>Check if this decorator is supported by the current model.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     True if supported, False otherwise</p> <p>Signature: <code>is_supported_by_model(self) -&gt; bool</code></p> <p>Parameters:</p> <p>Returns: <code>bool</code></p>"},{"location":"api/modules/prompt_decorators.core.model_specific/#set_model","title":"<code>set_model</code>","text":"<p>Set the model ID for this decorator.</p> <p>Args:     model_id: ID of the model to adapt for</p> <p>Returns:     None</p> <p>Signature: <code>set_model(self, model_id: str) -&gt; None</code></p> <p>Parameters:</p> <ul> <li><code>model_id</code>: <code>str</code></li> </ul>"},{"location":"api/modules/prompt_decorators.core.model_specific/#to_dict","title":"<code>to_dict</code>","text":"<p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p> <p>Signature: <code>to_dict(self) -&gt; Dict[str, Any]</code></p> <p>Parameters:</p> <p>Returns: <code>Dict</code></p>"},{"location":"api/modules/prompt_decorators.core.model_specific/#transform_response","title":"<code>transform_response</code>","text":"<p>Transform the LLM response according to the decorator's behavior.</p> <p>The base implementation returns the response unchanged. Subclasses should override this method if they need to modify the response.</p> <p>Args:     response: The LLM response to transform</p> <p>Returns:     The transformed response</p> <p>Signature: <code>transform_response(self, response: str) -&gt; str</code></p> <p>Parameters:</p> <ul> <li><code>response</code>: <code>str</code></li> </ul> <p>Returns: <code>str</code></p>"},{"location":"api/modules/prompt_decorators.core.model_specific/#modelspecificdecoratorfactory","title":"<code>ModelSpecificDecoratorFactory</code>","text":"<p>Factory for creating model-specific decorators.</p> <p>This class provides methods for creating model-specific versions of decorators. It allows for customizing decorator behavior based on specific model requirements.</p> <p>The factory creates decorator instances that are tailored to work optimally with particular language models, taking into account their unique capabilities and limitations.</p>"},{"location":"api/modules/prompt_decorators.core.model_specific/#attributes_1","title":"Attributes","text":"<ul> <li><code>create_for_model</code>: <code>staticmethod</code> = <code>&lt;staticmethod(&lt;function ModelSpecificDecoratorFactory.create_for_model at 0x105c18c20&gt;)&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.core.model_specific/#methods_1","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.core.model_specific/#create_for_model","title":"<code>create_for_model</code>","text":"<p>Create a model-specific version of a decorator.</p> <p>This method creates a new class that extends both ModelSpecificDecorator and the original decorator class, allowing for model-specific adaptations.</p> <p>Args:     decorator_class: Original decorator class     model_id: ID of the model to adapt for     **params: Parameters for the decorator. These are passed to the decorator constructor.</p> <p>Returns:     Instance of the model-specific decorator</p> <p>Signature: <code>create_for_model(decorator_class: Type[prompt_decorators.core.base.DecoratorBase], model_id: str, **params) -&gt; prompt_decorators.core.base.DecoratorBase</code></p> <p>Parameters:</p> <ul> <li><code>decorator_class</code>: <code>Type</code></li> <li><code>model_id</code>: <code>str</code></li> <li><code>params</code>:</li> </ul> <p>Returns: <code>DecoratorBase</code></p>"},{"location":"api/modules/prompt_decorators.core.parser/","title":"parser","text":"<p>Parser module for extracting decorators from prompts.</p> <p>This module provides functionality to parse and extract decorator annotations from prompt text using the +++ syntax.</p>"},{"location":"api/modules/prompt_decorators.core.parser/#classes","title":"Classes","text":""},{"location":"api/modules/prompt_decorators.core.parser/#decoratorparser","title":"<code>DecoratorParser</code>","text":"<p>Parser for extracting decorator annotations from prompts.</p> <p>This class handles the parsing of decorator annotations in the format: +++DecoratorName(param1=value1, param2=value2)</p>"},{"location":"api/modules/prompt_decorators.core.parser/#attributes","title":"Attributes","text":"<ul> <li><code>DECORATOR_PATTERN</code>: <code>str</code> = <code>'\\\\+\\\\+\\\\+([A-Za-z0-9_]+)(?:\\\\(([^)]*)\\\\))?'</code></li> </ul>"},{"location":"api/modules/prompt_decorators.core.parser/#methods","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.core.parser/#__init__","title":"<code>__init__</code>","text":"<p>Initialize the decorator parser.</p> <p>Args:     registry: Optional decorator registry to use for creating decorators. If not provided, the global registry will be used.</p> <p>Signature: <code>__init__(self, registry: Optional[prompt_decorators.core.registry.DecoratorRegistry] = None)</code></p> <p>Parameters:</p> <ul> <li><code>registry</code>: <code>Optional</code> (default: <code>None</code>)</li> </ul>"},{"location":"api/modules/prompt_decorators.core.parser/#extract_decorators","title":"<code>extract_decorators</code>","text":"<p>Extract decorator annotations from a prompt.</p> <p>This method extracts all decorator annotations from the prompt text, creates decorator instances for each annotation, and returns both the list of decorators and the cleaned prompt text.</p> <p>Args:     prompt: The prompt text to parse</p> <p>Returns:     A tuple containing:         - A list of decorator instances         - The prompt text with decorator annotations removed</p> <p>Signature: <code>extract_decorators(self, prompt: str) -&gt; Tuple[List[prompt_decorators.core.base.DecoratorBase], str]</code></p> <p>Parameters:</p> <ul> <li><code>prompt</code>: <code>str</code></li> </ul> <p>Returns: <code>Tuple</code></p>"},{"location":"api/modules/prompt_decorators.core.registry/","title":"registry","text":"<p>Registry for prompt decorators.</p> <p>This module maintains a global registry of all available decorators and provides functions for registering and retrieving them.</p>"},{"location":"api/modules/prompt_decorators.core.registry/#classes","title":"Classes","text":""},{"location":"api/modules/prompt_decorators.core.registry/#decoratorregistry","title":"<code>DecoratorRegistry</code>","text":"<p>Registry class for managing prompt decorators.</p> <p>This class provides an object-oriented interface to the decorator registry, allowing for easier management and access to registered decorators.</p>"},{"location":"api/modules/prompt_decorators.core.registry/#attributes","title":"Attributes","text":"<ul> <li><code>categories</code>: <code>property</code> = <code>&lt;property object at 0x105ac72e0&gt;</code></li> <li><code>decorators</code>: <code>property</code> = <code>&lt;property object at 0x105ac7100&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.core.registry/#methods","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.core.registry/#__init__","title":"<code>__init__</code>","text":"<p>Initialize the decorator registry.</p> <p>Signature: <code>__init__(self) -&gt; None</code></p> <p>Parameters:</p>"},{"location":"api/modules/prompt_decorators.core.registry/#clear","title":"<code>clear</code>","text":"<p>Clear the registry.</p> <p>Signature: <code>clear(self) -&gt; None</code></p> <p>Parameters:</p>"},{"location":"api/modules/prompt_decorators.core.registry/#get_by_category","title":"<code>get_by_category</code>","text":"<p>Get all decorators in a category.</p> <p>Args:     category: The category to get decorators for</p> <p>Returns:     List of decorator classes in the category</p> <p>Signature: <code>get_by_category(self, category: str) -&gt; List[Type[prompt_decorators.core.base.DecoratorBase]]</code></p> <p>Parameters:</p> <ul> <li><code>category</code>: <code>str</code></li> </ul> <p>Returns: <code>List</code></p>"},{"location":"api/modules/prompt_decorators.core.registry/#get_decorator","title":"<code>get_decorator</code>","text":"<p>Get a decorator class by name.</p> <p>Args:     name: The name of the decorator to get</p> <p>Returns:     The decorator class, or None if not found</p> <p>Signature: <code>get_decorator(self, name: str) -&gt; Optional[Type[prompt_decorators.core.base.DecoratorBase]]</code></p> <p>Parameters:</p> <ul> <li><code>name</code>: <code>str</code></li> </ul> <p>Returns: <code>Optional</code></p>"},{"location":"api/modules/prompt_decorators.core.registry/#register","title":"<code>register</code>","text":"<p>Register a decorator class.</p> <p>Args:     decorator_class: The decorator class to register     category: The category to register the decorator under</p> <p>Returns:     None</p> <p>Signature: <code>register(self, decorator_class: Type[prompt_decorators.core.base.DecoratorBase], category: str = 'unknown') -&gt; None</code></p> <p>Parameters:</p> <ul> <li><code>decorator_class</code>: <code>Type</code></li> <li><code>category</code>: <code>str</code> (default: <code>unknown</code>)</li> </ul>"},{"location":"api/modules/prompt_decorators.core.registry/#functions","title":"Functions","text":""},{"location":"api/modules/prompt_decorators.core.registry/#clear_registry","title":"<code>clear_registry</code>","text":"<p>Clear the global decorator registry.</p> <p>Signature: <code>clear_registry() -&gt; None</code></p>"},{"location":"api/modules/prompt_decorators.core.registry/#get_categories","title":"<code>get_categories</code>","text":"<p>Get all decorator categories from the global registry.</p> <p>Returns:     Dictionary mapping category names to sets of decorator names</p> <p>Signature: <code>get_categories() -&gt; Dict[str, Set[str]]</code></p> <p>Returns: <code>Dict</code></p>"},{"location":"api/modules/prompt_decorators.core.registry/#get_decorator_1","title":"<code>get_decorator</code>","text":"<p>Get a decorator class by name from the global registry.</p> <p>Args:     name: The name of the decorator to get</p> <p>Returns:     The decorator class, or None if not found</p> <p>Signature: <code>get_decorator(name: str) -&gt; Optional[Type[prompt_decorators.core.base.DecoratorBase]]</code></p> <p>Parameters:</p> <ul> <li><code>name</code>: <code>str</code></li> </ul> <p>Returns: <code>Optional</code></p>"},{"location":"api/modules/prompt_decorators.core.registry/#get_decorators_by_category","title":"<code>get_decorators_by_category</code>","text":"<p>Get all decorators in a category from the global registry.</p> <p>Args:     category: The category to get decorators for</p> <p>Returns:     List of decorator classes in the category</p> <p>Signature: <code>get_decorators_by_category(category: str) -&gt; List[Type[prompt_decorators.core.base.DecoratorBase]]</code></p> <p>Parameters:</p> <ul> <li><code>category</code>: <code>str</code></li> </ul> <p>Returns: <code>List</code></p>"},{"location":"api/modules/prompt_decorators.core.registry/#get_registry","title":"<code>get_registry</code>","text":"<p>Get the global decorator registry.</p> <p>Returns:     Dictionary mapping decorator names to decorator classes</p> <p>Signature: <code>get_registry() -&gt; Dict[str, Type[prompt_decorators.core.base.DecoratorBase]]</code></p> <p>Returns: <code>Dict</code></p>"},{"location":"api/modules/prompt_decorators.core.registry/#register_decorator","title":"<code>register_decorator</code>","text":"<p>Register a decorator class in the global registry.</p> <p>This function registers a decorator class in the global registry, making it available for use in the system.</p> <p>Args:     decorator_class: The decorator class to register     category: The category to register the decorator under</p> <p>Returns:     None</p> <p>Signature: <code>register_decorator(decorator_class: Type[prompt_decorators.core.base.DecoratorBase], category: str = 'unknown') -&gt; None</code></p> <p>Parameters:</p> <ul> <li><code>decorator_class</code>: <code>Type</code></li> <li><code>category</code>: <code>str</code> (default: <code>unknown</code>)</li> </ul>"},{"location":"api/modules/prompt_decorators.core.request/","title":"request","text":"<p>Request handling for prompt decorators.</p> <p>This module provides the DecoratedRequest class for managing decorated prompts.</p>"},{"location":"api/modules/prompt_decorators.core.request/#classes","title":"Classes","text":""},{"location":"api/modules/prompt_decorators.core.request/#decoratedrequest","title":"<code>DecoratedRequest</code>","text":"<p>Class representing a request decorated with prompt decorators.</p>"},{"location":"api/modules/prompt_decorators.core.request/#attributes","title":"Attributes","text":"<ul> <li><code>from_dict</code>: <code>classmethod</code> = <code>&lt;classmethod(&lt;function DecoratedRequest.from_dict at 0x105c199e0&gt;)&gt;</code></li> <li><code>from_json</code>: <code>classmethod</code> = <code>&lt;classmethod(&lt;function DecoratedRequest.from_json at 0x105c19a80&gt;)&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.core.request/#methods","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.core.request/#__init__","title":"<code>__init__</code>","text":"<p>Initialize a decorated request.</p> <p>Args:     prompt: The base prompt text     decorators: Optional list of decorators to apply     model: Optional model identifier     api_params: Optional additional API parameters</p> <p>Signature: <code>__init__(self, prompt: str, decorators: Optional[List[prompt_decorators.core.base.DecoratorBase]] = None, model: Optional[str] = None, api_params: Optional[Dict[str, Any]] = None)</code></p> <p>Parameters:</p> <ul> <li><code>prompt</code>: <code>str</code></li> <li><code>decorators</code>: <code>Optional</code> (default: <code>None</code>)</li> <li><code>model</code>: <code>Optional</code> (default: <code>None</code>)</li> <li><code>api_params</code>: <code>Optional</code> (default: <code>None</code>)</li> </ul>"},{"location":"api/modules/prompt_decorators.core.request/#add_decorator","title":"<code>add_decorator</code>","text":"<p>Add a decorator to the request.</p> <p>Args:     decorator: The decorator to add</p> <p>Returns:     Self for method chaining</p> <p>Raises:     ValueError: If a decorator with the same name already exists</p> <p>Signature: <code>add_decorator(self, decorator: prompt_decorators.core.base.DecoratorBase) -&gt; 'DecoratedRequest'</code></p> <p>Parameters:</p> <ul> <li><code>decorator</code>: <code>DecoratorBase</code></li> </ul> <p>Returns: <code>DecoratedRequest</code></p>"},{"location":"api/modules/prompt_decorators.core.request/#apply_decorators","title":"<code>apply_decorators</code>","text":"<p>Apply all decorators to the prompt.</p> <p>Args:     self: The request instance</p> <p>Returns:     The decorated prompt text</p> <p>Note:     Decorators are applied in the order they were added.     This allows for composing decorators in a specific sequence.</p> <p>Signature: <code>apply_decorators(self) -&gt; str</code></p> <p>Parameters:</p> <p>Returns: <code>str</code></p>"},{"location":"api/modules/prompt_decorators.core.request/#get_decorator","title":"<code>get_decorator</code>","text":"<p>Get a decorator by name.</p> <p>Args:     decorator_name: Name of the decorator to retrieve</p> <p>Returns:     The decorator if found, None otherwise</p> <p>Signature: <code>get_decorator(self, decorator_name: str) -&gt; Optional[prompt_decorators.core.base.DecoratorBase]</code></p> <p>Parameters:</p> <ul> <li><code>decorator_name</code>: <code>str</code></li> </ul> <p>Returns: <code>Optional</code></p>"},{"location":"api/modules/prompt_decorators.core.request/#remove_decorator","title":"<code>remove_decorator</code>","text":"<p>Remove a decorator by name.</p> <p>Args:     decorator_name: Name of the decorator to remove</p> <p>Returns:     True if the decorator was removed, False if not found</p> <p>Signature: <code>remove_decorator(self, decorator_name: str) -&gt; bool</code></p> <p>Parameters:</p> <ul> <li><code>decorator_name</code>: <code>str</code></li> </ul> <p>Returns: <code>bool</code></p>"},{"location":"api/modules/prompt_decorators.core.request/#to_dict","title":"<code>to_dict</code>","text":"<p>Convert the request to a dictionary representation.</p> <p>Args:     self: The request instance</p> <p>Returns:     Dictionary representation of the request</p> <p>Signature: <code>to_dict(self) -&gt; Dict[str, Any]</code></p> <p>Parameters:</p> <p>Returns: <code>Dict</code></p>"},{"location":"api/modules/prompt_decorators.core.request/#to_json","title":"<code>to_json</code>","text":"<p>Convert the request to a JSON string.</p> <p>Args:     indent: Optional indentation for pretty-printing</p> <p>Returns:     JSON string representation of the request</p> <p>Signature: <code>to_json(self, indent: Optional[int] = None) -&gt; str</code></p> <p>Parameters:</p> <ul> <li><code>indent</code>: <code>Optional</code> (default: <code>None</code>)</li> </ul> <p>Returns: <code>str</code></p>"},{"location":"api/modules/prompt_decorators.core.validation/","title":"validation","text":"<p>Parameter Validation Module.</p> <p>This module provides utilities for validating decorator parameters.</p>"},{"location":"api/modules/prompt_decorators.core.validation/#module-variables","title":"Module Variables","text":""},{"location":"api/modules/prompt_decorators.core.validation/#t","title":"<code>T</code>","text":"<p>Type: <code>TypeVar</code></p> <p>Value: <code>~T</code></p>"},{"location":"api/modules/prompt_decorators.core.validation/#classes","title":"Classes","text":""},{"location":"api/modules/prompt_decorators.core.validation/#dictvalidator","title":"<code>DictValidator</code>","text":"<p>Validator for dictionary parameters.</p> <p>Bases: <code>prompt_decorators.core.validation.Validator</code></p>"},{"location":"api/modules/prompt_decorators.core.validation/#methods","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.core.validation/#__init__","title":"<code>__init__</code>","text":"<p>Initialize a dictionary validator.</p> <p>Args:     key_validator: Optional validator for dictionary keys     value_validator: Optional validator for dictionary values     required_keys: Optional list of required keys     allow_extra_keys: Whether to allow keys not in required_keys     allow_none: Whether None is allowed</p> <p>Signature: <code>__init__(self, key_validator: Optional[prompt_decorators.core.validation.Validator] = None, value_validator: Optional[prompt_decorators.core.validation.Validator] = None, required_keys: Optional[List[str]] = None, allow_extra_keys: bool = True, allow_none: bool = False)</code></p> <p>Parameters:</p> <ul> <li><code>key_validator</code>: <code>Optional</code> (default: <code>None</code>)</li> <li><code>value_validator</code>: <code>Optional</code> (default: <code>None</code>)</li> <li><code>required_keys</code>: <code>Optional</code> (default: <code>None</code>)</li> <li><code>allow_extra_keys</code>: <code>bool</code> (default: <code>True</code>)</li> <li><code>allow_none</code>: <code>bool</code> (default: <code>False</code>)</li> </ul>"},{"location":"api/modules/prompt_decorators.core.validation/#validate","title":"<code>validate</code>","text":"<p>Validate a dictionary parameter value.</p> <p>Args:     decorator_name: Name of the decorator     param_name: Name of the parameter     value: Parameter value to validate</p> <p>Returns:     Validated parameter value</p> <p>Raises:     ValidationError: If validation fails</p> <p>Signature: <code>validate(self, decorator_name: str, param_name: str, value: Any) -&gt; Optional[Dict[Any, Any]]</code></p> <p>Parameters:</p> <ul> <li><code>decorator_name</code>: <code>str</code></li> <li><code>param_name</code>: <code>str</code></li> <li><code>value</code>: <code>Any</code></li> </ul> <p>Returns: <code>Optional</code></p>"},{"location":"api/modules/prompt_decorators.core.validation/#enumvalidator","title":"<code>EnumValidator</code>","text":"<p>Validator for enum values.</p> <p>Bases: <code>prompt_decorators.core.validation.Validator</code></p>"},{"location":"api/modules/prompt_decorators.core.validation/#methods_1","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.core.validation/#__init___1","title":"<code>__init__</code>","text":"<p>Initialize an enum validator.</p> <p>Args:     enum_class: Enum class to validate against     allow_none: Whether None is allowed</p> <p>Signature: <code>__init__(self, enum_class: Type[enum.Enum], allow_none: bool = False)</code></p> <p>Parameters:</p> <ul> <li><code>enum_class</code>: <code>Type</code></li> <li><code>allow_none</code>: <code>bool</code> (default: <code>False</code>)</li> </ul>"},{"location":"api/modules/prompt_decorators.core.validation/#validate_1","title":"<code>validate</code>","text":"<p>Validate an enum parameter value.</p> <p>Args:     decorator_name: Name of the decorator     param_name: Name of the parameter     value: Parameter value to validate</p> <p>Returns:     Validated parameter value (as Enum member)</p> <p>Raises:     ValidationError: If validation fails</p> <p>Signature: <code>validate(self, decorator_name: str, param_name: str, value: Any) -&gt; Optional[enum.Enum]</code></p> <p>Parameters:</p> <ul> <li><code>decorator_name</code>: <code>str</code></li> <li><code>param_name</code>: <code>str</code></li> <li><code>value</code>: <code>Any</code></li> </ul> <p>Returns: <code>Optional</code></p>"},{"location":"api/modules/prompt_decorators.core.validation/#listvalidator","title":"<code>ListValidator</code>","text":"<p>Validator for list parameters.</p> <p>Bases: <code>prompt_decorators.core.validation.Validator</code></p>"},{"location":"api/modules/prompt_decorators.core.validation/#methods_2","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.core.validation/#__init___2","title":"<code>__init__</code>","text":"<p>Initialize a list validator.</p> <p>Args:     item_validator: Optional validator for list items     min_length: Optional minimum list length     max_length: Optional maximum list length     allow_none: Whether None is allowed</p> <p>Signature: <code>__init__(self, item_validator: Optional[prompt_decorators.core.validation.Validator] = None, min_length: Optional[int] = None, max_length: Optional[int] = None, allow_none: bool = False)</code></p> <p>Parameters:</p> <ul> <li><code>item_validator</code>: <code>Optional</code> (default: <code>None</code>)</li> <li><code>min_length</code>: <code>Optional</code> (default: <code>None</code>)</li> <li><code>max_length</code>: <code>Optional</code> (default: <code>None</code>)</li> <li><code>allow_none</code>: <code>bool</code> (default: <code>False</code>)</li> </ul>"},{"location":"api/modules/prompt_decorators.core.validation/#validate_2","title":"<code>validate</code>","text":"<p>Validate a list parameter value.</p> <p>Args:     decorator_name: Name of the decorator     param_name: Name of the parameter     value: Parameter value to validate</p> <p>Returns:     Validated parameter value</p> <p>Raises:     ValidationError: If validation fails</p> <p>Signature: <code>validate(self, decorator_name: str, param_name: str, value: Any) -&gt; Optional[List[Any]]</code></p> <p>Parameters:</p> <ul> <li><code>decorator_name</code>: <code>str</code></li> <li><code>param_name</code>: <code>str</code></li> <li><code>value</code>: <code>Any</code></li> </ul> <p>Returns: <code>Optional</code></p>"},{"location":"api/modules/prompt_decorators.core.validation/#patternvalidator","title":"<code>PatternValidator</code>","text":"<p>Validator for string patterns.</p> <p>Bases: <code>prompt_decorators.core.validation.Validator</code></p>"},{"location":"api/modules/prompt_decorators.core.validation/#methods_3","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.core.validation/#__init___3","title":"<code>__init__</code>","text":"<p>Initialize a pattern validator.</p> <p>Args:     pattern: Regex pattern to match     allow_none: Whether None is allowed</p> <p>Signature: <code>__init__(self, pattern: Union[str, Pattern], allow_none: bool = False)</code></p> <p>Parameters:</p> <ul> <li><code>pattern</code>: <code>Union</code></li> <li><code>allow_none</code>: <code>bool</code> (default: <code>False</code>)</li> </ul>"},{"location":"api/modules/prompt_decorators.core.validation/#validate_3","title":"<code>validate</code>","text":"<p>Validate a string parameter value against the pattern.</p> <p>Args:     decorator_name: Name of the decorator     param_name: Name of the parameter     value: Parameter value to validate</p> <p>Returns:     Validated parameter value</p> <p>Raises:     ValidationError: If validation fails</p> <p>Signature: <code>validate(self, decorator_name: str, param_name: str, value: Any) -&gt; Optional[str]</code></p> <p>Parameters:</p> <ul> <li><code>decorator_name</code>: <code>str</code></li> <li><code>param_name</code>: <code>str</code></li> <li><code>value</code>: <code>Any</code></li> </ul> <p>Returns: <code>Optional</code></p>"},{"location":"api/modules/prompt_decorators.core.validation/#rangevalidator","title":"<code>RangeValidator</code>","text":"<p>Validator for numeric ranges.</p> <p>Bases: <code>prompt_decorators.core.validation.Validator</code></p>"},{"location":"api/modules/prompt_decorators.core.validation/#methods_4","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.core.validation/#__init___4","title":"<code>__init__</code>","text":"<p>Initialize a range validator.</p> <p>Args:     minimum: Optional minimum value (inclusive)     maximum: Optional maximum value (inclusive)     allow_none: Whether None is allowed</p> <p>Signature: <code>__init__(self, minimum: Union[int, float, NoneType] = None, maximum: Union[int, float, NoneType] = None, allow_none: bool = False)</code></p> <p>Parameters:</p> <ul> <li><code>minimum</code>: <code>Union</code> (default: <code>None</code>)</li> <li><code>maximum</code>: <code>Union</code> (default: <code>None</code>)</li> <li><code>allow_none</code>: <code>bool</code> (default: <code>False</code>)</li> </ul>"},{"location":"api/modules/prompt_decorators.core.validation/#validate_4","title":"<code>validate</code>","text":"<p>Validate a numeric parameter value against the range constraints.</p> <p>Args:     decorator_name: Name of the decorator     param_name: Name of the parameter     value: Parameter value to validate</p> <p>Returns:     Validated parameter value</p> <p>Raises:     ValidationError: If validation fails</p> <p>Signature: <code>validate(self, decorator_name: str, param_name: str, value: Any) -&gt; Union[int, float, NoneType]</code></p> <p>Parameters:</p> <ul> <li><code>decorator_name</code>: <code>str</code></li> <li><code>param_name</code>: <code>str</code></li> <li><code>value</code>: <code>Any</code></li> </ul> <p>Returns: <code>Union</code></p>"},{"location":"api/modules/prompt_decorators.core.validation/#typevalidator","title":"<code>TypeValidator</code>","text":"<p>Validator for parameter types.</p> <p>Bases: <code>prompt_decorators.core.validation.Validator</code></p>"},{"location":"api/modules/prompt_decorators.core.validation/#methods_5","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.core.validation/#__init___5","title":"<code>__init__</code>","text":"<p>Initialize a type validator.</p> <p>Args:     expected_type: Expected type for the parameter     allow_none: Whether None is allowed</p> <p>Signature: <code>__init__(self, expected_type: Type[~T], allow_none: bool = False)</code></p> <p>Parameters:</p> <ul> <li><code>expected_type</code>: <code>Type</code></li> <li><code>allow_none</code>: <code>bool</code> (default: <code>False</code>)</li> </ul>"},{"location":"api/modules/prompt_decorators.core.validation/#validate_5","title":"<code>validate</code>","text":"<p>Validate a parameter value against the expected type.</p> <p>Args:     decorator_name: Name of the decorator     param_name: Name of the parameter     value: Parameter value to validate</p> <p>Returns:     Validated parameter value</p> <p>Raises:     ValidationError: If validation fails</p> <p>Signature: <code>validate(self, decorator_name: str, param_name: str, value: Any) -&gt; Optional[~T]</code></p> <p>Parameters:</p> <ul> <li><code>decorator_name</code>: <code>str</code></li> <li><code>param_name</code>: <code>str</code></li> <li><code>value</code>: <code>Any</code></li> </ul> <p>Returns: <code>Optional</code></p>"},{"location":"api/modules/prompt_decorators.core.validation/#validationpipeline","title":"<code>ValidationPipeline</code>","text":"<p>Pipeline for validating multiple parameters.</p>"},{"location":"api/modules/prompt_decorators.core.validation/#methods_6","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.core.validation/#__init___6","title":"<code>__init__</code>","text":"<p>Initialize a validation pipeline.</p> <p>Args:     validators: Dictionary mapping parameter names to validators</p> <p>Signature: <code>__init__(self, validators: Dict[str, prompt_decorators.core.validation.Validator])</code></p> <p>Parameters:</p> <ul> <li><code>validators</code>: <code>Dict</code></li> </ul>"},{"location":"api/modules/prompt_decorators.core.validation/#validate_6","title":"<code>validate</code>","text":"<p>Validate multiple parameters.</p> <p>Args:     decorator_name: Name of the decorator     parameters: Dictionary of parameter values</p> <p>Returns:     Dictionary of validated parameter values</p> <p>Raises:     ValidationError: If any parameter fails validation</p> <p>Signature: <code>validate(self, decorator_name: str, parameters: Dict[str, Any]) -&gt; Dict[str, Any]</code></p> <p>Parameters:</p> <ul> <li><code>decorator_name</code>: <code>str</code></li> <li><code>parameters</code>: <code>Dict</code></li> </ul> <p>Returns: <code>Dict</code></p>"},{"location":"api/modules/prompt_decorators.core.validation/#validator","title":"<code>Validator</code>","text":"<p>Base class for parameter validators.</p>"},{"location":"api/modules/prompt_decorators.core.validation/#methods_7","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.core.validation/#validate_7","title":"<code>validate</code>","text":"<p>Validate a parameter value.</p> <p>Args:     decorator_name: Name of the decorator     param_name: Name of the parameter     value: Parameter value to validate</p> <p>Returns:     Validated parameter value (possibly converted)</p> <p>Raises:     ValidationError: If validation fails</p> <p>Signature: <code>validate(self, decorator_name: str, param_name: str, value: Any) -&gt; Any</code></p> <p>Parameters:</p> <ul> <li><code>decorator_name</code>: <code>str</code></li> <li><code>param_name</code>: <code>str</code></li> <li><code>value</code>: <code>Any</code></li> </ul> <p>Returns: <code>Any</code></p>"},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/","title":"dynamic_decorators_module","text":"<p>Dynamic Prompt Decorators Module.</p> <p>This module provides a unified interface for working with prompt decorators without the need for code generation. It dynamically loads decorator definitions from the registry at runtime, removing the need to generate Python classes for each decorator.</p> <p>Features: - Dynamic loading of decorators from registry - Prompt transformation with any decorator - Parameter validation against schema - Support for decorator composition</p>"},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#public-api","title":"Public API","text":"<p>This module exports the following components:</p> <ul> <li><code>DynamicDecorator</code>: Class - Dynamic decorator class for prompt transformations</li> <li><code>DecoratorDefinition</code>: Class - Class representing a decorator definition</li> <li><code>load_decorator_definitions</code>: Function - Load decorator definitions from the registry</li> <li><code>get_available_decorators</code>: Function - Get a list of all available decorators</li> <li><code>create_decorator_instance</code>: Function - Create a decorator instance by name</li> <li><code>create_decorator_class</code>: Function - Create a decorator class from a definition</li> <li><code>apply_dynamic_decorators</code>: Function - Apply decorators to a prompt using the +++ syntax</li> <li><code>apply_decorator</code>: Function - Apply a decorator to a prompt</li> <li><code>register_decorator</code>: Function - Register a decorator definition</li> <li><code>extract_decorator_name</code>: Function - Extract the decorator name from decorator text</li> <li><code>parse_decorator_text</code>: Function - Parse decorator text into name and parameters</li> <li><code>create_decorator</code>: Function - Create a decorator instance by name (alias for create_decorator_instance)</li> <li><code>list_available_decorators</code>: Function - List all available decorator names</li> <li><code>transform_prompt</code>: Function - Transform a prompt using a list of decorator strings</li> </ul>"},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#classes","title":"Classes","text":""},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#decoratordefinition","title":"<code>DecoratorDefinition</code>","text":"<p>Class representing a decorator definition.</p>"},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#methods","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#__init__","title":"<code>__init__</code>","text":"<p>Initialize a decorator definition.</p> <p>Args:     name: Name of the decorator     description: Description of the decorator     category: Category of the decorator     parameters: List of parameter definitions     transform_function: JavaScript function for transforming prompts     version: Version of the decorator</p> <p>Signature: <code>__init__(self, name: str, description: str, category: str, parameters: List[Dict[str, Any]], transform_function: str, version: str = '1.0.0')</code></p> <p>Parameters:</p> <ul> <li><code>name</code>: <code>str</code></li> <li><code>description</code>: <code>str</code></li> <li><code>category</code>: <code>str</code></li> <li><code>parameters</code>: <code>List</code></li> <li><code>transform_function</code>: <code>str</code></li> <li><code>version</code>: <code>str</code> (default: <code>1.0.0</code>)</li> </ul>"},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#to_dict","title":"<code>to_dict</code>","text":"<p>Convert the definition to a dictionary.</p> <p>Signature: <code>to_dict(self) -&gt; Dict[str, Any]</code></p> <p>Parameters:</p> <p>Returns: <code>Dict</code></p>"},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#dynamicdecorator","title":"<code>DynamicDecorator</code>","text":"<p>Imported from <code>prompt_decorators.core.dynamic_decorator</code></p> <p>Dynamic decorator class for prompt transformations.</p> <p>This class provides a dynamic approach to loading and applying prompt decorators from registry definitions. Instead of generating individual decorator classes for each decorator in the registry, this class loads decorator definitions at runtime directly from the JSON files in the registry.</p>"},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#attributes","title":"Attributes","text":"<ul> <li><code>from_definition</code>: <code>classmethod</code> = <code>&lt;classmethod(&lt;function DynamicDecorator.from_definition at 0x105a75080&gt;)&gt;</code></li> <li><code>get_available_decorators</code>: <code>classmethod</code> = <code>&lt;classmethod(&lt;function DynamicDecorator.get_available_decorators at 0x105a751c0&gt;)&gt;</code></li> <li><code>load_registry</code>: <code>classmethod</code> = <code>&lt;classmethod(&lt;function DynamicDecorator.load_registry at 0x105a74fe0&gt;)&gt;</code></li> <li><code>register_decorator</code>: <code>classmethod</code> = <code>&lt;classmethod(&lt;function DynamicDecorator.register_decorator at 0x105a75120&gt;)&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#methods_1","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#__init___1","title":"<code>__init__</code>","text":"<p>Initialize a dynamic decorator.</p> <p>Args:     name: Name of the decorator to load     **kwargs: Parameters for the decorator</p> <p>Raises:     ValueError: If the decorator is not found in the registry</p> <p>Returns:     None</p> <p>Signature: <code>__init__(self, name: str, **kwargs: Any) -&gt; None</code></p> <p>Parameters:</p> <ul> <li><code>name</code>: <code>str</code></li> <li><code>kwargs</code>: <code>Any</code></li> </ul>"},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#apply","title":"<code>apply</code>","text":"<p>Apply the decorator to a text.</p> <p>Args:     text: Text to transform</p> <p>Returns:     Transformed text</p> <p>Signature: <code>apply(self, text: str) -&gt; str</code></p> <p>Parameters:</p> <ul> <li><code>text</code>: <code>str</code></li> </ul> <p>Returns: <code>str</code></p>"},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#functions","title":"Functions","text":""},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#apply_decorator","title":"<code>apply_decorator</code>","text":"<p>Apply a decorator to a prompt.</p> <p>Args:     decorator_name: Name of the decorator     prompt: The prompt text     **kwargs: Parameters for the decorator</p> <p>Returns:     The transformed prompt</p> <p>Signature: <code>apply_decorator(decorator_name: str, prompt: str, **kwargs: Any) -&gt; str</code></p> <p>Parameters:</p> <ul> <li><code>decorator_name</code>: <code>str</code></li> <li><code>prompt</code>: <code>str</code></li> <li><code>kwargs</code>: <code>Any</code></li> </ul> <p>Returns: <code>str</code></p>"},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#apply_dynamic_decorators","title":"<code>apply_dynamic_decorators</code>","text":"<p>Apply decorators to a prompt using the +++ syntax.</p> <p>Args:     prompt: The prompt text with decorator syntax</p> <p>Returns:     The transformed prompt</p> <p>Signature: <code>apply_dynamic_decorators(prompt: str) -&gt; str</code></p> <p>Parameters:</p> <ul> <li><code>prompt</code>: <code>str</code></li> </ul> <p>Returns: <code>str</code></p>"},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#create_decorator","title":"<code>create_decorator</code>","text":"<p>Create a decorator instance by name (alias for create_decorator_instance).</p> <p>This function is maintained for backward compatibility with demo code.</p> <p>Args:     name: Name of the decorator     **kwargs: Parameters for the decorator</p> <p>Returns:     A decorator instance</p> <p>Raises:     ValueError: If the decorator is not found</p> <p>Signature: <code>create_decorator(name: str, **kwargs: Any) -&gt; prompt_decorators.core.dynamic_decorator.DynamicDecorator</code></p> <p>Parameters:</p> <ul> <li><code>name</code>: <code>str</code></li> <li><code>kwargs</code>: <code>Any</code></li> </ul> <p>Returns: <code>DynamicDecorator</code></p>"},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#create_decorator_class","title":"<code>create_decorator_class</code>","text":"<p>Create a decorator class from a definition.</p> <p>Args:     definition: Decorator definition</p> <p>Returns:     A decorator class</p> <p>Signature: <code>create_decorator_class(definition: prompt_decorators.dynamic_decorators_module.DecoratorDefinition) -&gt; type</code></p> <p>Parameters:</p> <ul> <li><code>definition</code>: <code>DecoratorDefinition</code></li> </ul> <p>Returns: <code>type</code></p>"},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#create_decorator_instance","title":"<code>create_decorator_instance</code>","text":"<p>Create a decorator instance by name.</p> <p>Args:     name: Name of the decorator     **kwargs: Parameters for the decorator</p> <p>Returns:     A decorator instance</p> <p>Raises:     ValueError: If the decorator is not found</p> <p>Signature: <code>create_decorator_instance(name: str, **kwargs: Any) -&gt; prompt_decorators.core.dynamic_decorator.DynamicDecorator</code></p> <p>Parameters:</p> <ul> <li><code>name</code>: <code>str</code></li> <li><code>kwargs</code>: <code>Any</code></li> </ul> <p>Returns: <code>DynamicDecorator</code></p>"},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#extract_decorator_name","title":"<code>extract_decorator_name</code>","text":"<p>Extract the decorator name from decorator text.</p> <p>Args:     decorator_text: Text containing a decorator definition</p> <p>Returns:     The decorator name</p> <p>Signature: <code>extract_decorator_name(decorator_text: str) -&gt; str</code></p> <p>Parameters:</p> <ul> <li><code>decorator_text</code>: <code>str</code></li> </ul> <p>Returns: <code>str</code></p>"},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#get_available_decorators","title":"<code>get_available_decorators</code>","text":"<p>Get a list of all available decorators.</p> <p>Returns:     List of decorator definitions</p> <p>Signature: <code>get_available_decorators() -&gt; List[prompt_decorators.dynamic_decorators_module.DecoratorDefinition]</code></p> <p>Returns: <code>List</code></p>"},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#list_available_decorators","title":"<code>list_available_decorators</code>","text":"<p>List all available decorator names.</p> <p>This function is maintained for backward compatibility with demo code.</p> <p>Returns:     A list of decorator names</p> <p>Signature: <code>list_available_decorators() -&gt; List[str]</code></p> <p>Returns: <code>List</code></p>"},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#load_decorator_definitions","title":"<code>load_decorator_definitions</code>","text":"<p>Load decorator definitions from the registry.</p> <p>Signature: <code>load_decorator_definitions() -&gt; None</code></p>"},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#parse_decorator_text","title":"<code>parse_decorator_text</code>","text":"<p>Parse decorator text into name and parameters.</p> <p>Args:     decorator_text: Text containing a decorator definition</p> <p>Returns:     Tuple of (name, parameters)</p> <p>Signature: <code>parse_decorator_text(decorator_text: str) -&gt; tuple</code></p> <p>Parameters:</p> <ul> <li><code>decorator_text</code>: <code>str</code></li> </ul> <p>Returns: <code>tuple</code></p>"},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#register_decorator","title":"<code>register_decorator</code>","text":"<p>Register a decorator definition.</p> <p>Args:     definition: Decorator definition</p> <p>Returns:     None</p> <p>Signature: <code>register_decorator(definition: prompt_decorators.dynamic_decorators_module.DecoratorDefinition) -&gt; None</code></p> <p>Parameters:</p> <ul> <li><code>definition</code>: <code>DecoratorDefinition</code></li> </ul>"},{"location":"api/modules/prompt_decorators.dynamic_decorators_module/#transform_prompt","title":"<code>transform_prompt</code>","text":"<p>Transform a prompt using a list of decorator strings.</p> <p>This function is a wrapper around the core transform_prompt function to ensure backward compatibility with the demo.</p> <p>Args:     prompt: The prompt to transform     decorators: List of decorator strings</p> <p>Returns:     The transformed prompt</p> <p>Signature: <code>transform_prompt(prompt: str, decorators: List[str]) -&gt; str</code></p> <p>Parameters:</p> <ul> <li><code>prompt</code>: <code>str</code></li> <li><code>decorators</code>: <code>List</code></li> </ul> <p>Returns: <code>str</code></p>"},{"location":"api/modules/prompt_decorators.integrations.mcp.__main__/","title":"main","text":"<p>Command-line entry point for running the Prompt Decorators MCP server.</p> <p>Usage:     python -m prompt_decorators.integrations.mcp [<code>--host HOST</code>] [<code>--port PORT</code>] [<code>--verbose</code>]</p>"},{"location":"api/modules/prompt_decorators.integrations.mcp.__main__/#functions","title":"Functions","text":""},{"location":"api/modules/prompt_decorators.integrations.mcp.__main__/#main_1","title":"<code>main</code>","text":"<p>Run the Prompt Decorators MCP server.</p> <p>Signature: <code>main() -&gt; None</code></p>"},{"location":"api/modules/prompt_decorators.integrations.mcp.claude_desktop/","title":"claude_desktop","text":"<p>Entry point for running the Prompt Decorators MCP server for Claude Desktop.</p> <p>Usage:     python -m prompt_decorators.integrations.mcp.claude_desktop [<code>--host HOST</code>] [<code>--port PORT</code>] [<code>--verbose</code>]</p>"},{"location":"api/modules/prompt_decorators.integrations.mcp.claude_desktop/#functions","title":"Functions","text":""},{"location":"api/modules/prompt_decorators.integrations.mcp.claude_desktop/#main","title":"<code>main</code>","text":"<p>Run the Prompt Decorators MCP server for Claude Desktop.</p> <p>Signature: <code>main() -&gt; None</code></p>"},{"location":"api/modules/prompt_decorators.integrations.mcp.install_claude_desktop/","title":"install_claude_desktop","text":"<p>Installation helper for Claude Desktop integration.</p> <p>This script generates a configuration file for Claude Desktop that sets up the Prompt Decorators MCP integration.</p>"},{"location":"api/modules/prompt_decorators.integrations.mcp.install_claude_desktop/#functions","title":"Functions","text":""},{"location":"api/modules/prompt_decorators.integrations.mcp.install_claude_desktop/#check_mcp_sdk","title":"<code>check_mcp_sdk</code>","text":"<p>Check if the MCP SDK is installed.</p> <p>Signature: <code>check_mcp_sdk() -&gt; bool</code></p> <p>Returns: <code>bool</code></p>"},{"location":"api/modules/prompt_decorators.integrations.mcp.install_claude_desktop/#create_config_file","title":"<code>create_config_file</code>","text":"<p>Create a Claude Desktop configuration file.</p> <p>Signature: <code>create_config_file(output_path: Optional[str] = None, server_name: Optional[str] = None) -&gt; None</code></p> <p>Parameters:</p> <ul> <li><code>output_path</code>: <code>Optional</code> (default: <code>None</code>)</li> <li><code>server_name</code>: <code>Optional</code> (default: <code>None</code>)</li> </ul>"},{"location":"api/modules/prompt_decorators.integrations.mcp.install_claude_desktop/#find_package_path","title":"<code>find_package_path</code>","text":"<p>Find the path to the prompt-decorators package.</p> <p>Signature: <code>find_package_path() -&gt; str</code></p> <p>Returns: <code>str</code></p>"},{"location":"api/modules/prompt_decorators.integrations.mcp.install_claude_desktop/#find_python_executable","title":"<code>find_python_executable</code>","text":"<p>Find the path to the current Python executable.</p> <p>Signature: <code>find_python_executable() -&gt; str</code></p> <p>Returns: <code>str</code></p>"},{"location":"api/modules/prompt_decorators.integrations.mcp.install_claude_desktop/#main","title":"<code>main</code>","text":"<p>Main function to parse arguments and create the configuration file.</p> <p>Signature: <code>main() -&gt; None</code></p>"},{"location":"api/modules/prompt_decorators.integrations.mcp/","title":"mcp","text":"<p>Model Context Protocol (MCP) integration for Prompt Decorators.</p> <p>This module provides integration between Prompt Decorators and the Model Context Protocol (MCP), allowing users to apply decorators through MCP tools.</p>"},{"location":"api/modules/prompt_decorators.integrations.mcp/#public-api","title":"Public API","text":"<p>This module exports the following components:</p> <ul> <li><code>mcp</code>: FastMCP - No description available</li> <li><code>run_server</code>: Function - Run the MCP server</li> <li><code>list_decorators</code>: Function - Lists all available prompt decorators</li> <li><code>get_decorator_details</code>: Function - Get detailed information about a specific decorator</li> <li><code>apply_decorators</code>: Function - Apply decorators to a prompt using the +++ syntax</li> <li><code>create_decorated_prompt</code>: Function - Create a decorated prompt using a predefined template</li> <li><code>get_available_decorators</code>: Function - Get a list of all available decorators</li> <li><code>apply_dynamic_decorators</code>: Function - Apply decorators to a prompt using the +++ syntax</li> </ul>"},{"location":"api/modules/prompt_decorators.integrations.mcp/#module-variables","title":"Module Variables","text":""},{"location":"api/modules/prompt_decorators.integrations.mcp/#logger","title":"<code>logger</code>","text":"<p>Type: <code>Logger</code></p> <p>Value: <code>&lt;Logger prompt-decorators-mcp (INFO)&gt;</code></p>"},{"location":"api/modules/prompt_decorators.integrations.mcp/#mcp_1","title":"<code>mcp</code>","text":"<p>Type: <code>FastMCP</code></p> <p>Value: <code>&lt;mcp.server.fastmcp.server.FastMCP object at 0x10716a710&gt;</code></p>"},{"location":"api/modules/prompt_decorators.integrations.mcp/#functions","title":"Functions","text":""},{"location":"api/modules/prompt_decorators.integrations.mcp/#apply_decorators","title":"<code>apply_decorators</code>","text":"<p>Imported from <code>prompt_decorators.integrations.mcp.server</code></p> <p>Apply decorators to a prompt using the +++ syntax.</p> <p>Args:     prompt: The prompt text to decorate.     decorators: List of decorators to apply, each with name and parameters.</p> <p>Returns:     The decorated prompt with decorators applied, following MCP tool response format.</p> <p>Signature: <code>apply_decorators(prompt: str, decorators: List[Dict[str, Any]]) -&gt; Dict[str, Any]</code></p> <p>Parameters:</p> <ul> <li><code>prompt</code>: <code>str</code></li> <li><code>decorators</code>: <code>List</code></li> </ul> <p>Returns: <code>Dict</code></p>"},{"location":"api/modules/prompt_decorators.integrations.mcp/#apply_dynamic_decorators","title":"<code>apply_dynamic_decorators</code>","text":"<p>Imported from <code>prompt_decorators.dynamic_decorators_module</code></p> <p>Apply decorators to a prompt using the +++ syntax.</p> <p>Args:     prompt: The prompt text with decorator syntax</p> <p>Returns:     The transformed prompt</p> <p>Signature: <code>apply_dynamic_decorators(prompt: str) -&gt; str</code></p> <p>Parameters:</p> <ul> <li><code>prompt</code>: <code>str</code></li> </ul> <p>Returns: <code>str</code></p>"},{"location":"api/modules/prompt_decorators.integrations.mcp/#create_decorated_prompt","title":"<code>create_decorated_prompt</code>","text":"<p>Imported from <code>prompt_decorators.integrations.mcp.server</code></p> <p>Create a decorated prompt using a predefined template.</p> <p>Args:     template_name: The name of the template to use.     content: The content to include in the prompt.     parameters: Optional parameters for customizing the template.</p> <p>Returns:     The decorated prompt created from the template, following MCP tool response format.</p> <p>Signature: <code>create_decorated_prompt(template_name: str, content: str, parameters: Optional[Dict[str, Any]] = None) -&gt; Dict[str, Any]</code></p> <p>Parameters:</p> <ul> <li><code>template_name</code>: <code>str</code></li> <li><code>content</code>: <code>str</code></li> <li><code>parameters</code>: <code>Optional</code> (default: <code>None</code>)</li> </ul> <p>Returns: <code>Dict</code></p>"},{"location":"api/modules/prompt_decorators.integrations.mcp/#get_available_decorators","title":"<code>get_available_decorators</code>","text":"<p>Imported from <code>prompt_decorators.dynamic_decorators_module</code></p> <p>Get a list of all available decorators.</p> <p>Returns:     List of decorator definitions</p> <p>Signature: <code>get_available_decorators() -&gt; List[prompt_decorators.dynamic_decorators_module.DecoratorDefinition]</code></p> <p>Returns: <code>List</code></p>"},{"location":"api/modules/prompt_decorators.integrations.mcp/#get_decorator_details","title":"<code>get_decorator_details</code>","text":"<p>Imported from <code>prompt_decorators.integrations.mcp.server</code></p> <p>Get detailed information about a specific decorator.</p> <p>Args:     name: The name of the decorator to get details for.</p> <p>Returns:     A dictionary containing detailed information about the decorator.</p> <p>Signature: <code>get_decorator_details(name: str) -&gt; Dict[str, Any]</code></p> <p>Parameters:</p> <ul> <li><code>name</code>: <code>str</code></li> </ul> <p>Returns: <code>Dict</code></p>"},{"location":"api/modules/prompt_decorators.integrations.mcp/#list_decorators","title":"<code>list_decorators</code>","text":"<p>Imported from <code>prompt_decorators.integrations.mcp.server</code></p> <p>Lists all available prompt decorators.</p> <p>Returns:     A dictionary containing information about all available decorators.</p> <p>Signature: <code>list_decorators() -&gt; Dict[str, Any]</code></p> <p>Returns: <code>Dict</code></p>"},{"location":"api/modules/prompt_decorators.integrations.mcp/#run_server","title":"<code>run_server</code>","text":"<p>Imported from <code>prompt_decorators.integrations.mcp.server</code></p> <p>Run the MCP server.</p> <p>Args:     host: The host to listen on.     port: The port to listen on.</p> <p>Returns:     None</p> <p>Signature: <code>run_server(host: str = '0.0.0.0', port: int = 5000) -&gt; None</code></p> <p>Parameters:</p> <ul> <li><code>host</code>: <code>str</code> (default: <code>0.0.0.0</code>)</li> <li><code>port</code>: <code>int</code> (default: <code>5000</code>)</li> </ul>"},{"location":"api/modules/prompt_decorators.integrations.mcp.server/","title":"server","text":"<p>MCP Server for Prompt Decorators.</p> <p>This module provides integration between Prompt Decorators and the Model Context Protocol (MCP), exposing prompt decorators as MCP tools that can be used by any MCP client.</p> <p>Implementation follows the official MCP SDK patterns and best practices.</p>"},{"location":"api/modules/prompt_decorators.integrations.mcp.server/#module-variables","title":"Module Variables","text":""},{"location":"api/modules/prompt_decorators.integrations.mcp.server/#f","title":"<code>F</code>","text":"<p>Type: <code>TypeVar</code></p> <p>Value: <code>~F</code></p>"},{"location":"api/modules/prompt_decorators.integrations.mcp.server/#mcp_available","title":"<code>MCP_AVAILABLE</code>","text":"<p>Type: <code>bool</code></p> <p>Value: <code>True</code></p>"},{"location":"api/modules/prompt_decorators.integrations.mcp.server/#logger","title":"<code>logger</code>","text":"<p>Type: <code>Logger</code></p> <p>Value: <code>&lt;Logger prompt-decorators-mcp (INFO)&gt;</code></p>"},{"location":"api/modules/prompt_decorators.integrations.mcp.server/#mcp","title":"<code>mcp</code>","text":"<p>Type: <code>FastMCP</code></p> <p>Value: <code>&lt;mcp.server.fastmcp.server.FastMCP object at 0x10716a710&gt;</code></p>"},{"location":"api/modules/prompt_decorators.integrations.mcp.server/#functions","title":"Functions","text":""},{"location":"api/modules/prompt_decorators.integrations.mcp.server/#apply_decorators","title":"<code>apply_decorators</code>","text":"<p>Apply decorators to a prompt using the +++ syntax.</p> <p>Args:     prompt: The prompt text to decorate.     decorators: List of decorators to apply, each with name and parameters.</p> <p>Returns:     The decorated prompt with decorators applied, following MCP tool response format.</p> <p>Signature: <code>apply_decorators(prompt: str, decorators: List[Dict[str, Any]]) -&gt; Dict[str, Any]</code></p> <p>Parameters:</p> <ul> <li><code>prompt</code>: <code>str</code></li> <li><code>decorators</code>: <code>List</code></li> </ul> <p>Returns: <code>Dict</code></p>"},{"location":"api/modules/prompt_decorators.integrations.mcp.server/#create_decorated_prompt","title":"<code>create_decorated_prompt</code>","text":"<p>Create a decorated prompt using a predefined template.</p> <p>Args:     template_name: The name of the template to use.     content: The content to include in the prompt.     parameters: Optional parameters for customizing the template.</p> <p>Returns:     The decorated prompt created from the template, following MCP tool response format.</p> <p>Signature: <code>create_decorated_prompt(template_name: str, content: str, parameters: Optional[Dict[str, Any]] = None) -&gt; Dict[str, Any]</code></p> <p>Parameters:</p> <ul> <li><code>template_name</code>: <code>str</code></li> <li><code>content</code>: <code>str</code></li> <li><code>parameters</code>: <code>Optional</code> (default: <code>None</code>)</li> </ul> <p>Returns: <code>Dict</code></p>"},{"location":"api/modules/prompt_decorators.integrations.mcp.server/#get_decorator_details","title":"<code>get_decorator_details</code>","text":"<p>Get detailed information about a specific decorator.</p> <p>Args:     name: The name of the decorator to get details for.</p> <p>Returns:     A dictionary containing detailed information about the decorator.</p> <p>Signature: <code>get_decorator_details(name: str) -&gt; Dict[str, Any]</code></p> <p>Parameters:</p> <ul> <li><code>name</code>: <code>str</code></li> </ul> <p>Returns: <code>Dict</code></p>"},{"location":"api/modules/prompt_decorators.integrations.mcp.server/#list_decorators","title":"<code>list_decorators</code>","text":"<p>Lists all available prompt decorators.</p> <p>Returns:     A dictionary containing information about all available decorators.</p> <p>Signature: <code>list_decorators() -&gt; Dict[str, Any]</code></p> <p>Returns: <code>Dict</code></p>"},{"location":"api/modules/prompt_decorators.integrations.mcp.server/#run_server","title":"<code>run_server</code>","text":"<p>Run the MCP server.</p> <p>Args:     host: The host to listen on.     port: The port to listen on.</p> <p>Returns:     None</p> <p>Signature: <code>run_server(host: str = '0.0.0.0', port: int = 5000) -&gt; None</code></p> <p>Parameters:</p> <ul> <li><code>host</code>: <code>str</code> (default: <code>0.0.0.0</code>)</li> <li><code>port</code>: <code>int</code> (default: <code>5000</code>)</li> </ul>"},{"location":"api/modules/prompt_decorators.integrations.mcp.server/#transform_prompt","title":"<code>transform_prompt</code>","text":"<p>Transform a prompt using a list of decorator strings.</p> <p>This tool directly transforms a prompt using the raw decorator syntax strings (e.g., \"+++StepByStep(numbered=true)\"), which can be useful for clients that already have decorator strings rather than structured decorator objects.</p> <p>Args:     prompt: The prompt text to transform.     decorator_strings: List of decorator syntax strings to apply.</p> <p>Returns:     The transformed prompt, following MCP tool response format.</p> <p>Signature: <code>transform_prompt(prompt: str, decorator_strings: List[str]) -&gt; Dict[str, Any]</code></p> <p>Parameters:</p> <ul> <li><code>prompt</code>: <code>str</code></li> <li><code>decorator_strings</code>: <code>List</code></li> </ul> <p>Returns: <code>Dict</code></p>"},{"location":"api/modules/prompt_decorators.integrations/","title":"integrations","text":"<p>Integration modules for Prompt Decorators.</p> <p>This package contains modules for integrating Prompt Decorators with various frameworks, protocols, and platforms.</p>"},{"location":"api/modules/prompt_decorators.integrations/#public-api","title":"Public API","text":"<p>This module exports the following components:</p> <ul> <li><code>mcp</code>: module - Model Context Protocol (MCP) integration for Prompt Decorators</li> </ul>"},{"location":"api/modules/prompt_decorators.schemas.decorator_schema/","title":"decorator_schema","text":"<p>Schema definitions for prompt decorators.</p> <p>This module defines the schema classes used for validating decorator definitions and parameters.</p>"},{"location":"api/modules/prompt_decorators.schemas.decorator_schema/#classes","title":"Classes","text":""},{"location":"api/modules/prompt_decorators.schemas.decorator_schema/#decoratorschema","title":"<code>DecoratorSchema</code>","text":"<p>Schema for decorator definitions.</p>"},{"location":"api/modules/prompt_decorators.schemas.decorator_schema/#attributes","title":"Attributes","text":"<ul> <li><code>from_dict</code>: <code>classmethod</code> = <code>&lt;classmethod(&lt;function DecoratorSchema.from_dict at 0x105a74ae0&gt;)&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.schemas.decorator_schema/#methods","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.schemas.decorator_schema/#__init__","title":"<code>__init__</code>","text":"<p>Initialize a decorator schema.</p> <p>Args:     name: Name of the decorator     description: Description of the decorator     category: Category of the decorator     parameters: List of parameter schemas     transform_function: JavaScript function for transforming prompts     version: Version of the decorator</p> <p>Signature: <code>__init__(self, name: str, description: str, category: str, parameters: List[prompt_decorators.schemas.decorator_schema.ParameterSchema], transform_function: str, version: str = '1.0.0')</code></p> <p>Parameters:</p> <ul> <li><code>name</code>: <code>str</code></li> <li><code>description</code>: <code>str</code></li> <li><code>category</code>: <code>str</code></li> <li><code>parameters</code>: <code>List</code></li> <li><code>transform_function</code>: <code>str</code></li> <li><code>version</code>: <code>str</code> (default: <code>1.0.0</code>)</li> </ul>"},{"location":"api/modules/prompt_decorators.schemas.decorator_schema/#to_dict","title":"<code>to_dict</code>","text":"<p>Convert the schema to a dictionary.</p> <p>Signature: <code>to_dict(self) -&gt; Dict[str, Any]</code></p> <p>Parameters:</p> <p>Returns: <code>Dict</code></p>"},{"location":"api/modules/prompt_decorators.schemas.decorator_schema/#parameterschema","title":"<code>ParameterSchema</code>","text":"<p>Schema for decorator parameters.</p>"},{"location":"api/modules/prompt_decorators.schemas.decorator_schema/#attributes_1","title":"Attributes","text":"<ul> <li><code>from_dict</code>: <code>classmethod</code> = <code>&lt;classmethod(&lt;function ParameterSchema.from_dict at 0x105a74900&gt;)&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.schemas.decorator_schema/#methods_1","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.schemas.decorator_schema/#__init___1","title":"<code>__init__</code>","text":"<p>Initialize a parameter schema.</p> <p>Args:     name: Name of the parameter     description: Description of the parameter     type_: Type of the parameter (string, integer, float, boolean, enum)     required: Whether the parameter is required     default: Default value for the parameter     enum_values: Possible values for enum type     min_value: Minimum value for numeric types     max_value: Maximum value for numeric types     min_length: Minimum length for string or array types     max_length: Maximum length for string or array types     pattern: Regex pattern for string validation</p> <p>Signature: <code>__init__(self, name: str, description: str, type_: str = 'string', required: bool = False, default: Any = None, enum_values: Optional[List[str]] = None, min_value: Union[int, float, NoneType] = None, max_value: Union[int, float, NoneType] = None, min_length: Optional[int] = None, max_length: Optional[int] = None, pattern: Optional[str] = None)</code></p> <p>Parameters:</p> <ul> <li><code>name</code>: <code>str</code></li> <li><code>description</code>: <code>str</code></li> <li><code>type_</code>: <code>str</code> (default: <code>string</code>)</li> <li><code>required</code>: <code>bool</code> (default: <code>False</code>)</li> <li><code>default</code>: <code>Any</code> (default: <code>None</code>)</li> <li><code>enum_values</code>: <code>Optional</code> (default: <code>None</code>)</li> <li><code>min_value</code>: <code>Union</code> (default: <code>None</code>)</li> <li><code>max_value</code>: <code>Union</code> (default: <code>None</code>)</li> <li><code>min_length</code>: <code>Optional</code> (default: <code>None</code>)</li> <li><code>max_length</code>: <code>Optional</code> (default: <code>None</code>)</li> <li><code>pattern</code>: <code>Optional</code> (default: <code>None</code>)</li> </ul>"},{"location":"api/modules/prompt_decorators.schemas.decorator_schema/#to_dict_1","title":"<code>to_dict</code>","text":"<p>Convert the schema to a dictionary.</p> <p>Signature: <code>to_dict(self) -&gt; Dict[str, Any]</code></p> <p>Parameters:</p> <p>Returns: <code>Dict</code></p>"},{"location":"api/modules/prompt_decorators.schemas/","title":"schemas","text":"<p>Schema definitions for prompt decorators.</p> <p>This package contains schema definitions for validating decorator definitions and parameters.</p>"},{"location":"api/modules/prompt_decorators.schemas/#public-api","title":"Public API","text":"<p>This module exports the following components:</p> <ul> <li><code>DecoratorSchema</code>: Class - Schema for decorator definitions</li> <li><code>ParameterSchema</code>: Class - Schema for decorator parameters</li> </ul>"},{"location":"api/modules/prompt_decorators.schemas/#classes","title":"Classes","text":""},{"location":"api/modules/prompt_decorators.schemas/#decoratorschema","title":"<code>DecoratorSchema</code>","text":"<p>Imported from <code>prompt_decorators.schemas.decorator_schema</code></p> <p>Schema for decorator definitions.</p>"},{"location":"api/modules/prompt_decorators.schemas/#attributes","title":"Attributes","text":"<ul> <li><code>from_dict</code>: <code>classmethod</code> = <code>&lt;classmethod(&lt;function DecoratorSchema.from_dict at 0x105a74ae0&gt;)&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.schemas/#methods","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.schemas/#__init__","title":"<code>__init__</code>","text":"<p>Initialize a decorator schema.</p> <p>Args:     name: Name of the decorator     description: Description of the decorator     category: Category of the decorator     parameters: List of parameter schemas     transform_function: JavaScript function for transforming prompts     version: Version of the decorator</p> <p>Signature: <code>__init__(self, name: str, description: str, category: str, parameters: List[prompt_decorators.schemas.decorator_schema.ParameterSchema], transform_function: str, version: str = '1.0.0')</code></p> <p>Parameters:</p> <ul> <li><code>name</code>: <code>str</code></li> <li><code>description</code>: <code>str</code></li> <li><code>category</code>: <code>str</code></li> <li><code>parameters</code>: <code>List</code></li> <li><code>transform_function</code>: <code>str</code></li> <li><code>version</code>: <code>str</code> (default: <code>1.0.0</code>)</li> </ul>"},{"location":"api/modules/prompt_decorators.schemas/#to_dict","title":"<code>to_dict</code>","text":"<p>Convert the schema to a dictionary.</p> <p>Signature: <code>to_dict(self) -&gt; Dict[str, Any]</code></p> <p>Parameters:</p> <p>Returns: <code>Dict</code></p>"},{"location":"api/modules/prompt_decorators.schemas/#parameterschema","title":"<code>ParameterSchema</code>","text":"<p>Imported from <code>prompt_decorators.schemas.decorator_schema</code></p> <p>Schema for decorator parameters.</p>"},{"location":"api/modules/prompt_decorators.schemas/#attributes_1","title":"Attributes","text":"<ul> <li><code>from_dict</code>: <code>classmethod</code> = <code>&lt;classmethod(&lt;function ParameterSchema.from_dict at 0x105a74900&gt;)&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.schemas/#methods_1","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.schemas/#__init___1","title":"<code>__init__</code>","text":"<p>Initialize a parameter schema.</p> <p>Args:     name: Name of the parameter     description: Description of the parameter     type_: Type of the parameter (string, integer, float, boolean, enum)     required: Whether the parameter is required     default: Default value for the parameter     enum_values: Possible values for enum type     min_value: Minimum value for numeric types     max_value: Maximum value for numeric types     min_length: Minimum length for string or array types     max_length: Maximum length for string or array types     pattern: Regex pattern for string validation</p> <p>Signature: <code>__init__(self, name: str, description: str, type_: str = 'string', required: bool = False, default: Any = None, enum_values: Optional[List[str]] = None, min_value: Union[int, float, NoneType] = None, max_value: Union[int, float, NoneType] = None, min_length: Optional[int] = None, max_length: Optional[int] = None, pattern: Optional[str] = None)</code></p> <p>Parameters:</p> <ul> <li><code>name</code>: <code>str</code></li> <li><code>description</code>: <code>str</code></li> <li><code>type_</code>: <code>str</code> (default: <code>string</code>)</li> <li><code>required</code>: <code>bool</code> (default: <code>False</code>)</li> <li><code>default</code>: <code>Any</code> (default: <code>None</code>)</li> <li><code>enum_values</code>: <code>Optional</code> (default: <code>None</code>)</li> <li><code>min_value</code>: <code>Union</code> (default: <code>None</code>)</li> <li><code>max_value</code>: <code>Union</code> (default: <code>None</code>)</li> <li><code>min_length</code>: <code>Optional</code> (default: <code>None</code>)</li> <li><code>max_length</code>: <code>Optional</code> (default: <code>None</code>)</li> <li><code>pattern</code>: <code>Optional</code> (default: <code>None</code>)</li> </ul>"},{"location":"api/modules/prompt_decorators.schemas/#to_dict_1","title":"<code>to_dict</code>","text":"<p>Convert the schema to a dictionary.</p> <p>Signature: <code>to_dict(self) -&gt; Dict[str, Any]</code></p> <p>Parameters:</p> <p>Returns: <code>Dict</code></p>"},{"location":"api/modules/prompt_decorators.utils.cache/","title":"cache","text":"<p>Decorator Cache Module.</p> <p>This module provides a caching system for decorator definitions and instances.</p>"},{"location":"api/modules/prompt_decorators.utils.cache/#module-variables","title":"Module Variables","text":""},{"location":"api/modules/prompt_decorators.utils.cache/#cache_1","title":"<code>cache</code>","text":"<p>Type: <code>DecoratorCache</code></p> <p>Value: <code>&lt;prompt_decorators.utils.cache.DecoratorCache object at 0x1073d5710&gt;</code></p>"},{"location":"api/modules/prompt_decorators.utils.cache/#logger","title":"<code>logger</code>","text":"<p>Type: <code>Logger</code></p> <p>Value: <code>&lt;Logger prompt_decorators.utils.cache (INFO)&gt;</code></p>"},{"location":"api/modules/prompt_decorators.utils.cache/#classes","title":"Classes","text":""},{"location":"api/modules/prompt_decorators.utils.cache/#decoratorcache","title":"<code>DecoratorCache</code>","text":"<p>Cache for decorator definitions and instances.</p> <p>This class provides a caching system for decorator definitions and instances, with support for cache invalidation and metrics.</p>"},{"location":"api/modules/prompt_decorators.utils.cache/#methods","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.utils.cache/#clear","title":"<code>clear</code>","text":"<p>Clear the cache.</p> <p>Signature: <code>clear(self) -&gt; None</code></p> <p>Parameters:</p>"},{"location":"api/modules/prompt_decorators.utils.cache/#get_class","title":"<code>get_class</code>","text":"<p>Get a decorator class from the cache.</p> <p>Args:     key: The cache key for the class</p> <p>Returns:     The decorator class, or None if not found</p> <p>Signature: <code>get_class(self, key: str) -&gt; Optional[Type[prompt_decorators.core.base.DecoratorBase]]</code></p> <p>Parameters:</p> <ul> <li><code>key</code>: <code>str</code></li> </ul> <p>Returns: <code>Optional</code></p>"},{"location":"api/modules/prompt_decorators.utils.cache/#get_config","title":"<code>get_config</code>","text":"<p>Get the current cache configuration.</p> <p>Args:     self: The DecoratorCache instance</p> <p>Returns:     Dictionary with configuration options</p> <p>Signature: <code>get_config(self) -&gt; Dict[str, Any]</code></p> <p>Parameters:</p> <p>Returns: <code>Dict</code></p>"},{"location":"api/modules/prompt_decorators.utils.cache/#get_definition","title":"<code>get_definition</code>","text":"<p>Get a decorator definition from the cache.</p> <p>Args:     key: The cache key for the definition</p> <p>Returns:     The decorator definition, or None if not found or expired</p> <p>Signature: <code>get_definition(self, key: str) -&gt; Optional[Dict[str, Any]]</code></p> <p>Parameters:</p> <ul> <li><code>key</code>: <code>str</code></li> </ul> <p>Returns: <code>Optional</code></p>"},{"location":"api/modules/prompt_decorators.utils.cache/#get_instance","title":"<code>get_instance</code>","text":"<p>Get a decorator instance from the cache.</p> <p>Args:     key: The cache key for the instance</p> <p>Returns:     The decorator instance, or None if not found or expired</p> <p>Signature: <code>get_instance(self, key: str) -&gt; Optional[prompt_decorators.core.base.DecoratorBase]</code></p> <p>Parameters:</p> <ul> <li><code>key</code>: <code>str</code></li> </ul> <p>Returns: <code>Optional</code></p>"},{"location":"api/modules/prompt_decorators.utils.cache/#get_metrics","title":"<code>get_metrics</code>","text":"<p>Get cache metrics.</p> <p>Args:     self: The DecoratorCache instance</p> <p>Returns:     Dictionary with metrics</p> <p>Signature: <code>get_metrics(self) -&gt; Dict[str, Any]</code></p> <p>Parameters:</p> <p>Returns: <code>Dict</code></p>"},{"location":"api/modules/prompt_decorators.utils.cache/#invalidate_definition","title":"<code>invalidate_definition</code>","text":"<p>Invalidate a cached decorator definition.</p> <p>Args:     key: The cache key for the definition</p> <p>Returns:     True if the item was found and invalidated, False otherwise</p> <p>Signature: <code>invalidate_definition(self, key: str) -&gt; bool</code></p> <p>Parameters:</p> <ul> <li><code>key</code>: <code>str</code></li> </ul> <p>Returns: <code>bool</code></p>"},{"location":"api/modules/prompt_decorators.utils.cache/#invalidate_instance","title":"<code>invalidate_instance</code>","text":"<p>Invalidate a cached decorator instance.</p> <p>Args:     key: The cache key for the instance</p> <p>Returns:     True if the item was found and invalidated, False otherwise</p> <p>Signature: <code>invalidate_instance(self, key: str) -&gt; bool</code></p> <p>Parameters:</p> <ul> <li><code>key</code>: <code>str</code></li> </ul> <p>Returns: <code>bool</code></p>"},{"location":"api/modules/prompt_decorators.utils.cache/#set_class","title":"<code>set_class</code>","text":"<p>Store a decorator class in the cache.</p> <p>Args:     key: The cache key for the class     decorator_class: The decorator class to store</p> <p>Returns:     None</p> <p>Signature: <code>set_class(self, key: str, decorator_class: Type[prompt_decorators.core.base.DecoratorBase]) -&gt; None</code></p> <p>Parameters:</p> <ul> <li><code>key</code>: <code>str</code></li> <li><code>decorator_class</code>: <code>Type</code></li> </ul>"},{"location":"api/modules/prompt_decorators.utils.cache/#set_config","title":"<code>set_config</code>","text":"<p>Update the cache configuration.</p> <p>Args:     config: Dictionary with configuration options to update</p> <p>Returns:     None</p> <p>Signature: <code>set_config(self, config: Dict[str, Any]) -&gt; None</code></p> <p>Parameters:</p> <ul> <li><code>config</code>: <code>Dict</code></li> </ul>"},{"location":"api/modules/prompt_decorators.utils.cache/#set_definition","title":"<code>set_definition</code>","text":"<p>Store a decorator definition in the cache.</p> <p>Args:     key: The cache key for the definition     definition: The decorator definition to store</p> <p>Returns:     None</p> <p>Signature: <code>set_definition(self, key: str, definition: Dict[str, Any]) -&gt; None</code></p> <p>Parameters:</p> <ul> <li><code>key</code>: <code>str</code></li> <li><code>definition</code>: <code>Dict</code></li> </ul>"},{"location":"api/modules/prompt_decorators.utils.cache/#set_instance","title":"<code>set_instance</code>","text":"<p>Store a decorator instance in the cache.</p> <p>Args:     key: The cache key for the instance     instance: The decorator instance to store</p> <p>Returns:     None</p> <p>Signature: <code>set_instance(self, key: str, instance: prompt_decorators.core.base.DecoratorBase) -&gt; None</code></p> <p>Parameters:</p> <ul> <li><code>key</code>: <code>str</code></li> <li><code>instance</code>: <code>DecoratorBase</code></li> </ul>"},{"location":"api/modules/prompt_decorators.utils.cache/#functions","title":"Functions","text":""},{"location":"api/modules/prompt_decorators.utils.cache/#get_cache","title":"<code>get_cache</code>","text":"<p>Get the global decorator cache instance.</p> <p>Returns:     The global decorator cache instance</p> <p>Signature: <code>get_cache() -&gt; prompt_decorators.utils.cache.DecoratorCache</code></p> <p>Returns: <code>DecoratorCache</code></p>"},{"location":"api/modules/prompt_decorators.utils.compatibility/","title":"compatibility","text":"<p>Decorator Compatibility Module.</p> <p>This module provides utilities for checking compatibility between decorators.</p>"},{"location":"api/modules/prompt_decorators.utils.compatibility/#module-variables","title":"Module Variables","text":""},{"location":"api/modules/prompt_decorators.utils.compatibility/#compatibility_checker","title":"<code>compatibility_checker</code>","text":"<p>Type: <code>CompatibilityChecker</code></p> <p>Value: <code>&lt;prompt_decorators.utils.compatibility.CompatibilityChecker object at 0x1073d5f10&gt;</code></p>"},{"location":"api/modules/prompt_decorators.utils.compatibility/#logger","title":"<code>logger</code>","text":"<p>Type: <code>Logger</code></p> <p>Value: <code>&lt;Logger prompt_decorators.utils.compatibility (INFO)&gt;</code></p>"},{"location":"api/modules/prompt_decorators.utils.compatibility/#classes","title":"Classes","text":""},{"location":"api/modules/prompt_decorators.utils.compatibility/#compatibilitychecker","title":"<code>CompatibilityChecker</code>","text":"<p>Checker for decorator compatibility.</p>"},{"location":"api/modules/prompt_decorators.utils.compatibility/#methods","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.utils.compatibility/#__init__","title":"<code>__init__</code>","text":"<p>Initialize a compatibility checker.</p> <p>Signature: <code>__init__(self)</code></p> <p>Parameters:</p>"},{"location":"api/modules/prompt_decorators.utils.compatibility/#add_incompatible_pair","title":"<code>add_incompatible_pair</code>","text":"<p>Add a pair of incompatible decorators.</p> <p>Args:     decorator1: Name of the first decorator     decorator2: Name of the second decorator     message: Optional message explaining the incompatibility</p> <p>Returns:     None</p> <p>Signature: <code>add_incompatible_pair(self, decorator1: str, decorator2: str, message: Optional[str] = None) -&gt; None</code></p> <p>Parameters:</p> <ul> <li><code>decorator1</code>: <code>str</code></li> <li><code>decorator2</code>: <code>str</code></li> <li><code>message</code>: <code>Optional</code> (default: <code>None</code>)</li> </ul>"},{"location":"api/modules/prompt_decorators.utils.compatibility/#add_rule","title":"<code>add_rule</code>","text":"<p>Add a compatibility rule.</p> <p>Args:     decorator1: Name of the first decorator     decorator2: Name of the second decorator     rule: Dictionary with rule parameters</p> <p>Returns:     None</p> <p>Signature: <code>add_rule(self, decorator1: str, decorator2: str, rule: Dict[str, Any]) -&gt; None</code></p> <p>Parameters:</p> <ul> <li><code>decorator1</code>: <code>str</code></li> <li><code>decorator2</code>: <code>str</code></li> <li><code>rule</code>: <code>Dict</code></li> </ul>"},{"location":"api/modules/prompt_decorators.utils.compatibility/#check_compatibility","title":"<code>check_compatibility</code>","text":"<p>Check compatibility between two decorators.</p> <p>Args:     decorator1: First decorator     decorator2: Second decorator</p> <p>Returns:     List of compatibility issues (empty if fully compatible)</p> <p>Signature: <code>check_compatibility(self, decorator1: Union[str, prompt_decorators.core.base.DecoratorBase], decorator2: Union[str, prompt_decorators.core.base.DecoratorBase]) -&gt; List[prompt_decorators.utils.compatibility.CompatibilityIssue]</code></p> <p>Parameters:</p> <ul> <li><code>decorator1</code>: <code>Union</code></li> <li><code>decorator2</code>: <code>Union</code></li> </ul> <p>Returns: <code>List</code></p>"},{"location":"api/modules/prompt_decorators.utils.compatibility/#check_compatibility_group","title":"<code>check_compatibility_group</code>","text":"<p>Check compatibility among a group of decorators.</p> <p>Args:     decorators: List of decorators to check</p> <p>Returns:     List of compatibility issues (empty if fully compatible)</p> <p>Signature: <code>check_compatibility_group(self, decorators: List[Union[str, prompt_decorators.core.base.DecoratorBase]]) -&gt; List[prompt_decorators.utils.compatibility.CompatibilityIssue]</code></p> <p>Parameters:</p> <ul> <li><code>decorators</code>: <code>List</code></li> </ul> <p>Returns: <code>List</code></p>"},{"location":"api/modules/prompt_decorators.utils.compatibility/#compatibilityissue","title":"<code>CompatibilityIssue</code>","text":"<p>Class representing a compatibility issue between decorators.</p>"},{"location":"api/modules/prompt_decorators.utils.compatibility/#attributes","title":"Attributes","text":"<ul> <li><code>SEVERITY_ERROR</code>: <code>str</code> = <code>'error'</code></li> <li><code>SEVERITY_INFO</code>: <code>str</code> = <code>'info'</code></li> <li><code>SEVERITY_WARNING</code>: <code>str</code> = <code>'warning'</code></li> </ul>"},{"location":"api/modules/prompt_decorators.utils.compatibility/#methods_1","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.utils.compatibility/#__init___1","title":"<code>__init__</code>","text":"<p>Initialize a compatibility issue.</p> <p>Args:     message: Description of the issue     decorator1: First decorator involved     decorator2: Second decorator involved     severity: Issue severity (info, warning, error)</p> <p>Signature: <code>__init__(self, message: str, decorator1: Union[str, prompt_decorators.core.base.DecoratorBase], decorator2: Union[str, prompt_decorators.core.base.DecoratorBase], severity: str = 'warning')</code></p> <p>Parameters:</p> <ul> <li><code>message</code>: <code>str</code></li> <li><code>decorator1</code>: <code>Union</code></li> <li><code>decorator2</code>: <code>Union</code></li> <li><code>severity</code>: <code>str</code> (default: <code>warning</code>)</li> </ul>"},{"location":"api/modules/prompt_decorators.utils.compatibility/#functions","title":"Functions","text":""},{"location":"api/modules/prompt_decorators.utils.compatibility/#get_compatibility_checker","title":"<code>get_compatibility_checker</code>","text":"<p>Get the global compatibility checker.</p> <p>Returns:     The global compatibility checker instance</p> <p>Signature: <code>get_compatibility_checker() -&gt; prompt_decorators.utils.compatibility.CompatibilityChecker</code></p> <p>Returns: <code>CompatibilityChecker</code></p>"},{"location":"api/modules/prompt_decorators.utils.compatibility/#setup_core_compatibility_rules","title":"<code>setup_core_compatibility_rules</code>","text":"<p>Set up compatibility rules for core decorators.</p> <p>Signature: <code>setup_core_compatibility_rules() -&gt; None</code></p>"},{"location":"api/modules/prompt_decorators.utils.discovery/","title":"discovery","text":"<p>Decorator discovery and registration utilities.</p> <p>This module provides utilities for discovering and registering prompt decorators.</p>"},{"location":"api/modules/prompt_decorators.utils.discovery/#classes","title":"Classes","text":""},{"location":"api/modules/prompt_decorators.utils.discovery/#decoratorregistry","title":"<code>DecoratorRegistry</code>","text":"<p>Registry for prompt decorators.</p> <p>This class provides methods for registering and discovering decorators at runtime.</p>"},{"location":"api/modules/prompt_decorators.utils.discovery/#methods","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.utils.discovery/#__init__","title":"<code>__init__</code>","text":"<p>Initialize the registry.</p> <p>This is a no-op for the singleton pattern.</p> <p>Args:     self: The DecoratorRegistry instance</p> <p>Returns:     None</p> <p>Signature: <code>__init__(self)</code></p> <p>Parameters:</p>"},{"location":"api/modules/prompt_decorators.utils.discovery/#clear","title":"<code>clear</code>","text":"<p>Clear all registered decorators.</p> <p>This is primarily used for testing.</p> <p>Args:     self: The DecoratorRegistry instance</p> <p>Returns:     None</p> <p>Signature: <code>clear(self)</code></p> <p>Parameters:</p>"},{"location":"api/modules/prompt_decorators.utils.discovery/#create_decorator","title":"<code>create_decorator</code>","text":"<p>Create a decorator instance by name with the specified parameters.</p> <p>Args:     name: The name of the decorator class to instantiate     **parameters: Parameters to pass to the decorator constructor</p> <p>Returns:     The created decorator instance if successful, None otherwise</p> <p>Raises:     ValueError: If the decorator class is not found     TypeError: If the parameters are invalid for the decorator</p> <p>Signature: <code>create_decorator(self, name: str, **parameters) -&gt; Optional[prompt_decorators.core.base.DecoratorBase]</code></p> <p>Parameters:</p> <ul> <li><code>name</code>: <code>str</code></li> <li><code>parameters</code>:</li> </ul> <p>Returns: <code>Optional</code></p>"},{"location":"api/modules/prompt_decorators.utils.discovery/#find_decorators_by_category","title":"<code>find_decorators_by_category</code>","text":"<p>Find all decorators in a specific category.</p> <p>Args:     category: The category to search for</p> <p>Returns:     Dictionary mapping decorator names to decorator classes</p> <p>Signature: <code>find_decorators_by_category(self, category: str) -&gt; Dict[str, Type[prompt_decorators.core.base.DecoratorBase]]</code></p> <p>Parameters:</p> <ul> <li><code>category</code>: <code>str</code></li> </ul> <p>Returns: <code>Dict</code></p>"},{"location":"api/modules/prompt_decorators.utils.discovery/#get_all_decorator_instances","title":"<code>get_all_decorator_instances</code>","text":"<p>Get all registered decorator instances.</p> <p>Args:     self: The DecoratorRegistry instance</p> <p>Returns:     Dictionary mapping decorator names to decorator instances</p> <p>Signature: <code>get_all_decorator_instances(self) -&gt; Dict[str, prompt_decorators.core.base.DecoratorBase]</code></p> <p>Parameters:</p> <p>Returns: <code>Dict</code></p>"},{"location":"api/modules/prompt_decorators.utils.discovery/#get_all_decorators","title":"<code>get_all_decorators</code>","text":"<p>Get all registered decorator classes.</p> <p>Args:     self: The DecoratorRegistry instance</p> <p>Returns:     Dictionary mapping decorator names to decorator classes</p> <p>Signature: <code>get_all_decorators(self) -&gt; Dict[str, Type[prompt_decorators.core.base.DecoratorBase]]</code></p> <p>Parameters:</p> <p>Returns: <code>Dict</code></p>"},{"location":"api/modules/prompt_decorators.utils.discovery/#get_categories","title":"<code>get_categories</code>","text":"<p>Get all registered decorator categories.</p> <p>Args:     self: The DecoratorRegistry instance</p> <p>Returns:     Set of category names</p> <p>Signature: <code>get_categories(self) -&gt; Set[str]</code></p> <p>Parameters:</p> <p>Returns: <code>Set</code></p>"},{"location":"api/modules/prompt_decorators.utils.discovery/#get_decorator","title":"<code>get_decorator</code>","text":"<p>Get a decorator class by name.</p> <p>Args:     name: The name of the decorator to retrieve</p> <p>Returns:     The decorator class if found, None otherwise</p> <p>Signature: <code>get_decorator(self, name: str) -&gt; Optional[Type[prompt_decorators.core.base.DecoratorBase]]</code></p> <p>Parameters:</p> <ul> <li><code>name</code>: <code>str</code></li> </ul> <p>Returns: <code>Optional</code></p>"},{"location":"api/modules/prompt_decorators.utils.discovery/#get_decorator_instance","title":"<code>get_decorator_instance</code>","text":"<p>Get a decorator instance by name.</p> <p>Args:     name: The name of the decorator instance to retrieve</p> <p>Returns:     The decorator instance if found, None otherwise</p> <p>Signature: <code>get_decorator_instance(self, name: str) -&gt; Optional[prompt_decorators.core.base.DecoratorBase]</code></p> <p>Parameters:</p> <ul> <li><code>name</code>: <code>str</code></li> </ul> <p>Returns: <code>Optional</code></p>"},{"location":"api/modules/prompt_decorators.utils.discovery/#register_all_from_directory","title":"<code>register_all_from_directory</code>","text":"<p>Register all decorators from Python files in a directory.</p> <p>Args:     directory: The directory to scan for decorator modules</p> <p>Returns:     Number of decorators registered</p> <p>Note:     This method will import all Python files in the directory and     register any classes that inherit from BaseDecorator.</p> <p>Signature: <code>register_all_from_directory(self, directory: str) -&gt; int</code></p> <p>Parameters:</p> <ul> <li><code>directory</code>: <code>str</code></li> </ul> <p>Returns: <code>int</code></p>"},{"location":"api/modules/prompt_decorators.utils.discovery/#register_all_from_json_directory","title":"<code>register_all_from_json_directory</code>","text":"<p>Register all decorators from JSON files in a directory.</p> <p>Args:     directory: The directory to scan for JSON files</p> <p>Returns:     Number of decorators registered</p> <p>Note:     This method will attempt to register a decorator from each JSON file     in the specified directory.</p> <p>Signature: <code>register_all_from_json_directory(self, directory: str) -&gt; int</code></p> <p>Parameters:</p> <ul> <li><code>directory</code>: <code>str</code></li> </ul> <p>Returns: <code>int</code></p>"},{"location":"api/modules/prompt_decorators.utils.discovery/#register_decorator","title":"<code>register_decorator</code>","text":"<p>Register a decorator class.</p> <p>Args:     decorator_class: The decorator class to register</p> <p>Returns:     None</p> <p>Signature: <code>register_decorator(self, decorator_class: Type[prompt_decorators.core.base.DecoratorBase]) -&gt; None</code></p> <p>Parameters:</p> <ul> <li><code>decorator_class</code>: <code>Type</code></li> </ul>"},{"location":"api/modules/prompt_decorators.utils.discovery/#register_decorator_instance","title":"<code>register_decorator_instance</code>","text":"<p>Register a decorator instance.</p> <p>Args:     decorator: The decorator instance to register</p> <p>Returns:     None</p> <p>Signature: <code>register_decorator_instance(self, decorator: prompt_decorators.core.base.DecoratorBase) -&gt; None</code></p> <p>Parameters:</p> <ul> <li><code>decorator</code>: <code>DecoratorBase</code></li> </ul>"},{"location":"api/modules/prompt_decorators.utils.discovery/#register_from_json_file","title":"<code>register_from_json_file</code>","text":"<p>Register a decorator from a JSON file.</p> <p>Args:     file_path: Path to the JSON file</p> <p>Returns:     The registered decorator class if successful, None otherwise</p> <p>Raises:     ValueError: If the file cannot be read or contains invalid JSON</p> <p>Signature: <code>register_from_json_file(self, file_path: str) -&gt; Optional[Type[prompt_decorators.core.base.DecoratorBase]]</code></p> <p>Parameters:</p> <ul> <li><code>file_path</code>: <code>str</code></li> </ul> <p>Returns: <code>Optional</code></p>"},{"location":"api/modules/prompt_decorators.utils.discovery/#register_from_json_string","title":"<code>register_from_json_string</code>","text":"<p>Register a decorator from a JSON string.</p> <p>Args:     json_string: JSON string defining a decorator</p> <p>Returns:     The registered decorator class if successful, None otherwise</p> <p>Raises:     ValueError: If the JSON is invalid or missing required fields</p> <p>Signature: <code>register_from_json_string(self, json_string: str) -&gt; Optional[Type[prompt_decorators.core.base.DecoratorBase]]</code></p> <p>Parameters:</p> <ul> <li><code>json_string</code>: <code>str</code></li> </ul> <p>Returns: <code>Optional</code></p>"},{"location":"api/modules/prompt_decorators.utils.discovery/#functions","title":"Functions","text":""},{"location":"api/modules/prompt_decorators.utils.discovery/#get_registry","title":"<code>get_registry</code>","text":"<p>Get the global decorator registry.</p> <p>Returns:     The global decorator registry instance</p> <p>Signature: <code>get_registry() -&gt; prompt_decorators.utils.discovery.DecoratorRegistry</code></p> <p>Returns: <code>DecoratorRegistry</code></p>"},{"location":"api/modules/prompt_decorators.utils.factory/","title":"factory","text":"<p>Decorator Factory Module.</p> <p>This module provides utilities for creating decorator instances from JSON definitions.</p>"},{"location":"api/modules/prompt_decorators.utils.factory/#module-variables","title":"Module Variables","text":""},{"location":"api/modules/prompt_decorators.utils.factory/#logger","title":"<code>logger</code>","text":"<p>Type: <code>Logger</code></p> <p>Value: <code>&lt;Logger prompt_decorators.utils.factory (INFO)&gt;</code></p>"},{"location":"api/modules/prompt_decorators.utils.factory/#classes","title":"Classes","text":""},{"location":"api/modules/prompt_decorators.utils.factory/#decoratorfactory","title":"<code>DecoratorFactory</code>","text":"<p>Factory for creating decorator instances from JSON definitions.</p> <p>This class provides utilities for creating decorator instances from JSON definitions, either by using existing decorator classes or by dynamically generating new ones.</p>"},{"location":"api/modules/prompt_decorators.utils.factory/#methods","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.utils.factory/#__init__","title":"<code>__init__</code>","text":"<p>Initialize the decorator factory.</p> <p>Args:     registry: The decorator registry to use (optional)</p> <p>Signature: <code>__init__(self, registry: Optional[prompt_decorators.utils.discovery.DecoratorRegistry] = None)</code></p> <p>Parameters:</p> <ul> <li><code>registry</code>: <code>Optional</code> (default: <code>None</code>)</li> </ul>"},{"location":"api/modules/prompt_decorators.utils.factory/#create_all_from_directory","title":"<code>create_all_from_directory</code>","text":"<p>Create decorator instances from all JSON files in a directory.</p> <p>Args:     directory_path: Path to the directory containing JSON files</p> <p>Returns:     List of decorator instances</p> <p>Signature: <code>create_all_from_directory(self, directory_path: str) -&gt; List[prompt_decorators.core.base.DecoratorBase]</code></p> <p>Parameters:</p> <ul> <li><code>directory_path</code>: <code>str</code></li> </ul> <p>Returns: <code>List</code></p>"},{"location":"api/modules/prompt_decorators.utils.factory/#create_dynamic_class","title":"<code>create_dynamic_class</code>","text":"<p>Create a dynamic decorator class from a dictionary definition.</p> <p>Args:     decorator_data: Dictionary containing the decorator definition</p> <p>Returns:     A new decorator class</p> <p>Signature: <code>create_dynamic_class(self, decorator_data: Dict[str, Any]) -&gt; Type[prompt_decorators.core.base.DecoratorBase]</code></p> <p>Parameters:</p> <ul> <li><code>decorator_data</code>: <code>Dict</code></li> </ul> <p>Returns: <code>Type</code></p>"},{"location":"api/modules/prompt_decorators.utils.factory/#create_from_dict","title":"<code>create_from_dict</code>","text":"<p>Create a decorator instance from a dictionary.</p> <p>Args:     decorator_data: Dictionary containing the decorator definition</p> <p>Returns:     The created decorator instance, or None if creation failed</p> <p>Signature: <code>create_from_dict(self, decorator_data: Dict[str, Any]) -&gt; Optional[prompt_decorators.core.base.DecoratorBase]</code></p> <p>Parameters:</p> <ul> <li><code>decorator_data</code>: <code>Dict</code></li> </ul> <p>Returns: <code>Optional</code></p>"},{"location":"api/modules/prompt_decorators.utils.factory/#create_from_file","title":"<code>create_from_file</code>","text":"<p>Create a decorator instance from a JSON file.</p> <p>Args:     file_path: Path to the JSON file containing the decorator definition</p> <p>Returns:     The created decorator instance, or None if creation failed</p> <p>Signature: <code>create_from_file(self, file_path: str) -&gt; Optional[prompt_decorators.core.base.DecoratorBase]</code></p> <p>Parameters:</p> <ul> <li><code>file_path</code>: <code>str</code></li> </ul> <p>Returns: <code>Optional</code></p>"},{"location":"api/modules/prompt_decorators.utils.factory/#create_from_json_string","title":"<code>create_from_json_string</code>","text":"<p>Create a decorator instance from a JSON string.</p> <p>Args:     json_string: JSON string containing the decorator definition</p> <p>Returns:     The created decorator instance, or None if creation failed</p> <p>Signature: <code>create_from_json_string(self, json_string: str) -&gt; Optional[prompt_decorators.core.base.DecoratorBase]</code></p> <p>Parameters:</p> <ul> <li><code>json_string</code>: <code>str</code></li> </ul> <p>Returns: <code>Optional</code></p>"},{"location":"api/modules/prompt_decorators.utils.factory/#extract_parameters","title":"<code>extract_parameters</code>","text":"<p>Extract parameter values from a decorator definition.</p> <p>Args:     decorator_data: The decorator definition as a dictionary</p> <p>Returns:     Dictionary of parameter values</p> <p>Signature: <code>extract_parameters(self, decorator_data: Dict[str, Any]) -&gt; Dict[str, Any]</code></p> <p>Parameters:</p> <ul> <li><code>decorator_data</code>: <code>Dict</code></li> </ul> <p>Returns: <code>Dict</code></p>"},{"location":"api/modules/prompt_decorators.utils.factory/#find_decorator_class","title":"<code>find_decorator_class</code>","text":"<p>Find a decorator class by name.</p> <p>Args:     decorator_name: The name of the decorator</p> <p>Returns:     The decorator class, or None if not found</p> <p>Signature: <code>find_decorator_class(self, decorator_name: str) -&gt; Optional[Type[prompt_decorators.core.base.DecoratorBase]]</code></p> <p>Parameters:</p> <ul> <li><code>decorator_name</code>: <code>str</code></li> </ul> <p>Returns: <code>Optional</code></p>"},{"location":"api/modules/prompt_decorators.utils.json_loader/","title":"json_loader","text":"<p>JSON loading utilities for decorator definitions.</p> <p>This module provides utilities for loading and validating decorator definitions from JSON.</p>"},{"location":"api/modules/prompt_decorators.utils.json_loader/#module-variables","title":"Module Variables","text":""},{"location":"api/modules/prompt_decorators.utils.json_loader/#logger","title":"<code>logger</code>","text":"<p>Type: <code>Logger</code></p> <p>Value: <code>&lt;Logger prompt_decorators.utils.json_loader (INFO)&gt;</code></p>"},{"location":"api/modules/prompt_decorators.utils.json_loader/#classes","title":"Classes","text":""},{"location":"api/modules/prompt_decorators.utils.json_loader/#jsonloader","title":"<code>JSONLoader</code>","text":"<p>Loader for decorator definitions from JSON.</p> <p>This class provides utilities for loading decorator definitions from JSON strings, files, or directories, and validating them against a schema.</p>"},{"location":"api/modules/prompt_decorators.utils.json_loader/#attributes","title":"Attributes","text":"<ul> <li><code>DEFAULT_SCHEMA_PATH</code>: <code>PosixPath</code> = <code>PosixPath('/Users/danielbentes/prompt-decorators/prompt_decorators/schemas/decorator_schema.json')</code></li> </ul>"},{"location":"api/modules/prompt_decorators.utils.json_loader/#methods","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.utils.json_loader/#__init__","title":"<code>__init__</code>","text":"<p>Initialize the JSON loader.</p> <p>Args:     schema_path: Path to the schema file for validation (optional)</p> <p>Signature: <code>__init__(self, schema_path: Optional[str] = None)</code></p> <p>Parameters:</p> <ul> <li><code>schema_path</code>: <code>Optional</code> (default: <code>None</code>)</li> </ul>"},{"location":"api/modules/prompt_decorators.utils.json_loader/#load_from_directory","title":"<code>load_from_directory</code>","text":"<p>Load all decorator definitions from JSON files in a directory.</p> <p>Args:     directory_path: Path to the directory containing JSON files     validate: Whether to validate against the schema (default: True)</p> <p>Returns:     List of decorator definitions as dictionaries</p> <p>Signature: <code>load_from_directory(self, directory_path: str, validate: bool = True) -&gt; List[Dict[str, Any]]</code></p> <p>Parameters:</p> <ul> <li><code>directory_path</code>: <code>str</code></li> <li><code>validate</code>: <code>bool</code> (default: <code>True</code>)</li> </ul> <p>Returns: <code>List</code></p>"},{"location":"api/modules/prompt_decorators.utils.json_loader/#load_from_file","title":"<code>load_from_file</code>","text":"<p>Load a decorator definition from a JSON file.</p> <p>Args:     file_path: Path to the JSON file     validate: Whether to validate against the schema (default: True)</p> <p>Returns:     The decorator definition as a dictionary</p> <p>Raises:     FileNotFoundError: If the file is not found     json.JSONDecodeError: If the JSON is invalid     jsonschema.exceptions.ValidationError: If validation fails</p> <p>Signature: <code>load_from_file(self, file_path: str, validate: bool = True) -&gt; Dict[str, Any]</code></p> <p>Parameters:</p> <ul> <li><code>file_path</code>: <code>str</code></li> <li><code>validate</code>: <code>bool</code> (default: <code>True</code>)</li> </ul> <p>Returns: <code>Dict</code></p>"},{"location":"api/modules/prompt_decorators.utils.json_loader/#load_from_string","title":"<code>load_from_string</code>","text":"<p>Load a decorator definition from a JSON string.</p> <p>Args:     json_string: The JSON string to load     validate: Whether to validate against the schema (default: True)</p> <p>Returns:     The decorator definition as a dictionary</p> <p>Raises:     json.JSONDecodeError: If the JSON is invalid     jsonschema.exceptions.ValidationError: If validation fails</p> <p>Signature: <code>load_from_string(self, json_string: str, validate: bool = True) -&gt; Dict[str, Any]</code></p> <p>Parameters:</p> <ul> <li><code>json_string</code>: <code>str</code></li> <li><code>validate</code>: <code>bool</code> (default: <code>True</code>)</li> </ul> <p>Returns: <code>Dict</code></p>"},{"location":"api/modules/prompt_decorators.utils.json_loader/#functions","title":"Functions","text":""},{"location":"api/modules/prompt_decorators.utils.json_loader/#load_json_file","title":"<code>load_json_file</code>","text":"<p>Load a JSON file.</p> <p>Args:     file_path: Path to the JSON file</p> <p>Returns:     The loaded JSON data as a dictionary</p> <p>Raises:     FileNotFoundError: If the file is not found     json.JSONDecodeError: If the JSON is invalid</p> <p>Signature: <code>load_json_file(file_path: str) -&gt; Dict[str, Any]</code></p> <p>Parameters:</p> <ul> <li><code>file_path</code>: <code>str</code></li> </ul> <p>Returns: <code>Dict</code></p>"},{"location":"api/modules/prompt_decorators.utils/","title":"utils","text":"<p>Utility functions for prompt decorators.</p> <p>This package provides utility functions for working with prompt decorators.</p>"},{"location":"api/modules/prompt_decorators.utils/#public-api","title":"Public API","text":"<p>This module exports the following components:</p> <ul> <li><code>extract_decorators_from_text</code>: Function - Extract decorator annotations from text</li> <li><code>replace_decorators_in_text</code>: Function - Replace decorator annotations in text</li> </ul>"},{"location":"api/modules/prompt_decorators.utils/#functions","title":"Functions","text":""},{"location":"api/modules/prompt_decorators.utils/#extract_decorators_from_text","title":"<code>extract_decorators_from_text</code>","text":"<p>Imported from <code>prompt_decorators.utils.string_utils</code></p> <p>Extract decorator annotations from text.</p> <p>Args:     text: Text containing decorator annotations</p> <p>Returns:     Tuple of (list of decorator dictionaries, clean text)</p> <p>Signature: <code>extract_decorators_from_text(text: str) -&gt; Tuple[List[Dict[str, Any]], str]</code></p> <p>Parameters:</p> <ul> <li><code>text</code>: <code>str</code></li> </ul> <p>Returns: <code>Tuple</code></p>"},{"location":"api/modules/prompt_decorators.utils/#replace_decorators_in_text","title":"<code>replace_decorators_in_text</code>","text":"<p>Imported from <code>prompt_decorators.utils.string_utils</code></p> <p>Replace decorator annotations in text.</p> <p>Args:     text: Text to modify     decorators: List of decorator dictionaries</p> <p>Returns:     Text with decorator annotations replaced</p> <p>Signature: <code>replace_decorators_in_text(text: str, decorators: List[Dict[str, Any]]) -&gt; str</code></p> <p>Parameters:</p> <ul> <li><code>text</code>: <code>str</code></li> <li><code>decorators</code>: <code>List</code></li> </ul> <p>Returns: <code>str</code></p>"},{"location":"api/modules/prompt_decorators.utils.model_detection/","title":"model_detection","text":"<p>Model detection and capability utilities.</p> <p>This module provides utilities for detecting model capabilities and features.</p>"},{"location":"api/modules/prompt_decorators.utils.model_detection/#module-variables","title":"Module Variables","text":""},{"location":"api/modules/prompt_decorators.utils.model_detection/#logger","title":"<code>logger</code>","text":"<p>Type: <code>Logger</code></p> <p>Value: <code>&lt;Logger prompt_decorators.utils.model_detection (INFO)&gt;</code></p>"},{"location":"api/modules/prompt_decorators.utils.model_detection/#classes","title":"Classes","text":""},{"location":"api/modules/prompt_decorators.utils.model_detection/#modelcapabilities","title":"<code>ModelCapabilities</code>","text":"<p>Class to represent the capabilities of a model.</p> <p>This class stores information about what a model can and cannot do, such as supported decorator features and parameter types.</p>"},{"location":"api/modules/prompt_decorators.utils.model_detection/#attributes","title":"Attributes","text":"<ul> <li><code>from_dict</code>: <code>classmethod</code> = <code>&lt;classmethod(&lt;function ModelCapabilities.from_dict at 0x1059b6480&gt;)&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.utils.model_detection/#methods","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.utils.model_detection/#__init__","title":"<code>__init__</code>","text":"<p>Initialize a model capabilities object.</p> <p>Args:     model_id: Unique identifier for the model     model_family: Family or provider of the model     version: Version of the model     capabilities: Dictionary of capability flags and values</p> <p>Signature: <code>__init__(self, model_id: str, model_family: str = 'unknown', version: str = 'unknown', capabilities: Optional[Dict[str, Any]] = None)</code></p> <p>Parameters:</p> <ul> <li><code>model_id</code>: <code>str</code></li> <li><code>model_family</code>: <code>str</code> (default: <code>unknown</code>)</li> <li><code>version</code>: <code>str</code> (default: <code>unknown</code>)</li> <li><code>capabilities</code>: <code>Optional</code> (default: <code>None</code>)</li> </ul>"},{"location":"api/modules/prompt_decorators.utils.model_detection/#get_capability","title":"<code>get_capability</code>","text":"<p>Get the value of a capability.</p> <p>Args:     capability: The capability to get     default: Default value if the capability is not defined</p> <p>Returns:     The capability value, or the default if not found</p> <p>Signature: <code>get_capability(self, capability: str, default: Any = None) -&gt; Any</code></p> <p>Parameters:</p> <ul> <li><code>capability</code>: <code>str</code></li> <li><code>default</code>: <code>Any</code> (default: <code>None</code>)</li> </ul> <p>Returns: <code>Any</code></p>"},{"location":"api/modules/prompt_decorators.utils.model_detection/#set_capability","title":"<code>set_capability</code>","text":"<p>Set the value of a capability.</p> <p>Args:     capability: The capability to set     value: The value to set</p> <p>Returns:     None</p> <p>Signature: <code>set_capability(self, capability: str, value: Any) -&gt; None</code></p> <p>Parameters:</p> <ul> <li><code>capability</code>: <code>str</code></li> <li><code>value</code>: <code>Any</code></li> </ul>"},{"location":"api/modules/prompt_decorators.utils.model_detection/#supports_feature","title":"<code>supports_feature</code>","text":"<p>Check if the model supports a specific feature.</p> <p>Args:     feature: The feature to check</p> <p>Returns:     True if the feature is supported, False otherwise</p> <p>Signature: <code>supports_feature(self, feature: str) -&gt; bool</code></p> <p>Parameters:</p> <ul> <li><code>feature</code>: <code>str</code></li> </ul> <p>Returns: <code>bool</code></p>"},{"location":"api/modules/prompt_decorators.utils.model_detection/#to_dict","title":"<code>to_dict</code>","text":"<p>Convert the model capabilities to a dictionary.</p> <p>Args:     self: The ModelCapabilities instance</p> <p>Returns:     Dictionary representation of the model capabilities</p> <p>Signature: <code>to_dict(self) -&gt; Dict[str, Any]</code></p> <p>Parameters:</p> <p>Returns: <code>Dict</code></p>"},{"location":"api/modules/prompt_decorators.utils.model_detection/#modeldetector","title":"<code>ModelDetector</code>","text":"<p>Detector for model capabilities.</p> <p>This class provides utilities for detecting and querying model capabilities.</p>"},{"location":"api/modules/prompt_decorators.utils.model_detection/#attributes_1","title":"Attributes","text":"<ul> <li><code>DEFAULT_CAPABILITIES_PATH</code>: <code>PosixPath</code> = <code>PosixPath('/Users/danielbentes/prompt-decorators/config/model_capabilities.json')</code></li> </ul>"},{"location":"api/modules/prompt_decorators.utils.model_detection/#methods_1","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.utils.model_detection/#detect_model_from_api","title":"<code>detect_model_from_api</code>","text":"<p>Detect the model family from an API name.</p> <p>Args:     api_name: The API name or URL</p> <p>Returns:     The detected model family, or None if not detected</p> <p>Signature: <code>detect_model_from_api(self, api_name: str) -&gt; Optional[str]</code></p> <p>Parameters:</p> <ul> <li><code>api_name</code>: <code>str</code></li> </ul> <p>Returns: <code>Optional</code></p>"},{"location":"api/modules/prompt_decorators.utils.model_detection/#get_all_families","title":"<code>get_all_families</code>","text":"<p>Get all registered model families.</p> <p>Args:     self: The ModelDetector instance</p> <p>Returns:     List of all registered model families</p> <p>Signature: <code>get_all_families(self) -&gt; List[str]</code></p> <p>Parameters:</p> <p>Returns: <code>List</code></p>"},{"location":"api/modules/prompt_decorators.utils.model_detection/#get_all_models","title":"<code>get_all_models</code>","text":"<p>Get all registered models.</p> <p>Args:     self: The ModelDetector instance</p> <p>Returns:     List of all registered ModelCapabilities</p> <p>Signature: <code>get_all_models(self) -&gt; List[prompt_decorators.utils.model_detection.ModelCapabilities]</code></p> <p>Parameters:</p> <p>Returns: <code>List</code></p>"},{"location":"api/modules/prompt_decorators.utils.model_detection/#get_model_capabilities","title":"<code>get_model_capabilities</code>","text":"<p>Get capabilities for a specific model.</p> <p>Args:     model_id: The model identifier</p> <p>Returns:     ModelCapabilities for the model, or None if not found</p> <p>Note:     This method attempts to find an exact match first, then falls back     to a partial match if no exact match is found.</p> <p>Signature: <code>get_model_capabilities(self, model_id: str) -&gt; Optional[prompt_decorators.utils.model_detection.ModelCapabilities]</code></p> <p>Parameters:</p> <ul> <li><code>model_id</code>: <code>str</code></li> </ul> <p>Returns: <code>Optional</code></p>"},{"location":"api/modules/prompt_decorators.utils.model_detection/#get_models_by_family","title":"<code>get_models_by_family</code>","text":"<p>Get all models in a specific family.</p> <p>Args:     family: Model family</p> <p>Returns:     List of ModelCapabilities for models in the family</p> <p>Signature: <code>get_models_by_family(self, family: str) -&gt; List[prompt_decorators.utils.model_detection.ModelCapabilities]</code></p> <p>Parameters:</p> <ul> <li><code>family</code>: <code>str</code></li> </ul> <p>Returns: <code>List</code></p>"},{"location":"api/modules/prompt_decorators.utils.model_detection/#register_model","title":"<code>register_model</code>","text":"<p>Register a model's capabilities.</p> <p>Args:     model: The model capabilities to register</p> <p>Returns:     None</p> <p>Signature: <code>register_model(self, model: prompt_decorators.utils.model_detection.ModelCapabilities) -&gt; None</code></p> <p>Parameters:</p> <ul> <li><code>model</code>: <code>ModelCapabilities</code></li> </ul>"},{"location":"api/modules/prompt_decorators.utils.model_detection/#functions","title":"Functions","text":""},{"location":"api/modules/prompt_decorators.utils.model_detection/#get_model_detector","title":"<code>get_model_detector</code>","text":"<p>Get the global model detector instance.</p> <p>Returns:     The global model detector instance</p> <p>Signature: <code>get_model_detector() -&gt; prompt_decorators.utils.model_detection.ModelDetector</code></p> <p>Returns: <code>ModelDetector</code></p>"},{"location":"api/modules/prompt_decorators.utils.plugins/","title":"plugins","text":"<p>Plugin System Module.</p> <p>This module provides a plugin architecture for decorator extensions.</p>"},{"location":"api/modules/prompt_decorators.utils.plugins/#module-variables","title":"Module Variables","text":""},{"location":"api/modules/prompt_decorators.utils.plugins/#logger","title":"<code>logger</code>","text":"<p>Type: <code>Logger</code></p> <p>Value: <code>&lt;Logger prompt_decorators.utils.plugins (INFO)&gt;</code></p>"},{"location":"api/modules/prompt_decorators.utils.plugins/#plugin_manager","title":"<code>plugin_manager</code>","text":"<p>Type: <code>PluginManager</code></p> <p>Value: <code>&lt;prompt_decorators.utils.plugins.PluginManager object at 0x10744f610&gt;</code></p>"},{"location":"api/modules/prompt_decorators.utils.plugins/#classes","title":"Classes","text":""},{"location":"api/modules/prompt_decorators.utils.plugins/#plugin","title":"<code>Plugin</code>","text":"<p>Class representing a plugin containing decorator extensions.</p> <p>A plugin is a collection of decorators that can be loaded dynamically.</p>"},{"location":"api/modules/prompt_decorators.utils.plugins/#methods","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.utils.plugins/#__init__","title":"<code>__init__</code>","text":"<p>Initialize a plugin.</p> <p>Args:     name: Name of the plugin     version: Version of the plugin     description: Description of the plugin     author: Dictionary with author information     path: Path to the plugin directory or file     decorators: List of decorator classes in the plugin     metadata: Additional metadata for the plugin</p> <p>Signature: <code>__init__(self, name: str, version: str, description: str = '', author: Optional[Dict[str, str]] = None, path: Optional[str] = None, decorators: Optional[List[Type[prompt_decorators.core.base.DecoratorBase]]] = None, metadata: Optional[Dict[str, Any]] = None)</code></p> <p>Parameters:</p> <ul> <li><code>name</code>: <code>str</code></li> <li><code>version</code>: <code>str</code></li> <li><code>description</code>: <code>str</code> (default: ``)</li> <li><code>author</code>: <code>Optional</code> (default: <code>None</code>)</li> <li><code>path</code>: <code>Optional</code> (default: <code>None</code>)</li> <li><code>decorators</code>: <code>Optional</code> (default: <code>None</code>)</li> <li><code>metadata</code>: <code>Optional</code> (default: <code>None</code>)</li> </ul>"},{"location":"api/modules/prompt_decorators.utils.plugins/#disable","title":"<code>disable</code>","text":"<p>Disable the plugin.</p> <p>Signature: <code>disable(self) -&gt; None</code></p> <p>Parameters:</p>"},{"location":"api/modules/prompt_decorators.utils.plugins/#enable","title":"<code>enable</code>","text":"<p>Enable the plugin.</p> <p>Signature: <code>enable(self) -&gt; None</code></p> <p>Parameters:</p>"},{"location":"api/modules/prompt_decorators.utils.plugins/#to_dict","title":"<code>to_dict</code>","text":"<p>Convert the plugin to a dictionary.</p> <p>Args:     self: The plugin instance</p> <p>Returns:     Dictionary representation of the plugin</p> <p>Signature: <code>to_dict(self) -&gt; Dict[str, Any]</code></p> <p>Parameters:</p> <p>Returns: <code>Dict</code></p>"},{"location":"api/modules/prompt_decorators.utils.plugins/#pluginmanager","title":"<code>PluginManager</code>","text":"<p>Manager for decorator plugins.</p> <p>This class provides functionality for loading, managing, and monitoring plugins.</p>"},{"location":"api/modules/prompt_decorators.utils.plugins/#methods_1","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.utils.plugins/#add_plugin_directory","title":"<code>add_plugin_directory</code>","text":"<p>Add a directory to search for plugins.</p> <p>Args:     directory: Path to the directory containing plugins</p> <p>Returns:     None</p> <p>Signature: <code>add_plugin_directory(self, directory: str) -&gt; None</code></p> <p>Parameters:</p> <ul> <li><code>directory</code>: <code>str</code></li> </ul>"},{"location":"api/modules/prompt_decorators.utils.plugins/#discover_plugins","title":"<code>discover_plugins</code>","text":"<p>Discover plugins in the registered directories.</p> <p>Args:     self: The plugin manager instance</p> <p>Returns:     List of discovered plugins</p> <p>Signature: <code>discover_plugins(self) -&gt; List[prompt_decorators.utils.plugins.Plugin]</code></p> <p>Parameters:</p> <p>Returns: <code>List</code></p>"},{"location":"api/modules/prompt_decorators.utils.plugins/#get_all_plugins","title":"<code>get_all_plugins</code>","text":"<p>Get all loaded plugins.</p> <p>Args:     self: The plugin manager instance</p> <p>Returns:     Dictionary mapping plugin names to Plugin objects</p> <p>Signature: <code>get_all_plugins(self) -&gt; Dict[str, prompt_decorators.utils.plugins.Plugin]</code></p> <p>Parameters:</p> <p>Returns: <code>Dict</code></p>"},{"location":"api/modules/prompt_decorators.utils.plugins/#get_plugin","title":"<code>get_plugin</code>","text":"<p>Get a loaded plugin by name.</p> <p>Args:     plugin_name: Name of the plugin to get</p> <p>Returns:     The plugin, or None if not found</p> <p>Signature: <code>get_plugin(self, plugin_name: str) -&gt; Optional[prompt_decorators.utils.plugins.Plugin]</code></p> <p>Parameters:</p> <ul> <li><code>plugin_name</code>: <code>str</code></li> </ul> <p>Returns: <code>Optional</code></p>"},{"location":"api/modules/prompt_decorators.utils.plugins/#load_discovered_plugins","title":"<code>load_discovered_plugins</code>","text":"<p>Load all discovered plugins.</p> <p>Args:     self: The plugin manager instance</p> <p>Returns:     Number of plugins loaded</p> <p>Signature: <code>load_discovered_plugins(self) -&gt; int</code></p> <p>Parameters:</p> <p>Returns: <code>int</code></p>"},{"location":"api/modules/prompt_decorators.utils.plugins/#load_plugin","title":"<code>load_plugin</code>","text":"<p>Load a plugin.</p> <p>Args:     plugin: The plugin to load</p> <p>Returns:     True if loaded successfully, False otherwise</p> <p>Signature: <code>load_plugin(self, plugin: prompt_decorators.utils.plugins.Plugin) -&gt; bool</code></p> <p>Parameters:</p> <ul> <li><code>plugin</code>: <code>Plugin</code></li> </ul> <p>Returns: <code>bool</code></p>"},{"location":"api/modules/prompt_decorators.utils.plugins/#register_hook","title":"<code>register_hook</code>","text":"<p>Register a hook callback.</p> <p>Args:     hook_name: Name of the hook     callback: Function to call when the hook is triggered</p> <p>Returns:     None</p> <p>Signature: <code>register_hook(self, hook_name: str, callback: Callable) -&gt; None</code></p> <p>Parameters:</p> <ul> <li><code>hook_name</code>: <code>str</code></li> <li><code>callback</code>: <code>Callable</code></li> </ul>"},{"location":"api/modules/prompt_decorators.utils.plugins/#start_watching_directories","title":"<code>start_watching_directories</code>","text":"<p>Start watching plugin directories for changes.</p> <p>Args:     interval: How often to check for changes (in seconds)</p> <p>Returns:     None</p> <p>Signature: <code>start_watching_directories(self, interval: int = 10) -&gt; None</code></p> <p>Parameters:</p> <ul> <li><code>interval</code>: <code>int</code> (default: <code>10</code>)</li> </ul>"},{"location":"api/modules/prompt_decorators.utils.plugins/#stop_watching_directories","title":"<code>stop_watching_directories</code>","text":"<p>Stop watching plugin directories for changes.</p> <p>Signature: <code>stop_watching_directories(self) -&gt; None</code></p> <p>Parameters:</p>"},{"location":"api/modules/prompt_decorators.utils.plugins/#unload_plugin","title":"<code>unload_plugin</code>","text":"<p>Unload a plugin.</p> <p>Args:     plugin_name: Name of the plugin to unload</p> <p>Returns:     True if unloaded successfully, False otherwise</p> <p>Signature: <code>unload_plugin(self, plugin_name: str) -&gt; bool</code></p> <p>Parameters:</p> <ul> <li><code>plugin_name</code>: <code>str</code></li> </ul> <p>Returns: <code>bool</code></p>"},{"location":"api/modules/prompt_decorators.utils.plugins/#functions","title":"Functions","text":""},{"location":"api/modules/prompt_decorators.utils.plugins/#get_plugin_manager","title":"<code>get_plugin_manager</code>","text":"<p>Get the global plugin manager.</p> <p>Returns:     The global plugin manager instance</p> <p>Signature: <code>get_plugin_manager() -&gt; prompt_decorators.utils.plugins.PluginManager</code></p> <p>Returns: <code>PluginManager</code></p>"},{"location":"api/modules/prompt_decorators.utils.string_utils/","title":"string_utils","text":"<p>String utilities for working with prompt decorators.</p> <p>This module provides utility functions for extracting and replacing decorators in text.</p>"},{"location":"api/modules/prompt_decorators.utils.string_utils/#functions","title":"Functions","text":""},{"location":"api/modules/prompt_decorators.utils.string_utils/#extract_decorators_from_text","title":"<code>extract_decorators_from_text</code>","text":"<p>Extract decorator annotations from text.</p> <p>Args:     text: Text containing decorator annotations</p> <p>Returns:     Tuple of (list of decorator dictionaries, clean text)</p> <p>Signature: <code>extract_decorators_from_text(text: str) -&gt; Tuple[List[Dict[str, Any]], str]</code></p> <p>Parameters:</p> <ul> <li><code>text</code>: <code>str</code></li> </ul> <p>Returns: <code>Tuple</code></p>"},{"location":"api/modules/prompt_decorators.utils.string_utils/#replace_decorators_in_text","title":"<code>replace_decorators_in_text</code>","text":"<p>Replace decorator annotations in text.</p> <p>Args:     text: Text to modify     decorators: List of decorator dictionaries</p> <p>Returns:     Text with decorator annotations replaced</p> <p>Signature: <code>replace_decorators_in_text(text: str, decorators: List[Dict[str, Any]]) -&gt; str</code></p> <p>Parameters:</p> <ul> <li><code>text</code>: <code>str</code></li> <li><code>decorators</code>: <code>List</code></li> </ul> <p>Returns: <code>str</code></p>"},{"location":"api/modules/prompt_decorators.utils.telemetry/","title":"telemetry","text":"<p>Telemetry Module.</p> <p>This module provides an opt-in telemetry system for tracking decorator usage patterns.</p>"},{"location":"api/modules/prompt_decorators.utils.telemetry/#module-variables","title":"Module Variables","text":""},{"location":"api/modules/prompt_decorators.utils.telemetry/#logger","title":"<code>logger</code>","text":"<p>Type: <code>Logger</code></p> <p>Value: <code>&lt;Logger prompt_decorators.utils.telemetry (INFO)&gt;</code></p>"},{"location":"api/modules/prompt_decorators.utils.telemetry/#telemetry_manager","title":"<code>telemetry_manager</code>","text":"<p>Type: <code>TelemetryManager</code></p> <p>Value: <code>&lt;prompt_decorators.utils.telemetry.TelemetryManager object at 0x1075dec90&gt;</code></p>"},{"location":"api/modules/prompt_decorators.utils.telemetry/#classes","title":"Classes","text":""},{"location":"api/modules/prompt_decorators.utils.telemetry/#telemetrymanager","title":"<code>TelemetryManager</code>","text":"<p>Manager for collecting and reporting telemetry data.</p> <p>This class provides utilities for collecting usage data about decorators and reporting it for analytics purposes. All telemetry is opt-in.</p>"},{"location":"api/modules/prompt_decorators.utils.telemetry/#methods","title":"Methods","text":""},{"location":"api/modules/prompt_decorators.utils.telemetry/#disable","title":"<code>disable</code>","text":"<p>Disable telemetry collection.</p> <p>Signature: <code>disable(self) -&gt; None</code></p> <p>Parameters:</p>"},{"location":"api/modules/prompt_decorators.utils.telemetry/#enable","title":"<code>enable</code>","text":"<p>Enable telemetry collection.</p> <p>Signature: <code>enable(self) -&gt; None</code></p> <p>Parameters:</p>"},{"location":"api/modules/prompt_decorators.utils.telemetry/#is_enabled","title":"<code>is_enabled</code>","text":"<p>Check if telemetry is enabled.</p> <p>Args:     self: The TelemetryManager instance</p> <p>Returns:     True if enabled, False otherwise</p> <p>Signature: <code>is_enabled(self) -&gt; bool</code></p> <p>Parameters:</p> <p>Returns: <code>bool</code></p>"},{"location":"api/modules/prompt_decorators.utils.telemetry/#register_callback","title":"<code>register_callback</code>","text":"<p>Register a callback for a specific event type.</p> <p>Args:     event_type: Type of event to register for     callback: Function to call when an event of this type occurs</p> <p>Returns:     None</p> <p>Signature: <code>register_callback(self, event_type: str, callback: Callable[[Dict[str, Any]], NoneType]) -&gt; None</code></p> <p>Parameters:</p> <ul> <li><code>event_type</code>: <code>str</code></li> <li><code>callback</code>: <code>Callable</code></li> </ul>"},{"location":"api/modules/prompt_decorators.utils.telemetry/#track_decorator_combination","title":"<code>track_decorator_combination</code>","text":"<p>Track a combination of decorators used together.</p> <p>Args:     decorators: List of decorator information dictionaries     prompt_length: Length of the prompt in tokens (optional)     metadata: Additional metadata (optional)</p> <p>Returns:     None</p> <p>Signature: <code>track_decorator_combination(self, decorators: List[Dict[str, Any]], prompt_length: Optional[int] = None, metadata: Optional[Dict[str, Any]] = None) -&gt; None</code></p> <p>Parameters:</p> <ul> <li><code>decorators</code>: <code>List</code></li> <li><code>prompt_length</code>: <code>Optional</code> (default: <code>None</code>)</li> <li><code>metadata</code>: <code>Optional</code> (default: <code>None</code>)</li> </ul>"},{"location":"api/modules/prompt_decorators.utils.telemetry/#track_decorator_usage","title":"<code>track_decorator_usage</code>","text":"<p>Track usage of a decorator.</p> <p>Args:     decorator_name: Name of the decorator     version: Version of the decorator     parameters: Parameters used with the decorator (optional)     metadata: Additional metadata (optional)</p> <p>Returns:     None</p> <p>Signature: <code>track_decorator_usage(self, decorator_name: str, version: str, parameters: Optional[Dict[str, Any]] = None, metadata: Optional[Dict[str, Any]] = None) -&gt; None</code></p> <p>Parameters:</p> <ul> <li><code>decorator_name</code>: <code>str</code></li> <li><code>version</code>: <code>str</code></li> <li><code>parameters</code>: <code>Optional</code> (default: <code>None</code>)</li> <li><code>metadata</code>: <code>Optional</code> (default: <code>None</code>)</li> </ul>"},{"location":"api/modules/prompt_decorators.utils.telemetry/#track_performance","title":"<code>track_performance</code>","text":"<p>Track performance metrics for a decorator.</p> <p>Args:     decorator_name: Name of the decorator     version: Version of the decorator     execution_time: Time taken to execute the decorator in seconds     metadata: Additional metadata (optional)</p> <p>Returns:     None</p> <p>Signature: <code>track_performance(self, decorator_name: str, version: str, execution_time: float, metadata: Optional[Dict[str, Any]] = None) -&gt; None</code></p> <p>Parameters:</p> <ul> <li><code>decorator_name</code>: <code>str</code></li> <li><code>version</code>: <code>str</code></li> <li><code>execution_time</code>: <code>float</code></li> <li><code>metadata</code>: <code>Optional</code> (default: <code>None</code>)</li> </ul>"},{"location":"api/modules/prompt_decorators.utils.telemetry/#unregister_callback","title":"<code>unregister_callback</code>","text":"<p>Unregister a callback for telemetry events.</p> <p>Args:     event_type: Type of event     callback: Function to unregister</p> <p>Returns:     None</p> <p>Signature: <code>unregister_callback(self, event_type: str, callback: Callable[[Dict[str, Any]], NoneType]) -&gt; None</code></p> <p>Parameters:</p> <ul> <li><code>event_type</code>: <code>str</code></li> <li><code>callback</code>: <code>Callable</code></li> </ul>"},{"location":"api/modules/prompt_decorators.utils.telemetry/#functions","title":"Functions","text":""},{"location":"api/modules/prompt_decorators.utils.telemetry/#get_telemetry_manager","title":"<code>get_telemetry_manager</code>","text":"<p>Get the global telemetry manager.</p> <p>Returns:     The global telemetry manager instance</p> <p>Signature: <code>get_telemetry_manager() -&gt; prompt_decorators.utils.telemetry.TelemetryManager</code></p> <p>Returns: <code>TelemetryManager</code></p>"},{"location":"demo/","title":"Demoing the Prompt Decorators","text":"<p>This guide explains how to use the demo tools provided with the Prompt Decorators framework to showcase its capabilities. The demos help illustrate the power of decorators in enhancing LLM outputs for different use cases.</p>"},{"location":"demo/#overview","title":"Overview","text":"<p>The Prompt Decorators demo package includes:</p> <ol> <li>A CLI demo for quick examples from the command line</li> <li>An interactive web demo for visual experimentation</li> <li>A collection of example scripts for different use cases</li> <li>A comparison tool to see before/after decorator effects</li> </ol>"},{"location":"demo/#installation","title":"Installation","text":"<p>To use the demo tools, install the package with the demo extras:</p> <pre><code>pip install \"prompt-decorators[demo]\"\n</code></pre> <p>This installs the core package plus additional dependencies required for the demos.</p>"},{"location":"demo/#command-line-demo","title":"Command Line Demo","text":"<p>The CLI demo allows you to quickly experiment with decorators from the command line:</p> <pre><code># Run a basic example\npython -m prompt_decorators.demo.main basic step-by-step\n\n# Try a custom prompt with decorators\npython -m prompt_decorators.demo.dynamic_openai_demo run-custom-prompt \\\n  --prompt \"Explain quantum computing\" \\\n  --decorator \"Audience(level=beginner)\" \\\n  --decorator \"StepByStep(numbered=true)\"\n</code></pre>"},{"location":"demo/#available-commands","title":"Available Commands","text":"<pre><code># List all available decorators\npython -m prompt_decorators.demo.dynamic_openai_demo --list-decorators\n\n# Run a predefined example\npython -m prompt_decorators.demo.dynamic_openai_demo --example step_by_step\n\n# Getting help\npython -m prompt_decorators.demo.dynamic_openai_demo --help\n</code></pre>"},{"location":"demo/#basic-examples","title":"Basic Examples","text":"<pre><code># Basic reasoning and structure decorators\npython -m prompt_decorators.demo.main basic reasoning                 # Use the Reasoning decorator\npython -m prompt_decorators.demo.main basic step-by-step              # Use the StepByStep decorator\npython -m prompt_decorators.demo.main basic output-format             # Use the OutputFormat decorator\npython -m prompt_decorators.demo.main basic bullet                    # Use the Bullet decorator\npython -m prompt_decorators.demo.main basic tree-of-thought           # Use the TreeOfThought decorator\n</code></pre>"},{"location":"demo/#advanced-examples","title":"Advanced Examples","text":"<pre><code># Standard advanced compositions\npython -m prompt_decorators.demo.main advanced compound-decorators     # Combines StepByStep, Reasoning, and OutputFormat\npython -m prompt_decorators.demo.main advanced tech-tutorial           # Creates a technical tutorial using multiple decorators\npython -m prompt_decorators.demo.main advanced decision-analysis       # Uses decorators for structured decision analysis\npython -m prompt_decorators.demo.main advanced debate-topic            # Creates balanced debate analysis\n</code></pre>"},{"location":"demo/#interactive-web-demo","title":"Interactive Web Demo","text":"<p>The web demo provides an interactive interface for exploring decorators:</p> <pre><code># Start the web interface\npython -m prompt_decorators.demo.web_app\n</code></pre> <p>Then open your browser to http://localhost:7860 to access the interface.</p>"},{"location":"demo/#web-demo-features","title":"Web Demo Features","text":"<ul> <li>Interactive Decorator Selection: Choose from available decorators with a simple interface</li> <li>Parameter Configuration: Customize decorator parameters</li> <li>Real-time Preview: See the transformed prompt before sending to an LLM</li> <li>Response Comparison: Compare responses with and without decorators</li> <li>Decorator Stacking: Combine multiple decorators and adjust their order</li> <li>Export Options: Save your configurations and responses</li> </ul>"},{"location":"demo/#example-scripts","title":"Example Scripts","text":"<p>The demo package includes example scripts that showcase different applications of prompt decorators:</p>"},{"location":"demo/#basic-examples_1","title":"Basic Examples","text":"<p>Found in <code>demo/examples/basic.py</code>:</p> <pre><code>from prompt_decorators.demo.examples.basic import run_example\n\n# Run the reasoning example\nrun_example(\"reasoning\")\n</code></pre>"},{"location":"demo/#advanced-examples_1","title":"Advanced Examples","text":"<p>Found in <code>demo/examples/advanced.py</code>:</p> <pre><code>from prompt_decorators.demo.examples.advanced import run_example\n\n# Run the technical tutorial example\nrun_example(\"tech_tutorial\")\n</code></pre>"},{"location":"demo/#domain-specific-examples","title":"Domain-Specific Examples","text":"<p>Found in <code>demo/examples/domain_specific.py</code>:</p> <pre><code>from prompt_decorators.demo.examples.domain_specific import run_example\n\n# Run the data science example\nrun_example(\"data_science\")\n</code></pre>"},{"location":"demo/#comparison-tool","title":"Comparison Tool","text":"<p>The comparison tool helps visualize the difference between decorated and undecorated prompts:</p> <pre><code>python -m prompt_decorators.demo.compare \\\n  --prompt \"Explain how nuclear fusion works\" \\\n  --decorator \"StepByStep(numbered=true)\" \\\n  --decorator \"Audience(level=beginner)\" \\\n  --model \"gpt-4o\"\n</code></pre> <p>This will: 1. Send the original prompt to the LLM 2. Send the decorated prompt to the LLM 3. Display both responses side by side for comparison</p>"},{"location":"demo/#configuration","title":"Configuration","text":"<p>The demo tools can be configured through environment variables or a <code>.env</code> file:</p> <pre><code># OpenAI API Key\nOPENAI_API_KEY=your_openai_api_key_here\n\n# Model Configuration\nDEFAULT_MODEL=gpt-4o-mini\nMAX_TOKENS=2048\nTEMPERATURE=0.7\n\n# Logging Configuration\nLOG_LEVEL=INFO\nSAVE_LOGS=false\nLOG_FILE=prompt_decorator_demo.log\n</code></pre>"},{"location":"demo/#creating-your-own-demos","title":"Creating Your Own Demos","text":"<p>You can create custom demos based on the provided examples:</p> <pre><code>from prompt_decorators import apply_dynamic_decorators, create_decorator_instance\nfrom prompt_decorators.demo.utils.llm_client import get_completion\n\n# Define a custom demo\ndef my_custom_demo():\n    # Create a decorated prompt\n    prompt = \"\"\"\n    +++Persona(role=\"historian\")\n    +++StepByStep(numbered=true)\n    +++OutputFormat(format=\"markdown\")\n    Explain the causes of World War I\n    \"\"\"\n\n    # Apply decorators\n    transformed_prompt = apply_dynamic_decorators(prompt)\n\n    # Print the transformation\n    print(\"Original prompt:\")\n    print(prompt)\n    print(\"\\nTransformed prompt:\")\n    print(transformed_prompt)\n\n    # Get LLM response (if API key is configured)\n    try:\n        response = get_completion(transformed_prompt)\n        print(\"\\nLLM Response:\")\n        print(response)\n    except Exception as e:\n        print(f\"Error getting LLM response: {e}\")\n\nif __name__ == \"__main__\":\n    my_custom_demo()\n</code></pre>"},{"location":"demo/#demo-architecture","title":"Demo Architecture","text":"<p>The demo code is structured as follows:</p> <ul> <li><code>prompt_decorators/demo/main.py</code>: Main entry point for CLI</li> <li><code>prompt_decorators/demo/dynamic_openai_demo.py</code>: OpenAI-specific demo</li> <li><code>prompt_decorators/demo/web_app.py</code>: Web interface using Gradio</li> <li><code>prompt_decorators/demo/compare.py</code>: Comparison tool</li> <li><code>prompt_decorators/demo/examples/</code>: Example scripts</li> <li><code>prompt_decorators/demo/utils/</code>: Utility functions</li> </ul>"},{"location":"demo/#best-practices-for-demonstrations","title":"Best Practices for Demonstrations","text":"<p>When using the demo tools to present Prompt Decorators:</p> <ol> <li>Start Simple: Begin with basic decorators before moving to complex combinations</li> <li>Show Transformations: Always display both the original and transformed prompts</li> <li>Use Real-World Examples: Choose examples relevant to your audience</li> <li>Highlight Benefits: Emphasize improved structure, clarity, or depth in responses</li> <li>Compare Results: Show the difference between decorated and undecorated prompts</li> <li>Customize for Audience: Adjust examples based on your audience's domain</li> </ol>"},{"location":"demo/#troubleshooting","title":"Troubleshooting","text":""},{"location":"demo/#api-key-issues","title":"API Key Issues","text":"<p>If you encounter authentication errors:</p> <pre><code>Error: OpenAI API key not found. Please set the OPENAI_API_KEY environment variable.\n</code></pre> <p>Make sure to set your API key:</p> <pre><code>export OPENAI_API_KEY=your_api_key_here\n</code></pre> <p>Or create a <code>.env</code> file in the demo directory.</p>"},{"location":"demo/#model-availability","title":"Model Availability","text":"<p>If you see:</p> <pre><code>Error: The model 'gpt-4o' does not exist or you do not have access to it.\n</code></pre> <p>Try using a different model:</p> <pre><code>python -m prompt_decorators.demo.dynamic_openai_demo run-custom-prompt \\\n  --prompt \"Hello world\" \\\n  --model \"gpt-4-turbo\"\n</code></pre>"},{"location":"demo/#other-issues","title":"Other Issues","text":"<p>For other common issues, check the troubleshooting section in the README.md file in the demo directory.</p>"},{"location":"demo/#next-steps","title":"Next Steps","text":"<ul> <li>Explore the tutorials to create your own decorators</li> <li>Learn about MCP integration to use decorators with Claude and other LLMs</li> <li>Read the specification for detailed technical information</li> </ul>"},{"location":"integrations/","title":"Integrations","text":"<p>Prompt Decorators can be integrated with various systems and platforms to enhance their capabilities. This section documents the available integrations and how to use them.</p>"},{"location":"integrations/#available-integrations","title":"Available Integrations","text":""},{"location":"integrations/#model-context-protocol-mcp","title":"Model Context Protocol (MCP)","text":"<p>The Model Context Protocol (MCP) integration allows you to expose prompt decorators as MCP tools, which can be used by MCP-compatible clients like Claude Desktop.</p> <ul> <li>MCP Overview - General overview of the MCP integration</li> <li>MCP Server - Documentation for the MCP server implementation</li> <li>Claude Desktop Integration - How to use prompt decorators with Claude Desktop</li> </ul>"},{"location":"integrations/#coming-soon","title":"Coming Soon","text":"<p>We're working on the following integrations:</p> <ul> <li>Langchain: Integration with the Langchain framework</li> <li>Ollama: Integration with the Ollama local LLM platform</li> <li>FastAPI: Expose prompt decorators as a REST API</li> <li>LlamaIndex: Integration with the LlamaIndex framework</li> </ul>"},{"location":"integrations/#why-use-integrations","title":"Why Use Integrations?","text":"<p>Integrations extend the capabilities of Prompt Decorators by making them available in different contexts:</p> <ol> <li>Enhanced Accessibility: Integrate prompt decorators into your existing workflows and tools.</li> <li>Standardized Communication: Use common protocols and interfaces to interact with prompt decorators.</li> <li>Expanded Functionality: Combine the power of prompt decorators with other systems.</li> <li>User-Friendly Interfaces: Make prompt decorators available through intuitive interfaces.</li> </ol>"},{"location":"integrations/#creating-custom-integrations","title":"Creating Custom Integrations","text":"<p>If you want to create a custom integration for Prompt Decorators, see the Extension Development tutorial for guidance.</p>"},{"location":"integrations/mcp/","title":"Model Context Protocol (MCP) Integration","text":"<p>Prompt Decorators integrates with the Model Context Protocol (MCP), allowing you to easily expose prompt decorators as MCP tools that can be used by any MCP-compatible client, including Claude Desktop.</p>"},{"location":"integrations/mcp/#overview","title":"Overview","text":"<p>The Model Context Protocol (MCP) is a standardized protocol for communication between LLM clients and servers. Our integration allows you to expose your prompt decorators as MCP tools, which can then be accessed by any MCP client.</p> <p>The integration is built using the official MCP SDK and follows all the best practices for MCP server implementation.</p>"},{"location":"integrations/mcp/#installation","title":"Installation","text":"<p>First, install the MCP SDK:</p> <pre><code>pip install mcp\n</code></pre>"},{"location":"integrations/mcp/#usage","title":"Usage","text":""},{"location":"integrations/mcp/#running-the-server","title":"Running the Server","text":"<p>You can run the MCP server using:</p> <pre><code># General use\npython -m prompt_decorators.integrations.mcp [--verbose]\n\n# For Claude Desktop specifically\npython -m prompt_decorators.integrations.mcp.claude_desktop [--verbose]\n</code></pre>"},{"location":"integrations/mcp/#available-tools","title":"Available Tools","text":"<p>The MCP integration provides the following tools:</p> <ol> <li>list_decorators: Lists all available prompt decorators.</li> <li>get_decorator_details: Retrieves detailed information about a specific decorator.</li> <li>apply_decorators: Applies decorators to a prompt using the +++ syntax.</li> <li>create_decorated_prompt: Creates a decorated prompt using a predefined template.</li> </ol>"},{"location":"integrations/mcp/#using-the-tools","title":"Using the Tools","text":"<p>Here's how you can use these tools from an MCP client:</p>"},{"location":"integrations/mcp/#list-decorators","title":"List Decorators","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"callTool\",\n  \"params\": {\n    \"name\": \"list_decorators\",\n    \"arguments\": {}\n  }\n}\n</code></pre> <p>Response: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"decorators\": {\n      \"Academic\": {\n        \"name\": \"Academic\",\n        \"description\": \"Apply academic writing style and tone\",\n        \"category\": \"Style\",\n        \"parameters\": [{\"name\": \"level\", \"description\": \"Academic level\", \"type\": \"string\", \"required\": false}]\n      },\n      \"Reasoning\": {\n        \"name\": \"Reasoning\",\n        \"description\": \"Enhance reasoning capabilities\",\n        \"category\": \"Critical Thinking\",\n        \"parameters\": [{\"name\": \"depth\", \"description\": \"Reasoning depth\", \"type\": \"string\", \"required\": false}]\n      }\n      // ... more decorators\n    }\n  }\n}\n</code></pre></p>"},{"location":"integrations/mcp/#get-decorator-details","title":"Get Decorator Details","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"callTool\",\n  \"params\": {\n    \"name\": \"get_decorator_details\",\n    \"arguments\": {\n      \"name\": \"StepByStep\"\n    }\n  }\n}\n</code></pre> <p>Response: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"name\": \"StepByStep\",\n    \"description\": \"Break down the response into step-by-step instructions\",\n    \"category\": \"Structure\",\n    \"parameters\": [\n      {\"name\": \"numbered\", \"description\": \"Use numbered steps\", \"type\": \"boolean\", \"required\": false}\n    ],\n    \"version\": \"1.0.0\"\n  }\n}\n</code></pre></p>"},{"location":"integrations/mcp/#apply-decorators","title":"Apply Decorators","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"callTool\",\n  \"params\": {\n    \"name\": \"apply_decorators\",\n    \"arguments\": {\n      \"prompt\": \"Explain quantum computing\",\n      \"decorators\": [\n        {\"name\": \"StepByStep\"},\n        {\"name\": \"Academic\", \"parameters\": {\"level\": \"advanced\"}}\n      ]\n    }\n  }\n}\n</code></pre> <p>Response: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"original_prompt\": \"Explain quantum computing\",\n    \"decorated_prompt\": \"I'll provide a step-by-step academic explanation of quantum computing at an advanced level...\",\n    \"applied_decorators\": [\"StepByStep\", \"Academic\"]\n  }\n}\n</code></pre></p>"},{"location":"integrations/mcp/#create-decorated-prompt","title":"Create Decorated Prompt","text":"<pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"callTool\",\n  \"params\": {\n    \"name\": \"create_decorated_prompt\",\n    \"arguments\": {\n      \"template_name\": \"detailed-reasoning\",\n      \"content\": \"Why is the sky blue?\"\n    }\n  }\n}\n</code></pre> <p>Response: <pre><code>{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"template_name\": \"detailed-reasoning\",\n    \"template_description\": \"Enhanced critical thinking template with structured reasoning\",\n    \"original_content\": \"Why is the sky blue?\",\n    \"decorated_prompt\": \"I'll analyze why the sky appears blue, using detailed reasoning and a step-by-step approach...\",\n    \"applied_decorators\": [\n      {\"name\": \"SystemMessage\", \"parameters\": {\"message\": \"Analyze this problem step-by-step with detailed reasoning.\"}},\n      {\"name\": \"Reasoning\", \"parameters\": {\"depth\": \"deep\"}},\n      {\"name\": \"Structured\", \"parameters\": {\"format\": \"markdown\"}}\n    ]\n  }\n}\n</code></pre></p>"},{"location":"integrations/mcp/#predefined-templates","title":"Predefined Templates","text":"<p>The integration includes the following predefined templates:</p> <ul> <li>detailed-reasoning: Enhanced critical thinking template with structured reasoning.</li> <li>academic-analysis: Academic style analysis with citations and formal tone.</li> <li>explain-simply: Simplify complex topics for broader understanding.</li> <li>creative-storytelling: Creative writing with storytelling elements.</li> <li>problem-solving: Structured approach to solving problems.</li> </ul>"},{"location":"integrations/mcp/#implementation-details","title":"Implementation Details","text":"<p>The MCP integration is built using the official MCP SDK. The server implementation follows the FastMCP pattern from the SDK, which provides all the necessary functionality for running an MCP server.</p> <p>The integration registers four tools with the MCP server:</p> <ol> <li><code>list_decorators</code>: Lists all available prompt decorators loaded from the dynamic decorators module.</li> <li><code>get_decorator_details</code>: Provides detailed information about a specific decorator, including its parameters and usage.</li> <li><code>apply_decorators</code>: Applies a list of decorators to a given prompt, returning the transformed prompt.</li> <li><code>create_decorated_prompt</code>: Uses a predefined template to create a decorated prompt, with customizable parameters.</li> </ol>"},{"location":"integrations/mcp/#next-steps","title":"Next Steps","text":"<p>To learn more about the MCP server implementation and how to integrate it with Claude Desktop, see:</p> <ul> <li>MCP Server</li> <li>Claude Desktop Integration</li> </ul>"},{"location":"integrations/mcp/claude_desktop/","title":"Claude Desktop Integration","text":"<p>Prompt Decorators can be easily integrated with Claude Desktop using the MCP (Model Context Protocol) integration. This document explains how to set up and use the Prompt Decorators MCP server with Claude Desktop.</p>"},{"location":"integrations/mcp/claude_desktop/#overview","title":"Overview","text":"<p>Claude Desktop supports external tools through the MCP protocol, allowing you to extend Claude's capabilities with custom functionality. The Prompt Decorators MCP integration enables Claude to apply prompt decorators to your prompts, enhancing Claude's responses with structured reasoning, specific output formats, and more.</p>"},{"location":"integrations/mcp/claude_desktop/#prerequisites","title":"Prerequisites","text":"<ul> <li>Claude Desktop installed on your system</li> <li>Python 3.11 or higher</li> <li>Prompt Decorators package installed</li> <li>MCP SDK installed (<code>pip install mcp</code>)</li> </ul>"},{"location":"integrations/mcp/claude_desktop/#installation","title":"Installation","text":""},{"location":"integrations/mcp/claude_desktop/#1-install-required-packages","title":"1. Install Required Packages","text":"<pre><code>pip install prompt-decorators mcp\n</code></pre>"},{"location":"integrations/mcp/claude_desktop/#2-create-a-configuration-file","title":"2. Create a Configuration File","text":"<p>Claude Desktop requires a configuration file that specifies how to run the MCP server. You can use our provided script to generate this configuration file:</p> <pre><code>python install_claude_desktop.py\n</code></pre> <p>This will create a <code>claude_desktop_config.json</code> file in your current directory with the appropriate configuration.</p> <p>Alternatively, you can manually create a configuration file with the following structure:</p> <pre><code>{\n  \"name\": \"Prompt Decorators\",\n  \"command\": \"/absolute/path/to/python\",\n  \"args\": [\n    \"-m\",\n    \"prompt_decorators.integrations.mcp.claude_desktop\"\n  ],\n  \"cwd\": \"/absolute/path/to/prompt-decorators\",\n  \"env\": {\n    \"PYTHONPATH\": \"/absolute/path/to/prompt-decorators\",\n    \"PYTHONUNBUFFERED\": \"1\",\n    \"PYTHONDONTWRITEBYTECODE\": \"1\"\n  }\n}\n</code></pre> <p>Replace the paths with the appropriate paths on your system: - <code>/absolute/path/to/python</code>: The path to your Python executable - <code>/absolute/path/to/prompt-decorators</code>: The path to the directory containing the prompt-decorators package</p>"},{"location":"integrations/mcp/claude_desktop/#3-configure-claude-desktop","title":"3. Configure Claude Desktop","text":"<ol> <li>Open Claude Desktop</li> <li>Go to Settings (gear icon) &gt; Advanced &gt; Context Sources</li> <li>Click \"Add Context Source\"</li> <li>Either:</li> <li>Click \"Import from File\" and select your <code>claude_desktop_config.json</code> file</li> <li> <p>Or manually enter the configuration details</p> </li> <li> <p>Click \"Save\"</p> </li> </ol>"},{"location":"integrations/mcp/claude_desktop/#using-prompt-decorators-in-claude-desktop","title":"Using Prompt Decorators in Claude Desktop","text":"<p>Once the integration is set up, you can use Prompt Decorators in Claude Desktop through the <code>/tool</code> command.</p>"},{"location":"integrations/mcp/claude_desktop/#available-tools","title":"Available Tools","text":"<p>The integration provides four tools:</p> <ol> <li><code>list_decorators</code>: Lists all available prompt decorators</li> <li><code>get_decorator_details</code>: Gets detailed information about a specific decorator</li> <li><code>apply_decorators</code>: Applies decorators to a prompt</li> <li><code>create_decorated_prompt</code>: Creates a decorated prompt using a predefined template</li> </ol>"},{"location":"integrations/mcp/claude_desktop/#example-usage","title":"Example Usage","text":""},{"location":"integrations/mcp/claude_desktop/#listing-decorators","title":"Listing Decorators","text":"<p>To see all available decorators:</p> <pre><code>/tool list_decorators\n</code></pre> <p>This will return a list of all available decorators with their descriptions, categories, and parameters.</p>"},{"location":"integrations/mcp/claude_desktop/#getting-decorator-details","title":"Getting Decorator Details","text":"<p>To get detailed information about a specific decorator:</p> <pre><code>/tool get_decorator_details name=StepByStep\n</code></pre> <p>This will return detailed information about the StepByStep decorator, including its parameters and usage.</p>"},{"location":"integrations/mcp/claude_desktop/#applying-decorators","title":"Applying Decorators","text":"<p>To apply decorators to a prompt:</p> <pre><code>/tool apply_decorators prompt=\"Explain quantum computing\" decorators=[{\"name\": \"StepByStep\"}, {\"name\": \"Academic\", \"parameters\": {\"level\": \"advanced\"}}]\n</code></pre> <p>This will return a decorated prompt that includes the StepByStep and Academic decorators.</p>"},{"location":"integrations/mcp/claude_desktop/#using-templates","title":"Using Templates","text":"<p>To create a decorated prompt using a predefined template:</p> <pre><code>/tool create_decorated_prompt template_name=\"detailed-reasoning\" content=\"Why is the sky blue?\"\n</code></pre> <p>This will return a decorated prompt using the detailed-reasoning template.</p>"},{"location":"integrations/mcp/claude_desktop/#predefined-templates","title":"Predefined Templates","text":"<p>The integration includes these predefined templates:</p> <ul> <li>detailed-reasoning: Enhanced critical thinking template with structured reasoning</li> <li>academic-analysis: Academic style analysis with citations and formal tone</li> <li>explain-simply: Simplify complex topics for broader understanding</li> <li>creative-storytelling: Creative writing with storytelling elements</li> <li>problem-solving: Structured approach to solving problems</li> </ul>"},{"location":"integrations/mcp/claude_desktop/#troubleshooting","title":"Troubleshooting","text":""},{"location":"integrations/mcp/claude_desktop/#connection-issues","title":"Connection Issues","text":"<p>If Claude Desktop cannot connect to the MCP server:</p> <ol> <li>Check that the paths in your configuration file are correct</li> <li>Ensure that the MCP SDK is installed (<code>pip install mcp</code>)</li> <li>Try running the server manually to check for errors:    <pre><code>python -m prompt_decorators.integrations.mcp.claude_desktop --verbose\n</code></pre></li> <li>Check that the PYTHONPATH environment variable is set correctly in the configuration</li> </ol>"},{"location":"integrations/mcp/claude_desktop/#debugging","title":"Debugging","text":"<p>You can run the Claude Desktop handler with the <code>--verbose</code></p>"},{"location":"integrations/mcp/server/","title":"MCP Server","text":"<p>The Prompt Decorators MCP server exposes prompt decorators as MCP tools, allowing any MCP-compatible client to access and use them. This document provides detailed information about the server implementation and usage.</p>"},{"location":"integrations/mcp/server/#implementation-overview","title":"Implementation Overview","text":"<p>The MCP server is implemented using the official MCP SDK, specifically the <code>FastMCP</code> class, which provides a high-level API for creating MCP servers.</p> <p>The server exposes four tools:</p> <ol> <li><code>list_decorators</code>: Lists all available prompt decorators.</li> <li><code>get_decorator_details</code>: Retrieves detailed information about a specific decorator.</li> <li><code>apply_decorators</code>: Applies decorators to a prompt using the +++ syntax.</li> <li><code>create_decorated_prompt</code>: Creates a decorated prompt using a predefined template.</li> </ol>"},{"location":"integrations/mcp/server/#source-code","title":"Source Code","text":"<p>The main server implementation is in the <code>prompt_decorators/integrations/mcp/server.py</code> file. It uses the dynamic decorator module to load and apply decorators.</p> <pre><code>from mcp.server.fastmcp import FastMCP\nfrom prompt_decorators.dynamic_decorators_module import (\n    get_available_decorators,\n    apply_dynamic_decorators,\n    load_decorator_definitions,\n)\n\n# Create the MCP server\nmcp = FastMCP(\"Prompt Decorators\")\n\n@mcp.tool()\ndef list_decorators() -&gt; Dict[str, Any]:\n    \"\"\"Lists all available prompt decorators.\"\"\"\n    # Implementation...\n\n@mcp.tool()\ndef get_decorator_details(name: str) -&gt; Dict[str, Any]:\n    \"\"\"Get detailed information about a specific decorator.\"\"\"\n    # Implementation...\n\n@mcp.tool()\ndef apply_decorators(prompt: str, decorators: List[Dict[str, Any]]) -&gt; Dict[str, Any]:\n    \"\"\"Apply decorators to a prompt using the +++ syntax.\"\"\"\n    # Implementation...\n\n@mcp.tool()\ndef create_decorated_prompt(template_name: str, content: str, parameters: Optional[Dict[str, Any]] = None) -&gt; Dict[str, Any]:\n    \"\"\"Create a decorated prompt using a predefined template.\"\"\"\n    # Implementation...\n\ndef run_server(host: str = \"0.0.0.0\", port: int = 5000) -&gt; None:\n    \"\"\"Run the MCP server.\"\"\"\n    # Implementation...\n</code></pre>"},{"location":"integrations/mcp/server/#running-the-server","title":"Running the Server","text":"<p>You can run the MCP server using the following command:</p> <pre><code>python -m prompt_decorators.integrations.mcp [--host HOST] [--port PORT] [--verbose]\n</code></pre> <p>Options: - <code>--verbose</code>: Enable verbose logging for debugging - <code>--host</code>: Specify the host to bind to (default: \"0.0.0.0\") - <code>--port</code>: Specify the port to listen on (default: 5000)</p>"},{"location":"integrations/mcp/server/#tool-details","title":"Tool Details","text":""},{"location":"integrations/mcp/server/#list_decorators","title":"list_decorators","text":"<p>Lists all available prompt decorators.</p> <p>Parameters: None</p> <p>Returns: A dictionary containing information about all available decorators, including their names, descriptions, categories, and parameters.</p> <p>Example Response: <pre><code>{\n  \"decorators\": {\n    \"Academic\": {\n      \"name\": \"Academic\",\n      \"description\": \"Apply academic writing style and tone\",\n      \"category\": \"Style\",\n      \"parameters\": [{\"name\": \"level\", \"description\": \"Academic level\", \"type\": \"string\", \"required\": false}]\n    },\n    \"Reasoning\": {\n      \"name\": \"Reasoning\",\n      \"description\": \"Enhance reasoning capabilities\",\n      \"category\": \"Critical Thinking\",\n      \"parameters\": [{\"name\": \"depth\", \"description\": \"Reasoning depth\", \"type\": \"string\", \"required\": false}]\n    }\n    // ... more decorators\n  }\n}\n</code></pre></p>"},{"location":"integrations/mcp/server/#get_decorator_details","title":"get_decorator_details","text":"<p>Retrieves detailed information about a specific decorator.</p> <p>Parameters: - <code>name</code> (string, required): The name of the decorator to get details for.</p> <p>Returns: A dictionary containing detailed information about the decorator, including its name, description, category, parameters, and version.</p> <p>Example Request: <pre><code>{\n  \"name\": \"StepByStep\"\n}\n</code></pre></p> <p>Example Response: <pre><code>{\n  \"name\": \"StepByStep\",\n  \"description\": \"Break down the response into step-by-step instructions\",\n  \"category\": \"Structure\",\n  \"parameters\": [\n    {\"name\": \"numbered\", \"description\": \"Use numbered steps\", \"type\": \"boolean\", \"required\": false}\n  ],\n  \"version\": \"1.0.0\"\n}\n</code></pre></p>"},{"location":"integrations/mcp/server/#apply_decorators","title":"apply_decorators","text":"<p>Applies decorators to a prompt using the +++ syntax.</p> <p>Parameters: - <code>prompt</code> (string, required): The prompt text to decorate. - <code>decorators</code> (array, required): List of decorators to apply, each with name and parameters.</p> <p>Returns: A dictionary containing the original prompt, the decorated prompt, and the list of applied decorators.</p> <p>Example Request: <pre><code>{\n  \"prompt\": \"Explain quantum computing\",\n  \"decorators\": [\n    {\"name\": \"StepByStep\"},\n    {\"name\": \"Academic\", \"parameters\": {\"level\": \"advanced\"}}\n  ]\n}\n</code></pre></p> <p>Example Response: <pre><code>{\n  \"original_prompt\": \"Explain quantum computing\",\n  \"decorated_prompt\": \"I'll provide a step-by-step academic explanation of quantum computing at an advanced level...\",\n  \"applied_decorators\": [\"StepByStep\", \"Academic\"]\n}\n</code></pre></p>"},{"location":"integrations/mcp/server/#create_decorated_prompt","title":"create_decorated_prompt","text":"<p>Creates a decorated prompt using a predefined template.</p> <p>Parameters: - <code>template_name</code> (string, required): The name of the template to use. - <code>content</code> (string, required): The content to include in the prompt. - <code>parameters</code> (object, optional): Optional parameters for customizing the template.</p> <p>Returns: A dictionary containing the template name, description, original content, decorated prompt, and applied decorators.</p> <p>Example Request: <pre><code>{\n  \"template_name\": \"detailed-reasoning\",\n  \"content\": \"Why is the sky blue?\",\n  \"parameters\": {\n    \"depth\": \"comprehensive\"\n  }\n}\n</code></pre></p> <p>Example Response: <pre><code>{\n  \"template_name\": \"detailed-reasoning\",\n  \"template_description\": \"Enhanced critical thinking template with structured reasoning\",\n  \"original_content\": \"Why is the sky blue?\",\n  \"decorated_prompt\": \"I'll analyze why the sky appears blue, using detailed reasoning and a comprehensive approach...\",\n  \"applied_decorators\": [\n    {\"name\": \"SystemMessage\", \"parameters\": {\"message\": \"Analyze this problem step-by-step with detailed reasoning.\"}},\n    {\"name\": \"Reasoning\", \"parameters\": {\"depth\": \"comprehensive\"}},\n    {\"name\": \"Structured\", \"parameters\": {\"format\": \"markdown\"}}\n  ]\n}\n</code></pre></p>"},{"location":"integrations/mcp/server/#predefined-templates","title":"Predefined Templates","text":"<p>The server includes the following predefined templates:</p>"},{"location":"integrations/mcp/server/#detailed-reasoning","title":"detailed-reasoning","text":"<p>Enhanced critical thinking template with structured reasoning.</p> <p>Decorators: - <code>SystemMessage</code>: Sets the system message to guide detailed reasoning. - <code>Reasoning</code>: Applies deep reasoning capabilities. - <code>Structured</code>: Formats the response in Markdown.</p>"},{"location":"integrations/mcp/server/#academic-analysis","title":"academic-analysis","text":"<p>Academic style analysis with citations and formal tone.</p> <p>Decorators: - <code>Academic</code>: Sets advanced academic level. - <code>Citation</code>: Uses APA citation style. - <code>Formal</code>: Applies formal tone.</p>"},{"location":"integrations/mcp/server/#explain-simply","title":"explain-simply","text":"<p>Simplify complex topics for broader understanding.</p> <p>Decorators: - <code>SystemMessage</code>: Sets the system message for simple explanations. - <code>Simplify</code>: Sets beginner-level explanations. - <code>Examples</code>: Includes examples to illustrate concepts.</p>"},{"location":"integrations/mcp/server/#creative-storytelling","title":"creative-storytelling","text":"<p>Creative writing with storytelling elements.</p> <p>Decorators: - <code>Creative</code>: Uses narrative style for creative content. - <code>Engaging</code>: Makes the content engaging. - <code>Vivid</code>: Adds high-level of vividness to descriptions.</p>"},{"location":"integrations/mcp/server/#problem-solving","title":"problem-solving","text":"<p>Structured approach to solving problems.</p> <p>Decorators: - <code>SystemMessage</code>: Sets the system message for problem-solving. - <code>ProblemSolver</code>: Applies problem-solving methodology. - <code>StepByStep</code>: Breaks down the solution into steps.</p>"},{"location":"integrations/mcp/server/#error-handling","title":"Error Handling","text":"<p>The server includes robust error handling for various scenarios:</p> <ul> <li>Invalid decorator names: Returns an error with available decorators.</li> <li>Invalid template names: Returns an error with available templates.</li> <li>Server initialization issues: Logs detailed error information.</li> <li>Runtime errors: Logs exceptions and returns error messages.</li> </ul>"},{"location":"integrations/mcp/server/#implementation-details","title":"Implementation Details","text":""},{"location":"integrations/mcp/server/#server-lifecycle","title":"Server Lifecycle","text":"<p>The server lifecycle is managed by the <code>run_server</code> function, which:</p> <ol> <li>Configures logging based on the verbose flag.</li> <li>Loads all available decorators from the dynamic decorators module.</li> <li>Starts the MCP server using the <code>mcp.run()</code> method.</li> <li>Handles shutdown requests and exceptions.</li> </ol>"},{"location":"integrations/mcp/server/#tool-implementation","title":"Tool Implementation","text":"<p>Each tool is implemented as a Python function decorated with <code>@mcp.tool()</code>. The function signature defines the parameters and return type of the tool.</p>"},{"location":"integrations/mcp/server/#dynamic-decorator-loading","title":"Dynamic Decorator Loading","text":"<p>The server uses the <code>get_available_decorators()</code> function from the dynamic decorators module to load all available decorators at runtime. This ensures that all decorators registered with the system are available to MCP clients.</p>"},{"location":"integrations/mcp/server/#template-management","title":"Template Management","text":"<p>Templates are defined as dictionaries with a description and a list of decorators to apply. Each decorator includes its name and parameters.</p>"},{"location":"integrations/mcp/server/#extending-the-server","title":"Extending the Server","text":"<p>You can extend the server by adding new tools or templates:</p>"},{"location":"integrations/mcp/server/#adding-a-new-tool","title":"Adding a New Tool","text":"<pre><code>@mcp.tool()\ndef my_custom_tool(param1: str, param2: int) -&gt; Dict[str, Any]:\n    \"\"\"\n    Custom tool description.\n\n    Args:\n        param1: Description of param1.\n        param2: Description of param2.\n\n    Returns:\n        A dictionary with the result.\n    \"\"\"\n    # Implementation...\n    return {\"result\": \"...\"}\n</code></pre>"},{"location":"integrations/mcp/server/#adding-a-new-template","title":"Adding a New Template","text":"<pre><code>templates[\"my-template\"] = {\n    \"description\": \"My custom template description\",\n    \"decorators\": [\n        {\"name\": \"Decorator1\", \"parameters\": {\"param1\": \"value1\"}},\n        {\"name\": \"Decorator2\", \"parameters\": {\"param2\": \"value2\"}}\n    ]\n}\n</code></pre>"},{"location":"integrations/mcp/server/#next-steps","title":"Next Steps","text":"<p>To learn more about integrating the MCP server with Claude Desktop, see Claude Desktop Integration.</p>"},{"location":"tutorials/combining_decorators/","title":"Tutorial: Combining Decorators","text":"<p>This tutorial will guide you through the process of combining multiple decorators to create sophisticated prompt transformations. By stacking decorators, you can achieve complex behaviors that would be difficult to implement with a single decorator.</p>"},{"location":"tutorials/combining_decorators/#prerequisites","title":"Prerequisites","text":"<p>Before starting this tutorial, ensure you have:</p> <ol> <li>Installed the Prompt Decorators package (<code>pip install prompt-decorators</code>)</li> <li>Completed the Creating Custom Decorators tutorial</li> <li>Familiarity with the core concepts of the framework</li> </ol>"},{"location":"tutorials/combining_decorators/#why-combine-decorators","title":"Why Combine Decorators?","text":"<p>Combining decorators allows you to:</p> <ul> <li>Apply multiple enhancements to a single prompt</li> <li>Create modular transformations that can be mixed and matched</li> <li>Separate concerns, making each decorator focused on a specific task</li> <li>Build complex behaviors from simple building blocks</li> </ul>"},{"location":"tutorials/combining_decorators/#methods-for-combining-decorators","title":"Methods for Combining Decorators","text":"<p>There are three main ways to combine decorators:</p> <ol> <li>Inline stacking: Using multiple decorator annotations in your prompt text</li> <li>Programmatic chaining: Applying decorators in sequence in your code</li> <li>Composite decorators: Creating new decorators that internally use other decorators</li> </ol> <p>Let's explore each approach.</p>"},{"location":"tutorials/combining_decorators/#1-inline-stacking","title":"1. Inline Stacking","text":"<p>The simplest way to combine decorators is by stacking them in your prompt using the inline syntax:</p> <pre><code>from prompt_decorators import apply_dynamic_decorators\n\n# Create a prompt with multiple stacked decorators\nprompt = \"\"\"\n+++Persona(role=\"data scientist\")\n+++Reasoning(depth=\"comprehensive\")\n+++OutputFormat(format=\"markdown\")\nAnalyze this dataset and identify key trends:\n[dataset description...]\n\"\"\"\n\n# Apply all decorators at once\ntransformed_prompt = apply_dynamic_decorators(prompt)\n</code></pre> <p>When using inline stacking: - Decorators are applied in order, from top to bottom - Each decorator transforms the text that results from previous decorators - Later decorators can modify or override effects of earlier ones</p>"},{"location":"tutorials/combining_decorators/#example-technical-analysis-with-multiple-decorators","title":"Example: Technical Analysis with Multiple Decorators","text":"<p>Here's an example that combines decorators for a technical analysis:</p> <pre><code>from prompt_decorators import apply_dynamic_decorators\nimport openai\n\n# Multi-decorator prompt for technical analysis\nprompt = \"\"\"\n+++Persona(role=\"data scientist\")\n+++Reasoning(depth=\"comprehensive\")\n+++StepByStep(numbered=true)\n+++OutputFormat(format=\"markdown\")\n+++Audience(level=\"technical\")\n\nAnalyze the following dataset of customer churn and identify the key factors that predict churn:\n\nCustomer ID, Age, Tenure (months), Monthly Contract, Services Subscribed, Monthly Charges, Churn\n1, 42, 24, Yes, Internet+Phone, 89.90, No\n2, 27, 3, No, Internet only, 45.50, Yes\n3, 35, 18, Yes, Full package, 120.30, No\n4, 51, 36, Yes, Internet+TV, 95.75, No\n5, 23, 1, No, Phone only, 25.10, Yes\n...\n\"\"\"\n\ntransformed_prompt = apply_dynamic_decorators(prompt)\n\n# Send to an LLM\nopenai.api_key = \"your-api-key-here\"\nresponse = openai.chat.completions.create(\n    model=\"gpt-4o\",\n    messages=[{\"role\": \"user\", \"content\": transformed_prompt}],\n    temperature=0.7\n)\n</code></pre> <p>The resulting transformation applies multiple effects: 1. Adopts the persona of a data scientist 2. Provides comprehensive reasoning 3. Structures the response as numbered steps 4. Formats the output in markdown 5. Targets a technical audience</p>"},{"location":"tutorials/combining_decorators/#2-programmatic-chaining","title":"2. Programmatic Chaining","text":"<p>You can also chain decorators programmatically in your code:</p> <pre><code>from prompt_decorators import create_decorator_instance\n\n# Create individual decorator instances\npersona = create_decorator_instance(\"Persona\", role=\"teacher\")\nstep_by_step = create_decorator_instance(\"StepByStep\", numbered=True)\naudience = create_decorator_instance(\"Audience\", level=\"beginner\")\n\n# Original prompt\noriginal_prompt = \"Explain how photosynthesis works.\"\n\n# Apply decorators in sequence (order matters!)\ntransformed_prompt = persona(step_by_step(audience(original_prompt)))\n\n# The order is: audience -&gt; step_by_step -&gt; persona\n</code></pre> <p>When using programmatic chaining: - You have more control over the order of application - You can conditionally apply decorators based on runtime conditions - You can reuse decorator instances across multiple prompts</p>"},{"location":"tutorials/combining_decorators/#example-conditional-decorator-application","title":"Example: Conditional Decorator Application","text":"<p>Here's an example that applies decorators conditionally:</p> <pre><code>from prompt_decorators import create_decorator_instance\n\ndef generate_educational_content(topic, audience_level, include_steps=True, use_markdown=False):\n    \"\"\"Generate educational content with appropriate decorators.\"\"\"\n    prompt = f\"Explain {topic}.\"\n\n    # Start with audience adaptation\n    audience = create_decorator_instance(\"Audience\", level=audience_level)\n    prompt = audience(prompt)\n\n    # Add steps if requested\n    if include_steps:\n        step_by_step = create_decorator_instance(\"StepByStep\", numbered=True)\n        prompt = step_by_step(prompt)\n\n    # Add markdown formatting if requested\n    if use_markdown:\n        output_format = create_decorator_instance(\"OutputFormat\", format=\"markdown\")\n        prompt = output_format(prompt)\n\n    # Always add a suitable persona for educational content\n    if audience_level in [\"beginner\", \"intermediate\"]:\n        persona = create_decorator_instance(\"Persona\", role=\"teacher\")\n    else:\n        persona = create_decorator_instance(\"Persona\", role=\"professor\")\n\n    prompt = persona(prompt)\n\n    return prompt\n\n# Example usage\nbeginner_content = generate_educational_content(\n    \"photosynthesis\",\n    audience_level=\"beginner\",\n    include_steps=True\n)\n\nexpert_content = generate_educational_content(\n    \"quantum computing\",\n    audience_level=\"expert\",\n    include_steps=False,\n    use_markdown=True\n)\n</code></pre>"},{"location":"tutorials/combining_decorators/#3-composite-decorators","title":"3. Composite Decorators","text":"<p>For reusable combinations of decorators, you can create composite decorators that encapsulate multiple transformations. Here's how to implement one in Python:</p> <pre><code>from prompt_decorators import DecoratorDefinition, register_decorator, create_decorator_instance\n\ndef technical_tutorial_transform(text, format=\"markdown\", examples=True):\n    \"\"\"\n    Transform function for the TechnicalTutorial decorator.\n\n    Args:\n        text (str): The original prompt text\n        format (str): Output format\n        examples (bool): Whether to include examples\n\n    Returns:\n        str: The transformed prompt text\n    \"\"\"\n    # Create instances of the component decorators\n    persona = create_decorator_instance('Persona', role='senior developer')\n    steps = create_decorator_instance('StepByStep', numbered=True)\n    audience = create_decorator_instance('Audience', level='technical')\n    output_format = create_decorator_instance('OutputFormat', format=format)\n\n    # Apply decorators in sequence\n    result = persona(steps(audience(text)))\n    result = output_format(result)\n\n    # Add examples instruction if needed\n    if examples:\n        result = \"Please include practical code examples for each step.\\n\\n\" + result\n\n    return result\n\n# Define the composite decorator\ntechnical_tutorial = DecoratorDefinition(\n    name=\"TechnicalTutorial\",\n    description=\"Creates a technical tutorial with steps, reasoning, and technical details\",\n    category=\"Composite\",\n    parameters=[\n        {\n            \"name\": \"format\",\n            \"type\": \"enum\",\n            \"description\": \"Output format\",\n            \"enum\": [\"markdown\", \"plaintext\"],\n            \"default\": \"markdown\"\n        },\n        {\n            \"name\": \"examples\",\n            \"type\": \"boolean\",\n            \"description\": \"Include examples\",\n            \"default\": True\n        }\n    ],\n    transform_function=technical_tutorial_transform\n)\n\n# Register the composite decorator\nregister_decorator(technical_tutorial)\n\n# Use the composite decorator\ntutorial = create_decorator_instance(\"TechnicalTutorial\", format=\"markdown\", examples=True)\ntransformed = tutorial(\"Explain how to implement a binary search algorithm.\")\n</code></pre> <p>When creating composite decorators: - You encapsulate complexity behind a simpler interface - You ensure consistent application of multiple decorators - You can provide parameters that control the internal decorators</p>"},{"location":"tutorials/combining_decorators/#4-decorator-composition-with-classes","title":"4. Decorator Composition with Classes","text":"<p>If you prefer a more object-oriented approach, you can create a class-based composite decorator:</p> <pre><code>from prompt_decorators import DecoratorBase, register_decorator\n\nclass CompositeTutorialDecorator(DecoratorBase):\n    \"\"\"A class-based composite decorator for generating tutorials.\"\"\"\n\n    def __init__(self, format=\"markdown\", examples=True, audience=\"technical\"):\n        \"\"\"Initialize the composite decorator.\"\"\"\n        super().__init__()\n        self.format = format\n        self.examples = examples\n        self.audience = audience\n\n    def transform(self, text):\n        \"\"\"Apply multiple transformations in sequence.\"\"\"\n        from prompt_decorators import create_decorator_instance\n\n        # Create instances of component decorators\n        persona = create_decorator_instance('Persona', role='senior developer')\n        steps = create_decorator_instance('StepByStep', numbered=True)\n        audience = create_decorator_instance('Audience', level=self.audience)\n        output_format = create_decorator_instance('OutputFormat', format=self.format)\n\n        # Apply the transformations in sequence\n        result = persona(steps(audience(text)))\n        result = output_format(result)\n\n        # Add examples instruction if needed\n        if self.examples:\n            result = \"Please include practical code examples for each step.\\n\\n\" + result\n\n        return result\n\n# Register the composite class decorator\nregister_decorator(CompositeTutorialDecorator,\n                  name=\"ClassTutorial\",\n                  description=\"Class-based tutorial decorator\",\n                  category=\"Composite\")\n</code></pre>"},{"location":"tutorials/combining_decorators/#conclusion","title":"Conclusion","text":"<p>In this tutorial, you've learned how to:</p> <ol> <li>Combine decorators using inline stacking in the prompt</li> <li>Chain decorators programmatically in your code</li> <li>Create composite decorators that encapsulate multiple transformations</li> <li>Implement class-based composite decorators</li> </ol> <p>By combining decorators, you can create powerful, flexible prompt transformations that would be difficult to achieve with a single decorator. This modular approach allows you to build complex behaviors from simple, reusable components.</p>"},{"location":"tutorials/combining_decorators/#next-steps","title":"Next Steps","text":"<ul> <li>Experiment with different combinations of decorators</li> <li>Create domain-specific composite decorators for your use cases</li> <li>Develop an extension with multiple related decorators (see the Extension Development tutorial)</li> <li>Contribute your most useful decorator combinations to the community</li> </ul>"},{"location":"tutorials/creating_custom_decorator/","title":"Tutorial: Creating a Custom Decorator","text":"<p>This tutorial will guide you through the process of creating a custom decorator with the Prompt Decorators framework. We'll create a practical, reusable decorator that you can adapt for your own use cases.</p>"},{"location":"tutorials/creating_custom_decorator/#prerequisites","title":"Prerequisites","text":"<p>Before starting this tutorial, ensure you have:</p> <ol> <li>Installed the Prompt Decorators package (<code>pip install prompt-decorators</code>)</li> <li>Basic understanding of Python</li> <li>Familiarity with the core concepts of the framework</li> </ol>"},{"location":"tutorials/creating_custom_decorator/#what-well-build","title":"What We'll Build","text":"<p>We'll create a <code>CodeReview</code> decorator that transforms a prompt into instructions for conducting a code review of the provided code. This is useful for:</p> <ul> <li>Getting more consistent code reviews from LLMs</li> <li>Focusing the LLM on specific aspects of the code</li> <li>Ensuring best practices are checked</li> </ul>"},{"location":"tutorials/creating_custom_decorator/#step-1-import-the-required-modules","title":"Step 1: Import the Required Modules","text":"<p>First, let's import the necessary components:</p> <pre><code>from prompt_decorators import (\n    DecoratorDefinition,\n    register_decorator,\n    create_decorator_instance,\n    apply_dynamic_decorators\n)\n</code></pre>"},{"location":"tutorials/creating_custom_decorator/#step-2-define-the-decorator","title":"Step 2: Define the Decorator","text":"<p>Now, we'll define our <code>CodeReview</code> decorator:</p> <pre><code>def code_review_transform(text, focus=\"all\", severity=\"all\", suggest_fixes=True):\n    \"\"\"\n    Transform function for the CodeReview decorator.\n\n    Args:\n        text (str): The original prompt text\n        focus (str): What aspects to focus on in the review\n        severity (str): Whether to include only issues of specific severity\n        suggest_fixes (bool): Whether to suggest specific fixes for issues\n\n    Returns:\n        str: The transformed prompt text\n    \"\"\"\n    instruction = \"Please perform a code review on the following code. \"\n\n    # Add focus-specific instructions\n    if focus == \"security\":\n        instruction += \"Focus primarily on security issues such as injection vulnerabilities, \" \\\n            \"authentication problems, data exposure, and other security concerns. \"\n    elif focus == \"performance\":\n        instruction += \"Focus primarily on performance issues such as inefficient algorithms, \" \\\n            \"resource leaks, unnecessary operations, and optimization opportunities. \"\n    elif focus == \"readability\":\n        instruction += \"Focus primarily on code readability including naming conventions, \" \\\n            \"documentation, code organization, and adherence to style guidelines. \"\n    else:\n        instruction += \"Evaluate all aspects including security, performance, readability, \" \\\n            \"maintainability, and adherence to best practices. \"\n\n    # Add severity-specific instructions\n    if severity == \"critical\":\n        instruction += \"Only highlight critical issues that could lead to serious vulnerabilities or failures. \"\n    elif severity == \"major\":\n        instruction += \"Focus on major and critical issues, ignoring minor stylistic concerns. \"\n    else:\n        instruction += \"Include issues of all severity levels, from critical to minor. \"\n\n    # Add fix suggestion instructions\n    if suggest_fixes:\n        instruction += \"For each issue identified, suggest a specific fix with example code. \"\n    else:\n        instruction += \"Identify issues without providing specific fix implementations. \"\n\n    # Formatting instructions\n    instruction += \"Format your review as follows:\\n\" \\\n        \"1. Summary of findings\\n\" \\\n        \"2. Issues (grouped by type/severity)\\n\" \\\n        \"3. Recommendations\\n\\n\"\n\n    # Append the original prompt\n    return instruction + text\n\ncode_review_decorator = DecoratorDefinition(\n    name=\"CodeReview\",\n    description=\"Transforms a prompt into instructions for conducting a code review\",\n    category=\"Development\",\n    parameters=[\n        {\n            \"name\": \"focus\",\n            \"type\": \"enum\",\n            \"description\": \"What aspects to focus on in the review\",\n            \"enum\": [\"security\", \"performance\", \"readability\", \"all\"],\n            \"default\": \"all\"\n        },\n        {\n            \"name\": \"severity\",\n            \"type\": \"enum\",\n            \"description\": \"Whether to include only issues of specific severity\",\n            \"enum\": [\"critical\", \"major\", \"all\"],\n            \"default\": \"all\"\n        },\n        {\n            \"name\": \"suggest_fixes\",\n            \"type\": \"boolean\",\n            \"description\": \"Whether to suggest specific fixes for issues\",\n            \"default\": True\n        }\n    ],\n    transform_function=code_review_transform\n)\n\n# Register the custom decorator\nregister_decorator(code_review_decorator)\n</code></pre>"},{"location":"tutorials/creating_custom_decorator/#step-3-use-the-decorator","title":"Step 3: Use the Decorator","text":"<p>Now that we've defined and registered our decorator, let's use it:</p> <pre><code># Method 1: Using create_decorator_instance\ncode_review = create_decorator_instance(\n    \"CodeReview\",\n    focus=\"security\",\n    severity=\"critical\",\n    suggest_fixes=True\n)\n\ncode_to_review = \"\"\"\ndef validate_user(username, password):\n    \"\"\"Validate a user's credentials.\"\"\"\n    if username == 'admin' and password == 'password123':\n        return True\n    return False\n\"\"\"\n\ntransformed_prompt = code_review(code_to_review)\nprint(transformed_prompt)\n\n# Method 2: Using inline syntax with apply_dynamic_decorators\nprompt_with_inline = f\"\"\"\n+++CodeReview(focus=\"security\", severity=\"critical\", suggest_fixes=true)\n{code_to_review}\n\"\"\"\n\ntransformed_prompt_inline = apply_dynamic_decorators(prompt_with_inline)\nprint(transformed_prompt_inline)\n</code></pre>"},{"location":"tutorials/creating_custom_decorator/#step-4-test-with-an-llm","title":"Step 4: Test with an LLM","text":"<p>Finally, let's test our decorator with an LLM:</p> <pre><code>import openai\n\nopenai.api_key = \"your-api-key-here\"\n\nresponse = openai.chat.completions.create(\n    model=\"gpt-4o\",\n    messages=[\n        {\"role\": \"user\", \"content\": transformed_prompt}\n    ],\n    temperature=0.7,\n    max_tokens=1000\n)\n\nprint(response.choices[0].message.content)\n</code></pre>"},{"location":"tutorials/creating_custom_decorator/#alternative-using-class-based-decorators","title":"Alternative: Using Class-Based Decorators","text":"<p>For more complex decorators, you might prefer to use a class-based approach:</p> <pre><code>from prompt_decorators import DecoratorBase\n\nclass CodeReviewDecorator(DecoratorBase):\n    \"\"\"A decorator for conducting code reviews.\"\"\"\n\n    def __init__(self, focus=\"all\", severity=\"all\", suggest_fixes=True):\n        \"\"\"\n        Initialize the CodeReview decorator.\n\n        Args:\n            focus (str): What aspects to focus on in the review\n            severity (str): Whether to include only issues of specific severity\n            suggest_fixes (bool): Whether to suggest specific fixes for issues\n        \"\"\"\n        super().__init__()  # Initialize the base class\n        self.focus = focus\n        self.severity = severity\n        self.suggest_fixes = suggest_fixes\n\n    def transform(self, text):\n        \"\"\"Transform the input text into a code review prompt.\"\"\"\n        instruction = \"Please perform a code review on the following code. \"\n\n        # Add focus-specific instructions\n        if self.focus == \"security\":\n            instruction += \"Focus primarily on security issues. \"\n        elif self.focus == \"performance\":\n            instruction += \"Focus primarily on performance issues. \"\n        # ... other focus options ...\n\n        # Add the rest of the instruction logic\n\n        return instruction + text\n\n# Register the class-based decorator\nfrom prompt_decorators import register_decorator\n\n# Note: There's no separate register_decorator_class function,\n# use the regular register_decorator function\nregister_decorator(CodeReviewDecorator,\n                  name=\"ClassBasedCodeReview\",\n                  description=\"Class-based code review decorator\",\n                  category=\"Development\")\n</code></pre>"},{"location":"tutorials/creating_custom_decorator/#conclusion","title":"Conclusion","text":"<p>In this tutorial, you've learned how to:</p> <ol> <li>Define a custom decorator with parameters</li> <li>Implement a transform function in Python</li> <li>Register the decorator with the framework</li> <li>Use the decorator both programmatically and with inline syntax</li> <li>Create class-based decorators for more complex scenarios</li> </ol> <p>Your <code>CodeReview</code> decorator can now be used consistently across your applications to get better code reviews from LLMs. You can extend this pattern to create other specialized decorators for your specific needs.</p>"},{"location":"tutorials/creating_custom_decorator/#next-steps","title":"Next Steps","text":"<ul> <li>Try creating decorators for other development tasks (e.g., documentation generation, unit test creation)</li> <li>Explore combining multiple decorators for more complex scenarios</li> <li>Consider developing decorator extensions for specific domains</li> </ul>"},{"location":"tutorials/extension_development/","title":"Tutorial: Extension Development","text":"<p>This tutorial will guide you through the process of developing extensions for the Prompt Decorators framework, specifically focusing on creating packages of domain-specific decorators. By the end, you'll know how to design, implement, and distribute your own decorator packages.</p>"},{"location":"tutorials/extension_development/#prerequisites","title":"Prerequisites","text":"<p>Before starting this tutorial, ensure you have:</p> <ol> <li>Installed the Prompt Decorators package (<code>pip install prompt-decorators</code>)</li> <li>Completed the Creating Custom Decorators tutorial</li> <li>Completed the Combining Decorators tutorial</li> <li>Basic understanding of Python package development</li> </ol>"},{"location":"tutorials/extension_development/#what-are-decorator-extensions","title":"What are Decorator Extensions?","text":"<p>Decorator extensions are collections of related decorators packaged together for a specific domain or purpose. They extend the functionality of the core framework by providing specialized decorators for particular use cases. Examples include:</p> <ul> <li>Data Science: Decorators for data analysis, visualization, and machine learning tasks</li> <li>Medical: Decorators for clinical reports, medical terminology, and research</li> <li>Legal: Decorators for legal document drafting, case analysis, and contract review</li> <li>Education: Decorators for lesson planning, educational content, and assessments</li> </ul>"},{"location":"tutorials/extension_development/#why-create-extensions","title":"Why Create Extensions?","text":"<p>Creating decorator extensions offers several benefits:</p> <ul> <li>Reusability: Package common decorators for easy reuse</li> <li>Domain Specialization: Create decorators tailored to specific fields</li> <li>Distribution: Share your decorators with the community</li> <li>Standardization: Establish consistent prompt engineering practices</li> <li>Compatibility: Ensure decorators work well together</li> </ul>"},{"location":"tutorials/extension_development/#extension-development-workflow","title":"Extension Development Workflow","text":"<p>The general workflow for developing a decorator extension is:</p> <ol> <li>Plan: Define the scope and purpose of your extension</li> <li>Design: Design the individual decorators and their interactions</li> <li>Implement: Create and test the decorators</li> <li>Package: Structure your code as a Python package</li> <li>Document: Create comprehensive documentation</li> <li>Distribute: Publish your extension</li> </ol> <p>Let's walk through each step with a concrete example.</p>"},{"location":"tutorials/extension_development/#example-developing-a-data-science-extension","title":"Example: Developing a Data Science Extension","text":"<p>For this tutorial, we'll create a \"Data Science Decorator Extension\" that includes specialized decorators for data analysis tasks.</p>"},{"location":"tutorials/extension_development/#step-1-planning-your-extension","title":"Step 1: Planning Your Extension","text":"<p>First, define the scope and purpose:</p> <ul> <li>Name: <code>prompt-decorators-datascience</code></li> <li>Purpose: Enhance LLM prompts for data science workflows</li> <li>Target Users: Data scientists, analysts, and ML engineers</li> <li>Core Functionality: Data analysis, visualization, model training, and interpretation</li> </ul> <p>Next, outline the decorators you want to include:</p> <ol> <li><code>DataAnalysis</code>: For exploratory data analysis</li> <li><code>DataVisualization</code>: For creating visualization specifications</li> <li><code>ModelEvaluation</code>: For evaluating ML model performance</li> <li><code>StatisticalSummary</code>: For statistical analysis of data</li> <li><code>DataCleaning</code>: For data preprocessing suggestions</li> </ol>"},{"location":"tutorials/extension_development/#step-2-setting-up-your-project","title":"Step 2: Setting Up Your Project","text":"<p>Create a project directory structure:</p> <pre><code>mkdir prompt-decorators-datascience\ncd prompt-decorators-datascience\n\n# Create basic package structure\nmkdir -p prompt_decorators_datascience/decorators\ntouch prompt_decorators_datascience/__init__.py\ntouch prompt_decorators_datascience/decorators/__init__.py\ntouch setup.py\ntouch README.md\ntouch LICENSE\n</code></pre> <p>Set up your <code>setup.py</code>:</p> <pre><code>from setuptools import setup, find_packages\n\nsetup(\n    name=\"prompt-decorators-datascience\",\n    version=\"0.1.0\",\n    description=\"Data Science decorators for the Prompt Decorators framework\",\n    author=\"Your Name\",\n    author_email=\"your.email@example.com\",\n    packages=find_packages(),\n    install_requires=[\n        \"prompt-decorators&gt;=0.3.0\",\n    ],\n    classifiers=[\n        \"Development Status :: 3 - Alpha\",\n        \"Programming Language :: Python :: 3\",\n        \"Programming Language :: Python :: 3.11\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Topic :: Scientific/Engineering :: Artificial Intelligence\",\n    ],\n    python_requires=\"&gt;=3.11\",\n)\n</code></pre> <p>Create a basic README.md:</p> <pre><code>    # Prompt Decorators: Data Science Extension\n\n    This package extends the [Prompt Decorators](https://github.com/synaptiai/prompt-decorators) framework with decorators specifically designed for data science workflows.\n\n    ## Installation\n\n    ```bash\n    pip install prompt-decorators-datascience\n    ```\n\n    ## Features\n\n    - Data analysis decorators\n    - Visualization specification decorators\n    - Model evaluation decorators\n    - Statistical summary decorators\n    - Data cleaning decorators\n\n    ## Usage\n\n    ```python\n    from prompt_decorators import apply_dynamic_decorators\n    from prompt_decorators_datascience import register_datascience_decorators\n\n    # Register the data science decorators\n    register_datascience_decorators()\n\n    # Use the decorators in your prompts\n    prompt = \"\"\"\n    +++DataAnalysis(depth=\"exploratory\", focus=\"correlations\")\n    Please analyze this dataset:\n\n    [dataset content...]\n    \"\"\"\n\n    transformed_prompt = apply_dynamic_decorators(prompt)\n    ```\n\n    ## Documentation\n\n    For full documentation, visit [documentation link].\n</code></pre>"},{"location":"tutorials/extension_development/#step-3-implementing-your-decorators","title":"Step 3: Implementing Your Decorators","text":"<p>Now, let's implement the decorators for our extension. We'll start with the <code>DataAnalysis</code> decorator:</p> <pre><code># prompt_decorators_datascience/decorators/data_analysis.py\n\nfrom prompt_decorators import DecoratorDefinition, register_decorator\n\ndef data_analysis_transform(text, focus=\"general\", visualize=True, statistical=True):\n    \"\"\"\n    Transform function for the DataAnalysis decorator.\n\n    Args:\n        text (str): The original prompt text\n        focus (str): The focus area of the analysis\n        visualize (bool): Whether to include visualization suggestions\n        statistical (bool): Whether to include statistical analysis\n\n    Returns:\n        str: The transformed prompt text\n    \"\"\"\n    instruction = \"Perform exploratory data analysis on the following data. \"\n\n    # Add focus-specific instructions\n    if focus == \"outliers\":\n        instruction += \"Focus on identifying and analyzing outliers in the data. \"\n    elif focus == \"patterns\":\n        instruction += \"Focus on identifying patterns, trends, and relationships in the data. \"\n    elif focus == \"distributions\":\n        instruction += \"Focus on analyzing the distributions of variables in the data. \"\n    else:\n        instruction += \"Provide a general exploratory analysis of the data. \"\n\n    # Add visualization instructions\n    if visualize:\n        instruction += \"Include suggestions for appropriate visualizations to illustrate key findings. \"\n\n    # Add statistical instructions\n    if statistical:\n        instruction += \"Include relevant statistical measures and tests to support your analysis. \"\n\n    # Add structure instructions\n    instruction += \"Structure your analysis as follows:\\n\" \\\n                 \"1. Data overview\\n\" \\\n                 \"2. Key variables and their characteristics\\n\" \\\n                 \"3. Relationships between variables\\n\" \\\n                 \"4. Notable patterns or anomalies\\n\" \\\n                 \"5. Recommendations for further analysis\\n\\n\"\n\n    # Return the transformed text\n    return instruction + text\n\n# Create the decorator definition\ndata_analysis_decorator = DecoratorDefinition(\n    name=\"DataAnalysis\",\n    description=\"Transforms a prompt into instructions for exploratory data analysis\",\n    category=\"DataScience\",\n    parameters=[\n        {\n            \"name\": \"focus\",\n            \"type\": \"enum\",\n            \"description\": \"The focus area of the analysis\",\n            \"enum_values\": [\"general\", \"outliers\", \"patterns\", \"distributions\"],\n            \"default\": \"general\"\n        },\n        {\n            \"name\": \"visualize\",\n            \"type\": \"boolean\",\n            \"description\": \"Whether to include visualization suggestions\",\n            \"default\": True\n        },\n        {\n            \"name\": \"statistical\",\n            \"type\": \"boolean\",\n            \"description\": \"Whether to include statistical analysis\",\n            \"default\": True\n        }\n    ],\n    transform_function=data_analysis_transform\n)\n\n# Export the decorator\ndef register_decorators():\n    \"\"\"Register all decorators in this module.\"\"\"\n    register_decorator(data_analysis_decorator)\n</code></pre>"},{"location":"tutorials/extension_development/#step-4-implementing-individual-decorators","title":"Step 4: Implementing Individual Decorators","text":"<p>Let's implement one of the decorators as an example:</p> <pre><code># prompt_decorators_datascience/decorators/data_analysis.py\n\"\"\"Data analysis decorator implementation.\"\"\"\n\nfrom prompt_decorators import DecoratorDefinition\n\ndef data_analysis_transform(text, depth=\"exploratory\", focus=\"all\", visualize=True, summary=True):\n    \"\"\"\n    Transform function for the DataAnalysis decorator.\n\n    Args:\n        text (str): The input text containing the data to analyze\n        depth (str): How deep the analysis should be\n        focus (str): What aspects of the data to focus on\n        visualize (bool): Whether to suggest visualizations\n        summary (bool): Whether to include a summary\n\n    Returns:\n        str: The transformed prompt with data analysis instructions\n    \"\"\"\n    instruction = \"Please perform a data analysis on the provided dataset. \"\n\n    # Add depth-specific instructions\n    if depth == \"exploratory\":\n        instruction += \"Conduct an exploratory data analysis to understand the basic properties of the data. \"\n    elif depth == \"descriptive\":\n        instruction += \"Provide a descriptive analysis with summary statistics and distributions. \"\n    elif depth == \"inferential\":\n        instruction += \"Perform an inferential analysis to test hypotheses and make predictions. \"\n    elif depth == \"comprehensive\":\n        instruction += \"Conduct a comprehensive analysis covering exploratory, descriptive, and inferential statistics. \"\n\n    # Add focus-specific instructions\n    if focus == \"correlations\":\n        instruction += \"Focus on identifying correlations between variables. \"\n    elif focus == \"outliers\":\n        instruction += \"Pay special attention to outliers and anomalies in the data. \"\n    elif focus == \"trends\":\n        instruction += \"Emphasize temporal trends and patterns in the data. \"\n    elif focus != \"all\":\n        instruction += f\"Focus particularly on {focus} in your analysis. \"\n\n    # Add visualization instructions\n    if visualize:\n        instruction += (\"Include recommendations for appropriate data visualizations \"\n                        \"that would help understand the data better. \")\n\n    # Add summary instructions\n    if summary:\n        instruction += (\"Provide a clear summary of your findings at the beginning \"\n                        \"of your response. \")\n\n    # Structure the response\n    instruction += \"\"\"\nStructure your analysis as follows:\n1. Summary of Findings\n2. Data Overview (dimensions, types, missing values)\n3. Descriptive Statistics\n4. Key Insights\n5. Recommendations for Further Analysis\n\"\"\"\n\n    # Combine with the original prompt\n    return instruction + \"\\n\\n\" + text\n\n# Create the decorator definition\ndata_analysis_decorator = DecoratorDefinition(\n    name=\"DataAnalysis\",\n    description=\"Transforms a prompt into instructions for analyzing data\",\n    category=\"Data Science\",\n    parameters=[\n        {\n            \"name\": \"depth\",\n            \"type\": \"enum\",\n            \"description\": \"How deep the analysis should be\",\n            \"enum\": [\"exploratory\", \"descriptive\", \"inferential\", \"comprehensive\"],\n            \"default\": \"exploratory\"\n        },\n        {\n            \"name\": \"focus\",\n            \"type\": \"string\",\n            \"description\": \"What aspects of the data to focus on\",\n            \"default\": \"all\"\n        },\n        {\n            \"name\": \"visualize\",\n            \"type\": \"boolean\",\n            \"description\": \"Whether to suggest visualizations\",\n            \"default\": True\n        },\n        {\n            \"name\": \"summary\",\n            \"type\": \"boolean\",\n            \"description\": \"Whether to include a summary\",\n            \"default\": True\n        }\n    ],\n    transform_function=data_analysis_transform\n)\n</code></pre> <p>Similarly, implement the other decorators in their respective files.</p>"},{"location":"tutorials/extension_development/#step-5-creating-tests","title":"Step 5: Creating Tests","text":"<p>Create a tests directory and add tests for your decorators:</p> <pre><code># tests/test_data_analysis.py\nimport unittest\nfrom prompt_decorators import apply_dynamic_decorators, register_decorator\nfrom prompt_decorators_datascience.decorators.data_analysis import data_analysis_decorator\n\nclass TestDataAnalysisDecorator(unittest.TestCase):\n\n    def setUp(self):\n        # Register the decorator for testing\n        register_decorator(data_analysis_decorator)\n\n    def test_basic_transformation(self):\n        prompt = \"\"\"\n+++DataAnalysis(depth=\"exploratory\", focus=\"correlations\")\nAnalyze this dataset:\nID, Age, Income, Education\n1, 25, 50000, Bachelor's\n2, 40, 75000, Master's\n3, 30, 60000, Bachelor's\n\"\"\"\n        transformed = apply_dynamic_decorators(prompt)\n\n        # Check that the transformation includes expected elements\n        self.assertIn(\"exploratory data analysis\", transformed)\n        self.assertIn(\"identifying correlations\", transformed)\n        self.assertIn(\"Structure your analysis\", transformed)\n        self.assertIn(\"Analyze this dataset:\", transformed)\n\n    def test_different_parameters(self):\n        prompt = \"\"\"\n+++DataAnalysis(depth=\"comprehensive\", focus=\"outliers\", visualize=false)\nAnalyze this dataset:\n[data here]\n\"\"\"\n        transformed = apply_dynamic_decorators(prompt)\n\n        # Check parameter-specific instructions\n        self.assertIn(\"comprehensive analysis\", transformed)\n        self.assertIn(\"outliers and anomalies\", transformed)\n        self.assertNotIn(\"recommendations for appropriate data visualizations\", transformed)\n\nif __name__ == \"__main__\":\n    unittest.main()\n</code></pre>"},{"location":"tutorials/extension_development/#step-6-documentation","title":"Step 6: Documentation","text":"<p>Create detailed documentation for your extension. For example, create a <code>docs</code> directory with specific documentation for each decorator:</p> <pre><code>    # DataAnalysis Decorator\n\n    The `DataAnalysis` decorator transforms a prompt into instructions for analyzing data. It guides the LLM to perform various types of data analysis depending on the parameters.\n\n    ## Parameters\n\n    - **depth** (enum): How deep the analysis should be\n    - `exploratory`: Basic exploration of the data properties\n    - `descriptive`: Summary statistics and distributions\n    - `inferential`: Hypothesis testing and predictions\n    - `comprehensive`: Complete analysis covering all aspects\n    - Default: `exploratory`\n\n    - **focus** (string): What aspects of the data to focus on\n    - Examples: `correlations`, `outliers`, `trends`, `distributions`, or any custom focus\n    - Default: `all`\n\n    - **visualize** (boolean): Whether to suggest visualizations\n    - Default: `true`\n\n    - **summary** (boolean): Whether to include a summary\n    - Default: `true`\n\n    ## Examples\n\n    ### Basic Usage\n\n    ```python\n    from prompt_decorators import apply_dynamic_decorators\n    from prompt_decorators_datascience import register_datascience_decorators\n\n    # Register the decorators\n    register_datascience_decorators()\n\n    prompt = \"\"\"\n    +++DataAnalysis(depth=\"exploratory\", focus=\"correlations\")\n    Analyze this dataset:\n\n    User ID, Age, Purchase Amount, Frequency\n    1, 25, 120.50, 3\n    2, 34, 75.20, 5\n    3, 19, 30.00, 1\n    4, 45, 200.75, 8\n    \"\"\"\n\n    transformed_prompt = apply_dynamic_decorators(prompt)\n    ```\n\n    ### Comprehensive Analysis\n\n    ```python\n    prompt = \"\"\"\n    +++DataAnalysis(depth=\"comprehensive\", focus=\"customer segments\", visualize=true)\n    Please analyze this customer data and identify key patterns:\n\n    [dataset content...]\n    \"\"\"\n    ```\n</code></pre>"},{"location":"tutorials/extension_development/#step-7-publishing-your-extension","title":"Step 7: Publishing Your Extension","text":"<p>Once you've implemented and tested your extension, you can publish it to PyPI:</p> <pre><code># Install build tools\npip install build twine\n\n# Build the distribution\npython -m build\n\n# Upload to PyPI\ntwine upload dist/*\n</code></pre>"},{"location":"tutorials/extension_development/#alternative-class-based-implementation","title":"Alternative: Class-Based Implementation","text":"<p>If you prefer a class-based approach for more complex decorators, you can use the <code>DecoratorBase</code> class:</p> <pre><code># prompt_decorators_datascience/decorators/model_evaluation.py\n\nfrom prompt_decorators import DecoratorBase, register_decorator\n\nclass ModelEvaluationDecorator(DecoratorBase):\n    \"\"\"Class-based decorator for ML model evaluation.\"\"\"\n\n    def __init__(self, model_type=\"classifier\", metrics=None, error_analysis=True):\n        \"\"\"\n        Initialize the ModelEvaluation decorator.\n\n        Args:\n            model_type (str): Type of model to evaluate\n            metrics (list): List of metrics to include\n            error_analysis (bool): Whether to include error analysis\n        \"\"\"\n        super().__init__()  # Initialize the base class\n        self.model_type = model_type\n        self.metrics = metrics or self._default_metrics()\n        self.error_analysis = error_analysis\n\n    def _default_metrics(self):\n        \"\"\"Get default metrics based on model type.\"\"\"\n        if self.model_type == \"classifier\":\n            return [\"accuracy\", \"precision\", \"recall\", \"f1\"]\n        elif self.model_type == \"regressor\":\n            return [\"rmse\", \"mae\", \"r2\"]\n        elif self.model_type == \"cluster\":\n            return [\"silhouette\", \"inertia\", \"davies_bouldin\"]\n        else:\n            return [\"custom\"]\n\n    def transform(self, text):\n        \"\"\"Transform the input text to focus on model evaluation.\"\"\"\n        instruction = f\"Evaluate the {self.model_type} model based on the following data. \"\n\n        # Add metrics instructions\n        instruction += f\"Include the following evaluation metrics: {', '.join(self.metrics)}. \"\n\n        # Add error analysis instructions\n        if self.error_analysis:\n            instruction += \"Perform error analysis to identify patterns in misclassifications or prediction errors. \"\n\n        # Add structure instructions\n        instruction += \"Structure your evaluation as follows:\\n\" \\\n                    \"1. Model performance summary\\n\" \\\n                    \"2. Detailed metrics analysis\\n\" \\\n                    \"3. Strengths and weaknesses\\n\" \\\n                    \"4. Recommendations for improvement\\n\\n\"\n\n        return instruction + text\n\n# Register the class-based decorator\ndef register_class_decorators():\n    \"\"\"Register all class-based decorators.\"\"\"\n    register_decorator(ModelEvaluationDecorator,\n                      name=\"ModelEvaluation\",\n                      description=\"Decorator for ML model evaluation\",\n                      category=\"DataScience\")\n</code></pre>"},{"location":"tutorials/extension_development/#creating-a-decorator-registry","title":"Creating a Decorator Registry","text":"<p>For more advanced extensions, you might want to create a registry file that defines all your decorators in a structured format using the defined registry decorator schema:</p> <pre><code># prompt_decorators_datascience/registry.py\n\"\"\"Registry of all data science decorators.\"\"\"\n\nDATASCIENCE_DECORATORS = [\n    {\n        \"name\": \"DataAnalysis\",\n        \"description\": \"Transforms a prompt into instructions for analyzing data\",\n        \"category\": \"Data Science\",\n        \"parameters\": [\n            {\n                \"name\": \"depth\",\n                \"type\": \"enum\",\n                \"description\": \"How deep the analysis should be\",\n                \"enum\": [\"exploratory\", \"descriptive\", \"inferential\", \"comprehensive\"],\n                \"default\": \"exploratory\"\n            },\n            # Other parameters...\n        ],\n        \"transform_module\": \"prompt_decorators_datascience.decorators.data_analysis\",\n        \"transform_function\": \"data_analysis_transform\"\n    },\n    # Other decorator definitions...\n]\n\ndef load_from_registry():\n    \"\"\"\n    Load all decorators from the registry and return decorator definitions.\n\n    This allows for more dynamic loading of decorators.\n    \"\"\"\n    from prompt_decorators import DecoratorDefinition\n    import importlib\n\n    decorator_definitions = []\n\n    for decorator_info in DATASCIENCE_DECORATORS:\n        # Dynamically import the transform function\n        module = importlib.import_module(decorator_info[\"transform_module\"])\n        transform_function = getattr(module, decorator_info[\"transform_function\"])\n\n        # Create the decorator definition\n        decorator_def = DecoratorDefinition(\n            name=decorator_info[\"name\"],\n            description=decorator_info[\"description\"],\n            category=decorator_info[\"category\"],\n            parameters=decorator_info[\"parameters\"],\n            transform_function=transform_function\n        )\n\n        decorator_definitions.append(decorator_def)\n\n    return decorator_definitions\n</code></pre>"},{"location":"tutorials/extension_development/#conclusion","title":"Conclusion","text":"<p>In this tutorial, you've learned how to:</p> <ol> <li>Plan and design a decorator extension</li> <li>Set up a Python package for your extension</li> <li>Implement decorator functionality</li> <li>Create tests for your decorators</li> <li>Document your extension</li> <li>Prepare for publishing to PyPI</li> </ol> <p>By following these steps, you can create specialized decorator extensions that enhance the Prompt Decorators framework for specific domains or use cases. This allows you to build reusable libraries of prompt engineering patterns that can be shared with others in your field.</p>"},{"location":"tutorials/extension_development/#next-steps","title":"Next Steps","text":"<ul> <li>Implement a full set of decorators for your domain</li> <li>Create examples demonstrating your decorators in real-world scenarios</li> <li>Explore integrations with domain-specific libraries and frameworks</li> <li>Contribute your extension to the community</li> <li>Consider creating a web interface for your decorators</li> </ul>"}]}