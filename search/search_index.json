{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Prompt Decorators","text":"<p>Welcome to the Prompt Decorators documentation! This framework provides a structured way to enhance prompts for Large Language Models (LLMs) through the application of modular, reusable \"decorators.\"</p>"},{"location":"#what-is-prompt-decorators","title":"What is Prompt Decorators?","text":"<p>Prompt Decorators is a Python framework that allows you to apply various \"decorators\" to your prompts, each adding specific functionality or behavior. This approach makes prompt engineering more modular, reusable, and maintainable.</p> <p>Key features include:</p> <ul> <li>Modular Prompt Engineering: Apply specific prompt techniques independently</li> <li>Decorator Registry: Discover and use decorators dynamically</li> <li>Compatibility Checking: Ensure decorators work well together</li> <li>Serialization: Store and retrieve decorated prompts</li> <li>API Integration: Work with multiple LLM providers</li> <li>CLI Tools: Apply decorators from the command line</li> </ul>"},{"location":"#quick-start","title":"Quick Start","text":""},{"location":"#installation","title":"Installation","text":"<pre><code>pip install prompt-decorators\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<pre><code>from prompt_decorators.decorators import Reasoning, OutputFormat\n\n# Create decorators\nreasoning = Reasoning(style=\"detailed\", show_working=True)\noutput_format = OutputFormat(format_type=\"markdown\", pretty_print=True)\n\n# Apply decorators to a prompt\nprompt = \"Explain quantum entanglement.\"\ndecorated_prompt = output_format.apply(reasoning.apply(prompt))\n\n# Use the decorated prompt with your favorite LLM API\n# ...\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":""},{"location":"#guides","title":"Guides","text":"<ul> <li>Installation - How to install the framework</li> <li>Quickstart - Get up and running quickly</li> <li>Basic Usage - Learn the basics of using decorators</li> <li>Advanced Usage - Explore advanced features</li> <li>API Integration - Integrate with LLM APIs</li> <li>CLI Usage - Use the command-line interface</li> <li>Troubleshooting - Solve common issues</li> </ul>"},{"location":"#api-reference","title":"API Reference","text":"<ul> <li>API Overview - Overview of the API</li> <li>Core - Core classes and functions</li> <li>Decorators - Built-in decorators</li> <li>Utilities - Utility functions</li> <li>Generator - Code generation tools</li> </ul>"},{"location":"#examples","title":"Examples","text":"<ul> <li>Basic Examples - Simple usage examples</li> <li>Advanced Examples - Complex usage patterns</li> <li>Provider Examples - Examples with different LLM providers</li> </ul>"},{"location":"#project-information","title":"Project Information","text":"<ul> <li>Contributing - How to contribute to the project</li> <li>Development - Setting up the development environment</li> <li>Project Summaries - Documentation of modernization and standardization efforts</li> <li>FAQ - Frequently asked questions</li> <li>Glossary - Definitions of key terms</li> <li>Roadmap - Future development plans</li> </ul>"},{"location":"#why-use-prompt-decorators","title":"Why Use Prompt Decorators?","text":""},{"location":"#modularity","title":"Modularity","text":"<p>Each decorator focuses on a specific prompt engineering technique, allowing you to mix and match them as needed.</p>"},{"location":"#reusability","title":"Reusability","text":"<p>Create a library of prompt techniques that can be reused across different projects and applications.</p>"},{"location":"#standardization","title":"Standardization","text":"<p>Establish consistent prompt patterns across your organization or project.</p>"},{"location":"#experimentation","title":"Experimentation","text":"<p>Easily test different prompt engineering approaches by swapping decorators.</p>"},{"location":"#compatibility","title":"Compatibility","text":"<p>Work with multiple LLM providers using the same decorator patterns.</p>"},{"location":"#getting-help","title":"Getting Help","text":"<p>If you need help with Prompt Decorators, you can:</p> <ul> <li>Check the FAQ for answers to common questions</li> <li>Read the Troubleshooting guide</li> <li>Open an issue on our GitHub repository</li> <li>Join our community discussions</li> </ul>"},{"location":"#license","title":"License","text":"<p>Prompt Decorators is released under the MIT License. See the LICENSE file for details.</p>"},{"location":"DECORATOR_REGISTRY/","title":"Decorator Registry","text":""},{"location":"DECORATOR_REGISTRY/#overview","title":"Overview","text":"<p>The Decorator Registry is a central component of the Prompt Decorators package that enables runtime discovery and management of decorators. It provides a mechanism to register, discover, and use decorators dynamically, making it easier to extend the system with new decorators and to find decorators by name, category, or other criteria.</p>"},{"location":"DECORATOR_REGISTRY/#features","title":"Features","text":"<ul> <li>Dynamic Registration: Register decorators at runtime from code or JSON definitions</li> <li>Decorator Discovery: Find decorators by name, category, or other criteria</li> <li>Version Management: Support for multiple versions of the same decorator</li> <li>Compatibility Checking: Verify compatibility between decorators</li> <li>Category Organization: Group decorators by category for easier discovery</li> </ul>"},{"location":"DECORATOR_REGISTRY/#implementation","title":"Implementation","text":"<p>The Decorator Registry is implemented in the <code>prompt_decorators.utils.discovery</code> module. The main class is <code>DecoratorRegistry</code>, which provides methods for registering and discovering decorators.</p>"},{"location":"DECORATOR_REGISTRY/#key-components","title":"Key Components","text":"<ol> <li>DecoratorRegistry: The main class that manages the registry of decorators</li> <li>register_decorator: Method to register a decorator class or instance</li> <li>get_decorator: Method to retrieve a decorator by name</li> <li>get_all_decorators: Method to retrieve all registered decorators</li> <li>find_decorators_by_category: Method to find decorators by category</li> </ol>"},{"location":"DECORATOR_REGISTRY/#usage","title":"Usage","text":""},{"location":"DECORATOR_REGISTRY/#registering-decorators","title":"Registering Decorators","text":"<p>Decorators can be registered in several ways:</p> <ol> <li>Registering a Decorator Class:</li> </ol> <pre><code>from prompt_decorators.utils.discovery import DecoratorRegistry\nfrom prompt_decorators.decorators.generated.decorators.concise import Concise\n\n# Get the registry instance\nregistry = DecoratorRegistry()\n\n# Register a decorator class\nregistry.register_decorator(Concise)\n</code></pre> <ol> <li>Registering a Decorator Instance:</li> </ol> <pre><code>from prompt_decorators.utils.discovery import DecoratorRegistry\nfrom prompt_decorators.decorators.generated.decorators.concise import Concise\n\n# Get the registry instance\nregistry = DecoratorRegistry()\n\n# Create a decorator instance\nconcise = Concise(maxWords=100, bulletPoints=True, level=2)\n\n# Register the decorator instance\nregistry.register_decorator(concise)\n</code></pre> <ol> <li>Registering All Decorators from a Directory:</li> </ol> <pre><code>import os\nimport importlib\nimport inspect\nfrom pathlib import Path\nfrom prompt_decorators.utils.discovery import DecoratorRegistry\nfrom prompt_decorators.core.base import BaseDecorator\n\ndef register_decorators():\n    registry = DecoratorRegistry()\n    registry.clear()\n\n    # Path to the generated decorators directory\n    decorators_dir = Path(\"prompt_decorators/decorators/generated/decorators\")\n\n    # Iterate through all Python files in the directory\n    for file_path in decorators_dir.glob(\"*.py\"):\n        if file_path.name == \"__init__.py\":\n            continue\n\n        # Import the module\n        module_name = f\"prompt_decorators.decorators.generated.decorators.{file_path.stem}\"\n        try:\n            module = importlib.import_module(module_name)\n\n            # Find all classes in the module that are subclasses of BaseDecorator\n            for name, obj in inspect.getmembers(module):\n                if inspect.isclass(obj) and issubclass(obj, BaseDecorator) and obj != BaseDecorator:\n                    # Register the decorator\n                    decorator_name = getattr(obj, \"name\", name)\n                    registry.register_decorator(obj)\n                    print(f\"  - Registered: {decorator_name}\")\n        except Exception as e:\n            print(f\"Error registering decorators from {module_name}: {e}\")\n\n    # Print summary\n    decorators = registry.get_all_decorators()\n    print(f\"\\nRegistered {len(decorators)} decorators:\")\n\n    # Print categories\n    categories = set(decorator.category for decorator in decorators)\n    print(f\"\\nDecorator categories ({len(categories)}):\")\n    for category in categories:\n        category_decorators = registry.find_decorators_by_category(category)\n        print(f\"  - {category}: {len(category_decorators)} decorators\")\n</code></pre>"},{"location":"DECORATOR_REGISTRY/#finding-decorators","title":"Finding Decorators","text":"<p>Once decorators are registered, they can be discovered in several ways:</p> <ol> <li>Getting a Decorator by Name:</li> </ol> <pre><code>from prompt_decorators.utils.discovery import DecoratorRegistry\n\nregistry = DecoratorRegistry()\nconcise = registry.get_decorator(\"Concise\")\n</code></pre> <ol> <li>Getting All Decorators:</li> </ol> <pre><code>from prompt_decorators.utils.discovery import DecoratorRegistry\n\nregistry = DecoratorRegistry()\nall_decorators = registry.get_all_decorators()\n</code></pre> <ol> <li>Finding Decorators by Category:</li> </ol> <pre><code>from prompt_decorators.utils.discovery import DecoratorRegistry\n\nregistry = DecoratorRegistry()\ntone_decorators = registry.find_decorators_by_category(\"tone\")\n</code></pre>"},{"location":"DECORATOR_REGISTRY/#using-registered-decorators","title":"Using Registered Decorators","text":"<p>Once a decorator is retrieved from the registry, it can be used like any other decorator:</p> <pre><code>from prompt_decorators.utils.discovery import DecoratorRegistry\n\nregistry = DecoratorRegistry()\nconcise = registry.get_decorator(\"Concise\")\n\n# Create an instance of the decorator\nconcise_instance = concise(maxWords=100, bulletPoints=True, level=2)\n\n# Apply the decorator to a prompt\noriginal_prompt = \"Explain the concept of quantum computing in detail.\"\ndecorated_prompt = concise_instance.apply(original_prompt)\n</code></pre>"},{"location":"DECORATOR_REGISTRY/#examples","title":"Examples","text":"<p>For complete examples of how to use the Decorator Registry, see the following example scripts:</p> <ul> <li><code>examples/register_all_decorators.py</code>: Demonstrates how to register all decorators from the generated directory</li> <li><code>examples/use_registered_decorators.py</code>: Shows how to use registered decorators to modify prompts</li> </ul>"},{"location":"DECORATOR_REGISTRY/#best-practices","title":"Best Practices","text":"<ol> <li>Clear the Registry Before Bulk Registration: If you're registering multiple decorators at once, it's a good practice to clear the registry first to avoid duplicates.</li> <li>Handle Exceptions During Registration: When registering decorators from external sources, make sure to handle exceptions properly to avoid breaking your application.</li> <li>Check Decorator Existence Before Use: Always check if a decorator exists in the registry before trying to use it.</li> <li>Use Categories for Organization: Organize decorators by category to make them easier to discover and use.</li> <li>Consider Version Compatibility: When using multiple decorators together, consider their version compatibility to avoid unexpected behavior.</li> </ol>"},{"location":"DECORATOR_REGISTRY/#future-enhancements","title":"Future Enhancements","text":"<p>The Decorator Registry is designed to be extensible and can be enhanced in several ways:</p> <ol> <li>Plugin System: Add support for loading decorators from external plugins</li> <li>Web API: Create a web API for discovering and using decorators</li> <li>Caching: Implement caching for better performance</li> <li>Analytics: Add analytics to track decorator usage</li> <li>UI Integration: Create a user interface for browsing and selecting decorators</li> </ol>"},{"location":"DOCSTRING_STANDARDS/","title":"Docstring Standards","text":"<p>This document outlines the docstring standards for the <code>prompt-decorators</code> project. All Python code in this project should follow these guidelines to ensure consistency and maintainability.</p>"},{"location":"DOCSTRING_STANDARDS/#google-style-docstrings","title":"Google-Style Docstrings","text":"<p>We use Google-style docstrings throughout the codebase. This style is chosen for its readability and compatibility with documentation generation tools.</p>"},{"location":"DOCSTRING_STANDARDS/#basic-format","title":"Basic Format","text":"<pre><code>def function_name(param1, param2):\n    \"\"\"Short description of the function.\n\n    More detailed description that can span multiple lines and provide\n    additional context about what the function does.\n\n    Args:\n        param1: Description of the first parameter.\n        param2: Description of the second parameter.\n\n    Returns:\n        Description of the return value.\n\n    Raises:\n        ExceptionType: When and why this exception is raised.\n    \"\"\"\n    # Function implementation\n</code></pre>"},{"location":"DOCSTRING_STANDARDS/#required-sections","title":"Required Sections","text":"<ol> <li>Short Description: A concise one-line summary of what the function/class/method does.</li> <li>Detailed Description (optional): A more detailed explanation if needed.</li> <li>Args: Required if the function takes parameters (other than self/cls for methods).</li> <li>Returns: Required if the function returns a value (other than None).</li> <li>Raises (optional): Document exceptions that might be raised.</li> </ol>"},{"location":"DOCSTRING_STANDARDS/#class-docstrings","title":"Class Docstrings","text":"<pre><code>class ClassName:\n    \"\"\"Short description of the class.\n\n    More detailed description of the class and its behavior.\n\n    Attributes:\n        attr1: Description of attr1.\n        attr2: Description of attr2.\n    \"\"\"\n</code></pre>"},{"location":"DOCSTRING_STANDARDS/#method-docstrings","title":"Method Docstrings","text":"<pre><code>def method_name(self, param1):\n    \"\"\"Short description of the method.\n\n    Args:\n        param1: Description of param1.\n\n    Returns:\n        Description of the return value.\n    \"\"\"\n</code></pre>"},{"location":"DOCSTRING_STANDARDS/#type-annotations","title":"Type Annotations","text":"<p>In addition to docstrings, all functions and methods should include type annotations:</p> <pre><code>def function_name(param1: str, param2: int) -&gt; bool:\n    \"\"\"Function description.\n\n    Args:\n        param1: Description of param1.\n        param2: Description of param2.\n\n    Returns:\n        Description of the return value.\n    \"\"\"\n</code></pre>"},{"location":"DOCSTRING_STANDARDS/#examples","title":"Examples","text":""},{"location":"DOCSTRING_STANDARDS/#function-example","title":"Function Example","text":"<pre><code>def calculate_average(numbers: List[float]) -&gt; float:\n    \"\"\"Calculate the average of a list of numbers.\n\n    Args:\n        numbers: A list of numbers to average.\n\n    Returns:\n        The average value.\n\n    Raises:\n        ValueError: If the input list is empty.\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"Cannot calculate average of empty list\")\n    return sum(numbers) / len(numbers)\n</code></pre>"},{"location":"DOCSTRING_STANDARDS/#class-example","title":"Class Example","text":"<pre><code>class DecoratorBase:\n    \"\"\"Base class for all decorators.\n\n    This class provides the foundation for creating decorators with\n    consistent interfaces and behaviors.\n\n    Attributes:\n        name: The name of the decorator.\n        version: The version of the decorator.\n        parameters: Dictionary of parameters for the decorator.\n    \"\"\"\n\n    def __init__(self, name: str, version: str, parameters: Dict[str, Any]):\n        \"\"\"Initialize the decorator.\n\n        Args:\n            name: The name of the decorator.\n            version: The version of the decorator.\n            parameters: Dictionary of parameters for the decorator.\n        \"\"\"\n        self.name = name\n        self.version = version\n        self.parameters = parameters\n\n    def apply(self, text: str) -&gt; str:\n        \"\"\"Apply the decorator to the input text.\n\n        Args:\n            text: The input text to decorate.\n\n        Returns:\n            The decorated text.\n        \"\"\"\n        raise NotImplementedError(\"Subclasses must implement apply()\")\n</code></pre>"},{"location":"DOCSTRING_STANDARDS/#checking-and-fixing-docstrings","title":"Checking and Fixing Docstrings","text":"<p>We have tools to check and fix docstring issues:</p> <ol> <li> <p>Check docstrings:    <pre><code>python scripts/standardize_docstrings.py prompt_decorators --report\n</code></pre></p> </li> <li> <p>Check without fixing (returns error code if issues found):    <pre><code>python scripts/standardize_docstrings.py prompt_decorators --check\n</code></pre></p> </li> <li> <p>Fix docstrings automatically:    <pre><code>python scripts/fix_docstrings.py prompt_decorators\n</code></pre></p> </li> </ol> <p>Our docstring tools can detect several issues: - Missing docstrings - Missing required sections (Args, Returns) - Malformed sections - Inconsistent formatting</p>"},{"location":"DOCSTRING_STANDARDS/#using-the-standardization-script","title":"Using the Standardization Script","text":"<p>The <code>standardize_docstrings.py</code> script offers several options:</p> <pre><code>python scripts/standardize_docstrings.py [path] [options]\n</code></pre> <p>Options: - <code>--exclude [dirs]</code>: Directories to exclude - <code>--report</code>: Generate a detailed report of issues - <code>--check</code>: Only check for issues, don't fix (exits with code 1 if issues found)</p> <p>The docstring standardization script uses Python's AST (Abstract Syntax Tree) to analyze Python files and identify docstring issues. It checks:</p> <ol> <li>Functions with arguments that lack an Args section</li> <li>Functions with return values that lack a Returns section</li> <li>Malformed Args and Returns sections</li> <li>Missing docstrings in functions, classes, and modules</li> </ol>"},{"location":"DOCSTRING_STANDARDS/#integration-with-development-workflow","title":"Integration with Development Workflow","text":"<p>Docstring checking is integrated into our development workflow through various mechanisms:</p>"},{"location":"DOCSTRING_STANDARDS/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>Our pre-commit configuration includes a docstring check that runs before each commit:</p> <pre><code>- id: check-docstrings\n  name: check-docstrings\n  entry: python standardize_docstrings.py\n  language: python\n  types: [python]\n  args: [\"--check\"]\n  description: Check that docstrings follow Google-style format\n</code></pre> <p>This prevents commits that would introduce docstring issues.</p>"},{"location":"DOCSTRING_STANDARDS/#cicd-integration","title":"CI/CD Integration","text":"<p>GitHub Actions runs docstring checks on all pull requests and pushes to main branches:</p> <pre><code>jobs:\n  docstring-check:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-python@v4\n        with:\n          python-version: '3.9'\n      - name: Install dependencies\n        run: |\n          python -m pip install --upgrade pip\n          pip install poetry\n          poetry install\n      - name: Check docstrings\n        run: python standardize_docstrings.py prompt_decorators --check\n</code></pre> <p>This ensures that all merged code maintains high docstring quality standards.</p>"},{"location":"DOCSTRING_STANDARDS/#current-status-and-known-issues","title":"Current Status and Known Issues","text":"<p>As of the latest update, we've identified and are addressing several docstring issues across the codebase:</p> <ul> <li>75 issues across 16 files for missing Args/Returns sections in function docstrings</li> <li>8 issues for malformed Args sections</li> <li>1 issue for a missing docstring</li> </ul> <p>Our roadmap includes resolving all these issues as part of our code quality improvements before the next major release.</p>"},{"location":"DOCSTRING_STANDARDS/#manual-fixes-in-progress","title":"Manual Fixes in Progress","text":"<p>While our automated tools can identify issues, some complex cases require manual intervention. We're currently working on:</p> <ol> <li>Adding detailed parameter descriptions for complex functions</li> <li>Improving return value descriptions</li> <li>Adding examples to key API functions</li> </ol> <p>Progress on fixing these issues is tracked in our project roadmap.</p>"},{"location":"DOCSTRING_STANDARDS/#additional-resources","title":"Additional Resources","text":"<ul> <li>Google Python Style Guide</li> <li>PEP 257 -- Docstring Conventions</li> <li>PEP 484 -- Type Hints</li> <li>pydocstyle - A tool for checking compliance with Python docstring conventions</li> </ul>"},{"location":"DOCS_README/","title":"Documentation Overview","text":"<p>This directory contains the documentation for the Prompt Decorators project.</p>"},{"location":"DOCS_README/#key-documentation-files","title":"Key Documentation Files","text":"<ul> <li>Getting Started</li> <li>Creating Decorators</li> <li>Extension Development</li> <li>Domain-Specific Extensions</li> <li>API Reference</li> </ul>"},{"location":"DOCS_README/#building-the-documentation","title":"Building the Documentation","text":"<p>The documentation is built using MkDocs with the Material theme and several plugins. To build the documentation locally, run:</p> <pre><code>pip install -r docs/requirements.txt\nmkdocs build\n</code></pre> <p>To serve the documentation locally, run:</p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"DOCS_README/#documentation-structure","title":"Documentation Structure","text":"<ul> <li><code>docs/</code>: Main documentation directory</li> <li><code>api/</code>: API reference documentation</li> <li><code>guides/</code>: User guides</li> <li><code>tutorials/</code>: Step-by-step tutorials</li> <li><code>examples/</code>: Example code and usage</li> <li><code>project_summaries/</code>: Documentation of project efforts</li> </ul>"},{"location":"architecture/","title":"Project Architecture","text":"<p>This document outlines the architecture of the Prompt Decorators framework, providing an overview of the code structure, key components, and design patterns.</p>"},{"location":"architecture/#directory-structure","title":"Directory Structure","text":"<p>The <code>prompt_decorators</code> package has the following main directories:</p> <ul> <li>core/: Contains the core functionality of the framework</li> <li><code>base.py</code>: Base classes for all decorators</li> <li><code>model_specific.py</code>: Model-specific decorator handling</li> <li><code>request.py</code>: API request handling</li> <li>decorators/: Contains the decorator implementations</li> <li>generated/: Contains auto-generated decorator implementations based on registry definitions</li> <li>generator/: Contains code generation utilities</li> <li><code>code_gen.py</code>: Generates Python code from registry definitions</li> <li><code>test_gen.py</code>: Generates test files for decorators</li> <li><code>registry.py</code>: Scans and parses the registry files</li> <li><code>cli.py</code>: Command-line interface for the generator</li> <li>utils/: Contains utility functions</li> <li><code>cache.py</code>: Caching utilities</li> <li><code>compatibility.py</code>: Decorator compatibility checking</li> <li><code>discovery.py</code>: Runtime decorator discovery</li> <li><code>doc_gen.py</code>: Documentation generation</li> <li><code>json_loader.py</code>: JSON loading utilities</li> <li><code>model_detection.py</code>: LLM model detection and capability analysis</li> <li><code>plugins.py</code>: Plugin system for extensions</li> <li><code>telemetry.py</code>: Usage telemetry (optional)</li> </ul>"},{"location":"architecture/#key-components","title":"Key Components","text":""},{"location":"architecture/#core-module-103-of-codebase","title":"Core Module (10.3% of codebase)","text":"<p>The core module provides the foundation for all decorators:</p> <ol> <li>BaseDecorator: The abstract base class for all decorators, defining:</li> <li>Standard initialization</li> <li>Parameter validation</li> <li>Serialization/deserialization</li> <li> <p>The abstract <code>apply</code> method</p> </li> <li> <p>ModelSpecificDecorator: Extends BaseDecorator with model-specific capabilities:</p> </li> <li>Model compatibility checking</li> <li>Model-aware parameter validation</li> <li> <p>Model-specific application logic</p> </li> <li> <p>DecoratedRequest: Handles API requests with decorators:</p> </li> <li>Decorator validation and compatibility checking</li> <li>Decorator application to prompts</li> <li>API parameter management</li> </ol>"},{"location":"architecture/#decorators-module-467-of-codebase","title":"Decorators Module (46.7% of codebase)","text":"<p>The decorators module contains:</p> <ol> <li>Generated Decorators: Auto-generated from registry JSON files (44.2% of codebase)</li> <li>Each decorator follows a consistent structure derived from the registry</li> <li>Parameter validation based on registry specifications</li> <li> <p>Standardized application logic</p> </li> <li> <p>Custom Decorators: Manually created decorators (2.5% of codebase)</p> </li> <li>More complex application logic</li> <li>Specialized validation</li> <li>Model-specific behaviors</li> </ol>"},{"location":"architecture/#generator-module-142-of-codebase","title":"Generator Module (14.2% of codebase)","text":"<p>The generator module facilitates code generation:</p> <ol> <li>Registry Scanner: Scans JSON files in the registry directory</li> <li>Parses decorator definitions</li> <li>Validates against schema</li> <li> <p>Groups by category</p> </li> <li> <p>Code Generator: Generates Python code for decorators</p> </li> <li>Creates class definitions</li> <li>Implements parameter validation</li> <li>Generates property getters</li> <li> <p>Creates the apply method</p> </li> <li> <p>Test Generator: Generates unit tests for decorators</p> </li> <li>Creates parameter validation tests</li> <li>Implements apply method tests</li> <li>Generates serialization tests</li> </ol>"},{"location":"architecture/#utils-module-247-of-codebase","title":"Utils Module (24.7% of codebase)","text":"<p>The utils module provides supporting functionality:</p> <ol> <li>Registry Management: Tools for working with the decorator registry</li> <li>JSON loading and validation</li> <li>Schema enforcement</li> <li> <p>Documentation generation</p> </li> <li> <p>Runtime Support: Utilities for runtime operations</p> </li> <li>Decorator discovery</li> <li>Caching</li> <li>Compatibility checking</li> <li> <p>Model detection</p> </li> <li> <p>Plugin System: Extensibility through plugins</p> </li> <li>Plugin loading and validation</li> <li>Hook registration and execution</li> <li>Custom decorator integration</li> </ol>"},{"location":"architecture/#architectural-patterns","title":"Architectural Patterns","text":""},{"location":"architecture/#registry-driven-development","title":"Registry-Driven Development","text":"<p>The framework employs a registry-driven approach:</p> <ol> <li>JSON Definitions: Decorators are defined in JSON files in the registry</li> <li>Code Generation: Python classes are generated from these definitions</li> <li>Test Generation: Tests are generated from the same definitions</li> <li>Documentation Generation: Documentation is generated from the registry and code</li> </ol> <p>This approach ensures consistency and reduces duplication.</p>"},{"location":"architecture/#clean-layering","title":"Clean Layering","text":"<p>The codebase follows a clean layering pattern:</p> <ol> <li>Core Layer: Provides the foundation and abstractions</li> <li>Decorators Layer: Implements specific decorator behaviors</li> <li>Utils Layer: Provides supporting functionality</li> <li>Generator Layer: Handles code generation</li> </ol> <p>Dependencies flow in one direction: decorators \u2192 core and utils \u2192 core.</p>"},{"location":"architecture/#factory-pattern","title":"Factory Pattern","text":"<p>The framework uses factory patterns for decorator creation:</p> <ol> <li>Decorator Factories: Create decorators from registry data</li> <li>Request Factories: Create API requests with appropriate decorators</li> <li>Test Factories: Create test instances with appropriate fixtures</li> </ol>"},{"location":"architecture/#strategy-pattern","title":"Strategy Pattern","text":"<p>The decorator application logic follows the strategy pattern:</p> <ol> <li>Common Interface: All decorators implement the <code>apply</code> method</li> <li>Swappable Strategies: Different decorators can be applied in different orders</li> <li>Compositional Approach: Decorators can be composed in chains</li> </ol>"},{"location":"architecture/#code-metrics","title":"Code Metrics","text":""},{"location":"architecture/#lines-of-code-by-module","title":"Lines of Code by Module","text":"<ul> <li>Total: 13,384 lines</li> <li>utils: 3,304 lines (24.7%)</li> <li>decorators/generated: 5,913 lines (44.2%)</li> <li>core: 1,373 lines (10.3%)</li> <li>generator: 1,897 lines (14.2%)</li> <li>decorators (non-generated): 329 lines (2.5%)</li> <li>init files: 568 lines (4.2%)</li> </ul>"},{"location":"architecture/#key-files-by-size","title":"Key Files by Size","text":"<ol> <li>utils/doc_gen.py: 905 lines</li> <li>generator/test_gen.py: 800 lines</li> <li>generator/code_gen.py: 657 lines</li> <li>utils/plugins.py: 625 lines</li> <li>core/base.py: 620 lines</li> </ol>"},{"location":"architecture/#design-principles","title":"Design Principles","text":"<p>The framework follows several key design principles:</p> <ol> <li>Modularity: Each decorator focuses on a specific prompt engineering technique</li> <li>Extensibility: The plugin system and registry-driven approach allow for easy extension</li> <li>Composability: Decorators can be composed in different combinations</li> <li>Consistency: Generated code follows consistent patterns</li> <li>Testability: Generated tests ensure quality and functionality</li> <li>Documentation: Generated documentation ensures accuracy and completeness</li> </ol>"},{"location":"code_quality_integration/","title":"Code Quality Integration","text":"<p>This document summarizes the code quality integration work completed for the <code>prompt-decorators</code> project.</p>"},{"location":"code_quality_integration/#overview","title":"Overview","text":"<p>We've implemented a comprehensive code quality system that includes:</p> <ol> <li>Pre-commit hooks: Automated checks that run before each commit</li> <li>Docstring standardization: Tools to check and fix docstring issues</li> <li>CI/CD integration: GitHub Actions workflow for continuous quality checks</li> <li>Documentation: Standards and guidelines for code quality</li> </ol>"},{"location":"code_quality_integration/#components-implemented","title":"Components Implemented","text":""},{"location":"code_quality_integration/#1-pre-commit-configuration","title":"1. Pre-commit Configuration","text":"<p>We've set up a <code>.pre-commit-config.yaml</code> file with the following hooks:</p> <ul> <li>pre-commit-hooks: Basic checks for trailing whitespace, file endings, etc.</li> <li>isort: Python import sorting</li> <li>flake8: Python linting</li> <li>check-docstrings: Custom hook for docstring validation</li> </ul>"},{"location":"code_quality_integration/#2-docstring-tools","title":"2. Docstring Tools","text":"<p>We've created two Python scripts for docstring management:</p> <ul> <li>check_docstrings.py: Analyzes Python files for docstring issues</li> <li>fix_docstrings.py: Automatically fixes common docstring problems</li> </ul> <p>These tools check for: - Missing Args sections when functions have parameters - Missing Returns sections when functions return values - Malformed Args sections</p>"},{"location":"code_quality_integration/#3-github-actions-workflow","title":"3. GitHub Actions Workflow","text":"<p>We've implemented a GitHub Actions workflow (<code>.github/workflows/code-quality.yml</code>) that:</p> <ul> <li>Runs on pull requests and pushes to main branches</li> <li>Executes all pre-commit hooks</li> <li>Runs the test suite</li> </ul>"},{"location":"code_quality_integration/#4-documentation","title":"4. Documentation","text":"<p>We've created documentation to support the code quality system:</p> <ul> <li>docstring_standards.md: Guidelines for writing proper docstrings</li> <li>code_quality_integration.md: This summary document</li> </ul>"},{"location":"code_quality_integration/#usage-instructions","title":"Usage Instructions","text":""},{"location":"code_quality_integration/#setting-up-pre-commit","title":"Setting Up Pre-commit","text":"<pre><code># Install pre-commit\npip install pre-commit\n\n# Install the pre-commit hooks\npre-commit install\n</code></pre>"},{"location":"code_quality_integration/#running-docstring-checks","title":"Running Docstring Checks","text":"<pre><code># Check docstrings\npython scripts/check_docstrings.py\n\n# Fix docstring issues automatically\npython scripts/fix_docstrings.py\n</code></pre>"},{"location":"code_quality_integration/#running-pre-commit-hooks-manually","title":"Running Pre-commit Hooks Manually","text":"<pre><code># Run all pre-commit hooks on all files\npre-commit run --all-files\n\n# Run a specific hook\npre-commit run isort --all-files\n</code></pre>"},{"location":"code_quality_integration/#benefits","title":"Benefits","text":"<p>This code quality integration provides several benefits:</p> <ol> <li>Consistency: Ensures consistent code style and documentation across the codebase</li> <li>Automation: Reduces manual review effort by automating checks</li> <li>Documentation: Improves code understanding through standardized docstrings</li> <li>Maintainability: Makes the codebase easier to maintain and extend</li> <li>Onboarding: Helps new contributors understand the code and follow project standards</li> </ol>"},{"location":"code_quality_integration/#next-steps","title":"Next Steps","text":"<p>To further improve code quality, consider:</p> <ol> <li>Expanding test coverage: Add more unit and integration tests</li> <li>Adding complexity checks: Implement tools like Radon to monitor code complexity</li> <li>Documentation generation: Set up automatic API documentation generation from docstrings</li> <li>Type checking: Add mypy for static type checking</li> <li>Security scanning: Implement security vulnerability scanning</li> </ol>"},{"location":"code_quality_integration/#conclusion","title":"Conclusion","text":"<p>The code quality integration system provides a solid foundation for maintaining high-quality code in the <code>prompt-decorators</code> project. By enforcing standards automatically, we reduce the burden on developers while ensuring the codebase remains clean, well-documented, and maintainable.</p>"},{"location":"compatibility/","title":"Decorator Compatibility Guide","text":"<p>This document provides information about decorator compatibility in the Prompt Decorators framework.</p>"},{"location":"compatibility/#introduction","title":"Introduction","text":"<p>When combining multiple decorators, it's important to understand which decorators work well together and which ones might conflict. This guide will help you make informed decisions when combining decorators.</p>"},{"location":"compatibility/#compatibility-matrix","title":"Compatibility Matrix","text":"<p>The following table shows the compatibility between common decorator categories:</p> Category Reasoning Format Style Verification Meta Reasoning \u2713 \u2713 \u2713 \u2713 \u2713 Format \u2713 \u26a0\ufe0f \u2713 \u2713 \u2713 Style \u2713 \u2713 \u26a0\ufe0f \u2713 \u2713 Verification \u2713 \u2713 \u2713 \u2713 \u2713 Meta \u2713 \u2713 \u2713 \u2713 \u2713 <p>Legend: - \u2713: Generally compatible - \u26a0\ufe0f: May have conflicts, use with caution - \u274c: Generally incompatible</p>"},{"location":"compatibility/#known-incompatibilities","title":"Known Incompatibilities","text":"<p>The following specific decorator combinations are known to have conflicts:</p> <ol> <li>ELI5 + Technical: These decorators have contradictory goals (simplicity vs. technical complexity).</li> <li>Concise + Detailed: These decorators have opposing constraints on response length.</li> <li>Bullet + TableFormat: These decorators specify conflicting output formats.</li> <li>Academic + Humorous: These decorators define incompatible tones.</li> <li>FirstPrinciples + StepByStep: These decorators provide different structured reasoning approaches that may conflict.</li> </ol>"},{"location":"compatibility/#best-practices","title":"Best Practices","text":"<p>When combining decorators, follow these best practices:</p> <ol> <li>Apply in the right order: Decorators are applied in sequence, so put the most specific or format-related decorators last.</li> <li>Limit the number: Using too many decorators can lead to conflicting instructions. Limit to 2-3 decorators.</li> <li>Test combinations: Always test decorator combinations to ensure they produce the desired effect.</li> <li>Handle conflicts: When using potentially conflicting decorators, be explicit about which aspect should take precedence.</li> </ol>"},{"location":"compatibility/#example-combinations","title":"Example Combinations","text":"<p>Here are some effective decorator combinations:</p>"},{"location":"compatibility/#for-technical-documentation","title":"For Technical Documentation","text":"<pre><code>technical = Technical(domain=\"computing\", expertise_level=\"expert\")\ncode_examples = CodeExamples(language=\"python\", count=3)\nformatted = OutputFormat(format_type=\"markdown\")\n\n# Good order: domain \u2192 specifics \u2192 format\ndecorated_prompt = formatted.apply(code_examples.apply(technical.apply(prompt)))\n</code></pre>"},{"location":"compatibility/#for-explanations","title":"For Explanations","text":"<pre><code>reasoning = Reasoning(depth=\"comprehensive\")\neli5 = ELI5(age=12)\nbullet = Bullet(style=\"dash\")\n\n# Good order: reasoning \u2192 audience adaptation \u2192 format\ndecorated_prompt = bullet.apply(eli5.apply(reasoning.apply(prompt)))\n</code></pre>"},{"location":"compatibility/#for-creative-content","title":"For Creative Content","text":"<pre><code>creative = Creative(genre=\"narrative\")\nmotivational = Motivational(intensity=2)\npersona = Persona(role=\"marketing\")\n\n# Good order: role \u2192 style \u2192 intensity\ndecorated_prompt = motivational.apply(creative.apply(persona.apply(prompt)))\n</code></pre>"},{"location":"compatibility/#using-compatibility-checker","title":"Using Compatibility Checker","text":"<p>You can use the built-in compatibility checker to verify compatibility:</p> <pre><code>from prompt_decorators.utils import get_compatibility_checker\n\nchecker = get_compatibility_checker()\nissues = checker.check_compatibility(decorator1, decorator2)\n\nif issues:\n    for issue in issues:\n        print(f\"Warning: {issue}\")\nelse:\n    print(\"Decorators are compatible!\")\n</code></pre>"},{"location":"compatibility/#model-specific-considerations","title":"Model-Specific Considerations","text":"<p>Some decorators may behave differently depending on the model being used. Use the model-specific adapters to handle these cases:</p> <pre><code>from prompt_decorators.core import ModelSpecificDecoratorFactory\n\nmodel_specific_decorator = ModelSpecificDecoratorFactory.create_for_model(\n    decorator_class=Reasoning,\n    model_id=\"gpt-4\",\n    depth=\"comprehensive\"\n)\n</code></pre>"},{"location":"compatibility/#getting-help","title":"Getting Help","text":"<p>If you encounter incompatibilities not listed here or have questions about specific combinations, please:</p> <ol> <li>Check the documentation for each decorator in the <code>docs/api/decorators/</code> directory.</li> <li>Look at the examples in the <code>examples/</code> directory.</li> <li>Open an issue on the GitHub repository if you've discovered a new incompatibility.</li> </ol> <p>Remember that while some combinations are generally incompatible, the specific behavior may depend on the exact parameter values and the LLM model being used.</p>"},{"location":"concepts/","title":"Core Concepts","text":"<p>This page explains the fundamental concepts behind the Prompt Decorators framework.</p>"},{"location":"concepts/#what-are-prompt-decorators","title":"What are Prompt Decorators?","text":"<p>Prompt decorators are modular, reusable components that modify prompts sent to Large Language Models (LLMs). They encapsulate specific modifications to prompts that can be combined, validated, and applied systematically.</p> <p>The concept is inspired by the decorator pattern in object-oriented programming, where decorators add functionality to objects without modifying their structure.</p>"},{"location":"concepts/#key-components","title":"Key Components","text":""},{"location":"concepts/#basedecorator","title":"BaseDecorator","text":"<p>The <code>BaseDecorator</code> class is the foundation of all decorators in the framework. It provides:</p> <ul> <li>Parameter validation</li> <li>Versioning support</li> <li>Serialization/deserialization</li> <li>The <code>apply()</code> method for modifying prompts</li> </ul> <p>All specific decorator types inherit from this base class.</p>"},{"location":"concepts/#decorator-registry","title":"Decorator Registry","text":"<p>The registry system provides:</p> <ul> <li>Runtime discovery of available decorators</li> <li>Decorator metadata and documentation</li> <li>Categorization and organization of decorators</li> <li>Version management</li> </ul>"},{"location":"concepts/#decorator-types","title":"Decorator Types","text":"<p>The framework includes various types of decorators, such as:</p> <ol> <li>Reasoning Decorators: Modify how the LLM approaches reasoning about a problem</li> <li>Format Decorators: Control the output format (markdown, JSON, etc.)</li> <li>Style Decorators: Adjust the tone, verbosity, or style of the response</li> <li>Verification Decorators: Add verification steps or fact-checking</li> <li>Meta Decorators: Modify or combine other decorators</li> </ol>"},{"location":"concepts/#decorator-lifecycle","title":"Decorator Lifecycle","text":"<ol> <li>Definition: Decorators are defined in the registry with their parameters, constraints, and metadata</li> <li>Generation: Code is generated from the registry definitions</li> <li>Instantiation: Decorators are instantiated with specific parameter values</li> <li>Application: Decorators modify prompts through their <code>apply()</code> method</li> <li>Composition: Multiple decorators can be combined in a specific order</li> </ol>"},{"location":"concepts/#decorator-parameters","title":"Decorator Parameters","text":"<p>Each decorator can have multiple parameters that control its behavior:</p> <ul> <li>Parameters have types (string, integer, boolean, etc.)</li> <li>Parameters can have constraints (min/max values, allowed values, etc.)</li> <li>Parameters can have default values</li> <li>Parameters are validated when a decorator is instantiated</li> </ul>"},{"location":"concepts/#versioning","title":"Versioning","text":"<p>The framework supports semantic versioning for decorators:</p> <ul> <li>Major version changes indicate breaking changes</li> <li>Minor version changes indicate new features</li> <li>Patch version changes indicate bug fixes</li> <li>Version compatibility is checked when combining decorators</li> </ul>"},{"location":"concepts/#compatibility","title":"Compatibility","text":"<p>Not all decorators can be used together. The framework provides:</p> <ul> <li>A compatibility matrix to determine which decorators can be combined</li> <li>Runtime compatibility checking</li> <li>Warnings or errors when incompatible decorators are used together</li> </ul>"},{"location":"concepts/#request-system","title":"Request System","text":"<p>The <code>DecoratedRequest</code> class provides:</p> <ul> <li>A container for a prompt and its associated decorators</li> <li>Methods to apply all decorators in the correct order</li> <li>Serialization/deserialization for storage or transmission</li> <li>Integration with LLM APIs</li> </ul>"},{"location":"concepts/#extension-points","title":"Extension Points","text":"<p>The framework is designed to be extensible:</p> <ul> <li>Custom decorators can be created by inheriting from <code>BaseDecorator</code></li> <li>New decorator types can be added to the registry</li> <li>Custom parameter types and constraints can be defined</li> <li>Integration with different LLM providers is supported</li> </ul>"},{"location":"concepts/#next-steps","title":"Next Steps","text":"<ul> <li>See the Quick Start Guide for practical examples</li> <li>Explore the API Reference for detailed documentation</li> <li>Learn about Creating Custom Decorators</li> </ul>"},{"location":"contributing/","title":"Contributing to Prompt Decorators","text":"<p>Thank you for your interest in contributing to the Prompt Decorators project! This document provides guidelines and instructions for contributing.</p>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>Please read and follow our Code of Conduct.</p>"},{"location":"contributing/#how-to-contribute","title":"How to Contribute","text":"<p>There are many ways to contribute to the Prompt Decorators project:</p> <ol> <li>Report bugs: If you find a bug, please create an issue on our GitHub repository.</li> <li>Suggest features: If you have an idea for a new feature, please create an issue on our GitHub repository.</li> <li>Improve documentation: Help us improve our documentation by fixing typos, adding examples, or clarifying explanations.</li> <li>Write code: Contribute bug fixes, new features, or improvements to existing features.</li> </ol>"},{"location":"contributing/#development-setup","title":"Development Setup","text":""},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8.1 or higher</li> <li>Poetry (dependency management)</li> <li>git</li> </ul>"},{"location":"contributing/#setting-up-the-development-environment","title":"Setting Up the Development Environment","text":"<ol> <li>Fork the repository on GitHub.</li> <li>Clone your fork locally:    <pre><code>git clone https://github.com/yourusername/prompt-decorators.git\ncd prompt-decorators\n</code></pre></li> <li>Install Poetry if you don't have it already:    <pre><code>curl -sSL https://install.python-poetry.org | python3 -\n</code></pre></li> <li>Install the package with all dependencies:    <pre><code>poetry install\n</code></pre></li> </ol>"},{"location":"contributing/#running-tests","title":"Running Tests","text":"<p>We use pytest for testing. To run the tests:</p> <pre><code>poetry run pytest\n</code></pre> <p>To run tests with coverage:</p> <pre><code>poetry run pytest --cov=prompt_decorators\n</code></pre>"},{"location":"contributing/#code-style","title":"Code Style","text":"<p>We follow the PEP 8 style guide for Python code. We use the following tools to enforce code style:</p> <ul> <li>black: For code formatting</li> <li>isort: For import sorting</li> <li>ruff: For linting</li> </ul> <p>To format your code:</p> <pre><code>poetry run black prompt_decorators tests\npoetry run isort prompt_decorators tests\n</code></pre> <p>To check your code for style issues:</p> <pre><code>poetry run ruff check prompt_decorators tests\n</code></pre>"},{"location":"contributing/#type-checking","title":"Type Checking","text":"<p>We use mypy for type checking. To run type checking:</p> <pre><code>poetry run mypy prompt_decorators\n</code></pre>"},{"location":"contributing/#docstring-standards","title":"Docstring Standards","text":"<p>We follow Google-style docstrings for all Python code. Please refer to our Docstring Standards for detailed guidelines.</p> <p>To check if your docstrings follow our standards:</p> <pre><code>./standardize_docstrings.py path/to/your/file.py --report\n</code></pre> <p>To automatically fix common docstring issues:</p> <pre><code>./fix_docstrings.py path/to/your/file.py\n</code></pre> <p>We've also set up pre-commit hooks to check docstrings before commits:</p> <pre><code># Install pre-commit hooks\npoetry run pre-commit install\n</code></pre>"},{"location":"contributing/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>We use pre-commit hooks to check code style, types, and docstrings before commits. To install the pre-commit hooks:</p> <pre><code>poetry run pre-commit install\n</code></pre>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Create a new branch for your feature or bug fix:    <pre><code>git checkout -b feature/your-feature-name\n</code></pre></li> <li>Make your changes and commit them with a descriptive commit message.</li> <li>Push your branch to your fork:    <pre><code>git push origin feature/your-feature-name\n</code></pre></li> <li>Create a pull request from your branch to the main repository.</li> <li>Ensure that all tests pass and there are no style issues.</li> <li>Update the documentation if necessary.</li> <li>Wait for a maintainer to review your pull request.</li> </ol>"},{"location":"contributing/#adding-a-new-decorator","title":"Adding a New Decorator","text":"<p>To add a new decorator to the registry:</p> <ol> <li>Create a new JSON file in the appropriate category directory under <code>registry/</code>.</li> <li>Define the decorator's parameters, constraints, and metadata.</li> <li>Run the code generation script:    <pre><code>poetry run python generate_decorators.py\n</code></pre></li> <li>Add tests for your new decorator.</li> <li>Update the documentation if necessary.</li> </ol>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>We use MkDocs with the Material theme for documentation. To build the documentation locally:</p> <pre><code>poetry run mkdocs serve\n</code></pre> <p>This will start a local server at http://localhost:8000 where you can preview the documentation.</p>"},{"location":"contributing/#license","title":"License","text":"<p>By contributing to the Prompt Decorators project, you agree that your contributions will be licensed under the project's MIT License.</p>"},{"location":"creating_decorators/","title":"Creating New Prompt Decorators","text":"<p>This guide will walk you through the process of creating new prompt decorators that are compliant with the Prompt Decorators specification.</p>"},{"location":"creating_decorators/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Overview</li> <li>Understanding the Schemas</li> <li>Creating a New Decorator</li> <li>Define the Decorator's Purpose</li> <li>Create a Registry Entry</li> <li>Implement the Decorator's Behavior</li> <li>Define Transformation Templates</li> <li>Validation</li> <li>Best Practices</li> <li>Contributing to the Registry</li> <li>Examples</li> </ul>"},{"location":"creating_decorators/#overview","title":"Overview","text":"<p>Prompt Decorators follow a standardized format defined by JSON schemas. Before creating new decorators, you should understand the core components:</p> <ol> <li>Decorator Definition: The core definition of a decorator, its parameters, and behavior</li> <li>Registry Entry: Metadata for publishing a decorator to the central registry</li> <li>Extension Package: Collections of related decorators bundled together</li> </ol>"},{"location":"creating_decorators/#understanding-the-schemas","title":"Understanding the Schemas","text":"<p>The repository contains several schema files that define the valid structure for decorators:</p>"},{"location":"creating_decorators/#1-decoratorschemajson","title":"1. <code>decorator.schema.json</code>","text":"<p>This schema defines the structure of individual decorator instances used within prompts:</p> <pre><code>{\n  \"name\": \"YourDecorator\",\n  \"version\": \"1.0.0\",\n  \"parameters\": {\n    \"paramName\": \"value\"\n  },\n  \"metadata\": {\n    \"description\": \"What your decorator does\",\n    \"category\": \"reasoning\"\n  }\n}\n</code></pre>"},{"location":"creating_decorators/#2-registry-entryschemajson","title":"2. <code>registry-entry.schema.json</code>","text":"<p>This schema defines how decorators are registered in the central registry:</p> <pre><code>{\n  \"decoratorName\": \"YourDecorator\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Detailed description of what your decorator does\",\n  \"author\": {\n    \"name\": \"Your Name\",\n    \"email\": \"your.email@example.com\",\n    \"url\": \"https://yourwebsite.com\"\n  },\n  \"parameters\": [\n    {\n      \"name\": \"paramName\",\n      \"type\": \"string\",\n      \"description\": \"Description of the parameter\",\n      \"default\": \"defaultValue\",\n      \"required\": false\n    }\n  ],\n  \"examples\": [\n    {\n      \"description\": \"Example of decorator usage\",\n      \"usage\": \"+++YourDecorator(paramName=value)\\nWhat is the meaning of life?\",\n      \"result\": \"Expected response pattern\"\n    }\n  ],\n  \"compatibility\": {\n    \"requires\": [],\n    \"conflicts\": [],\n    \"minStandardVersion\": \"1.0.0\",\n    \"maxStandardVersion\": \"2.0.0\",\n    \"models\": [\n      \"gpt-4\"\n    ]\n  }\n}\n</code></pre>"},{"location":"creating_decorators/#3-extension-packageschemajson","title":"3. <code>extension-package.schema.json</code>","text":"<p>This schema defines how decorators are packaged together:</p> <pre><code>{\n  \"name\": \"your-extension-package\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A collection of related decorators\",\n  \"author\": {\n    \"name\": \"Your Name\",\n    \"email\": \"your.email@example.com\",\n    \"url\": \"https://yourwebsite.com\"\n  },\n  \"license\": \"Apache 2.0\",\n  \"keywords\": [\"keyword1\", \"keyword2\"],\n  \"decorators\": [\n    // Array of registry entries\n  ]\n}\n</code></pre>"},{"location":"creating_decorators/#creating-a-new-decorator","title":"Creating a New Decorator","text":"<p>Follow these steps to create a new prompt decorator:</p>"},{"location":"creating_decorators/#1-define-the-decorators-purpose","title":"1. Define the Decorator's Purpose","text":"<p>First, clearly define what your decorator will do: - What behavior will it modify? - What parameters will it accept? - How will it interact with other decorators?</p>"},{"location":"creating_decorators/#2-create-a-registry-entry","title":"2. Create a Registry Entry","text":"<p>Create a new JSON file in the appropriate directory, following the registry entry schema:</p> <pre><code>{\n  \"decoratorName\": \"YourDecorator\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Detailed description of your decorator's purpose\",\n  \"author\": {\n    \"name\": \"Your Name\",\n    \"email\": \"your.email@example.com\",\n    \"url\": \"https://yourwebsite.com\"\n  },\n  \"parameters\": [\n    {\n      \"name\": \"mode\",\n      \"type\": \"enum\",\n      \"description\": \"The operational mode\",\n      \"enum\": [\"basic\", \"advanced\", \"expert\"],\n      \"default\": \"basic\",\n      \"required\": false\n    }\n  ],\n  \"examples\": [\n    {\n      \"description\": \"Basic example\",\n      \"usage\": \"+++YourDecorator(mode=basic)\\nHow does photosynthesis work?\",\n      \"result\": \"Provides a description of the response format\"\n    }\n  ],\n  \"compatibility\": {\n    \"requires\": [],\n    \"conflicts\": [],\n    \"minStandardVersion\": \"1.0.0\",\n    \"maxStandardVersion\": \"2.0.0\",\n    \"models\": [\n      \"gpt-4\"\n    ]\n  }\n}\n</code></pre>"},{"location":"creating_decorators/#3-implement-the-decorators-behavior","title":"3. Implement the Decorator's Behavior","text":"<p>For each implementation language, create the necessary code to implement your decorator:</p>"},{"location":"creating_decorators/#python-example","title":"Python Example","text":"<pre><code>class YourDecorator(BaseDecorator):\n    \"\"\"Your decorator implementation.\"\"\"\n\n    def __init__(self, mode: str = \"basic\"):\n        \"\"\"Initialize with parameters.\"\"\"\n        super().__init__(name=\"YourDecorator\", version=\"1.0.0\")\n        self.parameters = {\"mode\": mode}\n\n    def to_system_instructions(self) -&gt; str:\n        \"\"\"Convert decorator to system instructions.\"\"\"\n        mode = self.parameters.get(\"mode\", \"basic\")\n        if mode == \"basic\":\n            return \"When responding, use a simplified approach...\"\n        elif mode == \"advanced\":\n            return \"When responding, provide a more detailed analysis...\"\n        else:\n            return \"When responding, provide an expert-level analysis...\"\n</code></pre>"},{"location":"creating_decorators/#4-define-transformation-templates","title":"4. Define Transformation Templates","text":"<p>Transformation templates specify exactly how a decorator modifies a prompt. They provide a standardized way to implement prompt transformations across different decorator implementations.</p>"},{"location":"creating_decorators/#what-are-transformation-templates","title":"What are Transformation Templates?","text":"<p>A transformation template defines: 1. The base instruction to add to the prompt 2. How each parameter modifies the instruction 3. Where to place the instruction relative to the original prompt 4. How the decorator behaves when combined with others</p>"},{"location":"creating_decorators/#example-transformation-template","title":"Example Transformation Template","text":"<p>Here's an example of a transformation template for a <code>Reasoning</code> decorator:</p> <pre><code>{\n  \"decoratorName\": \"Reasoning\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Modifies the AI's response to provide explicit reasoning paths\",\n  \"parameters\": [\n    {\n      \"name\": \"depth\",\n      \"type\": \"enum\",\n      \"description\": \"The level of detail in the reasoning process\",\n      \"enum\": [\"basic\", \"moderate\", \"comprehensive\"],\n      \"default\": \"moderate\",\n      \"required\": false\n    }\n  ],\n  \"transformationTemplate\": {\n    \"instruction\": \"Please provide detailed reasoning in your response. Show your thought process before reaching a conclusion.\",\n    \"parameterMapping\": {\n      \"depth\": {\n        \"valueMap\": {\n          \"basic\": \"Focus on the most important logical steps.\",\n          \"moderate\": \"Balance detail with clarity in your reasoning.\",\n          \"comprehensive\": \"Provide a very thorough and detailed analysis with multiple perspectives.\"\n        }\n      }\n    },\n    \"placement\": \"prepend\",\n    \"compositionBehavior\": \"accumulate\"\n  }\n}\n</code></pre>"},{"location":"creating_decorators/#how-transformation-templates-work","title":"How Transformation Templates Work","text":"<ol> <li> <p>Base Instruction: The <code>instruction</code> field contains the primary directive to add to the prompt.</p> </li> <li> <p>Parameter Mapping: The <code>parameterMapping</code> field defines how each parameter affects the instruction:</p> </li> <li><code>valueMap</code>: Maps specific parameter values to additional instructions</li> <li> <p><code>format</code>: Provides a format string for inserting parameter values</p> </li> <li> <p>Placement Strategy: The <code>placement</code> field determines where the instruction is placed:</p> </li> <li><code>prepend</code>: Adds the instruction before the prompt (default)</li> <li><code>append</code>: Adds the instruction after the prompt</li> <li> <p><code>wrap</code>: Adds the instruction before and after the prompt</p> </li> <li> <p>Composition Behavior: The <code>compositionBehavior</code> field determines how the decorator combines with others:</p> </li> <li><code>accumulate</code>: Instructions from multiple decorators accumulate (default)</li> <li><code>override</code>: Later decorators override instructions from earlier ones</li> <li><code>selective-override</code>: Overrides only specific parts of earlier instructions</li> </ol>"},{"location":"creating_decorators/#implementation-guidance","title":"Implementation Guidance","text":"<p>You can also include implementation examples in your registry entry to show exactly how the transformation should work:</p> <pre><code>\"implementationGuidance\": {\n  \"examples\": [\n    {\n      \"context\": \"Standard implementation\",\n      \"originalPrompt\": \"What are the implications of artificial intelligence for education?\",\n      \"transformedPrompt\": \"Please provide detailed reasoning in your response. Show your thought process before reaching a conclusion. Provide a very thorough and detailed analysis with multiple perspectives.\\n\\nWhat are the implications of artificial intelligence for education?\"\n    },\n    {\n      \"context\": \"Basic depth implementation\",\n      \"originalPrompt\": \"How does compound interest work?\",\n      \"transformedPrompt\": \"Please provide detailed reasoning in your response. Show your thought process before reaching a conclusion. Focus on the most important logical steps.\\n\\nHow does compound interest work?\"\n    }\n  ],\n  \"compatibilityNotes\": [\n    {\n      \"decorator\": \"Concise\",\n      \"relationship\": \"conflicts\",\n      \"notes\": \"The objectives of comprehensive reasoning and concise responses contradict each other\"\n    }\n  ]\n}\n</code></pre>"},{"location":"creating_decorators/#best-practices-for-transformation-templates","title":"Best Practices for Transformation Templates","text":"<ol> <li>Clear Instructions: Write clear, concise instructions that models can easily understand and follow.</li> <li>Parameter Context: Ensure parameter-specific instructions make sense when appended to the base instruction.</li> <li>Model Compatibility: Consider how different models might interpret your instructions.</li> <li>Composition: Design templates that compose well with other decorators.</li> <li>Testing: Test your transformation with various prompts and models to ensure consistent behavior.</li> </ol>"},{"location":"creating_decorators/#example-transformation-flow","title":"Example Transformation Flow","text":"<p>Let's walk through a complete example of how a prompt is transformed using decorators:</p> <p>Original Prompt: <pre><code>Explain how photosynthesis works.\n</code></pre></p> <p>Step 1: Apply the Audience Decorator <pre><code>{\n  \"decoratorName\": \"Audience\",\n  \"parameters\": {\n    \"level\": \"beginner\"\n  },\n  \"transformationTemplate\": {\n    \"instruction\": \"Please tailor your response for the appropriate audience.\",\n    \"parameterMapping\": {\n      \"level\": {\n        \"valueMap\": {\n          \"beginner\": \"Make your explanation accessible to someone with minimal background knowledge. Use simple language and familiar analogies.\",\n          \"intermediate\": \"Assume some background knowledge but explain technical concepts. Balance depth with accessibility.\",\n          \"expert\": \"Use field-specific terminology and provide detailed technical explanations appropriate for specialists.\"\n        }\n      }\n    },\n    \"placement\": \"append\"\n  }\n}\n</code></pre></p> <p>Transformed Prompt After Audience Decorator: <pre><code>Explain how photosynthesis works.\n\nPlease tailor your response for the appropriate audience. Make your explanation accessible to someone with minimal background knowledge. Use simple language and familiar analogies.\n</code></pre></p> <p>Step 2: Apply the StepByStep Decorator <pre><code>{\n  \"decoratorName\": \"StepByStep\",\n  \"parameters\": {\n    \"numbered\": true\n  },\n  \"transformationTemplate\": {\n    \"instruction\": \"Break down your explanation into a sequence of discrete steps.\",\n    \"parameterMapping\": {\n      \"numbered\": {\n        \"valueMap\": {\n          \"true\": \"Number each step clearly.\",\n          \"false\": \"Separate each step with clear headings or transitions.\"\n        }\n      }\n    },\n    \"placement\": \"prepend\"\n  }\n}\n</code></pre></p> <p>Final Transformed Prompt: <pre><code>Break down your explanation into a sequence of discrete steps. Number each step clearly.\n\nExplain how photosynthesis works.\n\nPlease tailor your response for the appropriate audience. Make your explanation accessible to someone with minimal background knowledge. Use simple language and familiar analogies.\n</code></pre></p> <p>This example illustrates how: 1. Each decorator's transformation template specifies how to modify the prompt 2. The placement strategy determines where instructions are positioned relative to the original prompt 3. Multiple decorators compose to create a comprehensive set of instructions 4. Parameter values influence the specific instructions that are applied</p> <p>The LLM would then process this transformed prompt, incorporating all the instructions into its response generation process.</p>"},{"location":"creating_decorators/#validation","title":"Validation","text":"<p>Always validate your decorators against the schemas to ensure compliance. Use the provided validator tool:</p> <pre><code># Validate a registry entry\n./validate_decorators.py registry path/to/your-decorator.json\n\n# Validate all registry entries in a directory\n./validate_decorators.py directory path/to/registry/dir --type registry\n</code></pre>"},{"location":"creating_decorators/#best-practices","title":"Best Practices","text":"<ol> <li>Clear Purpose: Each decorator should have a clear, distinct purpose</li> <li>Minimal Parameters: Keep parameters minimal and intuitive</li> <li>Meaningful Defaults: Provide sensible default values for parameters</li> <li>Documentation: Include comprehensive examples and descriptions</li> <li>Testing: Test your decorator with various LLMs</li> <li>Compatibility: Clearly specify compatibility with other decorators</li> <li>Versioning: Follow semantic versioning for your decorators</li> </ol>"},{"location":"creating_decorators/#contributing-to-the-registry","title":"Contributing to the Registry","text":"<p>To contribute your decorator to the central registry:</p> <ol> <li>Ensure your decorator passes validation</li> <li>Create a pull request with your registry entry</li> <li>Include comprehensive documentation and examples</li> <li>Specify any dependencies or conflicts with other decorators</li> </ol>"},{"location":"creating_decorators/#examples","title":"Examples","text":""},{"location":"creating_decorators/#example-citation-decorator","title":"Example: Citation Decorator","text":"<pre><code>{\n  \"decoratorName\": \"Citation\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Instructs the AI to include citations for factual claims in its response\",\n  \"author\": {\n    \"name\": \"Academic AI Group\",\n    \"email\": \"contact@example.org\",\n    \"url\": \"https://example.org\"\n  },\n  \"parameters\": [\n    {\n      \"name\": \"style\",\n      \"type\": \"enum\",\n      \"description\": \"The citation style to use\",\n      \"enum\": [\"apa\", \"mla\", \"chicago\", \"ieee\"],\n      \"default\": \"apa\",\n      \"required\": false\n    },\n    {\n      \"name\": \"inline\",\n      \"type\": \"boolean\",\n      \"description\": \"Whether to include inline citations or only a references section\",\n      \"default\": true,\n      \"required\": false\n    }\n  ],\n  \"examples\": [\n    {\n      \"description\": \"Research paper with APA citations\",\n      \"usage\": \"+++Citation(style=apa, inline=true)\\nExplain the evidence for climate change over the past century.\",\n      \"result\": \"Provides a response with APA-style inline citations and a references section\"\n    }\n  ],\n  \"compatibility\": {\n    \"requires\": [],\n    \"conflicts\": [],\n    \"minStandardVersion\": \"1.0.0\",\n    \"maxStandardVersion\": \"2.0.0\",\n    \"models\": [\n      \"gpt-4\",\n      \"claude-3-opus\"\n    ]\n  }\n}\n</code></pre>"},{"location":"creating_decorators/#example-debate-decorator","title":"Example: Debate Decorator","text":"<pre><code>{\n  \"decoratorName\": \"Debate\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Structures the response as a debate between multiple perspectives on a topic\",\n  \"author\": {\n    \"name\": \"Dialectic AI\",\n    \"email\": \"contact@example.org\",\n    \"url\": \"https://example.org\"\n  },\n  \"parameters\": [\n    {\n      \"name\": \"perspectives\",\n      \"type\": \"number\",\n      \"description\": \"Number of different perspectives to include\",\n      \"default\": 2,\n      \"required\": false,\n      \"validation\": {\n        \"minimum\": 2,\n        \"maximum\": 5\n      }\n    },\n    {\n      \"name\": \"balanced\",\n      \"type\": \"boolean\",\n      \"description\": \"Whether to ensure equal representation of each perspective\",\n      \"default\": true,\n      \"required\": false\n    }\n  ],\n  \"examples\": [\n    {\n      \"description\": \"Three-perspective debate on a policy issue\",\n      \"usage\": \"+++Debate(perspectives=3, balanced=true)\\nShould universal basic income be implemented nationally?\",\n      \"result\": \"Presents three balanced perspectives on UBI in a debate format\"\n    }\n  ],\n  \"compatibility\": {\n    \"requires\": [],\n    \"conflicts\": [\"OutputFormat\"],\n    \"minStandardVersion\": \"1.0.0\",\n    \"maxStandardVersion\": \"2.0.0\",\n    \"models\": [\n      \"gpt-4\"\n    ]\n  }\n}\n</code></pre>"},{"location":"development/","title":"Development Setup","text":"<p>This page provides a quick overview of the development setup for the Prompt Decorators framework. For a comprehensive guide, please see the Development Guide.</p>"},{"location":"development/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9 or higher</li> <li>Poetry for dependency management</li> <li>Git</li> </ul>"},{"location":"development/#quick-start","title":"Quick Start","text":""},{"location":"development/#clone-the-repository","title":"Clone the Repository","text":"<pre><code>git clone https://github.com/yourusername/prompt-decorators.git\ncd prompt-decorators\n</code></pre>"},{"location":"development/#install-dependencies-with-poetry","title":"Install Dependencies with Poetry","text":"<pre><code># Install Poetry (if not already installed)\ncurl -sSL https://install.python-poetry.org | python3 -\n\n# Install dependencies\npoetry install\n\n# Activate virtual environment\npoetry shell\n</code></pre>"},{"location":"development/#set-up-pre-commit-hooks","title":"Set Up Pre-commit Hooks","text":"<pre><code>python scripts/setup_pre_commit.py\n</code></pre>"},{"location":"development/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\npoetry run pytest\n\n# Run tests with coverage\npoetry run pytest --cov=prompt_decorators\n</code></pre>"},{"location":"development/#building-documentation","title":"Building Documentation","text":"<p>The documentation process involves two steps:</p> <ol> <li> <p>Generate API reference documentation from code: <pre><code># Generate API documentation (with clean output directory)\npython docs/generate_docs.py --format markdown --clean\n</code></pre></p> </li> <li> <p>Build the documentation website: <pre><code># Serve documentation locally\npoetry run mkdocs serve\n\n# Build documentation\npoetry run mkdocs build\n</code></pre></p> </li> </ol> <p>For more details on the documentation process, see the Documentation Workflow.</p>"},{"location":"development/#code-quality-tools","title":"Code Quality Tools","text":"<pre><code># Run all checks\npre-commit run --all-files\n</code></pre>"},{"location":"development/#additional-resources","title":"Additional Resources","text":"<p>For more detailed information, please refer to:</p> <ul> <li>Development Guide - Comprehensive development documentation</li> <li>Contributing Guide - How to contribute to the project</li> <li>Documentation Workflow - How to generate and maintain documentation</li> <li>Code Standards - Coding standards and docstring guidelines</li> <li>Project Structure - Analysis of the codebase structure</li> </ul>"},{"location":"development_guide/","title":"Prompt Decorators Development Guide","text":"<p>This comprehensive guide provides detailed instructions for developers contributing to the Prompt Decorators project. It covers development environment setup, workflow, code standards, and best practices.</p>"},{"location":"development_guide/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Prerequisites</li> <li>Development Environment</li> <li>Project Structure</li> <li>Development Workflow</li> <li>Code Standards</li> <li>Testing</li> <li>Documentation</li> <li>CI/CD and Automation</li> <li>Release Process</li> <li>Troubleshooting</li> </ol>"},{"location":"development_guide/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.9 or higher</li> <li>Poetry 1.4.0 or higher</li> <li>Git</li> </ul>"},{"location":"development_guide/#development-environment","title":"Development Environment","text":""},{"location":"development_guide/#setting-up-the-environment","title":"Setting Up the Environment","text":"<ol> <li>Clone the Repository</li> </ol> <pre><code>git clone https://github.com/yourusername/prompt-decorators.git\ncd prompt-decorators\n</code></pre> <ol> <li>Install Poetry (if not already installed)</li> </ol> <pre><code>curl -sSL https://install.python-poetry.org | python3 -\n</code></pre> <ol> <li>Install Dependencies</li> </ol> <pre><code># Install all dependencies (including development and documentation)\npoetry install\n\n# Activate the virtual environment\npoetry shell\n</code></pre> <ol> <li>Set Up Pre-commit Hooks</li> </ol> <pre><code># Install and set up pre-commit hooks\npython scripts/setup_pre_commit.py\n</code></pre>"},{"location":"development_guide/#project-structure","title":"Project Structure","text":"<p>The codebase is organized into the following main directories:</p> <ul> <li>prompt_decorators/</li> <li>core/: Base classes and core functionality</li> <li>decorators/: Decorator implementations<ul> <li>generated/: Auto-generated decorator classes</li> </ul> </li> <li>generator/: Code generation utilities</li> <li>utils/: Utility functions and helpers</li> <li>docs/: Documentation files</li> <li>tests/: Test suite</li> <li>scripts/: Utility scripts for development</li> <li>registry/: JSON definitions for decorators</li> <li>examples/: Example scripts and notebooks</li> </ul> <p>Key architectural features: - Clean dependency flow from decorators \u2192 core and utils \u2192 core - Separation of user-defined and generated code - Registry-driven approach for decorator definitions</p>"},{"location":"development_guide/#development-workflow","title":"Development Workflow","text":""},{"location":"development_guide/#workflow-with-poetry","title":"Workflow with Poetry","text":"<p>Poetry provides a modern workflow for dependency management:</p> <pre><code># Add a new dependency\npoetry add package-name\n\n# Add a development dependency\npoetry add --group dev package-name\n\n# Update dependencies\npoetry update\n\n# Run commands within the virtual environment\npoetry run python script.py\n\n# Build the package\npoetry build\n</code></pre>"},{"location":"development_guide/#code-quality-tools","title":"Code Quality Tools","text":"<p>Our pre-commit hooks automate code quality checks, but you can also run them manually:</p> <pre><code># Format code with Black\npoetry run black prompt_decorators tests\n\n# Sort imports with isort\npoetry run isort prompt_decorators tests\n\n# Lint code with Ruff\npoetry run ruff prompt_decorators tests\n\n# Type check with mypy\npoetry run mypy prompt_decorators\n\n# Check docstrings\npython scripts/standardize_docstrings.py prompt_decorators --check\n\n# Run all checks at once\npre-commit run --all-files\n</code></pre>"},{"location":"development_guide/#code-standards","title":"Code Standards","text":""},{"location":"development_guide/#import-formatting","title":"Import Formatting","text":"<p>We use <code>isort</code> with the following configuration:</p> <pre><code>[tool.isort]\nprofile = \"black\"\nline_length = 88\nmulti_line_output = 3\n</code></pre> <p>Key rules: - Standard library imports first, followed by third-party, then local imports - Alphabetical ordering within each group - Consistent use of <code>from x import y</code> style</p>"},{"location":"development_guide/#python-code-style","title":"Python Code Style","text":"<p>We follow the Black code style with a line length of 88 characters:</p> <pre><code>[tool.black]\nline-length = 88\ntarget-version = [\"py38\", \"py39\", \"py310\", \"py311\"]\n</code></pre>"},{"location":"development_guide/#type-annotations","title":"Type Annotations","text":"<p>All functions and methods must have type annotations:</p> <pre><code>def calculate_average(numbers: List[float]) -&gt; float:\n    \"\"\"Calculate the average of a list of numbers.\"\"\"\n    return sum(numbers) / len(numbers)\n</code></pre>"},{"location":"development_guide/#docstrings","title":"Docstrings","text":"<p>We use Google-style docstrings throughout the codebase:</p> <pre><code>def function_name(param1: str, param2: int) -&gt; bool:\n    \"\"\"Short description of the function.\n\n    More detailed description that can span multiple lines.\n\n    Args:\n        param1: Description of the first parameter.\n        param2: Description of the second parameter.\n\n    Returns:\n        Description of the return value.\n\n    Raises:\n        ExceptionType: When and why this exception is raised.\n    \"\"\"\n</code></pre> <p>Required sections: 1. Short description (one line) 2. Detailed description (optional, can be multi-line) 3. Args (required if the function takes parameters) 4. Returns (required if the function returns a value) 5. Raises (optional, document exceptions that might be raised)</p>"},{"location":"development_guide/#testing","title":"Testing","text":"<p>We use pytest for testing:</p> <pre><code># Run all tests\npoetry run pytest\n\n# Run tests with coverage\npoetry run pytest --cov=prompt_decorators\n\n# Run a specific test\npoetry run pytest tests/test_specific_file.py::TestClass::test_specific_function\n</code></pre>"},{"location":"development_guide/#test-generation","title":"Test Generation","text":"<p>For new decorators, tests can be auto-generated:</p> <pre><code>python scripts/generate_tests.py --registry-dir registry --output-dir tests/auto\n</code></pre>"},{"location":"development_guide/#documentation","title":"Documentation","text":"<p>We use MkDocs with the Material theme for documentation:</p> <pre><code># Serve documentation locally\npoetry run mkdocs serve\n\n# Build documentation\npoetry run mkdocs build\n</code></pre>"},{"location":"development_guide/#documentation-standards","title":"Documentation Standards","text":"<ol> <li>Code Reference Documentation: Generated from docstrings</li> <li>User Guides: Markdown files in the <code>docs/</code> directory</li> <li>Examples: Executable examples in the <code>examples/</code> directory</li> <li>Tutorials: Step-by-step guides in the <code>docs/tutorials/</code> directory</li> </ol>"},{"location":"development_guide/#cicd-and-automation","title":"CI/CD and Automation","text":""},{"location":"development_guide/#github-actions-workflows","title":"GitHub Actions Workflows","text":"<p>We have several GitHub Actions workflows:</p> <ol> <li>Code Quality: Runs on all pull requests and pushes to main</li> <li>Pre-commit checks</li> <li>Tests on multiple Python versions</li> <li>Type checking</li> <li> <p>Docstring validation</p> </li> <li> <p>Documentation: Builds and deploys documentation when relevant files change</p> </li> <li> <p>Publish: Publishes the package to PyPI when a new release is created</p> </li> </ol>"},{"location":"development_guide/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>Our pre-commit hooks enforce: - Code formatting with Black - Import sorting with isort - Linting with Ruff - Type checking with mypy - Documentation standards</p>"},{"location":"development_guide/#release-process","title":"Release Process","text":"<p>To create a new release:</p> <ol> <li>Update the version number in pyproject.toml</li> <li>Update the CHANGELOG.md file</li> <li>Create a pull request with these changes</li> <li>After merging, create a new GitHub release with a tag matching the version</li> <li>The GitHub Actions workflow will automatically publish to PyPI</li> </ol>"},{"location":"development_guide/#troubleshooting","title":"Troubleshooting","text":""},{"location":"development_guide/#common-issues","title":"Common Issues","text":""},{"location":"development_guide/#import-errors","title":"Import Errors","text":"<p>If you encounter import errors, make sure your virtual environment is activated:</p> <pre><code>poetry shell\n</code></pre>"},{"location":"development_guide/#pre-commit-hook-issues","title":"Pre-commit Hook Issues","text":"<p>If pre-commit hooks are failing:</p> <pre><code># Update pre-commit hooks\npre-commit autoupdate\n\n# Run with verbose output to debug\npre-commit run --all-files --verbose\n</code></pre>"},{"location":"development_guide/#poetry-issues","title":"Poetry Issues","text":"<p>If poetry is having dependency resolution issues:</p> <pre><code># Clear poetry cache\npoetry cache clear --all pypi\n\n# Update poetry itself\npip install --upgrade poetry\n</code></pre>"},{"location":"development_guide/#additional-resources","title":"Additional Resources","text":"<ul> <li>Poetry Documentation</li> <li>Black Documentation</li> <li>Ruff Documentation</li> </ul>"},{"location":"docstring_improvement_plan/","title":"Docstring Improvement Plan","text":"<p>This document outlines a plan for improving docstrings throughout the Prompt Decorators codebase to ensure they follow Google-style docstring standards and provide comprehensive information.</p>"},{"location":"docstring_improvement_plan/#current-status","title":"Current Status","text":"<p>The codebase currently has a mix of docstring quality:</p> <ol> <li>Some files have comprehensive Google-style docstrings</li> <li>Some files have minimal docstrings</li> <li>Some generated files may have inconsistent docstrings</li> </ol>"},{"location":"docstring_improvement_plan/#improvement-goals","title":"Improvement Goals","text":"<ol> <li>Ensure all public classes, methods, and functions have comprehensive Google-style docstrings</li> <li>Add usage examples to key classes and functions</li> <li>Standardize docstring formatting across the codebase</li> <li>Ensure docstrings include all parameters, return values, and raised exceptions</li> </ol>"},{"location":"docstring_improvement_plan/#priority-areas","title":"Priority Areas","text":""},{"location":"docstring_improvement_plan/#core-module","title":"Core Module","text":"<p>The core module should have the most comprehensive docstrings as it forms the foundation of the framework:</p> <ul> <li><code>prompt_decorators/core/base.py</code></li> <li><code>prompt_decorators/core/request.py</code></li> <li><code>prompt_decorators/core/validation.py</code></li> <li><code>prompt_decorators/core/model_specific.py</code></li> </ul>"},{"location":"docstring_improvement_plan/#generator-module","title":"Generator Module","text":"<p>The generator module should have detailed docstrings explaining the code generation process:</p> <ul> <li><code>prompt_decorators/generator/registry.py</code></li> <li><code>prompt_decorators/generator/code_gen.py</code></li> <li><code>prompt_decorators/generator/test_gen.py</code></li> </ul>"},{"location":"docstring_improvement_plan/#decorator-templates","title":"Decorator Templates","text":"<p>Improve the templates used for generating decorator docstrings to ensure they:</p> <ol> <li>Clearly explain the purpose of each decorator</li> <li>Document all parameters with types and descriptions</li> <li>Include usage examples</li> <li>Explain any constraints or limitations</li> </ol>"},{"location":"docstring_improvement_plan/#implementation-strategy","title":"Implementation Strategy","text":""},{"location":"docstring_improvement_plan/#1-update-code-generation-templates","title":"1. Update Code Generation Templates","text":"<p>Modify the code generation templates to produce more comprehensive docstrings for all generated decorators. This should include:</p> <pre><code>\"\"\"\nDetailed description of the decorator's purpose and functionality.\n\nThis decorator [explain what it does in detail, including any special behaviors or considerations].\n\nArgs:\n    param1 (type): Detailed description of parameter 1.\n    param2 (type): Detailed description of parameter 2.\n\nReturns:\n    type: Description of the return value.\n\nRaises:\n    ExceptionType: Description of when this exception is raised.\n\nExamples:\n    ```python\n    # Basic usage example\n    from prompt_decorators import DecoratorName\n\n    decorator = DecoratorName(param1=\"value\", param2=\"value\")\n    result = decorator.apply(\"Your prompt text\")\n    ```\n\n    ```python\n    # Advanced usage example\n    from prompt_decorators import DecoratorName, Chain\n\n    # Example of combining with other decorators\n    combined = Chain([\n        DecoratorName(param1=\"value\"),\n        OtherDecorator()\n    ])\n    ```\n\"\"\"\n</code></pre>"},{"location":"docstring_improvement_plan/#2-create-a-docstring-checker-script","title":"2. Create a Docstring Checker Script","text":"<p>Develop a script that can:</p> <ol> <li>Scan the codebase for missing or incomplete docstrings</li> <li>Verify that docstrings follow Google-style formatting</li> <li>Check for missing parameter documentation</li> <li>Generate reports on docstring coverage and quality</li> </ol>"},{"location":"docstring_improvement_plan/#3-manual-review-and-enhancement","title":"3. Manual Review and Enhancement","text":"<p>For core modules and key utilities:</p> <ol> <li>Manually review and enhance docstrings</li> <li>Add detailed usage examples</li> <li>Ensure all parameters, return values, and exceptions are documented</li> <li>Add cross-references to related classes and methods</li> </ol>"},{"location":"docstring_improvement_plan/#example-improvements","title":"Example Improvements","text":""},{"location":"docstring_improvement_plan/#before","title":"Before:","text":"<pre><code>def apply(self, text):\n    \"\"\"Apply the decorator to the text.\"\"\"\n    # Implementation\n</code></pre>"},{"location":"docstring_improvement_plan/#after","title":"After:","text":"<pre><code>def apply(self, text: str) -&gt; str:\n    \"\"\"Apply the decorator to the input text.\n\n    This method processes the input text according to the decorator's configuration\n    and returns the modified text with the decorator's effects applied.\n\n    Args:\n        text (str): The input text to which the decorator should be applied.\n            This can be a prompt, a response, or any text content.\n\n    Returns:\n        str: The modified text with the decorator applied.\n\n    Raises:\n        ValueError: If the input text is empty or None.\n\n    Examples:\n        ```python\n        decorator = MyDecorator(param=\"value\")\n        result = decorator.apply(\"Original text\")\n        print(result)  # Prints the modified text\n        ```\n    \"\"\"\n    # Implementation\n</code></pre>"},{"location":"docstring_improvement_plan/#timeline","title":"Timeline","text":"<ol> <li>First, update the code generation templates to ensure all newly generated code has comprehensive docstrings.</li> <li>Then, create and run the docstring checker script to identify areas needing improvement.</li> <li>Finally, manually enhance docstrings in core modules and key utilities.</li> </ol>"},{"location":"docstring_improvement_plan/#tracking-progress","title":"Tracking Progress","text":"<p>Create a GitHub issue to track progress on docstring improvements, with a checklist for each module that needs to be updated.</p>"},{"location":"documentation_checklist/","title":"Documentation Verification Checklist","text":"<p>This checklist helps ensure that the documentation for the prompt-decorators project is complete, accurate, and helpful for users. Use this checklist when reviewing documentation changes or conducting regular documentation audits.</p>"},{"location":"documentation_checklist/#navigation-structure","title":"Navigation Structure","text":"<ul> <li> All important sections are accessible from the navigation</li> <li> The navigation hierarchy makes logical sense</li> <li> Section titles are clear and descriptive</li> <li> Breadcrumbs work correctly</li> <li> Table of contents is accurate and complete</li> </ul>"},{"location":"documentation_checklist/#content-quality","title":"Content Quality","text":"<ul> <li> Documentation is clear and well-written</li> <li> Examples are accurate and helpful</li> <li> Terminology is consistent throughout</li> <li> Code examples are up-to-date with the current API</li> <li> All code examples are runnable without modification</li> <li> Complex concepts are explained with appropriate detail</li> <li> No spelling or grammatical errors</li> </ul>"},{"location":"documentation_checklist/#visual-appearance","title":"Visual Appearance","text":"<ul> <li> Documentation renders correctly on desktop browsers</li> <li> Documentation renders correctly on mobile devices</li> <li> Code blocks are properly formatted with syntax highlighting</li> <li> Images and diagrams are clear and relevant</li> <li> Dark/light mode switching works correctly (if applicable)</li> <li> Tables are formatted correctly and readable</li> </ul>"},{"location":"documentation_checklist/#user-experience","title":"User Experience","text":"<ul> <li> Search functionality works correctly</li> <li> Documentation is easy to navigate</li> <li> Related content is properly linked</li> <li> External links open in new tabs</li> <li> No broken links or 404 errors</li> <li> Page load times are reasonable</li> </ul>"},{"location":"documentation_checklist/#api-documentation","title":"API Documentation","text":"<ul> <li> All public classes, methods, and functions are documented</li> <li> Parameter descriptions are clear and accurate</li> <li> Return value descriptions are clear and accurate</li> <li> Exception information is included where relevant</li> <li> Type annotations match the documentation</li> <li> Examples demonstrate common use cases</li> <li> Deprecated features are clearly marked</li> </ul>"},{"location":"documentation_checklist/#registry-documentation","title":"Registry Documentation","text":"<ul> <li> All decorators in the registry have corresponding documentation</li> <li> Decorator parameters are clearly documented</li> <li> Decorator examples show typical usage patterns</li> <li> Compatibility information is included</li> <li> Version information is accurate</li> </ul>"},{"location":"documentation_checklist/#getting-started","title":"Getting Started","text":"<ul> <li> Installation instructions are clear and work for all supported platforms</li> <li> Quick start guide provides a simple, working example</li> <li> Prerequisites are clearly stated</li> <li> Common pitfalls are addressed</li> </ul>"},{"location":"documentation_checklist/#tutorials-and-guides","title":"Tutorials and Guides","text":"<ul> <li> Tutorials cover key use cases</li> <li> Step-by-step instructions are clear and accurate</li> <li> Advanced usage scenarios are documented</li> <li> Integration with other tools/libraries is explained where relevant</li> </ul>"},{"location":"documentation_checklist/#feedback-and-improvement","title":"Feedback and Improvement","text":"<ul> <li> Documentation includes a way for users to provide feedback</li> <li> Issues identified in previous reviews have been addressed</li> <li> Recent API changes are reflected in the documentation</li> <li> Documentation is reviewed for accuracy before each release</li> </ul>"},{"location":"documentation_checklist/#accessibility","title":"Accessibility","text":"<ul> <li> Documentation meets basic accessibility standards</li> <li> Images have alt text</li> <li> Color contrast is sufficient</li> <li> Navigation is keyboard-accessible</li> </ul>"},{"location":"documentation_checklist/#notes","title":"Notes","text":"<p>Use this section to record any issues found during the review and plans for addressing them:</p> <p>1. 2. 3.</p>"},{"location":"documentation_checklist/#review-information","title":"Review Information","text":"<ul> <li>Reviewer:</li> <li>Date:</li> <li>Version Reviewed:</li> </ul>"},{"location":"documentation_workflow/","title":"Documentation Workflow","text":"<p>This document explains the workflow for generating and maintaining documentation for the Prompt Decorators project.</p>"},{"location":"documentation_workflow/#overview","title":"Overview","text":"<p>The documentation for Prompt Decorators consists of:</p> <ol> <li>API Reference: Automatically generated from docstrings and type annotations in the code</li> <li>User Guides: Manually written Markdown files</li> <li>Examples: Code examples with explanations</li> <li>Tutorials: Step-by-step guides for common tasks</li> </ol> <p>We use MkDocs with the Material theme to build the documentation website.</p>"},{"location":"documentation_workflow/#documentation-generation-process","title":"Documentation Generation Process","text":"<p>The documentation generation process involves two main steps:</p> <ol> <li>Generate API Reference: Extract docstrings and type annotations from the code to create Markdown files</li> <li>Build Documentation Website: Use MkDocs to build a static website from all Markdown files</li> </ol>"},{"location":"documentation_workflow/#step-1-generate-api-reference","title":"Step 1: Generate API Reference","text":"<p>To generate the API reference documentation, use the <code>generate_docs.py</code> script:</p> <pre><code># Generate Markdown documentation\npython docs/generate_docs.py --format markdown\n\n# Clean the output directory before generating documentation\npython docs/generate_docs.py --format markdown --clean\n\n# Generate both Markdown and HTML documentation\npython docs/generate_docs.py --format both\n</code></pre> <p>This script: - Extracts docstrings and type annotations from the code - Loads decorator definitions from the registry - Merges code and registry documentation - Generates Markdown files in the <code>docs/api</code> directory</p>"},{"location":"documentation_workflow/#step-2-build-documentation-website","title":"Step 2: Build Documentation Website","text":"<p>To build the documentation website, use MkDocs:</p> <pre><code># Serve documentation locally (with live reload)\nmkdocs serve\n\n# Build documentation\nmkdocs build\n\n# Deploy documentation to GitHub Pages\nmkdocs gh-deploy\n</code></pre>"},{"location":"documentation_workflow/#documentation-structure","title":"Documentation Structure","text":"<p>The documentation is organized as follows:</p> <ul> <li><code>docs/</code>: Root directory for documentation</li> <li><code>api/</code>: API reference documentation (auto-generated)</li> <li><code>examples/</code>: Code examples with explanations</li> <li><code>guide/</code>: User guides</li> <li><code>tutorials/</code>: Step-by-step tutorials</li> <li><code>project_summaries/</code>: Project overview and summaries</li> <li><code>guides/</code>: Domain-specific guides</li> </ul>"},{"location":"documentation_workflow/#maintaining-documentation","title":"Maintaining Documentation","text":""},{"location":"documentation_workflow/#updating-api-reference","title":"Updating API Reference","text":"<p>When you make changes to the code:</p> <ol> <li>Update docstrings and type annotations in the code</li> <li>Run <code>python docs/generate_docs.py --format markdown --clean</code> to regenerate the API reference</li> <li>Run <code>mkdocs serve</code> to preview the changes</li> <li>Commit the changes to the repository</li> </ol>"},{"location":"documentation_workflow/#adding-new-documentation","title":"Adding New Documentation","text":"<p>To add new documentation:</p> <ol> <li>Create a new Markdown file in the appropriate directory</li> <li>Add the file to the navigation in <code>mkdocs.yml</code></li> <li>Run <code>mkdocs serve</code> to preview the changes</li> <li>Commit the changes to the repository</li> </ol>"},{"location":"documentation_workflow/#documentation-standards","title":"Documentation Standards","text":"<p>Please follow these standards when writing documentation:</p> <ol> <li>Docstrings: Use Google-style docstrings (see DOCSTRING_STANDARDS.md)</li> <li>Markdown: Use consistent formatting and structure</li> <li>Examples: Include runnable examples that demonstrate key features</li> <li>Links: Ensure all links are valid and point to the correct location</li> </ol>"},{"location":"documentation_workflow/#troubleshooting","title":"Troubleshooting","text":""},{"location":"documentation_workflow/#broken-links","title":"Broken Links","text":"<p>If you encounter broken links in the documentation:</p> <ol> <li>Run <code>mkdocs build</code> to see warnings about broken links</li> <li>Fix the broken links in the source files</li> <li>Regenerate the API reference if necessary</li> <li>Run <code>mkdocs serve</code> to verify the fixes</li> </ol>"},{"location":"documentation_workflow/#missing-documentation","title":"Missing Documentation","text":"<p>If you notice missing documentation:</p> <ol> <li>Check if the code has proper docstrings and type annotations</li> <li>Ensure the module or class is included in the documentation generation process</li> <li>Update the docstrings and regenerate the API reference</li> <li>Update the navigation in <code>mkdocs.yml</code> if necessary</li> </ol>"},{"location":"faq/","title":"Frequently Asked Questions (FAQ)","text":""},{"location":"faq/#general-questions","title":"General Questions","text":""},{"location":"faq/#what-is-prompt-decorators","title":"What is Prompt Decorators?","text":"<p>Prompt Decorators is a Python framework that provides a structured way to enhance prompts for Large Language Models (LLMs). It allows you to apply various \"decorators\" to your prompts, each adding specific functionality or behavior, such as reasoning patterns, output formatting, or persona characteristics.</p>"},{"location":"faq/#why-should-i-use-prompt-decorators","title":"Why should I use Prompt Decorators?","text":"<p>Prompt Decorators offers several benefits:</p> <ul> <li>Modularity: Apply specific prompt engineering techniques independently</li> <li>Reusability: Create a library of prompt techniques that can be reused across projects</li> <li>Standardization: Establish consistent prompt patterns across your organization</li> <li>Experimentation: Easily test different prompt engineering approaches</li> <li>Compatibility: Work with multiple LLM providers using the same decorator patterns</li> </ul>"},{"location":"faq/#is-prompt-decorators-free-to-use","title":"Is Prompt Decorators free to use?","text":"<p>Yes, Prompt Decorators is open-source software released under the MIT License, which allows for free use, modification, and distribution.</p>"},{"location":"faq/#which-python-versions-are-supported","title":"Which Python versions are supported?","text":"<p>Prompt Decorators supports Python 3.8 and higher.</p>"},{"location":"faq/#does-prompt-decorators-work-with-all-llm-providers","title":"Does Prompt Decorators work with all LLM providers?","text":"<p>Yes, Prompt Decorators is designed to be provider-agnostic. You can use it with any LLM API, including OpenAI, Anthropic, Hugging Face, and others. The framework focuses on enhancing the prompts themselves, which can then be sent to any LLM provider.</p>"},{"location":"faq/#technical-questions","title":"Technical Questions","text":""},{"location":"faq/#how-do-decorators-work","title":"How do decorators work?","text":"<p>Decorators in this framework are Python classes that implement an <code>apply</code> method, which takes a prompt string as input and returns a modified prompt string as output. Each decorator adds specific enhancements to the prompt, such as reasoning instructions, output formatting requirements, or persona characteristics.</p>"},{"location":"faq/#can-i-chain-multiple-decorators","title":"Can I chain multiple decorators?","text":"<p>Yes, you can apply multiple decorators in sequence. The order of application matters, as each decorator modifies the prompt based on its current state. For example:</p> <pre><code>from prompt_decorators.decorators import Reasoning, OutputFormat\n\nreasoning = Reasoning(style=\"detailed\")\noutput_format = OutputFormat(format_type=\"markdown\")\n\nprompt = \"Explain quantum entanglement.\"\ndecorated_prompt = output_format.apply(reasoning.apply(prompt))\n</code></pre>"},{"location":"faq/#are-there-any-limitations-on-the-number-of-decorators-i-can-use","title":"Are there any limitations on the number of decorators I can use?","text":"<p>There's no hard limit on the number of decorators you can apply, but consider these practical limitations:</p> <ol> <li>Each decorator adds to the prompt length, which may approach token limits of LLMs</li> <li>Too many decorators might create conflicting instructions</li> <li>Performance may degrade with a large number of decorators</li> </ol>"},{"location":"faq/#how-do-i-create-my-own-custom-decorator","title":"How do I create my own custom decorator?","text":"<p>To create a custom decorator, you need to:</p> <ol> <li>Create a class that inherits from <code>BaseDecorator</code></li> <li>Implement the <code>apply</code>, <code>to_dict</code>, and <code>from_dict</code> methods</li> <li>Register your decorator with the <code>DecoratorRegistry</code></li> </ol> <p>See the Advanced Usage Guide for a detailed example.</p>"},{"location":"faq/#can-i-use-prompt-decorators-with-frameworks-like-langchain","title":"Can I use Prompt Decorators with frameworks like LangChain?","text":"<p>Yes, Prompt Decorators can be integrated with LangChain and other LLM frameworks. You can apply decorators to prompts before passing them to LangChain components, or create custom LangChain prompt templates that incorporate Prompt Decorators. See the API Integration Guide for examples.</p>"},{"location":"faq/#usage-questions","title":"Usage Questions","text":""},{"location":"faq/#how-do-i-install-prompt-decorators","title":"How do I install Prompt Decorators?","text":"<p>You can install Prompt Decorators using pip:</p> <pre><code>pip install prompt-decorators\n</code></pre> <p>For development or to include optional dependencies:</p> <pre><code>pip install prompt-decorators[dev]  # Development dependencies\npip install prompt-decorators[cli]  # CLI dependencies\npip install prompt-decorators[all]  # All dependencies\n</code></pre>"},{"location":"faq/#whats-the-difference-between-a-decorator-and-a-prompt-template","title":"What's the difference between a decorator and a prompt template?","text":"<ul> <li>Prompt Templates are static structures with placeholders for variables. They define the overall structure of a prompt.</li> <li>Decorators are dynamic modifiers that enhance prompts with specific behaviors or patterns. They can be applied to any prompt, including those generated from templates.</li> </ul> <p>You can use both together: create a template for your base prompt structure, then apply decorators to enhance it with specific behaviors.</p>"},{"location":"faq/#how-do-i-find-available-decorators","title":"How do I find available decorators?","text":"<p>You can list all available decorators using the registry:</p> <pre><code>from prompt_decorators.registry import DecoratorRegistry\n\nregistry = DecoratorRegistry()\ndecorators = registry.get_all_decorators()\nprint(decorators)\n</code></pre> <p>Or using the CLI:</p> <pre><code>prompt-decorators list\n</code></pre>"},{"location":"faq/#can-i-use-prompt-decorators-in-production","title":"Can I use Prompt Decorators in production?","text":"<p>Yes, Prompt Decorators is designed for production use. It includes features like:</p> <ul> <li>Serialization/deserialization for storing and retrieving decorated prompts</li> <li>Compatibility checking to ensure decorators work well together</li> <li>Error handling and validation</li> <li>Performance optimizations like caching</li> </ul>"},{"location":"faq/#how-do-i-contribute-to-prompt-decorators","title":"How do I contribute to Prompt Decorators?","text":"<p>Contributions are welcome! See the Contributing Guide for details on how to contribute to the project.</p>"},{"location":"faq/#troubleshooting","title":"Troubleshooting","text":""},{"location":"faq/#why-isnt-my-decorator-modifying-the-prompt-as-expected","title":"Why isn't my decorator modifying the prompt as expected?","text":"<p>Common reasons include:</p> <ol> <li>Decorators are applied in the wrong order</li> <li>The decorator parameters aren't set correctly</li> <li>There might be compatibility issues between decorators</li> <li>The LLM might not be following the decorated instructions</li> </ol> <p>See the Troubleshooting Guide for more detailed help.</p>"},{"location":"faq/#how-do-i-debug-issues-with-decorators","title":"How do I debug issues with decorators?","text":"<p>You can enable debug logging to see what's happening:</p> <pre><code>import logging\nlogging.basicConfig(level=logging.DEBUG)\nlogger = logging.getLogger(\"prompt_decorators\")\n</code></pre> <p>You can also print the decorated prompt before sending it to the LLM:</p> <pre><code>decorated_prompt = decorator.apply(prompt)\nprint(decorated_prompt)\n</code></pre>"},{"location":"faq/#why-am-i-getting-a-decorator-not-found-error","title":"Why am I getting a \"Decorator not found\" error?","text":"<p>This usually means the decorator isn't registered or the name is misspelled. Check:</p> <ol> <li>That you're using the correct decorator name</li> <li>That the decorator is properly registered</li> <li>That you've installed any extensions that might contain the decorator</li> </ol>"},{"location":"faq/#can-decorators-increase-my-api-costs","title":"Can decorators increase my API costs?","text":"<p>Decorators add text to your prompts, which increases the token count sent to the LLM API. This can increase costs, especially if you're using many decorators or complex ones. However, the improved quality and consistency of responses often outweighs the marginal cost increase.</p>"},{"location":"faq/#advanced-questions","title":"Advanced Questions","text":""},{"location":"faq/#how-does-versioning-work-for-decorators","title":"How does versioning work for decorators?","text":"<p>Decorators support versioning to manage compatibility:</p> <ol> <li>Each decorator can have a version number</li> <li>The registry can track different versions of decorators</li> <li>Compatibility checks can ensure decorators work together</li> <li>You can specify version requirements when retrieving decorators</li> </ol>"},{"location":"faq/#can-i-use-prompt-decorators-with-non-english-languages","title":"Can I use Prompt Decorators with non-English languages?","text":"<p>Yes, Prompt Decorators works with any language supported by the underlying LLM. However, some decorators might be optimized for English and may need adaptation for other languages.</p>"},{"location":"faq/#is-there-a-way-to-measure-the-effectiveness-of-decorators","title":"Is there a way to measure the effectiveness of decorators?","text":"<p>You can implement evaluation metrics to compare the quality of responses with and without specific decorators. The framework doesn't include built-in evaluation tools, but you can:</p> <ol> <li>Create A/B tests with different decorator combinations</li> <li>Implement metrics like response quality, relevance, or accuracy</li> <li>Use human evaluation to assess the impact of decorators</li> </ol>"},{"location":"faq/#how-do-i-handle-model-specific-adaptations","title":"How do I handle model-specific adaptations?","text":"<p>Some decorators might work differently with different LLMs. You can:</p> <ol> <li>Create model-specific versions of decorators</li> <li>Use conditional logic within decorators based on the target model</li> <li>Implement middleware that adapts decorators for specific models</li> </ol> <p>See the Advanced Usage Guide for examples.</p>"},{"location":"faq/#next-steps","title":"Next Steps","text":"<ul> <li>Explore the Basic Usage Guide</li> <li>Check out the API Reference</li> <li>See Examples of Prompt Decorators in action</li> </ul>"},{"location":"glossary/","title":"Glossary","text":"<p>This glossary defines key terms used throughout the Prompt Decorators documentation.</p>"},{"location":"glossary/#a","title":"A","text":""},{"location":"glossary/#api-integration","title":"API Integration","text":"<p>The process of connecting the Prompt Decorators framework with various LLM provider APIs, such as OpenAI, Anthropic, or Hugging Face.</p>"},{"location":"glossary/#apply-method","title":"Apply Method","text":"<p>The core method of a decorator that takes a prompt as input and returns a modified prompt as output. All decorators must implement this method.</p>"},{"location":"glossary/#b","title":"B","text":""},{"location":"glossary/#basedecorator","title":"BaseDecorator","text":"<p>The abstract base class that all decorators must inherit from. It defines the interface that all decorators must implement, including the <code>apply</code>, <code>to_dict</code>, and <code>from_dict</code> methods.</p>"},{"location":"glossary/#c","title":"C","text":""},{"location":"glossary/#chain-of-thought","title":"Chain of Thought","text":"<p>A prompt engineering technique that encourages the LLM to break down complex problems into steps and show its reasoning process. Implemented as the <code>ChainOfThought</code> decorator in the framework.</p>"},{"location":"glossary/#cli-command-line-interface","title":"CLI (Command Line Interface)","text":"<p>A text-based interface that allows users to interact with the Prompt Decorators framework through terminal commands.</p>"},{"location":"glossary/#compatibility","title":"Compatibility","text":"<p>The ability of decorators to work together without conflicts. The framework includes tools to check decorator compatibility.</p>"},{"location":"glossary/#custom-decorator","title":"Custom Decorator","text":"<p>A decorator created by a user that extends the BaseDecorator class to implement specific functionality not provided by the built-in decorators.</p>"},{"location":"glossary/#d","title":"D","text":""},{"location":"glossary/#decorator","title":"Decorator","text":"<p>In the context of this framework, a class that modifies a prompt to enhance its effectiveness with LLMs. Not to be confused with Python decorators (the <code>@decorator</code> syntax), although the concept is similar.</p>"},{"location":"glossary/#decorator-chain","title":"Decorator Chain","text":"<p>A sequence of decorators applied one after another to a prompt. The order of application matters, as each decorator modifies the prompt based on its current state.</p>"},{"location":"glossary/#decorator-registry","title":"Decorator Registry","text":"<p>A central repository that keeps track of all available decorators, their metadata, and provides methods to retrieve and instantiate them.</p>"},{"location":"glossary/#decoratedrequest","title":"DecoratedRequest","text":"<p>A class that encapsulates a prompt, a list of decorators to apply, and additional metadata like the target model and API parameters.</p>"},{"location":"glossary/#discovery","title":"Discovery","text":"<p>The process of automatically finding and registering decorators in the registry, typically by scanning specific directories for classes that inherit from BaseDecorator.</p>"},{"location":"glossary/#f","title":"F","text":""},{"location":"glossary/#few-shot-learning","title":"Few-Shot Learning","text":"<p>A technique where examples are provided in the prompt to help the LLM understand the desired output format or reasoning pattern.</p>"},{"location":"glossary/#i","title":"I","text":""},{"location":"glossary/#interactive-mode","title":"Interactive Mode","text":"<p>A CLI mode that provides a step-by-step interface for selecting and configuring decorators, entering a prompt, and viewing the decorated result.</p>"},{"location":"glossary/#j","title":"J","text":""},{"location":"glossary/#json-schema","title":"JSON Schema","text":"<p>A vocabulary that allows you to annotate and validate JSON documents. Used in the framework to define the structure of decorator parameters and validate them.</p>"},{"location":"glossary/#l","title":"L","text":""},{"location":"glossary/#llm-large-language-model","title":"LLM (Large Language Model)","text":"<p>A type of AI model trained on vast amounts of text data that can generate human-like text based on prompts. Examples include GPT-4, Claude, and Llama.</p>"},{"location":"glossary/#m","title":"M","text":""},{"location":"glossary/#middleware","title":"Middleware","text":"<p>A component that sits between decorators and their application, allowing for additional processing or modification of the prompt before or after a decorator is applied.</p>"},{"location":"glossary/#model-specific-adaptation","title":"Model-Specific Adaptation","text":"<p>Modifications to decorators or their application based on the specific LLM being used, to account for differences in how various models respond to prompts.</p>"},{"location":"glossary/#o","title":"O","text":""},{"location":"glossary/#outputformat","title":"OutputFormat","text":"<p>A decorator that specifies the desired format for the LLM's response, such as JSON, Markdown, or a custom structure.</p>"},{"location":"glossary/#p","title":"P","text":""},{"location":"glossary/#parameter","title":"Parameter","text":"<p>A configurable value that affects how a decorator modifies a prompt. Parameters are defined in a decorator's schema and can be set when instantiating the decorator.</p>"},{"location":"glossary/#persona","title":"Persona","text":"<p>A decorator that adds characteristics of a specific role or personality to the prompt, influencing the tone and perspective of the LLM's response.</p>"},{"location":"glossary/#plugin","title":"Plugin","text":"<p>An extension mechanism that allows adding new functionality to the framework without modifying its core code.</p>"},{"location":"glossary/#prompt","title":"Prompt","text":"<p>The input text sent to an LLM to generate a response. In the context of this framework, prompts are modified by decorators to enhance their effectiveness.</p>"},{"location":"glossary/#prompt-engineering","title":"Prompt Engineering","text":"<p>The practice of designing and refining prompts to get better, more reliable responses from LLMs.</p>"},{"location":"glossary/#r","title":"R","text":""},{"location":"glossary/#reasoning","title":"Reasoning","text":"<p>A decorator that encourages the LLM to use specific reasoning patterns or approaches when generating a response.</p>"},{"location":"glossary/#registry","title":"Registry","text":"<p>See Decorator Registry.</p>"},{"location":"glossary/#s","title":"S","text":""},{"location":"glossary/#serialization","title":"Serialization","text":"<p>The process of converting decorator instances or decorated requests to a format (like JSON) that can be stored or transmitted, and later reconstructed.</p>"},{"location":"glossary/#system-prompt","title":"System Prompt","text":"<p>A special type of prompt that sets the overall behavior and context for an LLM session, separate from the user's specific query.</p>"},{"location":"glossary/#t","title":"T","text":""},{"location":"glossary/#template","title":"Template","text":"<p>A predefined structure for prompts with placeholders for variables. Templates can be used as a starting point before applying decorators.</p>"},{"location":"glossary/#token","title":"Token","text":"<p>The basic unit of text that LLMs process. A token can be as short as a character or as long as a word, depending on the model's tokenization scheme.</p>"},{"location":"glossary/#v","title":"V","text":""},{"location":"glossary/#validation","title":"Validation","text":"<p>The process of checking that decorator parameters conform to their defined schema, ensuring they are of the correct type and within acceptable ranges.</p>"},{"location":"glossary/#versioning","title":"Versioning","text":"<p>A system for tracking and managing different versions of decorators, allowing for compatibility checks and updates.</p>"},{"location":"glossary/#next-steps","title":"Next Steps","text":"<ul> <li>Explore the API Reference</li> <li>Check out the Examples</li> <li>Read the FAQ for answers to common questions</li> </ul>"},{"location":"installation/","title":"Installation","text":"<p>This guide will help you install the Prompt Decorators framework and its dependencies.</p>"},{"location":"installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.8 or higher</li> <li>pip (Python package installer)</li> </ul>"},{"location":"installation/#basic-installation","title":"Basic Installation","text":"<p>You can install the Prompt Decorators framework directly from PyPI (once it's published):</p> <pre><code>pip install prompt-decorators\n</code></pre>"},{"location":"installation/#development-installation","title":"Development Installation","text":"<p>For development or to get the latest unreleased version, you can install directly from the GitHub repository:</p> <pre><code>git clone https://github.com/yourusername/prompt-decorators.git\ncd prompt-decorators\npip install -e .\n</code></pre> <p>The <code>-e</code> flag installs the package in \"editable\" mode, which means changes to the source code will be immediately reflected without needing to reinstall.</p>"},{"location":"installation/#installing-with-optional-dependencies","title":"Installing with Optional Dependencies","text":"<p>The Prompt Decorators framework offers several optional dependency sets for different use cases:</p>"},{"location":"installation/#development-dependencies","title":"Development Dependencies","text":"<pre><code>pip install prompt-decorators[dev]\n</code></pre> <p>This includes: - pytest (for running tests) - pytest-cov (for test coverage) - black (for code formatting) - isort (for import sorting) - mypy (for type checking) - ruff (for linting)</p>"},{"location":"installation/#documentation-dependencies","title":"Documentation Dependencies","text":"<pre><code>pip install prompt-decorators[docs]\n</code></pre> <p>This includes: - mkdocs (for building documentation) - mkdocs-material (for documentation theme) - mkdocstrings (for API documentation generation)</p>"},{"location":"installation/#llm-provider-dependencies","title":"LLM Provider Dependencies","text":"<pre><code># For OpenAI integration\npip install prompt-decorators[openai]\n\n# For Anthropic integration\npip install prompt-decorators[anthropic]\n\n# For LangChain integration\npip install prompt-decorators[langchain]\n</code></pre>"},{"location":"installation/#all-dependencies","title":"All Dependencies","text":"<p>To install all optional dependencies:</p> <pre><code>pip install prompt-decorators[all]\n</code></pre>"},{"location":"installation/#verifying-installation","title":"Verifying Installation","text":"<p>To verify that the installation was successful, you can run:</p> <pre><code>import prompt_decorators\nprint(prompt_decorators.__version__)\n</code></pre>"},{"location":"installation/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter any issues during installation:</p> <ol> <li> <p>Ensure you have the latest version of pip:    <pre><code>pip install --upgrade pip\n</code></pre></p> </li> <li> <p>Check that you meet the minimum Python version requirement (3.8+):    <pre><code>python --version\n</code></pre></p> </li> <li> <p>If you're installing from source and encounter build errors, make sure you have the necessary build tools installed for your platform.</p> </li> <li> <p>For any other issues, please check the GitHub issues or open a new one.</p> </li> </ol>"},{"location":"mkdocs_enhancement_plan/","title":"MkDocs Enhancement Plan","text":"<p>This document outlines a plan for enhancing the MkDocs configuration to improve the documentation structure, navigation, and overall user experience.</p>"},{"location":"mkdocs_enhancement_plan/#current-status","title":"Current Status","text":"<p>The current MkDocs configuration has several issues:</p> <ol> <li>Many documentation files are not included in the navigation</li> <li>There are warnings about duplicate filenames</li> <li>Some links between documentation files are broken</li> <li>The navigation structure could be improved for better organization</li> </ol>"},{"location":"mkdocs_enhancement_plan/#enhancement-goals","title":"Enhancement Goals","text":"<ol> <li>Include all relevant documentation files in the navigation</li> <li>Fix broken links between documentation files</li> <li>Improve the navigation structure for better organization</li> <li>Add features to enhance the user experience</li> </ol>"},{"location":"mkdocs_enhancement_plan/#specific-improvements","title":"Specific Improvements","text":""},{"location":"mkdocs_enhancement_plan/#navigation-structure","title":"Navigation Structure","text":"<p>Reorganize the navigation to better group related content:</p> <pre><code>nav:\n  - Home: index.md\n  - Getting Started:\n    - Installation: installation.md\n    - Quick Start: quickstart.md\n    - Core Concepts: concepts.md\n  - User Guide:\n    - Basic Usage: guide/basic-usage.md\n    - Advanced Usage: guide/advanced-usage.md\n    - API Integration: guide/api-integration.md\n    - CLI Usage: guide/cli-usage.md\n    - Troubleshooting: guide/troubleshooting.md\n  - Tutorials:\n    - Combining Decorators: tutorials/combining_decorators.md\n    - Creating Custom Decorators: tutorials/creating_custom_decorator.md\n    - Extension Development: tutorials/extension_development.md\n    - Quickstart Tutorial: tutorials/quickstart.md\n  - API Reference:\n    - Overview: api/index.md\n    - Core: api/core.md\n    - Decorators: api/decorators.md\n    - Registry: api/registry.md\n    - Generator: api/generator.md\n    - Utilities: api/utilities.md\n    - Decorator Reference:\n      - Reasoning Decorators:\n        - Reasoning: api/decorators/Reasoning.md\n        - StepByStep: api/decorators/StepByStep.md\n        - TreeOfThought: api/decorators/TreeOfThought.md\n        # Add more reasoning decorators\n      - Format Decorators:\n        - OutputFormat: api/decorators/OutputFormat.md\n        - Bullet: api/decorators/Bullet.md\n        - TableFormat: api/decorators/TableFormat.md\n        # Add more format decorators\n      - Style Decorators:\n        - Concise: api/decorators/Concise.md\n        - Detailed: api/decorators/Detailed.md\n        - Tone: api/decorators/Tone.md\n        # Add more style decorators\n      - Verification Decorators:\n        - FactCheck: api/decorators/FactCheck.md\n        - PeerReview: api/decorators/PeerReview.md\n        - CiteSources: api/decorators/CiteSources.md\n        # Add more verification decorators\n      - Meta Decorators:\n        - Chain: api/decorators/Chain.md\n        - Conditional: api/decorators/Conditional.md\n        - Override: api/decorators/Override.md\n        # Add more meta decorators\n  - Examples:\n    - Basic Examples: examples/basic.md\n    - Advanced Examples: examples/advanced.md\n    - Provider Examples: examples/providers.md\n  - Contributing:\n    - Guidelines: contributing.md\n    - Development Setup: development.md\n    - Comprehensive Development Guide: development_guide.md\n    - Documentation Standards: DOCSTRING_STANDARDS.md\n    - Decorator Registry: DECORATOR_REGISTRY.md\n    - Type Annotation Improvements: type_annotation_improvements.md\n    - Docstring Improvement Plan: docstring_improvement_plan.md\n  - Project Documentation:\n    - Roadmap: roadmap.md\n    - Architecture: architecture.md\n    - Specification: prompt-decorators-specification-v1.0.md\n    - Code Quality Integration: code_quality_integration.md\n    - FAQ: faq.md\n    - Glossary: glossary.md\n    - Project Summaries:\n      - Overview: project_summaries/index.md\n      - Modernization Summary: project_summaries/project_modernization_summary.md\n  - Domain Guides:\n    - Healthcare: guides/healthcare.md\n    - AI Safety: guides/ai_safety.md\n  - Tools:\n    - Validator Tool: validator_tool.md\n</code></pre>"},{"location":"mkdocs_enhancement_plan/#theme-enhancements","title":"Theme Enhancements","text":"<p>Add more features to the Material theme to improve the user experience:</p> <pre><code>theme:\n  name: material\n  palette:\n    primary: indigo\n    accent: indigo\n  features:\n    - navigation.instant\n    - navigation.tracking\n    - navigation.sections\n    - navigation.indexes\n    - navigation.top\n    - navigation.footer\n    - search.highlight\n    - search.share\n    - content.code.copy\n    - content.code.annotate\n    - content.tabs.link\n    - toc.follow\n  icon:\n    repo: fontawesome/brands/github\n</code></pre>"},{"location":"mkdocs_enhancement_plan/#plugin-enhancements","title":"Plugin Enhancements","text":"<p>Add more plugins to enhance the documentation:</p> <pre><code>plugins:\n  - search\n  - awesome-pages\n  - autolinks\n  - social\n  - tags\n  - git-revision-date-localized:\n      enable_creation_date: true\n  - mkdocstrings:\n      handlers:\n        python:\n          selection:\n            docstring_style: google\n          rendering:\n            show_source: true\n            show_category_heading: true\n            show_if_no_docstring: false\n  - minify:\n      minify_html: true\n</code></pre>"},{"location":"mkdocs_enhancement_plan/#markdown-extensions","title":"Markdown Extensions","text":"<p>Add more markdown extensions to enhance the content:</p> <pre><code>markdown_extensions:\n  - pymdownx.highlight:\n      anchor_linenums: true\n  - pymdownx.superfences:\n      custom_fences:\n        - name: mermaid\n          class: mermaid\n          format: !!python/name:pymdownx.superfences.fence_code_format\n  - pymdownx.tabbed:\n      alternate_style: true\n  - pymdownx.tasklist:\n      custom_checkbox: true\n  - pymdownx.emoji:\n      emoji_index: !!python/name:materialx.emoji.twemoji\n      emoji_generator: !!python/name:materialx.emoji.to_svg\n  - admonition\n  - pymdownx.details\n  - pymdownx.inlinehilite\n  - pymdownx.snippets\n  - attr_list\n  - def_list\n  - md_in_html\n  - toc:\n      permalink: true\n</code></pre>"},{"location":"mkdocs_enhancement_plan/#implementation-strategy","title":"Implementation Strategy","text":"<ol> <li>First, update the navigation structure to include all relevant documentation files.</li> <li>Then, add theme enhancements to improve the user experience.</li> <li>Next, add plugin enhancements to add more features.</li> <li>Finally, add markdown extensions to enhance the content.</li> </ol>"},{"location":"mkdocs_enhancement_plan/#testing","title":"Testing","text":"<p>After each change, build the documentation locally to ensure there are no errors or warnings:</p> <pre><code>mkdocs build\n</code></pre> <p>Then, serve the documentation locally to test the navigation and features:</p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"mkdocs_enhancement_plan/#deployment","title":"Deployment","text":"<p>Once all changes have been tested and verified, deploy the documentation to GitHub Pages:</p> <pre><code>mkdocs gh-deploy\n</code></pre>"},{"location":"navigation/","title":"Documentation Navigation","text":"<p>This document defines the navigation structure for the Prompt Decorators documentation. It serves as a reference for generating a comprehensive sidebar and navigation elements across the documentation site.</p>"},{"location":"navigation/#sidebar-structure","title":"Sidebar Structure","text":"<pre><code>navigation:\n  - title: Getting Started\n    items:\n      - title: Introduction\n        path: /index.html\n      - title: Installation\n        path: /installation.html\n      - title: Quickstart\n        path: /tutorials/quickstart.html\n      - title: Key Concepts\n        path: /concepts.html\n\n  - title: Core Documentation\n    items:\n      - title: Architecture Overview\n        path: /architecture.html\n      - title: BaseDecorator\n        path: /api/modules/prompt_decorators.core.base.html\n      - title: Request System\n        path: /api/modules/prompt_decorators.core.request.html\n      - title: Version Support\n        path: /api/modules/prompt_decorators.core.version.html\n\n  - title: Decorator Registry\n    items:\n      - title: Registry Overview\n        path: /registry/overview.html\n      - title: Using the Registry\n        path: /registry/usage.html\n      - title: Registry API\n        path: /api/modules/prompt_decorators.utils.discovery.html\n      - title: Available Decorators\n        path: /registry/decorators.html\n\n  - title: Built-in Decorators\n    items:\n      - title: Reasoning Decorators\n        path: /decorators/reasoning.html\n        children:\n          - title: Reasoning\n            path: /api/decorators/reasoning.html\n          - title: StepByStep\n            path: /api/decorators/stepbystep.html\n          - title: FirstPrinciples\n            path: /api/decorators/firstprinciples.html\n      - title: Format Decorators\n        path: /decorators/format.html\n        children:\n          - title: OutputFormat\n            path: /api/decorators/outputformat.html\n          - title: Bullet\n            path: /api/decorators/bullet.html\n          - title: Concise\n            path: /api/decorators/concise.html\n      - title: Style Decorators\n        path: /decorators/style.html\n        children:\n          - title: Professional\n            path: /api/decorators/professional.html\n          - title: ELI5\n            path: /api/decorators/eli5.html\n          - title: Academic\n            path: /api/decorators/academic.html\n      - title: Verification Decorators\n        path: /decorators/verification.html\n        children:\n          - title: FactCheck\n            path: /api/decorators/factcheck.html\n          - title: CiteSources\n            path: /api/decorators/citesources.html\n      - title: Meta Decorators\n        path: /decorators/meta.html\n        children:\n          - title: Chain\n            path: /api/decorators/chain.html\n          - title: Conditional\n            path: /api/decorators/conditional.html\n\n  - title: Tutorials\n    items:\n      - title: Quickstart\n        path: /tutorials/quickstart.html\n      - title: Creating Custom Decorators\n        path: /tutorials/creating_custom_decorator.html\n      - title: Combining Decorators\n        path: /tutorials/combining_decorators.html\n      - title: Integration with LLM APIs\n        path: /tutorials/llm_integration.html\n      - title: Working with the Registry\n        path: /tutorials/registry_usage.html\n\n  - title: Advanced Topics\n    items:\n      - title: Compatibility Matrix\n        path: /compatibility.html\n      - title: Extension Development\n        path: /advanced/extensions.html\n      - title: Model-Specific Adaptations\n        path: /advanced/model_specific.html\n      - title: Performance Optimization\n        path: /advanced/performance.html\n      - title: Security Considerations\n        path: /advanced/security.html\n\n  - title: API Reference\n    items:\n      - title: Core API\n        path: /api/modules/prompt_decorators.core.html\n      - title: Utility API\n        path: /api/modules/prompt_decorators.utils.html\n      - title: Generator API\n        path: /api/modules/prompt_decorators.generator.html\n      - title: Decorators API\n        path: /api/modules/prompt_decorators.decorators.html\n\n  - title: Examples\n    items:\n      - title: Basic Examples\n        path: /examples/basic.html\n      - title: Advanced Usage\n        path: /examples/advanced.html\n      - title: Domain-Specific\n        path: /examples/domains.html\n        children:\n          - title: Healthcare\n            path: /examples/domains/healthcare.html\n          - title: Finance\n            path: /examples/domains/finance.html\n          - title: Education\n            path: /examples/domains/education.html\n      - title: LLM Providers\n        path: /examples/providers.html\n        children:\n          - title: OpenAI\n            path: /examples/providers/openai.html\n          - title: Anthropic\n            path: /examples/providers/anthropic.html\n          - title: Google Gemini\n            path: /examples/providers/gemini.html\n\n  - title: Community &amp; Support\n    items:\n      - title: Contributing\n        path: /community/contributing.html\n      - title: Code of Conduct\n        path: /community/code_of_conduct.html\n      - title: Roadmap\n        path: /community/roadmap.html\n      - title: Changelog\n        path: /community/changelog.html\n</code></pre>"},{"location":"navigation/#breadcrumb-implementation","title":"Breadcrumb Implementation","text":"<p>Each documentation page should include a breadcrumb navigation feature at the top of the page. The breadcrumb should reflect the hierarchical position of the current page in the navigation structure.</p> <p>Example breadcrumb format: <pre><code>Home &gt; Tutorials &gt; Creating Custom Decorators\n</code></pre></p>"},{"location":"navigation/#previousnext-navigation","title":"Previous/Next Navigation","text":"<p>Each documentation page should include previous/next navigation links at the bottom of the page, based on the logical reading order defined in the navigation structure.</p> <p>Example: <pre><code>Previous: Quickstart | Next: Combining Decorators\n</code></pre></p>"},{"location":"navigation/#implementation-notes","title":"Implementation Notes","text":"<ol> <li>The navigation structure should be implemented as a data file that can be consumed by the documentation generation system.</li> <li>Each page should have appropriate metadata including:</li> <li>Title</li> <li>Description</li> <li>Tags/Keywords</li> <li>Last updated timestamp</li> <li> <p>Related pages</p> </li> <li> <p>The sidebar should highlight the currently active page and expand the relevant section.</p> </li> <li>The navigation structure should be reflected in the URL structure for logical and predictable page access.</li> </ol>"},{"location":"navigation/#documentation-index","title":"Documentation Index","text":"<p>A separate index.md file should be created to serve as the search index and directory of all documentation pages, categorized according to the navigation structure and including a brief description of each page.</p>"},{"location":"prompt-decorators-specification-v1.0/","title":"Prompt Decorators Specification","text":""},{"location":"prompt-decorators-specification-v1.0/#abstract","title":"Abstract","text":"<p>This document proposes a standardized framework for \"Prompt Decorators\" \u2013 a system of annotated instructions that modify the behavior and output formatting of Large Language Models (LLMs). Building on concepts from software design patterns, particularly the Decorator pattern in object-oriented programming, this standard creates a structured, extensible approach to prompt engineering. The proposed system enables consistent, reusable interaction paradigms across different AI implementations, reducing cognitive load on users while increasing the utility, reliability, and standardization of AI interactions.</p>"},{"location":"prompt-decorators-specification-v1.0/#executive-summary","title":"Executive Summary","text":"<p>Prompt Decorators address the growing complexity of AI interactions by providing a standardized syntax for modifying AI behavior. By prefixing prompts with <code>+++</code> followed by descriptive directives like <code>Reasoning</code>, <code>StepByStep</code>, or <code>CiteSources</code>, users can consistently control how AI models process and respond to requests across different platforms and implementations. This standard defines a comprehensive set of decorators, implementation patterns, compatibility considerations, and evolution mechanisms to create a robust ecosystem for structured AI interactions.</p> <p>Key benefits include: - Reduced Cognitive Load: Users can employ shorter, standardized instructions - Consistency: More standardized behavior across compatible AI systems - Composability: Decorators can be combined for complex behavior - Extensibility: The framework allows for domain-specific extensions - Efficiency: More structured prompts can lead to more efficient interactions</p> <p>Implementations have demonstrated improvements in content quality, user satisfaction, and workflow efficiency across various domains. This standard aims to provide a foundation for more reliable, effective human-AI collaboration that can evolve with advances in AI capabilities.</p>"},{"location":"prompt-decorators-specification-v1.0/#1-introduction-and-scope","title":"1. Introduction and Scope","text":""},{"location":"prompt-decorators-specification-v1.0/#11-purpose","title":"1.1 Purpose","text":"<p>This standard defines a framework for \"Prompt Decorators\" that:</p> <ol> <li>MUST provide a consistent syntax for modifying AI behavior</li> <li>SHOULD work across different LLM implementations when supported</li> <li>SHOULD reduce prompt engineering complexity</li> <li>SHOULD enable composition of multiple behavioral modifications</li> <li>MAY be extended for domain-specific applications</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#12-scope","title":"1.2 Scope","text":"<p>This standard covers:</p> <ul> <li>Core decorator syntax and grammar</li> <li>Standard decorator definitions and behavior</li> <li>Implementation guidelines for LLM providers, application developers, and end users</li> <li>Extension mechanisms for specialized decorators</li> <li>Versioning and evolution processes</li> </ul> <p>This standard does not cover:</p> <ul> <li>Internal implementation of LLM reasoning or processing</li> <li>Model-specific optimizations or capabilities</li> <li>User interface design for decorator application</li> <li>Dataset creation or model training techniques</li> </ul>"},{"location":"prompt-decorators-specification-v1.0/#13-conformance","title":"1.3 Conformance","text":"<p>Implementations claiming conformance to this standard:</p> <ol> <li>MUST support the core syntax defined in Section 3</li> <li>MUST implement at least the minimal set of decorators defined in Section 4.1</li> <li>SHOULD implement the full set of decorators defined in Section 4</li> <li>MUST handle unsupported decorators gracefully according to Section 5.4</li> <li>SHOULD provide documentation on supported and unsupported decorators</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#14-background-and-motivation","title":"1.4 Background and Motivation","text":"<p>As Large Language Models become increasingly integrated into workflows across industries, the need for standardized, consistent ways to interact with these systems has become apparent. Current prompt engineering approaches are largely ad-hoc, requiring extensive documentation, reinvention, and significant cognitive overhead when switching between systems or use cases.</p> <p>Prompt Decorators address this challenge by providing a systematic approach to modifying AI behavior through simple, composable annotations. Inspired by the Decorator pattern in programming and Python's function decorators, they serve as a layer of abstraction that decouples the core prompt from instructions about how to process and present the response.</p>"},{"location":"prompt-decorators-specification-v1.0/#15-current-challenges-in-prompt-engineering","title":"1.5 Current Challenges in Prompt Engineering","text":"<p>Current prompt engineering suffers from several limitations:</p> <ul> <li>Inconsistency: Instructions vary widely between users, platforms, and models</li> <li>Verbosity: Detailed instructions consume token context that could be used for content</li> <li>Cognitive Overhead: Users must remember or document specific prompting techniques</li> <li>Lack of Composability: Combining different instruction paradigms is cumbersome</li> <li>Undocumented Behavior: Expected model behavior is often implicit rather than explicit</li> </ul>"},{"location":"prompt-decorators-specification-v1.0/#16-benefits-of-prompt-decorators","title":"1.6 Benefits of Prompt Decorators","text":"<p>The proposed standard addresses these challenges through:</p> <ul> <li>Standardization: Common vocabulary and syntax across platforms and models</li> <li>Efficiency: Concise annotations that reduce token consumption</li> <li>Reusability: Consistent behaviors that can be reused across different contexts</li> <li>Composability: Ability to combine decorators for complex interaction patterns</li> <li>Explicit Behavior: Clear documentation of expected model responses</li> <li>Reduced Cognitive Load: Simple annotations instead of lengthy instructions</li> </ul>"},{"location":"prompt-decorators-specification-v1.0/#2-core-principles-and-design-philosophy","title":"2. Core Principles and Design Philosophy","text":""},{"location":"prompt-decorators-specification-v1.0/#21-guiding-principles","title":"2.1 Guiding Principles","text":"<p>The Prompt Decorator standard is designed around these core principles:</p> <ol> <li>Simplicity: Decorators should be easy to learn, remember, and apply</li> <li>Consistency: Behavior should be predictable across different models and contexts</li> <li>Composability: Decorators should work together without conflicts</li> <li>Extensibility: The framework should allow for new decorators as needs evolve</li> <li>Minimalism: Decorators should use minimal syntax and tokens</li> <li>Model Agnosticism: Standards should apply across different LLM implementations</li> <li>Human Readability: Syntax should be comprehensible to humans, not just machines</li> <li>Graceful Degradation: Unrecognized decorators should be handled sensibly</li> <li>Versioning Support: The standard should accommodate evolution over time</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#22-design-choices","title":"2.2 Design Choices","text":"<p>The standard employs the following design patterns:</p> <ul> <li>Triple Plus Prefix (<code>+++</code>) to clearly demarcate decorators from regular text</li> <li>Parameter Encapsulation using parentheses with explicit parameter names</li> <li>Categorization to organize decorators by function and purpose</li> <li>Hierarchical Structure allowing for general and specific decorator types</li> </ul>"},{"location":"prompt-decorators-specification-v1.0/#3-syntax-specification","title":"3. Syntax Specification","text":""},{"location":"prompt-decorators-specification-v1.0/#31-basic-syntax","title":"3.1 Basic Syntax","text":"<p>The canonical syntax for a Prompt Decorator MUST follow this pattern:</p> <pre><code>+++&lt;DecoratorName&gt;[(parameter1=value1[, parameter2=value2, ...])]\n</code></pre> <p>Where: - <code>+++</code> is the decorator prefix that MUST be used to identify a decorator - <code>&lt;DecoratorName&gt;</code> is the case-sensitive name of the decorator - Parameters are OPTIONAL and enclosed in parentheses - Multiple parameters MUST be separated by commas - Parameter names and values MUST be separated by equals signs - String values MAY be enclosed in quotes for clarity, especially when containing spaces</p>"},{"location":"prompt-decorators-specification-v1.0/#32-parameter-types","title":"3.2 Parameter Types","text":"<p>Parameters MUST use one of the following types:</p> <ol> <li>String values: <code>parameter=\"value\"</code> or <code>parameter=value</code></li> <li>Numeric values: <code>parameter=42</code> or <code>parameter=3.14</code></li> <li>Boolean values: <code>parameter=true</code> or <code>parameter=false</code></li> <li>Enumerated values: <code>parameter=option1</code> (from a predefined set)</li> <li>Arrays: <code>parameter=[item1,item2,item3]</code></li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#33-decorator-placement-and-composition","title":"3.3 Decorator Placement and Composition","text":"<ol> <li>Decorators MUST appear at the beginning of a prompt or on a new line</li> <li>Multiple decorators MAY be stacked, with each decorator on a new line</li> <li>When multiple decorators are used, they MUST be applied in the order they appear</li> <li>The <code>+++Version</code> decorator, if present, MUST be the first decorator</li> </ol> <p>Example of proper composition:</p> <pre><code>+++Version(standard=1.0.0)\n+++Reasoning(depth=comprehensive)\n+++CiteSources(style=APA)\nWhat are the environmental impacts of electric vehicles?\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#34-versioning-syntax","title":"3.4 Versioning Syntax","text":"<p>To specify versions of individual decorators:</p> <pre><code>+++&lt;DecoratorName&gt;:v&lt;VersionNumber&gt;(parameters)\n</code></pre> <p>Example: <pre><code>+++Reasoning:v2(depth=comprehensive)\n</code></pre></p>"},{"location":"prompt-decorators-specification-v1.0/#35-error-handling","title":"3.5 Error Handling","text":"<ol> <li>Implementations MUST ignore syntax errors in decorators rather than failing</li> <li>Implementations SHOULD provide warnings for malformed decorators</li> <li>Implementations MUST proceed with processing the rest of the prompt when encountering errors</li> <li>Implementations SHOULD document their error handling behavior</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#36-json-schema-definitions","title":"3.6 JSON Schema Definitions","text":"<p>The standard provides formal JSON Schema definitions for validating decorator implementations. These schemas are available in the <code>/schemas</code> directory:</p> <ol> <li>Base Decorator Schema (<code>decorator.schema.json</code>):</li> <li>Defines the structure of individual decorators</li> <li>Validates decorator names, versions, and parameters</li> <li>Includes metadata for documentation and deprecation</li> <li> <p>Required for all decorator implementations</p> </li> <li> <p>API Request Schema (<code>api-request.schema.json</code>):</p> </li> <li>Defines the structure of API requests using decorators</li> <li>Includes prompt text, decorator list, and metadata</li> <li>References the base decorator schema for validation</li> <li> <p>Used by LLM providers implementing the standard</p> </li> <li> <p>Registry Entry Schema (<code>registry-entry.schema.json</code>):</p> </li> <li>Defines how decorators are registered in the central registry</li> <li>Includes detailed metadata, documentation, and compatibility info</li> <li>Used for publishing decorators to the registry</li> <li> <p>Ensures consistent documentation and versioning</p> </li> <li> <p>Extension Package Schema (<code>extension-package.schema.json</code>):</p> </li> <li>Defines how decorator extensions are packaged</li> <li>Includes dependency management and configuration</li> <li>References the registry entry schema for decorator definitions</li> <li>Used for distributing collections of related decorators</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#361-schema-usage","title":"3.6.1 Schema Usage","text":"<p>Implementations MUST validate their decorator implementations against these schemas:</p> <pre><code># Using ajv-cli\nnpx ajv-cli validate -s decorator.schema.json -d your-decorator.json\n\n# Using python-jsonschema\njsonschema -i your-decorator.json decorator.schema.json\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#362-schema-versioning","title":"3.6.2 Schema Versioning","text":"<p>The JSON schemas follow semantic versioning: - Major version changes indicate breaking changes - Minor version changes add features in a backward-compatible manner - Patch version changes fix issues in a backward-compatible manner</p>"},{"location":"prompt-decorators-specification-v1.0/#363-schema-references","title":"3.6.3 Schema References","text":"<p>JSON files can reference these schemas using the <code>$schema</code> property:</p> <pre><code>{\n  \"$schema\": \"https://raw.githubusercontent.com/prompt-decorators/spec/main/schemas/decorator.schema.json\",\n  \"name\": \"YourDecorator\",\n  \"version\": \"1.0.0\",\n  ...\n}\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#4-categories-of-prompt-decorators","title":"4. Categories of Prompt Decorators","text":"<p>Based on an analysis of common interaction patterns and effective prompt techniques, the following comprehensive set of decorators has been organized into functional categories.</p>"},{"location":"prompt-decorators-specification-v1.0/#41-core-decorators","title":"4.1 Core Decorators","text":"<p>These decorators form the minimal conforming implementation and MUST be supported by any implementation claiming compliance with this standard:</p> Decorator Description Parameters <code>+++Reasoning</code> Explicit reasoning path before conclusion <code>depth=[basic\\|moderate\\|comprehensive]</code> <code>+++StepByStep</code> Sequential problem-solving with labeled steps <code>numbered=[true\\|false]</code> <code>+++OutputFormat</code> Specify output format <code>format=[json\\|markdown\\|yaml\\|xml\\|plaintext]</code> <code>+++Tone</code> Overall tone adjustment <code>style=[formal\\|casual\\|friendly\\|technical\\|humorous]</code> <code>+++Version</code> Specify standard version compatibility <code>standard=[semver]</code>"},{"location":"prompt-decorators-specification-v1.0/#42-reasoning-process-decorators","title":"4.2 Reasoning Process Decorators","text":"<p>These decorators modify how the AI approaches reasoning about a problem.</p> Decorator Description Parameters <code>+++Reasoning</code> Explicit reasoning path before conclusion <code>depth=[basic\\|moderate\\|comprehensive]</code> <code>+++StepByStep</code> Sequential problem-solving with labeled steps <code>numbered=[true\\|false]</code> <code>+++Socratic</code> Question-based exploration of the topic <code>iterations=[1-5]</code> <code>+++Debate</code> Multiple viewpoint analysis <code>perspectives=[2-5]</code> <code>+++FirstPrinciples</code> Break down to fundamental truths <code>depth=[1-5]</code> <code>+++RootCause</code> Systematic analysis to identify underlying causes <code>method=[fivewhys\\|fishbone\\|pareto]</code> <code>+++TreeOfThought</code> Explore multiple reasoning branches <code>branches=[2-5]</code>, <code>depth=[1-5]</code> <code>+++Analogical</code> Use analogies for reasoning and explanation <code>domain=[general\\|specified]</code> <code>+++ForcedAnalogy</code> Compare concepts through specific analogical domains <code>source=[sports\\|nature\\|cooking\\|etc]</code> <code>+++Inductive</code> Pattern-based reasoning from specific to general - <code>+++Deductive</code> Logical reasoning from general to specific - <code>+++Abductive</code> Generate best explanations from limited information <code>hypotheses=[2-5]</code> <code>+++RedTeam</code> Challenge assumptions with adversarial analysis <code>strength=[moderate\\|aggressive\\|steelman]</code> <code>+++BlindSpots</code> Identify hidden assumptions and risks <code>focus=[assumptions\\|risks\\|biases\\|all]</code> <code>+++Contrarian</code> Generate counterarguments to test perspectives <code>approach=[outsider\\|skeptic\\|devil's-advocate]</code> <code>+++NegativeSpace</code> Uncover what isn't explicitly stated <code>focus=[implications\\|missing\\|unstated]</code> <code>+++DeepDive</code> Multi-layered, progressively deeper analysis <code>layers=[3-5]</code>, <code>focus=[nuance\\|examples\\|implications]</code>"},{"location":"prompt-decorators-specification-v1.0/#43-output-structure-decorators","title":"4.3 Output Structure Decorators","text":"<p>These decorators specify the structure and format of the AI's response.</p> Decorator Description Parameters <code>+++OutputFormat</code> Specify output format <code>format=[json\\|markdown\\|yaml\\|xml\\|csv\\|plaintext]</code> <code>+++Schema</code> Define custom structure <code>schema=[schemaDefinition]</code> <code>+++TableFormat</code> Present data in tables <code>columns=[col1,col2,...]</code>, <code>format=[markdown\\|ascii\\|csv]</code> <code>+++Summary</code> Provide condensed summary <code>length=[short\\|medium\\|long]</code>, <code>wordCount=[number]</code> <code>+++Outline</code> Structured outline format <code>depth=[1-5]</code>, <code>style=[numeric\\|bullet\\|roman]</code> <code>+++Nested</code> Hierarchical organization <code>depth=[1-5]</code>, <code>style=[bullet\\|numbered\\|mixed]</code> <code>+++Bullet</code> Bullet point format <code>style=[dash\\|dot\\|arrow\\|star]</code> <code>+++Timeline</code> Chronological structure <code>granularity=[day\\|month\\|year\\|era]</code> <code>+++Comparison</code> Direct comparison structure <code>aspects=[aspect1,aspect2,...]</code>, <code>format=[table\\|prose\\|bullets]</code> <code>+++MECE</code> Mutually exclusive, collectively exhaustive framework <code>dimensions=[2-5]</code> <code>+++DecisionMatrix</code> Structured decision-making format <code>options=[option1,option2,...]</code>, <code>criteria=[criterion1,criterion2,...]</code> <code>+++Alternatives</code> Generate multiple distinct alternatives <code>count=[2-10]</code>, <code>diversity=[low\\|medium\\|high]</code> <code>+++Layered</code> Present at multiple explanation depths <code>levels=[sentence\\|paragraph\\|page]</code>, <code>count=[2-5]</code> <code>+++Constraints</code> Apply specific limitations to the output <code>wordCount=[number]</code>, <code>budget=[number]</code>, <code>timeframe=[spec]</code> <code>+++Prioritize</code> Rank items based on specified criteria <code>criteria=[impact\\|feasibility\\|cost\\|etc]</code>, <code>count=[number]</code>"},{"location":"prompt-decorators-specification-v1.0/#44-decorator-conflicts-and-compatibility","title":"4.4 Decorator Conflicts and Compatibility","text":"<p>Some decorators may have incompatible behaviors. Implementations MUST resolve conflicts according to these rules:</p> <ol> <li>When decorators have fundamentally incompatible requirements (e.g., <code>+++ELI5</code> and <code>+++Technical</code>), the later decorator in the sequence takes precedence</li> <li>When facing a parameter conflict between decorators, the parameter in the later decorator takes precedence</li> <li>Implementations SHOULD provide documentation on known decorator conflicts</li> <li>Implementations MAY provide warnings when detecting incompatible decorator combinations</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#441-known-incompatibilities","title":"4.4.1 Known Incompatibilities","text":"Decorator Incompatible With Reason <code>+++ELI5</code> <code>+++Technical</code>, <code>+++Academic</code> Contradictory audience adaptation <code>+++Concise</code> <code>+++Detailed</code> Contradictory verbosity goals <code>+++Inductive</code> <code>+++Deductive</code> Contradictory reasoning methods <code>+++Bullet</code> <code>+++OutputFormat(format=json)</code> Structural conflict"},{"location":"prompt-decorators-specification-v1.0/#45-tone-and-style-decorators","title":"4.5 Tone and Style Decorators","text":"<p>These decorators modify the linguistic style and tone of the AI's response.</p> Decorator Description Parameters <code>+++Tone</code> Overall tone adjustment <code>style=[formal\\|casual\\|friendly\\|technical\\|humorous]</code> <code>+++Audience</code> Adjust for audience expertise <code>level=[beginner\\|intermediate\\|expert\\|technical]</code> <code>+++ELI5</code> Explain like I'm 5 years old <code>strictness=[true\\|false]</code> <code>+++Academic</code> Scholarly style <code>style=[humanities\\|scientific\\|legal]</code>, <code>format=[APA\\|MLA\\|Chicago]</code> <code>+++Professional</code> Business-oriented language <code>industry=[general\\|industry]</code> <code>+++Creative</code> Creative writing style <code>genre=[narrative\\|poetry\\|dialogic]</code> <code>+++Concise</code> Brief and to-the-point <code>maxWords=[number]</code> <code>+++Detailed</code> Comprehensive and thorough <code>depth=[moderate\\|comprehensive\\|exhaustive]</code> <code>+++Narrative</code> Story-based delivery <code>structure=[classic\\|nonlinear\\|case-study]</code> <code>+++Motivational</code> Encouraging, inspiring tone <code>intensity=[mild\\|moderate\\|high]</code> <code>+++AsExpert</code> Respond from specific expert role <code>role=[title]</code>, <code>experience=[junior\\|senior\\|leading]</code> <code>+++Persona</code> Adopt specific stakeholder viewpoint <code>role=[customer\\|executive\\|skeptic\\|etc]</code> <code>+++StyleShift</code> Modify persuasion tactics or urgency <code>aspect=[urgency\\|persuasion\\|formality]</code>, <code>level=[1-5]</code> <code>+++Remix</code> Reframe content for different contexts <code>target=[audience]</code>, <code>context=[setting]</code> <code>+++Extremes</code> Present radical and minimal versions <code>versions=[radical\\|minimal\\|both]</code>"},{"location":"prompt-decorators-specification-v1.0/#46-verification-and-quality-decorators","title":"4.6 Verification and Quality Decorators","text":"<p>These decorators focus on ensuring the accuracy, balance, and quality of the AI's response.</p> Decorator Description Parameters <code>+++CiteSources</code> Reference backing for claims <code>style=[inline\\|footnote\\|endnote]</code>, <code>format=[APA\\|MLA\\|Chicago]</code> <code>+++FactCheck</code> Verification of claims <code>confidence=[true\\|false]</code>, <code>uncertain=[mark\\|exclude]</code> <code>+++Limitations</code> Explicit statement of limitations <code>detail=[brief\\|comprehensive]</code>, <code>position=[beginning\\|end]</code> <code>+++Confidence</code> Indicate confidence in answers <code>scale=[percent\\|qualitative\\|stars]</code> <code>+++Balanced</code> Ensure equal coverage of viewpoints <code>perspectives=[2-5]</code> <code>+++Steelman</code> Present strongest version of arguments <code>sides=[1-5]</code> <code>+++PeerReview</code> Self-critique as in academic review <code>criteria=[accuracy\\|methodology\\|limitations\\|all]</code> <code>+++Precision</code> Focus on exactness and accuracy <code>level=[moderate\\|high\\|maximum]</code> <code>+++Uncertainty</code> Highlight areas of uncertainty <code>format=[inline\\|section\\|confidence]</code> <code>+++QualityMetrics</code> Apply specific quality metrics <code>metrics=[metric1,metric2,...]</code> <code>+++StressTest</code> Identify potential failure points <code>scenarios=[3-5]</code>, <code>severity=[mild\\|moderate\\|extreme]</code> <code>+++BreakAndBuild</code> Criticize then reconstruct an idea <code>breakdown=[weaknesses\\|assumptions\\|risks]</code> <code>+++FindGaps</code> Identify missing elements in an idea <code>aspects=[questions\\|resources\\|stakeholders\\|etc]</code>"},{"location":"prompt-decorators-specification-v1.0/#47-meta-decorators","title":"4.7 Meta-Decorators","text":"<p>These decorators modify the behavior of other decorators or provide higher-level control.</p> Decorator Description Parameters <code>+++Refine</code> Multiple improvement iterations <code>iterations=[2-5]</code>, <code>focus=[clarity\\|accuracy\\|conciseness]</code> <code>+++Combine</code> Use multiple decorators <code>decorators=[D1,D2,...]</code> <code>+++Conditional</code> Conditional application <code>if=[condition]</code>, <code>then=[decorator]</code>, <code>else=[decorator]</code> <code>+++Priority</code> Prioritized application <code>decorators=[D1,D2,...]</code> <code>+++Custom</code> User-defined decorator behavior <code>rules=[ruleDefinition]</code> <code>+++Override</code> Override default behaviors <code>default=[decorator]</code> <code>+++Context</code> Domain-specific adaptation <code>domain=[domain]</code> <code>+++Extension</code> Extensibility mechanism <code>source=[URI]</code> <code>+++Version</code> Version specification <code>v=[semver]</code> <code>+++Compatibility</code> Model compatibility <code>models=[M1,M2,...]</code> <code>+++Chain</code> Define multi-step response process <code>steps=[step1,step2,...]</code>, <code>showAll=[true\\|false]</code> <code>+++BuildOn</code> Reference previous context <code>reference=[last\\|specific]</code>, <code>approach=[extend\\|refine\\|contrast]</code>"},{"location":"prompt-decorators-specification-v1.0/#5-implementation-considerations","title":"5. Implementation Considerations","text":""},{"location":"prompt-decorators-specification-v1.0/#51-for-llm-providers","title":"5.1 For LLM Providers","text":"<p>LLM providers can implement this standard by:</p> <ol> <li>Pre-processing: Detecting decorators and modifying the prompt programmatically</li> <li>Fine-tuning: Training models to recognize and respond to decorators</li> <li>Documentation: Providing clear guidance on supported decorators</li> <li>Fallback Mechanisms: Handling unrecognized decorators gracefully</li> <li>Efficiency: Optimizing implementation to minimize token usage</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#511-reference-implementation","title":"5.1.1 Reference Implementation","text":"<p>A reference implementation for processing decorators in a provider API might look like:</p> <pre><code>def process_decorators(user_prompt):\n    decorators = []\n    cleaned_prompt = user_prompt\n\n    # Extract decorator patterns\n    decorator_pattern = r'\\+\\+\\+([A-Za-z]+)(?:\\(([^)]+)\\))?'\n    matches = re.findall(decorator_pattern, user_prompt)\n\n    for match in matches:\n        decorator_name = match[0]\n        params_str = match[1] if len(match) &gt; 1 else \"\"\n\n        # Parse parameters\n        params = {}\n        if params_str:\n            param_pairs = params_str.split(',')\n            for pair in param_pairs:\n                if '=' in pair:\n                    key, value = pair.split('=', 1)\n                    params[key.strip()] = value.strip()\n\n        decorators.append({\n            \"name\": decorator_name,\n            \"parameters\": params\n        })\n\n        # Remove decorator from prompt\n        pattern_to_remove = f\"+++{decorator_name}\" + (f\"({params_str})\" if params_str else \"\")\n        cleaned_prompt = cleaned_prompt.replace(pattern_to_remove, \"\", 1)\n\n    return {\n        \"decorators\": decorators,\n        \"cleaned_prompt\": cleaned_prompt.strip()\n    }\n\ndef generate_system_prompt(decorators):\n    \"\"\"Generate model instructions based on recognized decorators\"\"\"\n    system_prompt = \"You are a helpful assistant. \"\n\n    for decorator in decorators:\n        if decorator[\"name\"] == \"Reasoning\":\n            system_prompt += \"Provide detailed reasoning before giving your final answer. \"\n        elif decorator[\"name\"] == \"StepByStep\":\n            system_prompt += \"Break down your response into clearly labeled steps. \"\n        # Add more decorator handling...\n\n    return system_prompt\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#52-for-application-developers","title":"5.2 For Application Developers","text":"<p>Application developers integrating LLMs should consider:</p> <ol> <li>UI Integration: Providing interfaces for applying decorators</li> <li>Template Libraries: Creating reusable templates with decorators</li> <li>Validation: Ensuring decorators are used correctly</li> <li>Conflict Resolution: Handling potential conflicts between decorators</li> <li>Analytics: Tracking decorator effectiveness</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#521-implementation-pattern-for-applications","title":"5.2.1 Implementation Pattern for Applications","text":"<p>For client applications, decorator implementation could follow this pattern:</p> <pre><code>// Example decorator implementation in a UI application\nclass PromptDecoratorManager {\n  constructor() {\n    this.availableDecorators = {\n      \"Reasoning\": {\n        description: \"Provides detailed reasoning process\",\n        parameters: [\"depth\"],\n        defaults: { depth: \"moderate\" }\n      },\n      \"StepByStep\": {\n        description: \"Breaks response into sequential steps\",\n        parameters: [\"numbered\"],\n        defaults: { numbered: \"true\" }\n      },\n      // More decorators...\n    };\n\n    this.activeDecorators = [];\n  }\n\n  addDecorator(name, parameters = {}) {\n    if (!this.availableDecorators[name]) {\n      throw new Error(`Unknown decorator: ${name}`);\n    }\n\n    // Apply default parameters where not specified\n    const decorator = {\n      name,\n      parameters: { ...this.availableDecorators[name].defaults, ...parameters }\n    };\n\n    this.activeDecorators.push(decorator);\n    return this;\n  }\n\n  applyToPrompt(userPrompt) {\n    let decoratedPrompt = userPrompt;\n\n    // Prepend decorators to prompt\n    for (const decorator of this.activeDecorators) {\n      const paramString = Object.entries(decorator.parameters)\n        .map(([key, value]) =&gt; `${key}=${value}`)\n        .join(',');\n\n      const decoratorString = paramString\n        ? `+++${decorator.name}(${paramString})\\n`\n        : `+++${decorator.name}\\n`;\n\n      decoratedPrompt = decoratorString + decoratedPrompt;\n    }\n\n    return decoratedPrompt;\n  }\n}\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#53-for-end-users","title":"5.3 For End Users","text":"<p>End users can benefit from decorators through:</p> <ol> <li>Personal Libraries: Building collections of effective decorators</li> <li>Workflow Integration: Incorporating decorators into standard workflows</li> <li>Experimentation: Testing different decorators for specific tasks</li> <li>Sharing: Exchanging effective decorator configurations</li> <li>Feedback: Providing input on decorator effectiveness</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#531-model-instructions-for-decorator-recognition","title":"5.3.1 Model Instructions for Decorator Recognition","text":"<p>When working with models that don't natively support decorators, users can include the following in their system prompt or initial conversation:</p> <pre><code>A \"Prompt Decorator\" is an instruction added to a prompt to modify the output or influence how the response is generated.\n\nWhen you see text starting with +++ followed by a decorator name (like +++Reasoning), apply the following modifications to your response:\n\n- +++Reasoning: Begin your response with detailed explanation of your reasoning process before providing conclusions.\n- +++StepByStep: Structure your response as a sequence of clearly labeled steps.\n- +++Debate: Present multiple perspectives on the topic before reaching a conclusion.\n- +++CiteSources: Include references or citations to support your claims.\n- +++FactCheck: Verify factual accuracy and indicate uncertainty when appropriate.\n- +++OutputFormat(format=X): Structure your response in the specified format (JSON, markdown, etc.).\n- +++Tone(style=X): Adjust your response tone to match the specified style.\n\nSome decorators may include parameters in parentheses, like +++Refine(iterations=3), which modify how the decorator is applied.\n\nThese definitions must always be followed when the corresponding decorator is present in a prompt. Please retain them in memory, as I will use them in future interactions.\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#54-cross-model-compatibility-and-fallbacks","title":"5.4 Cross-Model Compatibility and Fallbacks","text":"<p>Different language models will have varying capabilities for implementing decorator behaviors. Implementation should include fallback mechanisms:</p>"},{"location":"prompt-decorators-specification-v1.0/#541-capability-detection","title":"5.4.1 Capability Detection","text":"<p>Before applying decorators, applications should detect model capabilities:</p> <pre><code>def detect_model_capabilities(model_id):\n    # Model capability database (would be more extensive in practice)\n    model_capabilities = {\n        \"gpt-4\": {\n            \"reasoning\": True,\n            \"step_by_step\": True,\n            \"fact_check\": True,\n            \"debate\": True,\n            \"output_formats\": [\"json\", \"markdown\", \"yaml\", \"xml\"]\n        },\n        \"gpt-3.5-turbo\": {\n            \"reasoning\": True,\n            \"step_by_step\": True,\n            \"fact_check\": False,\n            \"debate\": True,\n            \"output_formats\": [\"json\", \"markdown\"]\n        },\n        \"text-bison\": {\n            \"reasoning\": False,\n            \"step_by_step\": True,\n            \"fact_check\": False,\n            \"debate\": False,\n            \"output_formats\": [\"json\"]\n        }\n    }\n\n    return model_capabilities.get(model_id, {\n        \"reasoning\": False,\n        \"step_by_step\": False,\n        \"fact_check\": False,\n        \"debate\": False,\n        \"output_formats\": []\n    })\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#542-fallback-strategies","title":"5.4.2 Fallback Strategies","text":"<p>When a model doesn't support a decorator behavior:</p> <ol> <li>Notification: Inform users when a decorator can't be applied</li> <li>Approximate Implementation: Use available capabilities to approximate the desired behavior</li> <li>Model Switching: Switch to a more capable model when critical decorators are requested</li> <li>Hybrid Approach: Process part of the decorator functionality in middleware</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#55-alternative-syntax-options","title":"5.5 Alternative Syntax Options","text":"<p>While the <code>+++Decorator</code> syntax is recommended for its visibility and compatibility, implementations MUST support the JSON format and MAY support additional formats:</p>"},{"location":"prompt-decorators-specification-v1.0/#551-json-format-required","title":"5.5.1 JSON Format (Required)","text":"<p>For API-centric applications or when working with structured data, implementations MUST support the JSON format as defined in <code>api-request.schema.json</code>:</p> <pre><code>{\n  \"$schema\": \"https://raw.githubusercontent.com/prompt-decorators/spec/main/schemas/api-request.schema.json\",\n  \"prompt\": \"Explain how nuclear fusion works\",\n  \"decorators\": [\n    {\n      \"name\": \"Reasoning\",\n      \"version\": \"1.0.0\",\n      \"parameters\": {\n        \"depth\": \"comprehensive\"\n      },\n      \"metadata\": {\n        \"description\": \"Provides detailed reasoning before conclusions\",\n        \"category\": \"reasoning\"\n      }\n    },\n    {\n      \"name\": \"StepByStep\",\n      \"version\": \"1.0.0\",\n      \"parameters\": {\n        \"numbered\": true\n      }\n    }\n  ],\n  \"metadata\": {\n    \"model\": \"gpt-4\",\n    \"version\": \"1.0.0\",\n    \"temperature\": 0.7\n  }\n}\n</code></pre> <p>The JSON format MUST be validated against the provided schemas to ensure compatibility.</p>"},{"location":"prompt-decorators-specification-v1.0/#552-markdown-style-format-optional","title":"5.5.2 Markdown-Style Format (Optional)","text":"<p>For documentation or text-heavy environments, implementations MAY support a Markdown-style format:</p> <pre><code>&lt;!-- @Reasoning depth=comprehensive --&gt;\n&lt;!-- @StepByStep numbered=true --&gt;\n\nExplain how nuclear fusion works\n</code></pre> <p>When using the Markdown format, implementations MUST convert it to the canonical JSON format internally for processing.</p>"},{"location":"prompt-decorators-specification-v1.0/#553-yaml-configuration-optional","title":"5.5.3 YAML Configuration (Optional)","text":"<p>For configuration-based systems, implementations MAY support YAML format:</p> <pre><code>prompt: Explain how nuclear fusion works\ndecorators:\n  - name: Reasoning\n    version: 1.0.0\n    parameters:\n      depth: comprehensive\n    metadata:\n      description: Provides detailed reasoning before conclusions\n      category: reasoning\n  - name: StepByStep\n    version: 1.0.0\n    parameters:\n      numbered: true\nmetadata:\n  model: gpt-4\n  version: 1.0.0\n  temperature: 0.7\n</code></pre> <p>When using YAML format, implementations MUST convert it to the canonical JSON format and validate against the provided schemas.</p>"},{"location":"prompt-decorators-specification-v1.0/#554-format-conversion","title":"5.5.4 Format Conversion","text":"<p>Implementations that support multiple formats MUST:</p> <ol> <li>Convert all formats to the canonical JSON format internally</li> <li>Validate the converted format against the appropriate JSON schema</li> <li>Handle conversion errors gracefully with appropriate error messages</li> <li>Preserve all metadata and parameters during conversion</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#56-decorator-transformation-implementation","title":"5.6 Decorator Transformation Implementation","text":"<p>Implementations of prompt decorators MUST provide a mechanism for transforming the original prompt according to the decorator's intended behavior. This section describes the standard approach to prompt transformation.</p>"},{"location":"prompt-decorators-specification-v1.0/#561-transformation-models","title":"5.6.1 Transformation Models","text":"<p>The transformation model for prompt decorators follows these principles:</p> <ol> <li>Decorator's Purpose: Each decorator defines a specific modification to the prompt or response behavior.</li> <li>Instruction-Based Implementation: Decorators primarily work by adding specific instructions to the prompt.</li> <li>Parameter-Specific Variations: Parameters modify the instructions according to their values.</li> <li>Composition Logic: Multiple decorators combine in a predictable way.</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#562-standard-implementation-pattern","title":"5.6.2 Standard Implementation Pattern","text":"<p>A compliant implementation of decorator transformation behavior MUST follow this pattern:</p> <pre><code>def apply_decorator(prompt, decorator_name, parameters):\n    \"\"\"\n    Apply a decorator transformation to a prompt.\n\n    Args:\n        prompt: Original prompt text\n        decorator_name: Name of the decorator to apply\n        parameters: Dictionary of parameters\n\n    Returns:\n        Transformed prompt text\n    \"\"\"\n    # Base implementation for Reasoning decorator\n    if decorator_name == \"Reasoning\":\n        depth = parameters.get(\"depth\", \"moderate\")\n\n        # Base instruction\n        instruction = \"Please provide detailed reasoning in your response. Show your thought process before reaching a conclusion.\"\n\n        # Parameter-specific modifications\n        if depth == \"comprehensive\":\n            instruction += \" Provide a very thorough and detailed analysis with multiple perspectives.\"\n        elif depth == \"basic\":\n            instruction += \" Focus on the most important logical steps.\"\n\n        # Apply transformation (usually prepending)\n        return f\"{instruction}\\n\\n{prompt}\"\n\n    # Implementations for other decorators...\n\n    # Default fallback\n    return prompt\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#563-transformation-templates","title":"5.6.3 Transformation Templates","text":"<p>For consistent behavior across implementations, each decorator SHOULD define a transformation template consisting of:</p> <ol> <li>Base Instruction: The standard instruction text that implements the decorator's behavior.</li> <li>Parameter Mappings: How each parameter and its possible values modify the instruction.</li> <li>Placement Strategy: How the transformed content is positioned (typically prepended).</li> </ol> <p>Decorators MAY define this information in their registry entries using the <code>transformationTemplate</code> property as defined in the registry-entry schema:</p> <pre><code>{\n  \"transformationTemplate\": {\n    \"instruction\": \"Please provide detailed reasoning in your response. Show your thought process before reaching a conclusion.\",\n    \"parameterMapping\": {\n      \"depth\": {\n        \"valueMap\": {\n          \"basic\": \"Focus on the most important logical steps.\",\n          \"moderate\": \"Balance detail with clarity in your reasoning.\",\n          \"comprehensive\": \"Provide a very thorough and detailed analysis with multiple perspectives.\"\n        }\n      }\n    },\n    \"placement\": \"prepend\",\n    \"compositionBehavior\": \"accumulate\"\n  }\n}\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#564-composition-rules","title":"5.6.4 Composition Rules","text":"<p>When applying multiple decorators, implementations MUST follow these rules:</p> <ol> <li>Order of Application: Apply decorators in the order they appear in the prompt or decorator list.</li> <li>Accumulation: Instructions from multiple decorators accumulate unless they explicitly override each other.</li> <li>Coherence: The combined instructions must form a coherent set of directives.</li> <li>Conflict Resolution: If decorators have contradictory instructions, the later decorator takes precedence.</li> </ol> <p>Example of composition:</p> <pre><code>Original:\n+++Reasoning(depth=comprehensive)\n+++Audience(level=beginner)\nExplain quantum computing.\n\nTransformed:\nPlease provide detailed reasoning in your response with thorough analysis.\nPlease tailor your response for a beginner audience with minimal technical jargon.\n\nExplain quantum computing.\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#565-implementation-requirements","title":"5.6.5 Implementation Requirements","text":"<p>A compliant decorator implementation MUST:</p> <ol> <li>Parse Decorators: Correctly extract decorators and their parameters from prompts.</li> <li>Apply Transformations: Transform the prompt according to the decorator's template.</li> <li>Support Composition: Handle multiple decorators correctly.</li> <li>Provide Fallbacks: Gracefully handle unsupported decorators.</li> <li>Document Behavior: Clearly document the transformation behavior for each supported decorator.</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#566-testing-and-validation","title":"5.6.6 Testing and Validation","text":"<p>Implementations SHOULD include tests that validate:</p> <ol> <li>Correct transformation of prompts for each supported decorator.</li> <li>Proper handling of all parameter combinations.</li> <li>Consistent behavior when composing multiple decorators.</li> <li>Correct fallback behavior for unsupported decorators or parameters.</li> </ol> <p>Implementations MAY use the <code>implementationGuidance.examples</code> property in the registry entry to define test cases for validation:</p> <pre><code>{\n  \"implementationGuidance\": {\n    \"examples\": [\n      {\n        \"context\": \"Standard use case\",\n        \"originalPrompt\": \"What are the environmental impacts of electric vehicles?\",\n        \"transformedPrompt\": \"Please provide detailed reasoning in your response. Show your thought process before reaching a conclusion. Provide a very thorough and detailed analysis with multiple perspectives.\\n\\nWhat are the environmental impacts of electric vehicles?\"\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#6-use-cases-and-examples","title":"6. Use Cases and Examples","text":""},{"location":"prompt-decorators-specification-v1.0/#61-research-and-analysis","title":"6.1 Research and Analysis","text":"<pre><code>+++FirstPrinciples\n+++CiteSources(style=inline, format=APA)\n+++Limitations(position=end)\nAnalyze the potential impact of quantum computing on cryptography over the next decade.\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#62-education-and-learning","title":"6.2 Education and Learning","text":"<pre><code>+++ELI5(strictness=true)\n+++StepByStep(numbered=true)\n+++Analogical(domain=everyday)\nExplain how nuclear fusion works.\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#63-decision-support","title":"6.3 Decision Support","text":"<pre><code>+++DecisionMatrix(options=on-prem,hybrid,cloud-native, criteria=cost,security,scalability,complexity)\n+++StressTest(scenarios=3)\n+++FindGaps(aspects=stakeholders,resources,timeline)\nShould our company migrate our infrastructure to a cloud-native architecture?\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#64-creative-writing","title":"6.4 Creative Writing","text":"<pre><code>+++Creative(genre=narrative)\n+++Tone(style=humorous)\n+++Extremes(versions=both)\nWrite a short story about a robot learning to understand human emotions.\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#65-technical-documentation","title":"6.5 Technical Documentation","text":"<pre><code>+++Professional(industry=software)\n+++Audience(level=intermediate)\n+++Layered(levels=overview,detailed,examples)\n+++OutputFormat(format=markdown)\nCreate documentation for a RESTful API that manages user authentication.\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#66-strategic-analysis","title":"6.6 Strategic Analysis","text":"<pre><code>+++RedTeam(strength=steelman)\n+++BlindSpots(focus=all)\n+++BreakAndBuild\nOur company is planning to enter the sustainable energy market with a new battery technology.\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#67-multi-step-problem-solving","title":"6.7 Multi-step Problem Solving","text":"<pre><code>+++Chain(steps=summarize,critique,improve,actionize, showAll=true)\n+++DeepDive(layers=3, focus=nuance)\nHere's our current marketing strategy for launching in the European market...\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#7-versioning-and-evolution","title":"7. Versioning and Evolution","text":""},{"location":"prompt-decorators-specification-v1.0/#71-decorator-evolution-strategy","title":"7.1 Decorator Evolution Strategy","text":"<p>The standard includes mechanisms for decorator evolution while maintaining backward compatibility:</p>"},{"location":"prompt-decorators-specification-v1.0/#711-decorator-versioning","title":"7.1.1 Decorator Versioning","text":"<p>Individual decorators can specify versions:</p> <pre><code>+++Reasoning:v2(depth=comprehensive)\n</code></pre> <p>Implementations should interpret versioned decorators according to their specifications, with the following guidelines:</p> <ol> <li>Default Version: When no version is specified, the latest stable version is assumed</li> <li>Version Ranges: Implementations may specify supported version ranges</li> <li>Deprecation: Implementations should support deprecated versions with appropriate warnings</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#712-standard-versioning","title":"7.1.2 Standard Versioning","text":"<p>The overall standard follows semantic versioning:</p> <pre><code>+++Version(standard=1.2.0)\n</code></pre> <p>This decorator indicates compliance with a specific version of the standard and should be the first decorator in a sequence if used.</p>"},{"location":"prompt-decorators-specification-v1.0/#713-feature-detection","title":"7.1.3 Feature Detection","text":"<p>Implementations can use the following pattern to detect supported features:</p> <pre><code>+++FeatureDetect(reasoning, stepByStep, outputFormat)\n</code></pre> <p>This allows applications to programmatically determine which decorators a particular model or implementation supports.</p>"},{"location":"prompt-decorators-specification-v1.0/#72-community-and-ecosystem-development","title":"7.2 Community and Ecosystem Development","text":""},{"location":"prompt-decorators-specification-v1.0/#721-registry-and-discovery","title":"7.2.1 Registry and Discovery","text":"<p>A central registry for standard and community decorators facilitates discovery and adoption. All registry entries MUST conform to the <code>registry-entry.schema.json</code> schema:</p> <pre><code>{\n  \"$schema\": \"https://raw.githubusercontent.com/prompt-decorators/spec/main/schemas/registry-entry.schema.json\",\n  \"decoratorName\": \"ScientificReasoning\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Applies scientific method reasoning process\",\n  \"author\": {\n    \"name\": \"Scientific AI Consortium\",\n    \"email\": \"contact@example.org\",\n    \"url\": \"https://example.org\"\n  },\n  \"parameters\": [\n    {\n      \"name\": \"discipline\",\n      \"type\": \"enum\",\n      \"description\": \"Scientific discipline context\",\n      \"enum\": [\"physics\", \"biology\", \"chemistry\", \"general\"],\n      \"default\": \"general\",\n      \"required\": false\n    },\n    {\n      \"name\": \"rigor\",\n      \"type\": \"enum\",\n      \"description\": \"Level of scientific rigor\",\n      \"enum\": [\"academic\", \"educational\", \"popular\"],\n      \"default\": \"educational\",\n      \"required\": false\n    }\n  ],\n  \"examples\": [\n    {\n      \"description\": \"Basic scientific analysis of a physics problem\",\n      \"usage\": \"+++ScientificReasoning(discipline=physics, rigor=academic)\",\n      \"result\": \"Analyzes the problem using formal physics methodology and academic rigor\"\n    }\n  ],\n  \"compatibility\": {\n    \"requires\": [\"Reasoning\"],\n    \"conflicts\": [\"ELI5\"],\n    \"minStandardVersion\": \"1.0.0\",\n    \"maxStandardVersion\": \"2.0.0\",\n    \"models\": [\n      \"gpt-4\",\n      \"gpt-3.5-turbo\"\n    ]\n  }\n}\n</code></pre>"},{"location":"prompt-decorators-specification-v1.0/#722-extension-mechanism","title":"7.2.2 Extension Mechanism","text":"<p>The <code>+++Extension</code> decorator enables loading of community-defined decorators. Extension packages MUST conform to the <code>extension-package.schema.json</code> schema:</p> <pre><code>{\n  \"$schema\": \"https://raw.githubusercontent.com/prompt-decorators/spec/main/schemas/extension-package.schema.json\",\n  \"name\": \"scientific-reasoning-pack\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A collection of decorators for scientific reasoning and analysis\",\n  \"author\": {\n    \"name\": \"Scientific AI Consortium\",\n    \"email\": \"contact@example.org\",\n    \"url\": \"https://example.org\"\n  },\n  \"license\": \"Apache 2.0\",\n  \"keywords\": [\"science\", \"reasoning\", \"analysis\"],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/example/scientific-reasoning-pack\"\n  },\n  \"decorators\": [\n    {\n      \"decoratorName\": \"ScientificReasoning\",\n      \"version\": \"1.0.0\",\n      \"description\": \"Applies scientific method reasoning process\",\n      \"parameters\": [\n        {\n          \"name\": \"discipline\",\n          \"type\": \"enum\",\n          \"description\": \"Scientific discipline context\",\n          \"enum\": [\"physics\", \"biology\", \"chemistry\", \"general\"],\n          \"default\": \"general\"\n        }\n      ]\n    }\n  ],\n  \"dependencies\": {\n    \"standard\": {\n      \"version\": \"1.0.0\"\n    },\n    \"extensions\": [\n      {\n        \"name\": \"core-reasoning\",\n        \"version\": \"1.0.0\"\n      }\n    ]\n  }\n}\n</code></pre> <p>Usage example: <pre><code>+++Extension(source=https://decorator-registry.ai/scientific-pack.json)\n+++ScientificReasoning(discipline=physics)\n</code></pre></p>"},{"location":"prompt-decorators-specification-v1.0/#723-schema-evolution","title":"7.2.3 Schema Evolution","text":"<p>The JSON schemas for the registry and extensions follow these principles:</p> <ol> <li>Backward Compatibility: Schema changes MUST maintain backward compatibility within major versions</li> <li>Version Alignment: Schema versions MUST align with the standard version</li> <li>Migration Support: Major version changes MUST include migration guides</li> <li>Validation Tools: The community MUST maintain tools for schema validation</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#724-governance-model","title":"7.2.4 Governance Model","text":"<p>The governance of the Prompt Decorator standard includes:</p> <ol> <li>Technical Committee: Oversees standard evolution and core decorator definitions</li> <li>Community Working Groups: Develop specialized decorator sets for specific domains</li> <li>Public Review Process: Ensures new proposals receive adequate review and feedback</li> <li>Versioning Policy: Establishes guidelines for backward compatibility and deprecation</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#73-standardization-process","title":"7.3 Standardization Process","text":"<ol> <li>Community Feedback: Gathering input from AI practitioners and users</li> <li>Formal Specification: Developing a comprehensive technical specification</li> <li>Reference Implementation: Creating open-source implementation examples</li> <li>Compatibility Testing: Ensuring consistent behavior across platforms</li> <li>Standards Body: Establishing governance for ongoing development</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#74-extensions-and-enhancements","title":"7.4 Extensions and Enhancements","text":"<ol> <li>Model-Specific Decorators: Optimizations for specific LLM architectures</li> <li>Domain-Specific Decorators: Specialized decorators for fields like medicine, law, etc.</li> <li>Interoperability: Standards for decorator translation between systems</li> <li>Metadata Integration: Linking decorators with metadata about responses</li> <li>Learning Mechanisms: Systems that learn effective decorator patterns from usage</li> <li>Automated Decorator Selection: AI-assisted decorator recommendation based on query intent</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#8-security-and-privacy-considerations","title":"8. Security and Privacy Considerations","text":""},{"location":"prompt-decorators-specification-v1.0/#81-security-considerations","title":"8.1 Security Considerations","text":"<p>Implementations of Prompt Decorators should consider these security aspects:</p> <ol> <li>Input Validation: Implementations MUST validate decorator syntax to prevent injection attacks</li> <li>Resource Limitations: Implementations SHOULD enforce limits on decorator complexity to prevent denial-of-service attacks</li> <li>Authorization Controls: Implementations MAY restrict access to certain decorators based on user permissions</li> <li>Sandbox Execution: When implementing custom decorators, execution SHOULD be sandboxed</li> <li>Audit Logging: Implementations SHOULD log decorator usage for security monitoring</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#82-privacy-considerations","title":"8.2 Privacy Considerations","text":"<p>Implementations should address these privacy concerns:</p> <ol> <li>Data Minimization: Decorators SHOULD NOT require unnecessary personal information</li> <li>Purpose Limitation: Implementations SHOULD document how decorator information is used</li> <li>User Control: Users SHOULD have the ability to disable or limit decorator tracking</li> <li>Transparency: Documentation SHOULD disclose how decorator usage data might be collected or analyzed</li> <li>Persistent Storage: Implementations SHOULD clarify if and how decorator preferences are stored</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#83-ethical-considerations","title":"8.3 Ethical Considerations","text":"<p>Implementers should consider these ethical aspects:</p> <ol> <li>Accessibility: Decorators SHOULD be designed to work with assistive technologies</li> <li>Bias Mitigation: Implementations SHOULD test decorators with diverse inputs to identify potential biases</li> <li>Transparency: The effect of decorators SHOULD be made clear to users</li> <li>User Agency: Users SHOULD be able to understand and control decorator effects</li> <li>Documentation: Implementations SHOULD document limitations and potential issues</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#9-testing-and-validation","title":"9. Testing and Validation","text":""},{"location":"prompt-decorators-specification-v1.0/#91-conformance-testing","title":"9.1 Conformance Testing","text":"<p>Implementations claiming conformance with this standard SHOULD implement these test procedures:</p> <ol> <li>Syntax Validation: Test parsing and recognition of all core decorators</li> <li>Behavior Validation: Test that each supported decorator produces the expected behavioral change</li> <li>Composition Testing: Test combinations of decorators for expected interaction</li> <li>Error Handling: Test handling of malformed decorators</li> <li>Edge Cases: Test boundary conditions for parameter values</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#92-test-suite","title":"9.2 Test Suite","text":"<p>A reference test suite is available at <code>https://github.com/prompt-decorators/test-suite</code> with:</p> <ol> <li>Test cases for each core decorator</li> <li>Composition test cases</li> <li>Error handling scenarios</li> <li>Performance benchmarks</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#93-validation-tools","title":"9.3 Validation Tools","text":"<p>These tools are available to validate decorator implementations:</p> <ol> <li>Decorator Validator: Command-line tool to validate decorator syntax</li> <li>Behavior Test Framework: Framework for testing decorator effects</li> <li>Compatibility Scanner: Tool to check for decorator conflicts</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#10-implementation-timeline","title":"10. Implementation Timeline","text":""},{"location":"prompt-decorators-specification-v1.0/#101-phased-approach","title":"10.1 Phased Approach","text":"<p>Implementations are encouraged to follow this phased approach:</p> <ol> <li>Phase 1 (Core Support): Implement the five core decorators</li> <li>Phase 2 (Extended Support): Add support for common reasoning and output decorators</li> <li>Phase 3 (Full Support): Implement all standard decorators</li> <li>Phase 4 (Extensions): Support domain-specific extensions</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#102-versioning-timeline","title":"10.2 Versioning Timeline","text":"<p>The standard will evolve according to this timeline:</p> <ol> <li>v1.0 (Initial Release): Core specification with minimal set of decorators</li> <li>v1.x (Minor Updates): Clarifications and additional decorators</li> <li>v2.0 (Major Update): Enhanced composition, additional parameters, and expanded categories</li> </ol>"},{"location":"prompt-decorators-specification-v1.0/#11-references","title":"11. References","text":"<ol> <li>Gamma, E., Helm, R., Johnson, R., &amp; Vlissides, J. (1994). Design Patterns: Elements of Reusable Object-Oriented Software.</li> <li>Python Software Foundation. (2021). PEP 318 \u2013 Decorators for Functions and Methods.</li> <li>Wei, J., Wang, X., Schuurmans, D., Bosma, M., et al. (2022). Chain of Thought Prompting Elicits Reasoning in Large Language Models.</li> <li>Yao, S., Yu, D., Zhao, J., Shafran, I., et al. (2023). Tree of Thoughts: Deliberate Problem Solving with Large Language Models.</li> <li>White, J., Fu, Q., Hays, S., Sandborn, M., et al. (2023). A Prompt Pattern Catalog to Enhance Prompt Engineering with ChatGPT.</li> <li>Kojima, T., Gu, S.S., Reid, M., Matsuo, Y., &amp; Iwasawa, Y. (2022). Large Language Models are Zero-Shot Reasoners.</li> <li>Liu, P., Yuan, W., Fu, J., Jiang, Z., et al. (2023). Pre-train, Prompt, and Predict: A Systematic Survey of Prompting Methods in Natural Language Processing.</li> <li>Reynolds, L., &amp; McDonell, K. (2021). Prompt Programming for Large Language Models: Beyond the Few-Shot Paradigm.</li> </ol>"},{"location":"quickstart/","title":"Quick Start Guide","text":"<p>This guide will help you get started with the Prompt Decorators framework quickly.</p>"},{"location":"quickstart/#installation","title":"Installation","text":"<p>First, install the Prompt Decorators package:</p> <pre><code>pip install prompt-decorators\n</code></pre> <p>For development installation or other options, see the Installation Guide.</p>"},{"location":"quickstart/#basic-usage","title":"Basic Usage","text":""},{"location":"quickstart/#using-individual-decorators","title":"Using Individual Decorators","text":"<p>Here's a simple example of using a decorator to modify a prompt:</p> <pre><code>from prompt_decorators.decorators import Reasoning\nfrom prompt_decorators.decorators.reasoning import ReasoningStyle\n\n# Create a Reasoning decorator\nreasoning = Reasoning(\n    style=ReasoningStyle.DETAILED.value,\n    show_working=True,\n    consider_alternatives=True\n)\n\n# Apply the decorator to a prompt\nprompt = \"Explain quantum entanglement.\"\ndecorated_prompt = reasoning.apply(prompt)\n\nprint(decorated_prompt)\n</code></pre>"},{"location":"quickstart/#combining-multiple-decorators","title":"Combining Multiple Decorators","text":"<p>You can combine multiple decorators to create more complex prompt modifications:</p> <pre><code>from prompt_decorators.decorators import Reasoning, OutputFormat\nfrom prompt_decorators.decorators.reasoning import ReasoningStyle\nfrom prompt_decorators.decorators.format import FormatType\n\n# Create decorators\nreasoning = Reasoning(\n    style=ReasoningStyle.DETAILED.value,\n    show_working=True,\n    consider_alternatives=True\n)\n\noutput_format = OutputFormat(\n    format_type=FormatType.MARKDOWN.value,\n    pretty_print=True\n)\n\n# Apply decorators to a prompt (order matters)\nprompt = \"Explain quantum entanglement.\"\ndecorated_prompt = output_format.apply(reasoning.apply(prompt))\n\nprint(decorated_prompt)\n</code></pre>"},{"location":"quickstart/#using-the-decorator-registry","title":"Using the Decorator Registry","text":"<p>The registry provides a way to discover and use decorators dynamically:</p> <pre><code>from prompt_decorators.utils.discovery import DecoratorRegistry\n\n# Get the registry instance\nregistry = DecoratorRegistry()\n\n# Get a decorator by name\nconcise = registry.get_decorator(\"Concise\")\n\n# Create an instance with parameters\nconcise_instance = concise(maxWords=100, bulletPoints=True)\n\n# Apply to a prompt\nprompt = \"Explain quantum computing in detail.\"\ndecorated_prompt = concise_instance.apply(prompt)\n\nprint(decorated_prompt)\n</code></pre>"},{"location":"quickstart/#using-decorated-requests","title":"Using Decorated Requests","text":"<p>For more complex scenarios, you can use the <code>DecoratedRequest</code> class:</p> <pre><code>from prompt_decorators.core.request import DecoratedRequest\nfrom prompt_decorators.decorators import Reasoning, OutputFormat\n\n# Create decorators\nreasoning = Reasoning(style=\"detailed\", show_working=True)\noutput_format = OutputFormat(format_type=\"markdown\", pretty_print=True)\n\n# Create a decorated request\nrequest = DecoratedRequest(\n    prompt=\"Explain quantum mechanics.\",\n    decorators=[reasoning, output_format],\n    model=\"gpt-4\",\n    api_params={\"temperature\": 0.7}\n)\n\n# Apply all decorators\ndecorated_prompt = request.apply_decorators()\n\nprint(decorated_prompt)\n\n# Serialize for storage or transmission\nrequest_json = request.to_json()\nprint(request_json)\n</code></pre>"},{"location":"quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Core Concepts</li> <li>Explore the API Reference</li> <li>Check out more Examples</li> <li>Learn about Creating Custom Decorators</li> </ul>"},{"location":"roadmap/","title":"Roadmap","text":"<p>This page outlines the future development plans for the Prompt Decorators framework. It includes information about completed phases, current status, and future goals.</p>"},{"location":"roadmap/#project-phases-and-current-status","title":"Project Phases and Current Status","text":"<p>The Prompt Decorators project has been developed in several phases:</p>"},{"location":"roadmap/#completed-phases","title":"Completed Phases","text":"<ul> <li>Phase 1: Core Functionality - Established the foundation of the framework, including the base decorator class, registry system, and core utilities.</li> <li>Phase 2-4: Framework Development - Expanded the framework with additional decorators, improved the registry system, added compatibility checking, and enhanced the API.</li> <li>Phase 5: Documentation and Examples - Created comprehensive documentation, usage examples, tutorials, and prepared for package publication.</li> </ul>"},{"location":"roadmap/#current-phase-consolidation-and-cleanup","title":"Current Phase: Consolidation and Cleanup","text":"<p>We are currently in a consolidation phase focused on:</p> <ol> <li>Documentation Consolidation - Organizing and standardizing all documentation</li> <li>Implementation Plan Cleanup - Archiving implementation plans and creating a unified roadmap</li> <li>Package Structure Refinement - Standardizing imports and modernizing configuration</li> <li>Documentation-Code Synchronization - Ensuring documentation accurately reflects the codebase</li> </ol>"},{"location":"roadmap/#progress-update","title":"Progress Update","text":"<p>Significant progress has been made in the consolidation phase:</p> <ul> <li>\u2705 Import Standardization - Completed standardization of imports across the codebase</li> <li>\u2705 Poetry Migration - Migrated to Poetry for dependency management</li> <li>\u2705 Test Compatibility Fixes - Resolved issues with test compatibility</li> <li>\u2705 Docstring Standards - Created standards and tools for docstring validation</li> <li>\u2705 Generated Decorators Docstring Fixes - Fixed all docstring issues in generated decorators</li> <li>\u2705 Core Codebase Docstring Implementation - Fixed all docstrings to follow Google-style format</li> <li>\u2705 Docstring Validation Tool Improvement - Enhanced the docstring validation script to support multiple file inputs and pre-commit integration</li> <li>\u2705 Core Extensions Docstring Fixes - Fixed all docstring issues in core extension files</li> </ul>"},{"location":"roadmap/#immediate-next-steps","title":"Immediate Next Steps","text":"<ol> <li>Code Quality Improvements:</li> <li>\u2705 Resolved all docstring issues in core extension files</li> <li>\u2705 Fixed all docstring issues in example files</li> <li>\u2705 Fixed all docstring issues in test files</li> <li>\u2705 Fixed all docstring issues in script files</li> <li>\u2705 Implement CI/CD integration with GitHub Actions</li> <li>\u2705 Set up pre-commit hooks for code quality checks</li> <li> <p>\u2705 Updated docstring standards documentation</p> </li> <li> <p>Complete Domain Guides - Finish AI Safety and Healthcare guides</p> </li> <li>Finalize API Integration Guide - Complete the guide for integrating with various LLM APIs</li> <li>Enhance Examples - Complete provider-specific and domain examples</li> <li>Prepare for PyPI Publication - Finalize package metadata and release automation</li> </ol>"},{"location":"roadmap/#short-term-goals-next-3-months","title":"Short-Term Goals (Next 3 Months)","text":""},{"location":"roadmap/#core-framework-enhancements","title":"Core Framework Enhancements","text":"<ul> <li>Performance Optimization: Improve the efficiency of decorator application for large prompts</li> <li>Expanded Decorator Library: Add 10+ new decorators covering additional prompt engineering techniques</li> <li>Enhanced Compatibility Checking: Develop more sophisticated compatibility rules between decorators</li> <li>Improved Error Handling: Add better error messages and recovery mechanisms</li> </ul>"},{"location":"roadmap/#documentation-and-examples","title":"Documentation and Examples","text":"<ul> <li>Interactive Documentation: Create an interactive web-based playground for trying decorators</li> <li>Video Tutorials: Produce a series of tutorial videos demonstrating key features</li> <li>Case Studies: Document real-world use cases and success stories</li> <li>Expanded Examples: Add more complex examples showing advanced usage patterns</li> </ul>"},{"location":"roadmap/#testing-and-quality-assurance","title":"Testing and Quality Assurance","text":"<ul> <li>Expanded Test Coverage: Achieve 95%+ test coverage across the codebase</li> <li>Benchmark Suite: Develop benchmarks for measuring decorator performance</li> <li>Compatibility Testing: Test with a wider range of LLM providers and models</li> <li>Security Audit: Conduct a comprehensive security review</li> </ul>"},{"location":"roadmap/#medium-term-goals-3-9-months","title":"Medium-Term Goals (3-9 Months)","text":""},{"location":"roadmap/#advanced-features","title":"Advanced Features","text":"<ul> <li>Decorator Marketplace: Create a central repository for sharing community-created decorators</li> <li>Visual Decorator Builder: Develop a GUI tool for creating and configuring decorators</li> <li>Adaptive Decorators: Implement decorators that adapt based on the prompt content or context</li> <li>Multilingual Support: Enhance decorators to work effectively with multiple languages</li> <li>Versioned Registry: Support multiple versions of decorators in the registry</li> </ul>"},{"location":"roadmap/#integration-and-ecosystem","title":"Integration and Ecosystem","text":"<ul> <li>LangChain Integration: Develop deeper integration with the LangChain ecosystem</li> <li>Hugging Face Integration: Create specialized adapters for Hugging Face models</li> <li>Web Framework Plugins: Build plugins for popular web frameworks (Flask, FastAPI, Django)</li> <li>Vector Database Connectors: Add support for retrieving decorators from vector databases</li> <li>Prompt Management System: Develop a system for managing and versioning decorated prompts</li> </ul>"},{"location":"roadmap/#analytics-and-monitoring","title":"Analytics and Monitoring","text":"<ul> <li>Decorator Analytics: Add tools for tracking decorator usage and effectiveness</li> <li>Performance Monitoring: Implement monitoring for decorator application time and token usage</li> <li>A/B Testing Framework: Create tools for comparing different decorator combinations</li> <li>Quality Metrics: Develop metrics for evaluating the quality of decorated prompts</li> </ul>"},{"location":"roadmap/#long-term-goals-9-months","title":"Long-Term Goals (9+ Months)","text":""},{"location":"roadmap/#advanced-ai-capabilities","title":"Advanced AI Capabilities","text":"<ul> <li>Auto-Decorator Selection: Use AI to automatically select optimal decorators for a given prompt</li> <li>Self-Optimizing Decorators: Implement decorators that learn and improve based on usage patterns</li> <li>Context-Aware Decorators: Develop decorators that adapt based on conversation history</li> <li>Multimodal Decorators: Extend the framework to support multimodal prompts (text + images)</li> <li>Decorator Synthesis: Generate new decorators based on natural language descriptions</li> </ul>"},{"location":"roadmap/#enterprise-features","title":"Enterprise Features","text":"<ul> <li>Role-Based Access Control: Add permissions for decorator creation and usage</li> <li>Audit Logging: Implement comprehensive logging for compliance and security</li> <li>Enterprise Deployment Tools: Create tools for deploying in enterprise environments</li> <li>High Availability: Ensure the framework can operate in high-availability environments</li> <li>SLA Monitoring: Add tools for monitoring service level agreements</li> </ul>"},{"location":"roadmap/#research-and-innovation","title":"Research and Innovation","text":"<ul> <li>Academic Partnerships: Collaborate with academic institutions on prompt engineering research</li> <li>Published Research: Publish papers on the effectiveness of different decorator approaches</li> <li>Novel Prompt Techniques: Research and implement cutting-edge prompt engineering techniques</li> <li>Cross-Model Optimization: Develop techniques for optimizing prompts across different LLM architectures</li> <li>Prompt Efficiency Research: Research methods for reducing token usage while maintaining effectiveness</li> </ul>"},{"location":"roadmap/#community-and-ecosystem","title":"Community and Ecosystem","text":"<ul> <li>Open Governance Model: Establish an open governance model for the project</li> <li>Community Events: Host regular community events, hackathons, and challenges</li> <li>Training and Certification: Develop training materials and certification programs</li> <li>Extended Plugin System: Create a more robust plugin system for community extensions</li> <li>Integration Ecosystem: Build a broader ecosystem of integrations with other AI tools</li> </ul>"},{"location":"roadmap/#how-to-contribute","title":"How to Contribute","text":"<p>We welcome contributions to help us achieve these roadmap goals! Here's how you can get involved:</p> <ol> <li>Feature Development: Pick an item from the roadmap and submit a pull request</li> <li>Bug Fixes: Help us address issues in the issue tracker</li> <li>Documentation: Improve our documentation or create tutorials</li> <li>Testing: Help us test the framework with different LLMs and use cases</li> <li>Feedback: Share your ideas and suggestions for the roadmap</li> </ol> <p>See our Contributing Guide for more details on how to contribute.</p>"},{"location":"roadmap/#feedback","title":"Feedback","text":"<p>This roadmap is a living document and will evolve based on community feedback and changing priorities. If you have suggestions or feedback on the roadmap, please:</p> <ul> <li>Open an issue on our GitHub repository</li> <li>Discuss in our community forums</li> <li>Reach out to the maintainers directly</li> </ul> <p>We value your input in shaping the future of the Prompt Decorators framework!</p>"},{"location":"type_annotation_improvements/","title":"Type Annotation Improvements","text":"<p>This document outlines a plan for improving type annotations in the Prompt Decorators codebase based on the mypy warnings identified during documentation builds.</p>"},{"location":"type_annotation_improvements/#priority-areas","title":"Priority Areas","text":"<p>The following files and functions have been identified as needing type annotation improvements:</p>"},{"location":"type_annotation_improvements/#core-module","title":"Core Module","text":"<ol> <li><code>prompt_decorators/core/base.py:146</code>: Add type annotation for parameter <code>**kwargs</code></li> <li><code>prompt_decorators/core/request.py:42</code>: Add type annotation for parameter <code>self</code></li> <li><code>prompt_decorators/core/request.py:63</code>: Add type annotation for parameter <code>self</code></li> <li><code>prompt_decorators/core/model_specific.py:33</code>: Add type annotation for parameter <code>**kwargs</code></li> <li><code>prompt_decorators/core/model_specific.py:178</code>: Add type annotation for parameter <code>**params</code></li> </ol>"},{"location":"type_annotation_improvements/#decorators-module","title":"Decorators Module","text":"<p>Multiple methods in the generated decorators need <code>self</code> parameter type annotations:</p> <ol> <li><code>prompt_decorators/decorators/generated/decorators/reasoning.py:76</code></li> <li><code>prompt_decorators/decorators/generated/decorators/step_by_step.py:71</code></li> <li><code>prompt_decorators/decorators/generated/decorators/tree_of_thought.py</code> (multiple methods)</li> <li><code>prompt_decorators/decorators/generated/decorators/output_format.py:78</code></li> <li><code>prompt_decorators/decorators/generated/decorators/bullet.py</code> (multiple methods)</li> <li><code>prompt_decorators/decorators/generated/decorators/table_format.py</code> (multiple methods)</li> <li><code>prompt_decorators/decorators/generated/decorators/concise.py</code> (multiple methods)</li> <li><code>prompt_decorators/decorators/generated/decorators/detailed.py</code> (multiple methods)</li> <li><code>prompt_decorators/decorators/generated/decorators/tone.py:82</code></li> <li><code>prompt_decorators/decorators/generated/decorators/fact_check.py</code> (multiple methods)</li> <li><code>prompt_decorators/decorators/generated/decorators/peer_review.py</code> (multiple methods)</li> <li><code>prompt_decorators/decorators/generated/decorators/cite_sources.py</code> (multiple methods)</li> <li><code>prompt_decorators/decorators/generated/decorators/chain.py</code> (multiple methods)</li> <li><code>prompt_decorators/decorators/generated/decorators/conditional.py</code> (multiple methods)</li> <li><code>prompt_decorators/decorators/generated/decorators/override.py</code> (multiple methods)</li> </ol>"},{"location":"type_annotation_improvements/#generator-module","title":"Generator Module","text":"<ol> <li><code>prompt_decorators/generator/registry.py:102</code>: Add type annotation for parameter <code>self</code></li> <li><code>prompt_decorators/generator/registry.py:49</code>: Add type annotation for parameter <code>self</code></li> <li><code>prompt_decorators/generator/code_gen.py:192</code>: Add type annotation for parameter <code>self</code></li> </ol>"},{"location":"type_annotation_improvements/#utils-module","title":"Utils Module","text":"<ol> <li><code>prompt_decorators/utils/discovery.py:30</code>: Add type annotation for returned value</li> <li><code>prompt_decorators/utils/discovery.py:275</code>: Add type annotation for parameter <code>**parameters</code></li> <li><code>prompt_decorators/utils/cache.py:33</code>: Add type annotation for returned value <code>DecoratorCache</code></li> <li><code>prompt_decorators/utils/json_loader.py:43</code>: Add type annotation for parameter <code>self</code></li> <li><code>prompt_decorators/utils/model_detection.py:131</code>: Add type annotation for returned value</li> <li><code>prompt_decorators/utils/plugins.py</code> (multiple methods)</li> <li><code>prompt_decorators/utils/telemetry.py:35</code>: Add type annotation for returned value</li> </ol>"},{"location":"type_annotation_improvements/#implementation-strategy","title":"Implementation Strategy","text":"<p>Since many of the missing type annotations are in generated code, we should focus on:</p> <ol> <li> <p>Updating the code generation templates to include proper type annotations for all methods, especially for <code>self</code> parameters.</p> </li> <li> <p>Creating a type annotation helper script that can automatically add missing type annotations to existing files.</p> </li> <li> <p>Updating the base classes to include proper type annotations that can be inherited by generated classes.</p> </li> </ol>"},{"location":"type_annotation_improvements/#example-fixes","title":"Example Fixes","text":""},{"location":"type_annotation_improvements/#for-self-parameter-annotations","title":"For <code>self</code> parameter annotations:","text":"<pre><code>def some_method(self: \"ClassName\") -&gt; ReturnType:\n    # Method implementation\n</code></pre>"},{"location":"type_annotation_improvements/#for-kwargs-annotations","title":"For <code>**kwargs</code> annotations:","text":"<pre><code>def some_method(self, **kwargs: Any) -&gt; ReturnType:\n    # Method implementation\n</code></pre>"},{"location":"type_annotation_improvements/#for-return-value-annotations","title":"For return value annotations:","text":"<pre><code>def some_method() -&gt; List[str]:\n    # Method implementation\n    return [\"result1\", \"result2\"]\n</code></pre>"},{"location":"type_annotation_improvements/#timeline","title":"Timeline","text":"<ol> <li>First, update the code generation templates to ensure all newly generated code has proper type annotations.</li> <li>Then, create a script to add missing type annotations to existing files.</li> <li>Finally, manually review and fix any remaining type annotation issues.</li> </ol>"},{"location":"type_annotation_improvements/#tracking-progress","title":"Tracking Progress","text":"<p>Create a GitHub issue to track progress on type annotation improvements, with a checklist for each file that needs to be updated.</p>"},{"location":"validator_tool/","title":"Prompt Decorator Validator Tool","text":"<p>The validator tool provides a way to validate prompt decorator definitions against the official JSON schemas of the Prompt Decorators specification.</p>"},{"location":"validator_tool/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Installation</li> <li>Usage</li> <li>Examples</li> <li>Validation Types</li> <li>Troubleshooting</li> </ul>"},{"location":"validator_tool/#installation","title":"Installation","text":"<p>The validator requires Python 3.6+ and the <code>jsonschema</code> package.</p> <pre><code># Install the required dependency\npip install jsonschema\n</code></pre>"},{"location":"validator_tool/#usage","title":"Usage","text":"<p>The validator tool can be used to validate different types of artifacts:</p> <pre><code># Basic usage\npython validate_decorators.py [command] [file_or_directory_path] [options]\n</code></pre> <p>Available commands:</p> <ul> <li><code>decorator</code>: Validate a decorator definition against the decorator schema</li> <li><code>registry</code>: Validate a registry entry against the registry-entry schema</li> <li><code>api</code>: Validate an API request against the api-request schema</li> <li><code>package</code>: Validate an extension package against the extension-package schema</li> <li><code>directory</code>: Validate all JSON files in a directory against a specific schema</li> </ul>"},{"location":"validator_tool/#examples","title":"Examples","text":""},{"location":"validator_tool/#validating-a-single-registry-entry","title":"Validating a Single Registry Entry","text":"<pre><code>python validate_decorators.py registry registry/core/reasoning.json\n</code></pre>"},{"location":"validator_tool/#validating-all-decorators-in-a-directory","title":"Validating All Decorators in a Directory","text":"<pre><code>python validate_decorators.py directory registry/core --type registry\n</code></pre>"},{"location":"validator_tool/#validating-an-api-request","title":"Validating an API Request","text":"<pre><code>python validate_decorators.py api examples/api-request.json\n</code></pre>"},{"location":"validator_tool/#validating-an-extension-package","title":"Validating an Extension Package","text":"<pre><code>python validate_decorators.py package extensions/core/package.json\n</code></pre>"},{"location":"validator_tool/#validating-using-a-custom-schemas-directory","title":"Validating Using a Custom Schemas Directory","text":"<pre><code>python validate_decorators.py registry registry/core/reasoning.json --schemas-dir /path/to/schemas\n</code></pre>"},{"location":"validator_tool/#validation-types","title":"Validation Types","text":"<p>The validator supports four types of validation:</p>"},{"location":"validator_tool/#1-decorator-validation","title":"1. Decorator Validation","text":"<p>Validates a JSON file against the <code>decorator.schema.json</code> schema, which defines the structure of a single decorator instance.</p> <p>Required fields: - <code>name</code>: The name of the decorator - <code>version</code>: The semantic version of the decorator implementation - <code>parameters</code>: (Optional) Parameters for the decorator</p>"},{"location":"validator_tool/#2-registry-entry-validation","title":"2. Registry Entry Validation","text":"<p>Validates a JSON file against the <code>registry-entry.schema.json</code> schema, which defines how decorators are registered in the central registry.</p> <p>Required fields: - <code>decoratorName</code>: The name of the decorator - <code>version</code>: The semantic version of the decorator - <code>description</code>: Detailed description of what the decorator does - <code>parameters</code>: List of parameters that the decorator accepts</p>"},{"location":"validator_tool/#3-api-request-validation","title":"3. API Request Validation","text":"<p>Validates a JSON file against the <code>api-request.schema.json</code> schema, which defines the structure of API requests when using decorators.</p> <p>Required fields: - <code>prompt</code>: The main prompt text to be processed - <code>decorators</code>: (Optional) List of decorators to apply to the prompt</p>"},{"location":"validator_tool/#4-extension-package-validation","title":"4. Extension Package Validation","text":"<p>Validates a JSON file against the <code>extension-package.schema.json</code> schema, which defines how decorator extensions are packaged.</p> <p>Required fields: - <code>name</code>: Name of the extension package - <code>version</code>: Semantic version of the extension package - <code>decorators</code>: List of decorators included in the package</p>"},{"location":"validator_tool/#troubleshooting","title":"Troubleshooting","text":""},{"location":"validator_tool/#common-validation-errors","title":"Common Validation Errors","text":"<ol> <li>Schema Not Found</li> </ol> <pre><code>Error: Schema decorator.schema.json not found\n</code></pre> <p>This error occurs when the validator cannot find the schema files. Make sure the schemas directory exists and contains the required schema files.</p> <ol> <li>Missing Required Fields</li> </ol> <pre><code>\u2717 Registry entry validation error in registry/core/reasoning.json:\n  - 'description' is a required property\n</code></pre> <p>This error indicates that a required field is missing. Add the missing field to your JSON file.</p> <ol> <li>Invalid Field Type</li> </ol> <pre><code>\u2717 Decorator validation error in decorators/custom.json:\n  - 'number' is not of type 'string'\n  - Path: version\n</code></pre> <p>This error indicates that a field has an incorrect type. Check the field and ensure it has the correct type.</p>"},{"location":"validator_tool/#tips","title":"Tips","text":"<ul> <li>The validator provides detailed error messages that include the path to the error in the JSON file.</li> <li>When validating a directory, all JSON files in that directory (and subdirectories) will be validated.</li> <li>The validator uses the <code>jsonschema</code> package to perform validation, which follows the JSON Schema Draft 7 specification.</li> </ul>"},{"location":"validator_tool/#contributing","title":"Contributing","text":"<p>Contributions to the validator tool are welcome! Please ensure your changes maintain backward compatibility and add appropriate tests.</p> <p>See the contribution guidelines for more information.</p>"},{"location":"workflow-rules/","title":"Cursor Workflow Rules","text":"<p>This project has been updated to use the auto rule generator from cursor-auto-rules-agile-workflow.</p> <p>Note: This script can be safely re-run at any time to update the template rules to their latest versions. It will not impact or overwrite any custom rules you've created.</p>"},{"location":"workflow-rules/#core-features","title":"Core Features","text":"<ul> <li>Automated rule generation</li> <li>Standardized documentation formats</li> <li>AI behavior control and optimization</li> <li>Flexible workflow integration options</li> </ul>"},{"location":"workflow-rules/#workflow-integration-options","title":"Workflow Integration Options","text":""},{"location":"workflow-rules/#1-automatic-rule-application-recommended","title":"1. Automatic Rule Application (Recommended)","text":"<p>The core workflow rules are automatically installed in <code>.cursor/rules/</code>: - <code>901-prd.mdc</code> - Product Requirements Document standards - <code>902-arch.mdc</code> - Architecture documentation standards - <code>903-story.mdc</code> - User story standards - <code>801-workflow-agile.mdc</code> - Complete Agile workflow (optional)</p> <p>These rules are automatically applied when working with corresponding file types.</p>"},{"location":"workflow-rules/#2-notepad-based-workflow","title":"2. Notepad-Based Workflow","text":"<p>For a more flexible approach, use the templates in <code>xnotes/</code>: 1. Enable Notepads in Cursor options 2. Create a new notepad (e.g., \"agile\") 3. Copy contents from <code>xnotes/workflow-agile.md</code> 4. Use `@notepad-name` in conversations</p> <p>\ud83d\udca1 Tip: The Notepad approach is ideal for: - Initial project setup - Story implementation - Focused development sessions - Reducing context overhead</p>"},{"location":"workflow-rules/#getting-started","title":"Getting Started","text":"<ol> <li>Review the templates in `xnotes/`</li> <li>Choose your preferred workflow approach</li> <li>Start using the AI with confidence!</li> </ol> <p>For demos and tutorials, visit: BMad Code Videos</p>"},{"location":"api/","title":"Prompt Decorators API Documentation","text":""},{"location":"api/#modules","title":"Modules","text":"<ul> <li>prompt_decorators</li> <li>prompt_decorators.core</li> <li>prompt_decorators.core.base</li> <li>prompt_decorators.core.exceptions</li> <li>prompt_decorators.core.model_specific</li> <li>prompt_decorators.core.registry</li> <li>prompt_decorators.core.request</li> <li>prompt_decorators.core.validation</li> <li>prompt_decorators.decorators</li> <li>prompt_decorators.decorators.generated</li> <li>prompt_decorators.decorators.generated.decorators</li> <li>prompt_decorators.decorators.generated.decorators.abductive</li> <li>prompt_decorators.decorators.generated.decorators.academic</li> <li>prompt_decorators.decorators.generated.decorators.alternatives</li> <li>prompt_decorators.decorators.generated.decorators.analogical</li> <li>prompt_decorators.decorators.generated.decorators.as_expert</li> <li>prompt_decorators.decorators.generated.decorators.audience</li> <li>prompt_decorators.decorators.generated.decorators.balanced</li> <li>prompt_decorators.decorators.generated.decorators.blind_spots</li> <li>prompt_decorators.decorators.generated.decorators.break_and_build</li> <li>prompt_decorators.decorators.generated.decorators.build_on</li> <li>prompt_decorators.decorators.generated.decorators.bullet</li> <li>prompt_decorators.decorators.generated.decorators.chain</li> <li>prompt_decorators.decorators.generated.decorators.cite_sources</li> <li>prompt_decorators.decorators.generated.decorators.comparison</li> <li>prompt_decorators.decorators.generated.decorators.compatibility</li> <li>prompt_decorators.decorators.generated.decorators.concise</li> <li>prompt_decorators.decorators.generated.decorators.conditional</li> <li>prompt_decorators.decorators.generated.decorators.confidence</li> <li>prompt_decorators.decorators.generated.decorators.constraints</li> <li>prompt_decorators.decorators.generated.decorators.context</li> <li>prompt_decorators.decorators.generated.decorators.contrarian</li> <li>prompt_decorators.decorators.generated.decorators.creative</li> <li>prompt_decorators.decorators.generated.decorators.custom</li> <li>prompt_decorators.decorators.generated.decorators.debate</li> <li>prompt_decorators.decorators.generated.decorators.decision_matrix</li> <li>prompt_decorators.decorators.generated.decorators.deductive</li> <li>prompt_decorators.decorators.generated.decorators.detailed</li> <li>prompt_decorators.decorators.generated.decorators.eli5</li> <li>prompt_decorators.decorators.generated.decorators.enums</li> <li>prompt_decorators.decorators.generated.decorators.extension</li> <li>prompt_decorators.decorators.generated.decorators.extremes</li> <li>prompt_decorators.decorators.generated.decorators.fact_check</li> <li>prompt_decorators.decorators.generated.decorators.find_gaps</li> <li>prompt_decorators.decorators.generated.decorators.first_principles</li> <li>prompt_decorators.decorators.generated.decorators.forced_analogy</li> <li>prompt_decorators.decorators.generated.decorators.inductive</li> <li>prompt_decorators.decorators.generated.decorators.layered</li> <li>prompt_decorators.decorators.generated.decorators.limitations</li> <li>prompt_decorators.decorators.generated.decorators.mece</li> <li>prompt_decorators.decorators.generated.decorators.motivational</li> <li>prompt_decorators.decorators.generated.decorators.narrative</li> <li>prompt_decorators.decorators.generated.decorators.negative_space</li> <li>prompt_decorators.decorators.generated.decorators.nested</li> <li>prompt_decorators.decorators.generated.decorators.outline</li> <li>prompt_decorators.decorators.generated.decorators.output_format</li> <li>prompt_decorators.decorators.generated.decorators.override</li> <li>prompt_decorators.decorators.generated.decorators.peer_review</li> <li>prompt_decorators.decorators.generated.decorators.persona</li> <li>prompt_decorators.decorators.generated.decorators.precision</li> <li>prompt_decorators.decorators.generated.decorators.prioritize</li> <li>prompt_decorators.decorators.generated.decorators.priority</li> <li>prompt_decorators.decorators.generated.decorators.professional</li> <li>prompt_decorators.decorators.generated.decorators.quality_metrics</li> <li>prompt_decorators.decorators.generated.decorators.reasoning</li> <li>prompt_decorators.decorators.generated.decorators.red_team</li> <li>prompt_decorators.decorators.generated.decorators.refine</li> <li>prompt_decorators.decorators.generated.decorators.remix</li> <li>prompt_decorators.decorators.generated.decorators.root_cause</li> <li>prompt_decorators.decorators.generated.decorators.schema</li> <li>prompt_decorators.decorators.generated.decorators.socratic</li> <li>prompt_decorators.decorators.generated.decorators.steelman</li> <li>prompt_decorators.decorators.generated.decorators.step_by_step</li> <li>prompt_decorators.decorators.generated.decorators.stress_test</li> <li>prompt_decorators.decorators.generated.decorators.style_shift</li> <li>prompt_decorators.decorators.generated.decorators.summary</li> <li>prompt_decorators.decorators.generated.decorators.table_format</li> <li>prompt_decorators.decorators.generated.decorators.timeline</li> <li>prompt_decorators.decorators.generated.decorators.tone</li> <li>prompt_decorators.decorators.generated.decorators.tree_of_thought</li> <li>prompt_decorators.decorators.generated.decorators.uncertainty</li> <li>prompt_decorators.decorators.generated.decorators.version</li> <li>prompt_decorators.generator</li> <li>prompt_decorators.generator.code_gen</li> <li>prompt_decorators.generator.registry</li> <li>prompt_decorators.generator.test_gen</li> <li>prompt_decorators.utils</li> <li>prompt_decorators.utils.cache</li> <li>prompt_decorators.utils.compatibility</li> <li>prompt_decorators.utils.discovery</li> <li>prompt_decorators.utils.doc_gen</li> <li>prompt_decorators.utils.factory</li> <li>prompt_decorators.utils.json_loader</li> <li>prompt_decorators.utils.model_detection</li> <li>prompt_decorators.utils.plugins</li> <li>prompt_decorators.utils.telemetry</li> </ul>"},{"location":"api/#decorators","title":"Decorators","text":"<ul> <li>DecoratorName</li> <li>Audience</li> <li>Persona</li> <li>Motivational</li> <li>StyleShift</li> <li>Detailed</li> <li>Remix</li> <li>AsExpert</li> <li>Narrative</li> <li>Academic</li> <li>Creative</li> <li>Professional</li> <li>Concise</li> <li>ELI5</li> <li>Extremes</li> <li>Priority</li> <li>Conditional</li> <li>Compatibility</li> <li>Override</li> <li>Chain</li> <li>Context</li> <li>Custom</li> <li>Refine</li> <li>Extension</li> <li>BuildOn</li> <li>Version</li> <li>Reasoning</li> <li>Tone</li> <li>StepByStep</li> <li>OutputFormat</li> <li>BlindSpots</li> <li>TreeOfThought</li> <li>FirstPrinciples</li> <li>ForcedAnalogy</li> <li>Inductive</li> <li>RootCause</li> <li>Analogical</li> <li>Abductive</li> <li>Deductive</li> <li>Contrarian</li> <li>RedTeam</li> <li>NegativeSpace</li> <li>Socratic</li> <li>Debate</li> <li>FactCheck</li> <li>Limitations</li> <li>BreakAndBuild</li> <li>StressTest</li> <li>Uncertainty</li> <li>FindGaps</li> <li>CiteSources</li> <li>QualityMetrics</li> <li>Balanced</li> <li>PeerReview</li> <li>Confidence</li> <li>Steelman</li> <li>Precision</li> <li>Alternatives</li> <li>Summary</li> <li>Prioritize</li> <li>Nested</li> <li>TableFormat</li> <li>Layered</li> <li>Comparison</li> <li>Bullet</li> <li>Outline</li> <li>Timeline</li> <li>MECE</li> <li>DecisionMatrix</li> <li>Schema</li> <li>Constraints</li> </ul>"},{"location":"api/core/","title":"Core Module API","text":"<p>The <code>prompt_decorators.core</code> module provides the fundamental building blocks of the Prompt Decorators framework. This module contains the base classes, validation logic, and utility functions that power the decorator system.</p>"},{"location":"api/core/#base-components","title":"Base Components","text":""},{"location":"api/core/#basedecorator","title":"BaseDecorator","text":"<p>The <code>BaseDecorator</code> class is the foundation of all decorators in the system. It provides common functionality for applying transformations to prompts.</p> <pre><code>from prompt_decorators.core import BaseDecorator\n\nclass MyCustomDecorator(BaseDecorator):\n    def __init__(self, param1=None, param2=True):\n        self.param1 = param1\n        self.param2 = param2\n\n    def apply_to_prompt(self, prompt):\n        # Implement your custom transformation logic here\n        return f\"Custom transformation: {prompt}\"\n</code></pre>"},{"location":"api/core/#methods","title":"Methods","text":"<ul> <li><code>apply(prompt)</code>: Apply the decorator to a prompt string</li> <li><code>apply_to_prompt(prompt)</code>: Apply the specific transformation to the prompt</li> <li><code>to_dict()</code>: Convert the decorator to a dictionary representation</li> <li><code>from_dict(data)</code>: Create a decorator instance from a dictionary</li> <li><code>to_string()</code>: Convert the decorator to a string representation</li> <li><code>transform_response(response)</code>: Transform the model's response (if needed)</li> <li><code>get_metadata()</code>: Get metadata about the decorator</li> <li><code>is_compatible_with_version(version)</code>: Check version compatibility</li> </ul>"},{"location":"api/core/#parameter","title":"Parameter","text":"<p>The <code>Parameter</code> class defines parameters that can be used with decorators, including validation rules and type information.</p> <pre><code>from prompt_decorators.core import Parameter, ParameterType\n\n# Define a parameter\nmy_param = Parameter(\n    name=\"example_param\",\n    parameter_type=ParameterType.STRING,\n    required=False,\n    default=\"default value\",\n    description=\"An example parameter\"\n)\n</code></pre>"},{"location":"api/core/#parametertype","title":"ParameterType","text":"<p>An enumeration of supported parameter types:</p> <ul> <li><code>STRING</code>: String values</li> <li><code>NUMBER</code>: Numeric values</li> <li><code>BOOLEAN</code>: Boolean values</li> <li><code>ARRAY</code>: List/array values</li> <li><code>OBJECT</code>: Dictionary/object values</li> </ul>"},{"location":"api/core/#validation","title":"Validation","text":"<p>The validation module provides utilities for validating decorators and their parameters.</p> <pre><code>from prompt_decorators.core.validation import validate_decorator\n\n# Validate a decorator instance or dictionary\nvalidation_result = validate_decorator(my_decorator)\nif validation_result.is_valid:\n    # Decorator is valid\n    pass\nelse:\n    # Handle validation errors\n    print(validation_result.errors)\n</code></pre>"},{"location":"api/core/#validationerror","title":"ValidationError","text":"<p>Exception raised when validation fails.</p> <pre><code>from prompt_decorators.core import ValidationError\n\ntry:\n    # Some operation that might fail validation\n    pass\nexcept ValidationError as e:\n    print(f\"Validation failed: {e}\")\n</code></pre>"},{"location":"api/core/#model-specific","title":"Model-Specific Functionality","text":"<p>The <code>model_specific</code> module provides utilities for adapting decorators to different language models.</p> <pre><code>from prompt_decorators.core.model_specific import is_compatible_with_model\n\n# Check if a decorator is compatible with a specific model\nif is_compatible_with_model(my_decorator, \"gpt-4\"):\n    # Decorator is compatible with GPT-4\n    pass\nelse:\n    # Decorator is not compatible\n    pass\n</code></pre>"},{"location":"api/core/#model-adaptation","title":"Model Adaptation","text":"<p>The framework provides model-specific adaptations to ensure decorators work consistently across different LLM providers:</p> <pre><code>from prompt_decorators.core.model_specific import adapt_for_model\n\n# Adapt a decorator for a specific model\nadapted_decorator = adapt_for_model(my_decorator, \"claude-2\")\n</code></pre>"},{"location":"api/core/#request-handling","title":"Request Handling","text":"<p>The <code>request</code> module provides utilities for managing decorated requests.</p>"},{"location":"api/core/#decoratedrequest","title":"DecoratedRequest","text":"<p>The <code>DecoratedRequest</code> class represents a request that includes one or more decorators.</p> <pre><code>from prompt_decorators.core.request import DecoratedRequest\nfrom prompt_decorators.decorators import Reasoning, OutputFormat\n\n# Create a decorated request\nrequest = DecoratedRequest(\n    prompt=\"Explain quantum entanglement\",\n    decorators=[\n        Reasoning(style=\"detailed\"),\n        OutputFormat(format_type=\"markdown\")\n    ],\n    model=\"gpt-4\",\n    api_params={\n        \"temperature\": 0.7,\n        \"max_tokens\": 1000\n    }\n)\n\n# Apply all decorators\ndecorated_prompt = request.apply_decorators()\n\n# Use with your preferred API\n</code></pre>"},{"location":"api/core/#registry","title":"Registry","text":"<p>The <code>registry</code> module provides functionality for registering and retrieving decorators.</p> <pre><code>from prompt_decorators.core.registry import DecoratorRegistry\n\n# Get the global registry\nregistry = DecoratorRegistry()\n\n# Register a decorator\nregistry.register(\"MyCustomDecorator\", MyCustomDecorator)\n\n# Get a decorator by name\ndecorator_class = registry.get(\"MyCustomDecorator\")\n</code></pre>"},{"location":"api/core/#exceptions","title":"Exceptions","text":"<p>The <code>exceptions</code> module defines custom exceptions used throughout the framework.</p> <pre><code>from prompt_decorators.core.exceptions import (\n    DecoratorError,\n    IncompatibleVersionError,\n    RegistryError\n)\n\ntry:\n    # Some operation that might raise an exception\n    pass\nexcept DecoratorError as e:\n    print(f\"Decorator error: {e}\")\nexcept IncompatibleVersionError as e:\n    print(f\"Version incompatibility: {e}\")\nexcept RegistryError as e:\n    print(f\"Registry error: {e}\")\n</code></pre>"},{"location":"api/decorators/","title":"Decorators API","text":"<p>The Prompt Decorators framework provides a rich collection of built-in decorators that can be used to enhance prompt engineering for Large Language Models (LLMs). This page provides an overview of all available decorators and how to use them.</p>"},{"location":"api/decorators/#about-decorators","title":"About Decorators","text":"<p>Decorators are reusable components that apply specific transformations to prompts. They can enhance prompts by adding structure, guiding the model's reasoning, or specifying output formats. Decorators can be combined to create complex prompt engineering patterns.</p>"},{"location":"api/decorators/#using-decorators","title":"Using Decorators","text":"<p>Basic usage of decorators involves importing the desired decorator from the <code>prompt_decorators.decorators</code> module, instantiating it with appropriate parameters, and applying it to a prompt:</p> <pre><code>from prompt_decorators.decorators import Reasoning, OutputFormat\n\n# Create decorators\nreasoning = Reasoning(style=\"detailed\", show_working=True)\noutput_format = OutputFormat(format_type=\"markdown\", pretty_print=True)\n\n# Apply decorators to a prompt\nprompt = \"Explain quantum entanglement.\"\ndecorated_prompt = output_format.apply(reasoning.apply(prompt))\n</code></pre> <p>You can also use the DecoratedRequest class for more convenient handling:</p> <pre><code>from prompt_decorators.core.request import DecoratedRequest\nfrom prompt_decorators.decorators import Reasoning, OutputFormat\n\n# Create a decorated request\nrequest = DecoratedRequest(\n    prompt=\"Explain quantum mechanics.\",\n    decorators=[\n        Reasoning(style=\"detailed\", show_working=True),\n        OutputFormat(format_type=\"markdown\", pretty_print=True)\n    ],\n    model=\"gpt-4\",\n    api_params={\n        \"temperature\": 0.7,\n        \"max_tokens\": 1000\n    }\n)\n\n# Apply all decorators\ndecorated_prompt = request.apply_decorators()\n</code></pre>"},{"location":"api/decorators/#available-decorators","title":"Available Decorators","text":"<p>The framework provides numerous decorators organized into different categories:</p>"},{"location":"api/decorators/#reasoning-decorators","title":"Reasoning Decorators","text":"<p>These decorators focus on improving the reasoning process of the LLM:</p> <ul> <li>Reasoning: Structures the model's reasoning process</li> <li>Abductive: Applies abductive reasoning (inference to best explanation)</li> <li>Deductive: Applies deductive reasoning (from general to specific)</li> <li>Inductive: Applies inductive reasoning (patterns to general principles)</li> <li>FirstPrinciples: Applies first principles reasoning</li> <li>StepByStep: Break down problem solving into sequential steps</li> <li>TreeOfThought: Explores multiple reasoning paths</li> </ul>"},{"location":"api/decorators/#output-format-decorators","title":"Output Format Decorators","text":"<p>These decorators control how information is presented:</p> <ul> <li>OutputFormat: Specifies output format (markdown, JSON, etc.)</li> <li>TableFormat: Presents information in tabular format</li> <li>Bullet: Organizes output as bullet points</li> <li>Schema: Enforces a specific data schema</li> </ul>"},{"location":"api/decorators/#analysis-decorators","title":"Analysis Decorators","text":"<p>These decorators focus on detailed analysis:</p> <ul> <li>Detailed: Enhances analysis with more details</li> <li>Concise: Provides focused, brief responses</li> <li>Balanced: Presents balanced viewpoints</li> <li>RootCause: Performs root cause analysis</li> <li>Comparison: Compares multiple items or concepts</li> <li>Extremes: Explores extreme cases or boundaries</li> <li>FindGaps: Identifies gaps in analysis or reasoning</li> <li>Limitations: Explicitly states limitations</li> <li>NegativeSpace: Considers unexplored or implicit aspects</li> <li>Summary: Provides a concise summary</li> </ul>"},{"location":"api/decorators/#perspective-decorators","title":"Perspective Decorators","text":"<p>These decorators inject specific viewpoints:</p> <ul> <li>Contrarian: Presents opposing viewpoints</li> <li>Steelman: Presents the strongest form of opposing arguments</li> <li>Debate: Structures response as a debate</li> <li>PeerReview: Evaluates as if conducting peer review</li> <li>RedTeam: Critical analysis seeking vulnerabilities</li> <li>AsExpert: Responds from expertise in a specific domain</li> <li>Audience: Tailors content for specific audiences</li> <li>Persona: Adopts a specific persona or character</li> <li>ELI5: Explains Like I'm 5 (simplifies complex topics)</li> </ul>"},{"location":"api/decorators/#creativity-style-decorators","title":"Creativity &amp; Style Decorators","text":"<p>These decorators modify tone and creativity:</p> <ul> <li>Creative: Enhances creative elements</li> <li>ForcedAnalogy: Uses analogies to explain concepts</li> <li>Analogical: Applies analogical reasoning</li> <li>Narrative: Structures content as a narrative</li> <li>Tone: Adjusts the tone of the response</li> <li>StyleShift: Changes writing or explanation style</li> <li>Professional: Ensures a professional tone</li> <li>Academic: Uses academic writing style</li> <li>Motivational: Adds motivational elements</li> </ul>"},{"location":"api/decorators/#critical-thinking-decorators","title":"Critical Thinking Decorators","text":"<p>These decorators enhance critical evaluation:</p> <ul> <li>FactCheck: Verifies factual accuracy</li> <li>BlindSpots: Identifies potential blind spots</li> <li>StressTest: Tests ideas under challenging conditions</li> <li>Confidence: States confidence levels in assertions</li> <li>Uncertainty: Explicitly deals with uncertainty</li> <li>QualityMetrics: Evaluates using quality metrics</li> <li>Socratic: Uses Socratic questioning</li> </ul>"},{"location":"api/decorators/#organization-decorators","title":"Organization Decorators","text":"<p>These decorators add structure and organization:</p> <ul> <li>Prioritize: Prioritizes information by importance</li> <li>Priority: Similar to Prioritize with different parameters</li> <li>Outline: Structures content as an outline</li> <li>MECE: Ensures Mutually Exclusive, Collectively Exhaustive categories</li> <li>Timeline: Organizes information chronologically</li> <li>Layered: Presents information in layers of detail</li> </ul>"},{"location":"api/decorators/#meta-decorators","title":"Meta Decorators","text":"<p>These decorators focus on the decorator system itself:</p> <ul> <li>Custom: Creates custom decorator behaviors</li> <li>Chain: Chains multiple decorators together</li> <li>Conditional: Applies decorators conditionally</li> <li>Extension: Extends decorator functionality</li> <li>Nested: Nests decorators within each other</li> <li>Override: Overrides default decorator behavior</li> <li>Context: Provides additional context</li> <li>Constraints: Adds constraints to model responses</li> <li>BuildOn: Builds on previous interactions</li> <li>Version: Specifies version compatibility</li> <li>CiteSources: Requires citation of sources</li> </ul>"},{"location":"api/decorators/#creating-custom-decorators","title":"Creating Custom Decorators","text":"<p>You can create custom decorators by extending the BaseDecorator class:</p> <pre><code>from prompt_decorators.core import BaseDecorator\n\nclass MyCustomDecorator(BaseDecorator):\n    def __init__(self, param1=None, param2=True):\n        self.param1 = param1\n        self.param2 = param2\n\n    def apply_to_prompt(self, prompt):\n        # Implement your custom transformation logic\n        modified_prompt = f\"My custom transformation ({self.param1}): {prompt}\"\n        if self.param2:\n            modified_prompt += \"\\nAdditional instructions based on param2.\"\n        return modified_prompt\n</code></pre> <p>For more details on creating custom decorators, see the Creating Custom Decorators tutorial.</p>"},{"location":"api/decorators/#decorator-registry","title":"Decorator Registry","text":"<p>The decorator registry provides a centralized way to register and access decorators:</p> <pre><code>from prompt_decorators.core.registry import DecoratorRegistry\n\n# Get the global registry\nregistry = DecoratorRegistry()\n\n# Register a custom decorator\nregistry.register(\"MyCustomDecorator\", MyCustomDecorator)\n\n# Get a decorator by name\ndecorator_class = registry.get(\"MyCustomDecorator\")\ninstance = decorator_class(param1=\"value\", param2=True)\n</code></pre> <p>For more information on the decorator registry, see the Decorator Registry documentation.</p>"},{"location":"api/decorators/Abductive/","title":"Decorator <code>Abductive</code>","text":"<p>Version: 1.0.0</p> <p>Structures the response using abductive reasoning, developing the most likely explanations for observations or phenomena. This decorator emphasizes inference to the best explanation and hypothetical reasoning to address incomplete information.</p>"},{"location":"api/decorators/Abductive/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Abductive/#hypotheses","title":"<code>hypotheses</code>","text":"<p>Type: number Required: No Default: <code>3</code></p> <p>Number of alternative hypotheses or explanations to generate</p>"},{"location":"api/decorators/Abductive/#criteria","title":"<code>criteria</code>","text":"<p>Type: array Required: No</p> <p>Specific criteria to evaluate hypotheses against (e.g., simplicity, explanatory power)</p>"},{"location":"api/decorators/Abductive/#rank","title":"<code>rank</code>","text":"<p>Type: boolean Required: No Default: <code>True</code></p> <p>Whether to explicitly rank hypotheses by likelihood</p>"},{"location":"api/decorators/Abductive/#examples","title":"Examples","text":""},{"location":"api/decorators/Abductive/#basic-abductive-reasoning-with-multiple-hypotheses","title":"Basic abductive reasoning with multiple hypotheses","text":"<pre><code>+++Abductive\nWhy have bee populations been declining globally?\n</code></pre> <p>Result:</p> <p>Presents observed facts about bee population decline, generates three possible explanations, and identifies the most likely causes based on available evidence</p>"},{"location":"api/decorators/Abductive/#detailed-abductive-reasoning-with-specific-evaluation-criteria","title":"Detailed abductive reasoning with specific evaluation criteria","text":"<pre><code>+++Abductive(hypotheses=4, criteria=[comprehensiveness,simplicity,novelty,testability], rank=true)\nWhat might explain the Fermi Paradox?\n</code></pre> <p>Result:</p> <p>Develops four hypotheses explaining the Fermi Paradox, evaluates each against the specified criteria, and ranks them from most to least likely explanation</p>"},{"location":"api/decorators/Abductive/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/Abductive/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Abductive/#methods","title":"Methods","text":""},{"location":"api/decorators/Abductive/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(hypotheses=3, criteria, rank=True) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Abductive decorator.</p> <p>Args:     hypotheses: Number of alternative hypotheses or explanations to generate     criteria: Specific criteria to evaluate hypotheses against (e.g., simplicity, explanatory power)     rank: Whether to explicitly rank hypotheses by likelihood</p> <p>Returns:     None</p>"},{"location":"api/decorators/Abductive/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Abductive/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Abductive/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Abductive/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Abductive/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Abductive/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Abductive/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Abductive/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Academic/","title":"Decorator <code>Academic</code>","text":"<p>Version: 1.0.0</p> <p>Adapts the response to follow scholarly writing conventions appropriate for academic publications. This decorator generates responses with formal language, structured argumentation, and proper citations following established academic citation styles.</p>"},{"location":"api/decorators/Academic/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Academic/#style","title":"<code>style</code>","text":"<p>Type: enum Required: No Default: <code>scientific</code></p> <p>The academic discipline style to follow</p> <p>Allowed values:</p> <ul> <li><code>humanities</code></li> <li><code>scientific</code></li> <li><code>legal</code></li> </ul>"},{"location":"api/decorators/Academic/#format","title":"<code>format</code>","text":"<p>Type: enum Required: No Default: <code>APA</code></p> <p>The citation format to use for references</p> <p>Allowed values:</p> <ul> <li><code>APA</code></li> <li><code>MLA</code></li> <li><code>Chicago</code></li> <li><code>Harvard</code></li> <li><code>IEEE</code></li> </ul>"},{"location":"api/decorators/Academic/#examples","title":"Examples","text":""},{"location":"api/decorators/Academic/#scientific-academic-response-with-apa-citations","title":"Scientific academic response with APA citations","text":"<pre><code>+++Academic\nDiscuss the evidence for climate change.\n</code></pre> <p>Result:</p> <p>Produces a scholarly analysis of climate change evidence using formal scientific language and proper APA citations</p>"},{"location":"api/decorators/Academic/#humanities-focused-academic-response-with-mla-citations","title":"Humanities-focused academic response with MLA citations","text":"<pre><code>+++Academic(style=humanities, format=MLA)\nAnalyze the themes in Shakespeare's Hamlet.\n</code></pre> <p>Result:</p> <p>Provides a literary analysis of Hamlet using humanities-appropriate terminology and MLA citation format</p>"},{"location":"api/decorators/Academic/#compatibility","title":"Compatibility","text":"<p>Conflicts with:</p> <ul> <li><code>ELI5</code></li> <li><code>Creative</code></li> <li><code>Motivational</code></li> </ul> <p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/Academic/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Academic/#methods","title":"Methods","text":""},{"location":"api/decorators/Academic/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(style=scientific, format=APA) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Academic decorator.</p> <p>Args:     style: The academic discipline style to follow     format: The citation format to use for references</p> <p>Returns:     None</p>"},{"location":"api/decorators/Academic/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Academic/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Academic/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Academic/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Academic/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Academic/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Academic/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Academic/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Alternatives/","title":"Decorator <code>Alternatives</code>","text":"<p>Version: 1.0.0</p> <p>Presents multiple distinct options, approaches, or solutions to a question or problem. This decorator encourages exploring different paths or perspectives rather than providing a single definitive answer.</p>"},{"location":"api/decorators/Alternatives/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Alternatives/#count","title":"<code>count</code>","text":"<p>Type: number Required: No Default: <code>3</code></p> <p>Number of alternative options or approaches to generate</p>"},{"location":"api/decorators/Alternatives/#diversity","title":"<code>diversity</code>","text":"<p>Type: enum Required: No Default: <code>medium</code></p> <p>How different or varied the alternatives should be from each other</p> <p>Allowed values:</p> <ul> <li><code>low</code></li> <li><code>medium</code></li> <li><code>high</code></li> </ul>"},{"location":"api/decorators/Alternatives/#comparison","title":"<code>comparison</code>","text":"<p>Type: boolean Required: No</p> <p>Whether to include a comparative analysis of the alternatives</p>"},{"location":"api/decorators/Alternatives/#examples","title":"Examples","text":""},{"location":"api/decorators/Alternatives/#basic-alternative-approaches-to-a-problem","title":"Basic alternative approaches to a problem","text":"<pre><code>+++Alternatives\nHow can I improve my public speaking skills?\n</code></pre> <p>Result:</p> <p>Provides three distinct approaches to improving public speaking skills, each with its own methodology and focus</p>"},{"location":"api/decorators/Alternatives/#highly-diverse-alternatives-with-comparative-analysis","title":"Highly diverse alternatives with comparative analysis","text":"<pre><code>+++Alternatives(count=5, diversity=high, comparison=true)\nWhat are some ways to reduce carbon emissions in urban areas?\n</code></pre> <p>Result:</p> <p>Presents five highly diverse approaches to reducing urban carbon emissions, followed by a comparative analysis of their effectiveness, cost, and implementation challenges</p>"},{"location":"api/decorators/Alternatives/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/Alternatives/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Alternatives/#methods","title":"Methods","text":""},{"location":"api/decorators/Alternatives/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(count=3, diversity=medium, comparison=False) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Alternatives decorator.</p> <p>Args:     count: Number of alternative options or approaches to generate     diversity: How different or varied the alternatives should be from each other     comparison: Whether to include a comparative analysis of the alternatives</p> <p>Returns:     None</p>"},{"location":"api/decorators/Alternatives/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Alternatives/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Alternatives/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Alternatives/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Alternatives/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Alternatives/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Alternatives/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Alternatives/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Analogical/","title":"Decorator <code>Analogical</code>","text":"<p>Version: 1.0.0</p> <p>Enhances explanations through the use of analogies and metaphors. This decorator helps make complex or abstract concepts more accessible by systematically comparing them to more familiar domains or experiences.</p>"},{"location":"api/decorators/Analogical/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Analogical/#domain","title":"<code>domain</code>","text":"<p>Type: string Required: No Default: <code>general</code></p> <p>Specific domain or context to draw analogies from (if not specified, will choose appropriate domains)</p>"},{"location":"api/decorators/Analogical/#count","title":"<code>count</code>","text":"<p>Type: number Required: No Default: <code>1</code></p> <p>Number of distinct analogies to provide</p>"},{"location":"api/decorators/Analogical/#depth","title":"<code>depth</code>","text":"<p>Type: enum Required: No Default: <code>moderate</code></p> <p>Level of detail in developing the analogy</p> <p>Allowed values:</p> <ul> <li><code>brief</code></li> <li><code>moderate</code></li> <li><code>extended</code></li> </ul>"},{"location":"api/decorators/Analogical/#examples","title":"Examples","text":""},{"location":"api/decorators/Analogical/#single-analogy-from-a-specific-domain","title":"Single analogy from a specific domain","text":"<pre><code>+++Analogical(domain=sports)\nExplain how the immune system works.\n</code></pre> <p>Result:</p> <p>Explains the immune system using extended sports analogies, comparing immune cells to players, pathogens to opponents, etc.</p>"},{"location":"api/decorators/Analogical/#multiple-brief-analogies-from-different-domains","title":"Multiple brief analogies from different domains","text":"<pre><code>+++Analogical(count=3, depth=brief)\nDescribe how blockchain technology functions.\n</code></pre> <p>Result:</p> <p>Provides three different brief analogies for blockchain from different domains (perhaps physical ledgers, chain of custody, and distributed networks)</p>"},{"location":"api/decorators/Analogical/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/Analogical/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Analogical/#methods","title":"Methods","text":""},{"location":"api/decorators/Analogical/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(domain=general, count=1, depth=moderate) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Analogical decorator.</p> <p>Args:     domain: Specific domain or context to draw analogies from (if not specified, will choose appropriate domains)     count: Number of distinct analogies to provide     depth: Level of detail in developing the analogy</p> <p>Returns:     None</p>"},{"location":"api/decorators/Analogical/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Analogical/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Analogical/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Analogical/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Analogical/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Analogical/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Analogical/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Analogical/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/AsExpert/","title":"Decorator <code>AsExpert</code>","text":"<p>Version: 1.0.0</p> <p>Generates responses from the perspective of a specified domain expert or specialist. This decorator provides authoritative content that reflects the knowledge, terminology, and analytical approach of an expert in the specified field.</p>"},{"location":"api/decorators/AsExpert/#parameters","title":"Parameters","text":""},{"location":"api/decorators/AsExpert/#domain","title":"<code>domain</code>","text":"<p>Type: string Required: Yes</p> <p>The specific field or discipline the expert specializes in</p>"},{"location":"api/decorators/AsExpert/#experience","title":"<code>experience</code>","text":"<p>Type: enum Required: No Default: <code>senior</code></p> <p>The experience level of the expert</p> <p>Allowed values:</p> <ul> <li><code>junior</code></li> <li><code>senior</code></li> <li><code>leading</code></li> <li><code>pioneering</code></li> </ul>"},{"location":"api/decorators/AsExpert/#technical","title":"<code>technical</code>","text":"<p>Type: boolean Required: No Default: <code>True</code></p> <p>Whether to use highly technical language and domain-specific terminology</p>"},{"location":"api/decorators/AsExpert/#examples","title":"Examples","text":""},{"location":"api/decorators/AsExpert/#basic-response-as-a-domain-expert","title":"Basic response as a domain expert","text":"<pre><code>+++AsExpert(domain=neuroscience)\nExplain how memories are formed in the brain.\n</code></pre> <p>Result:</p> <p>Provides an explanation of memory formation from the perspective of a senior neuroscientist, using appropriate terminology and references to relevant research</p>"},{"location":"api/decorators/AsExpert/#highly-technical-response-as-pioneering-expert","title":"Highly technical response as pioneering expert","text":"<pre><code>+++AsExpert(domain=cryptography, experience=pioneering, technical=true)\nAssess the security implications of quantum computing for current encryption standards.\n</code></pre> <p>Result:</p> <p>Delivers a technically sophisticated assessment of quantum computing's encryption impacts from the perspective of a pioneering cryptography expert, using advanced terminology and nuanced analysis</p>"},{"location":"api/decorators/AsExpert/#compatibility","title":"Compatibility","text":"<p>Conflicts with:</p> <ul> <li><code>ELI5</code></li> </ul> <p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/AsExpert/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/AsExpert/#methods","title":"Methods","text":""},{"location":"api/decorators/AsExpert/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(domain, experience=senior, technical=True) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the AsExpert decorator.</p> <p>Args:     domain: The specific field or discipline the expert specializes in     experience: The experience level of the expert     technical: Whether to use highly technical language and domain-specific terminology</p> <p>Returns:     None</p>"},{"location":"api/decorators/AsExpert/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/AsExpert/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/AsExpert/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/AsExpert/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/AsExpert/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/AsExpert/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/AsExpert/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/AsExpert/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Audience/","title":"Decorator <code>Audience</code>","text":"<p>Version: 1.0.0</p> <p>Adapts the response for a specific audience expertise level. This decorator ensures content is appropriately tailored to the knowledge, vocabulary, and needs of different audience types, from beginners to technical experts.</p>"},{"location":"api/decorators/Audience/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Audience/#level","title":"<code>level</code>","text":"<p>Type: enum Required: No Default: <code>intermediate</code></p> <p>The expertise level of the target audience</p> <p>Allowed values:</p> <ul> <li><code>beginner</code></li> <li><code>intermediate</code></li> <li><code>expert</code></li> <li><code>technical</code></li> </ul>"},{"location":"api/decorators/Audience/#domain","title":"<code>domain</code>","text":"<p>Type: string Required: No Default: <code>general</code></p> <p>Specific knowledge domain or field for domain-specific terminology adaptation</p>"},{"location":"api/decorators/Audience/#examples","title":"<code>examples</code>","text":"<p>Type: boolean Required: No Default: <code>True</code></p> <p>Whether to include additional examples for clarity</p>"},{"location":"api/decorators/Audience/#examples_1","title":"Examples","text":""},{"location":"api/decorators/Audience/#technical-explanation-for-experts-in-a-specific-field","title":"Technical explanation for experts in a specific field","text":"<pre><code>+++Audience(level=technical, domain=cybersecurity)\nExplain zero-knowledge proofs.\n</code></pre> <p>Result:</p> <p>Provides an in-depth technical explanation of zero-knowledge proofs using cybersecurity-specific terminology and concepts</p>"},{"location":"api/decorators/Audience/#beginner-friendly-explanation-with-examples","title":"Beginner-friendly explanation with examples","text":"<pre><code>+++Audience(level=beginner, examples=true)\nHow does machine learning work?\n</code></pre> <p>Result:</p> <p>Explains machine learning concepts in simple terms with multiple illustrative examples suitable for complete beginners</p>"},{"location":"api/decorators/Audience/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/Audience/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Audience/#methods","title":"Methods","text":""},{"location":"api/decorators/Audience/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(level=intermediate, domain=general, examples=True) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Audience decorator.</p> <p>Args:     level: The expertise level of the target audience     domain: Specific knowledge domain or field for domain-specific terminology adaptation     examples: Whether to include additional examples for clarity</p> <p>Returns:     None</p>"},{"location":"api/decorators/Audience/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Audience/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Audience/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Audience/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Audience/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Audience/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Audience/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Audience/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Balanced/","title":"Decorator <code>Balanced</code>","text":"<p>Version: 1.0.0</p> <p>Ensures equal representation of different perspectives or viewpoints on a topic. This decorator promotes fairness and comprehensiveness by giving proportional attention to multiple sides of an issue, avoiding bias toward any particular position.</p>"},{"location":"api/decorators/Balanced/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Balanced/#perspectives","title":"<code>perspectives</code>","text":"<p>Type: number Required: No Default: <code>2</code></p> <p>Number of different perspectives to include</p>"},{"location":"api/decorators/Balanced/#structure","title":"<code>structure</code>","text":"<p>Type: enum Required: No Default: <code>sequential</code></p> <p>How to structure the different perspectives</p> <p>Allowed values:</p> <ul> <li><code>alternating</code></li> <li><code>sequential</code></li> <li><code>comparative</code></li> </ul>"},{"location":"api/decorators/Balanced/#equal","title":"<code>equal</code>","text":"<p>Type: boolean Required: No Default: <code>True</code></p> <p>Whether to strictly enforce equal word count for each perspective</p>"},{"location":"api/decorators/Balanced/#examples","title":"Examples","text":""},{"location":"api/decorators/Balanced/#basic-balanced-view-of-a-controversial-topic","title":"Basic balanced view of a controversial topic","text":"<pre><code>+++Balanced\nDiscuss the pros and cons of nuclear energy.\n</code></pre> <p>Result:</p> <p>Presents the benefits and drawbacks of nuclear energy with equal attention and detail given to both perspectives</p>"},{"location":"api/decorators/Balanced/#balanced-presentation-of-multiple-perspectives-in-comparative-structure","title":"Balanced presentation of multiple perspectives in comparative structure","text":"<pre><code>+++Balanced(perspectives=4, structure=comparative, equal=true)\nWhat are the different views on artificial intelligence regulation?\n</code></pre> <p>Result:</p> <p>Provides a balanced side-by-side comparison of four different perspectives on AI regulation, with equal word count allocated to each viewpoint</p>"},{"location":"api/decorators/Balanced/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/Balanced/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Balanced/#methods","title":"Methods","text":""},{"location":"api/decorators/Balanced/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(perspectives=2, structure=sequential, equal=True) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Balanced decorator.</p> <p>Args:     perspectives: Number of different perspectives to include     structure: How to structure the different perspectives     equal: Whether to strictly enforce equal word count for each perspective</p> <p>Returns:     None</p>"},{"location":"api/decorators/Balanced/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Balanced/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Balanced/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Balanced/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Balanced/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Balanced/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Balanced/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Balanced/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/BlindSpots/","title":"Decorator <code>BlindSpots</code>","text":"<p>Version: 1.0.0</p> <p>Identifies potential cognitive blind spots, unstated assumptions, and overlooked perspectives in the response. This decorator helps mitigate bias by explicitly acknowledging the limitations of one's thinking and analysis.</p>"},{"location":"api/decorators/BlindSpots/#parameters","title":"Parameters","text":""},{"location":"api/decorators/BlindSpots/#categories","title":"<code>categories</code>","text":"<p>Type: array Required: No</p> <p>Specific categories of blind spots to check for (e.g., cultural, temporal, confirmation bias)</p>"},{"location":"api/decorators/BlindSpots/#depth","title":"<code>depth</code>","text":"<p>Type: enum Required: No Default: <code>thorough</code></p> <p>How thoroughly to analyze for blind spots</p> <p>Allowed values:</p> <ul> <li><code>basic</code></li> <li><code>thorough</code></li> <li><code>comprehensive</code></li> </ul>"},{"location":"api/decorators/BlindSpots/#position","title":"<code>position</code>","text":"<p>Type: enum Required: No Default: <code>after</code></p> <p>Where to place the blind spots analysis</p> <p>Allowed values:</p> <ul> <li><code>after</code></li> <li><code>before</code></li> <li><code>integrated</code></li> </ul>"},{"location":"api/decorators/BlindSpots/#examples","title":"Examples","text":""},{"location":"api/decorators/BlindSpots/#basic-blind-spots-analysis-after-a-response","title":"Basic blind spots analysis after a response","text":"<pre><code>+++BlindSpots\nWhat factors drive economic growth?\n</code></pre> <p>Result:</p> <p>Provides an analysis of economic growth factors, followed by identification of unstated assumptions and potential blind spots in the analysis</p>"},{"location":"api/decorators/BlindSpots/#comprehensive-blind-spots-analysis-integrated-throughout","title":"Comprehensive blind spots analysis integrated throughout","text":"<pre><code>+++BlindSpots(categories=[cultural,historical,methodological], depth=comprehensive, position=integrated)\nEvaluate the impact of social media on society.\n</code></pre> <p>Result:</p> <p>Delivers an evaluation of social media's societal impact with comprehensive blind spot analysis woven throughout, specifically addressing cultural, historical, and methodological blind spots</p>"},{"location":"api/decorators/BlindSpots/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/BlindSpots/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/BlindSpots/#methods","title":"Methods","text":""},{"location":"api/decorators/BlindSpots/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(categories, depth=thorough, position=after) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the BlindSpots decorator.</p> <p>Args:     categories: Specific categories of blind spots to check for (e.g., cultural, temporal, confirmation bias)     depth: How thoroughly to analyze for blind spots     position: Where to place the blind spots analysis</p> <p>Returns:     None</p>"},{"location":"api/decorators/BlindSpots/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/BlindSpots/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/BlindSpots/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/BlindSpots/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/BlindSpots/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/BlindSpots/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/BlindSpots/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/BlindSpots/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/BreakAndBuild/","title":"Decorator <code>BreakAndBuild</code>","text":"<p>Version: 1.0.0</p> <p>Structures responses in two distinct phases: first critically analyzing and 'breaking down' an idea by identifying flaws, assumptions, and weaknesses, then 'building it back up' with improvements, refinements, and solutions. This decorator enhances critical thinking while maintaining constructive output.</p>"},{"location":"api/decorators/BreakAndBuild/#parameters","title":"Parameters","text":""},{"location":"api/decorators/BreakAndBuild/#breakdown","title":"<code>breakdown</code>","text":"<p>Type: enum Required: No Default: <code>comprehensive</code></p> <p>Primary approach for the critical breakdown phase</p> <p>Allowed values:</p> <ul> <li><code>weaknesses</code></li> <li><code>assumptions</code></li> <li><code>risks</code></li> <li><code>comprehensive</code></li> </ul>"},{"location":"api/decorators/BreakAndBuild/#intensity","title":"<code>intensity</code>","text":"<p>Type: enum Required: No Default: <code>thorough</code></p> <p>How thorough and challenging the breakdown phase should be</p> <p>Allowed values:</p> <ul> <li><code>mild</code></li> <li><code>thorough</code></li> <li><code>intense</code></li> </ul>"},{"location":"api/decorators/BreakAndBuild/#buildratio","title":"<code>buildRatio</code>","text":"<p>Type: number Required: No Default: <code>1</code></p> <p>Approximate ratio of build-up content to breakdown content (e.g., 2 means twice as much reconstruction as critique)</p>"},{"location":"api/decorators/BreakAndBuild/#examples","title":"Examples","text":""},{"location":"api/decorators/BreakAndBuild/#basic-break-and-build-analysis-of-a-business-concept","title":"Basic break and build analysis of a business concept","text":"<pre><code>+++BreakAndBuild\nEvaluate this startup idea: a subscription service for plant care.\n</code></pre> <p>Result:</p> <p>First thoroughly critiques the plant care subscription concept by identifying weaknesses and risks, then reconstructs it with improvements and solutions of equal depth</p>"},{"location":"api/decorators/BreakAndBuild/#intense-breakdown-of-assumptions-with-substantial-rebuilding","title":"Intense breakdown of assumptions with substantial rebuilding","text":"<pre><code>+++BreakAndBuild(breakdown=assumptions, intensity=intense, buildRatio=2)\nAnalyze this public policy proposal for reducing urban congestion.\n</code></pre> <p>Result:</p> <p>Delivers an intense critique focused specifically on the assumptions underlying the urban congestion proposal, followed by twice as much content reconstructing it with stronger foundations and improvements</p>"},{"location":"api/decorators/BreakAndBuild/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/BreakAndBuild/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/BreakAndBuild/#methods","title":"Methods","text":""},{"location":"api/decorators/BreakAndBuild/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(breakdown=comprehensive, intensity=thorough, buildRatio=1) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the BreakAndBuild decorator.</p> <p>Args:     breakdown: Primary approach for the critical breakdown phase     intensity: How thorough and challenging the breakdown phase should be     buildRatio: Approximate ratio of build-up content to breakdown content (e.g., 2 means twice as much reconstruction as critique)</p> <p>Returns:     None</p>"},{"location":"api/decorators/BreakAndBuild/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/BreakAndBuild/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/BreakAndBuild/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/BreakAndBuild/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/BreakAndBuild/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/BreakAndBuild/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/BreakAndBuild/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/BreakAndBuild/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/BuildOn/","title":"Decorator <code>BuildOn</code>","text":"<p>Version: 1.0.0</p> <p>A meta-decorator that builds upon previous context or responses rather than starting from scratch. This enables continuity across interactions, allowing refinement, extension, or alteration of previous outputs in a coherent manner.</p>"},{"location":"api/decorators/BuildOn/#parameters","title":"Parameters","text":""},{"location":"api/decorators/BuildOn/#reference","title":"<code>reference</code>","text":"<p>Type: enum Required: No Default: <code>last</code></p> <p>What to build upon from the previous context</p> <p>Allowed values:</p> <ul> <li><code>last</code></li> <li><code>specific</code></li> <li><code>all</code></li> </ul>"},{"location":"api/decorators/BuildOn/#approach","title":"<code>approach</code>","text":"<p>Type: enum Required: No Default: <code>extend</code></p> <p>How to build upon the referenced content</p> <p>Allowed values:</p> <ul> <li><code>extend</code></li> <li><code>refine</code></li> <li><code>contrast</code></li> <li><code>synthesize</code></li> </ul>"},{"location":"api/decorators/BuildOn/#preservestructure","title":"<code>preserveStructure</code>","text":"<p>Type: boolean Required: No Default: <code>True</code></p> <p>Whether to maintain the structure of the referenced content</p>"},{"location":"api/decorators/BuildOn/#examples","title":"Examples","text":""},{"location":"api/decorators/BuildOn/#basic-extension-of-the-previous-response","title":"Basic extension of the previous response","text":"<pre><code>+++BuildOn\nAdd more detail about implementation challenges.\n</code></pre> <p>Result:</p> <p>Extends the previous response by adding more detailed information about implementation challenges while maintaining continuity</p>"},{"location":"api/decorators/BuildOn/#specific-refinement-with-structural-changes","title":"Specific refinement with structural changes","text":"<pre><code>+++BuildOn(reference=specific, approach=refine, preserveStructure=false)\nImprove the section on risk analysis with more quantitative measures.\n</code></pre> <p>Result:</p> <p>Refines specifically the risk analysis section from the previous content with more quantitative measures, potentially restructuring it</p>"},{"location":"api/decorators/BuildOn/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/BuildOn/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/BuildOn/#methods","title":"Methods","text":""},{"location":"api/decorators/BuildOn/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(reference=last, approach=extend, preserveStructure=True) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the BuildOn decorator.</p> <p>Args:     reference: What to build upon from the previous context     approach: How to build upon the referenced content     preserveStructure: Whether to maintain the structure of the referenced content</p> <p>Returns:     None</p>"},{"location":"api/decorators/BuildOn/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/BuildOn/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/BuildOn/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/BuildOn/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/BuildOn/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/BuildOn/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/BuildOn/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/BuildOn/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Bullet/","title":"Decorator <code>Bullet</code>","text":"<p>Version: 1.0.0</p> <p>Formats the response as a bulleted list, making information easier to scan and digest. This decorator is ideal for presenting sequential steps, key points, or collections of related items in a clean, concise format.</p>"},{"location":"api/decorators/Bullet/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Bullet/#style","title":"<code>style</code>","text":"<p>Type: enum Required: No Default: <code>dash</code></p> <p>The visual marker used for bullet points</p> <p>Allowed values:</p> <ul> <li><code>dash</code></li> <li><code>dot</code></li> <li><code>arrow</code></li> <li><code>star</code></li> <li><code>plus</code></li> </ul>"},{"location":"api/decorators/Bullet/#indented","title":"<code>indented</code>","text":"<p>Type: boolean Required: No Default: <code>True</code></p> <p>Whether to allow nested, indented bullet points</p>"},{"location":"api/decorators/Bullet/#compact","title":"<code>compact</code>","text":"<p>Type: boolean Required: No</p> <p>Whether to keep bullet points short and concise (true) or allow longer, more detailed points (false)</p>"},{"location":"api/decorators/Bullet/#examples","title":"Examples","text":""},{"location":"api/decorators/Bullet/#basic-bulleted-list-of-key-points","title":"Basic bulleted list of key points","text":"<pre><code>+++Bullet\nWhat are the main factors to consider when buying a laptop?\n</code></pre> <p>Result:</p> <p>Presents key laptop purchasing factors as a bulleted list with dash markers</p>"},{"location":"api/decorators/Bullet/#compact-star-bullets-with-nesting-disabled","title":"Compact star bullets with nesting disabled","text":"<pre><code>+++Bullet(style=star, indented=false, compact=true)\nList the benefits of regular exercise.\n</code></pre> <p>Result:</p> <p>Provides a flat list of concise, star-bulleted points about exercise benefits, with no nested sub-points</p>"},{"location":"api/decorators/Bullet/#compatibility","title":"Compatibility","text":"<p>Conflicts with:</p> <ul> <li><code>OutputFormat</code></li> </ul> <p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/Bullet/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Bullet/#methods","title":"Methods","text":""},{"location":"api/decorators/Bullet/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(style=dash, indented=True, compact=False) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Bullet decorator.</p> <p>Args:     style: The visual marker used for bullet points     indented: Whether to allow nested, indented bullet points     compact: Whether to keep bullet points short and concise (true) or allow longer, more detailed points (false)</p> <p>Returns:     None</p>"},{"location":"api/decorators/Bullet/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Bullet/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Bullet/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Bullet/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Bullet/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Bullet/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Bullet/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Bullet/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Chain/","title":"Decorator <code>Chain</code>","text":"<p>Version: 1.0.0</p> <p>A meta-decorator that applies multiple decorators in sequence, with each decorator processing the output of the previous one. This enables complex transformations by combining multiple simpler decorators in a pipeline.</p>"},{"location":"api/decorators/Chain/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Chain/#decorators","title":"<code>decorators</code>","text":"<p>Type: array Required: Yes</p> <p>Ordered list of decorators to apply in sequence</p>"},{"location":"api/decorators/Chain/#showsteps","title":"<code>showSteps</code>","text":"<p>Type: boolean Required: No</p> <p>Whether to show intermediate outputs after each decorator in the chain</p>"},{"location":"api/decorators/Chain/#stoponfailure","title":"<code>stopOnFailure</code>","text":"<p>Type: boolean Required: No Default: <code>True</code></p> <p>Whether to stop the chain if a decorator fails to apply correctly</p>"},{"location":"api/decorators/Chain/#examples","title":"Examples","text":""},{"location":"api/decorators/Chain/#basic-sequential-application-of-decorators","title":"Basic sequential application of decorators","text":"<pre><code>+++Chain(decorators=[StepByStep,Concise])\nExplain how neural networks learn.\n</code></pre> <p>Result:</p> <p>First generates a step-by-step explanation of neural network learning, then applies conciseness to that output</p>"},{"location":"api/decorators/Chain/#complex-decorator-chain-with-visible-intermediate-steps","title":"Complex decorator chain with visible intermediate steps","text":"<pre><code>+++Chain(decorators=[Socratic,Academic,TreeOfThought], showSteps=true, stopOnFailure=false)\nDiscuss the ethics of autonomous weapons.\n</code></pre> <p>Result:</p> <p>Shows the progression of applying Socratic questioning, then academic tone, then tree-of-thought reasoning to discuss autonomous weapons ethics</p>"},{"location":"api/decorators/Chain/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/Chain/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Chain/#methods","title":"Methods","text":""},{"location":"api/decorators/Chain/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(decorators, showSteps=False, stopOnFailure=True) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Chain decorator.</p> <p>Args:     decorators: Ordered list of decorators to apply in sequence     showSteps: Whether to show intermediate outputs after each decorator in the chain     stopOnFailure: Whether to stop the chain if a decorator fails to apply correctly</p> <p>Returns:     None</p>"},{"location":"api/decorators/Chain/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Chain/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Chain/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Chain/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Chain/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Chain/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Chain/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Chain/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/CiteSources/","title":"Decorator <code>CiteSources</code>","text":"<p>Version: 1.0.0</p> <p>Structures the response to include citations for claims and information. This decorator enhances credibility by providing references to source material, enabling fact verification and further exploration of topics.</p>"},{"location":"api/decorators/CiteSources/#parameters","title":"Parameters","text":""},{"location":"api/decorators/CiteSources/#style","title":"<code>style</code>","text":"<p>Type: enum Required: No Default: <code>inline</code></p> <p>The placement and format of citations within the response</p> <p>Allowed values:</p> <ul> <li><code>inline</code></li> <li><code>footnote</code></li> <li><code>endnote</code></li> </ul>"},{"location":"api/decorators/CiteSources/#format","title":"<code>format</code>","text":"<p>Type: enum Required: No Default: <code>APA</code></p> <p>The citation format to use</p> <p>Allowed values:</p> <ul> <li><code>APA</code></li> <li><code>MLA</code></li> <li><code>Chicago</code></li> <li><code>Harvard</code></li> <li><code>IEEE</code></li> </ul>"},{"location":"api/decorators/CiteSources/#comprehensive","title":"<code>comprehensive</code>","text":"<p>Type: boolean Required: No</p> <p>Whether to cite every claim (true) or only major claims (false)</p>"},{"location":"api/decorators/CiteSources/#examples","title":"Examples","text":""},{"location":"api/decorators/CiteSources/#basic-inline-citations-for-a-scientific-topic","title":"Basic inline citations for a scientific topic","text":"<pre><code>+++CiteSources\nExplain the evidence for climate change.\n</code></pre> <p>Result:</p> <p>Explains climate change with inline citations to scientific sources in APA format</p>"},{"location":"api/decorators/CiteSources/#comprehensive-footnote-citations-in-chicago-style","title":"Comprehensive footnote citations in Chicago style","text":"<pre><code>+++CiteSources(style=footnote, format=Chicago, comprehensive=true)\nDescribe the major events of World War II.\n</code></pre> <p>Result:</p> <p>Delivers a detailed account of WWII with comprehensive footnote citations in Chicago style for all factual claims</p>"},{"location":"api/decorators/CiteSources/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/CiteSources/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/CiteSources/#methods","title":"Methods","text":""},{"location":"api/decorators/CiteSources/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(style=inline, format=APA, comprehensive=False) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the CiteSources decorator.</p> <p>Args:     style: The placement and format of citations within the response     format: The citation format to use     comprehensive: Whether to cite every claim (true) or only major claims (false)</p> <p>Returns:     None</p>"},{"location":"api/decorators/CiteSources/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/CiteSources/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/CiteSources/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/CiteSources/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/CiteSources/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/CiteSources/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/CiteSources/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/CiteSources/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Comparison/","title":"Decorator <code>Comparison</code>","text":"<p>Version: 1.0.0</p> <p>Structures the response as a direct comparison between multiple items, concepts, or approaches. This decorator is ideal for highlighting similarities and differences across specific dimensions or criteria.</p>"},{"location":"api/decorators/Comparison/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Comparison/#aspects","title":"<code>aspects</code>","text":"<p>Type: array Required: No</p> <p>Specific aspects or dimensions to compare</p>"},{"location":"api/decorators/Comparison/#format","title":"<code>format</code>","text":"<p>Type: enum Required: No Default: <code>table</code></p> <p>The presentation format for the comparison</p> <p>Allowed values:</p> <ul> <li><code>table</code></li> <li><code>prose</code></li> <li><code>bullets</code></li> </ul>"},{"location":"api/decorators/Comparison/#highlight","title":"<code>highlight</code>","text":"<p>Type: boolean Required: No Default: <code>True</code></p> <p>Whether to explicitly emphasize key differences</p>"},{"location":"api/decorators/Comparison/#examples","title":"Examples","text":""},{"location":"api/decorators/Comparison/#basic-tabular-comparison-of-specific-aspects","title":"Basic tabular comparison of specific aspects","text":"<pre><code>+++Comparison(aspects=[performance,cost,ease of use,ecosystem])\nCompare React, Angular, and Vue for front-end development.\n</code></pre> <p>Result:</p> <p>Creates a table comparing React, Angular, and Vue across the specified aspects, with key differences highlighted</p>"},{"location":"api/decorators/Comparison/#prose-based-comparison-without-specific-aspects","title":"Prose-based comparison without specific aspects","text":"<pre><code>+++Comparison(format=prose, highlight=false)\nCompare democracy and authoritarianism as political systems.\n</code></pre> <p>Result:</p> <p>Delivers a flowing prose comparison between democracy and authoritarianism, covering key differences and similarities in paragraph form</p>"},{"location":"api/decorators/Comparison/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/Comparison/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Comparison/#methods","title":"Methods","text":""},{"location":"api/decorators/Comparison/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(aspects, format=table, highlight=True) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Comparison decorator.</p> <p>Args:     aspects: Specific aspects or dimensions to compare     format: The presentation format for the comparison     highlight: Whether to explicitly emphasize key differences</p> <p>Returns:     None</p>"},{"location":"api/decorators/Comparison/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Comparison/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Comparison/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Comparison/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Comparison/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Comparison/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Comparison/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Comparison/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Compatibility/","title":"Decorator <code>Compatibility</code>","text":"<p>Version: 1.0.0</p> <p>A meta-decorator that specifies model-specific adaptations or fall-back behaviors. This enables graceful degradation of decorator functionalities across different LLM capabilities and ensures optimal performance across model variants.</p>"},{"location":"api/decorators/Compatibility/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Compatibility/#models","title":"<code>models</code>","text":"<p>Type: array Required: Yes</p> <p>List of specific models to adapt for (e.g., gpt-3.5-turbo, gpt-4, etc.)</p>"},{"location":"api/decorators/Compatibility/#fallback","title":"<code>fallback</code>","text":"<p>Type: string Required: No</p> <p>Decorator to apply if the current model doesn't match any in the models list</p>"},{"location":"api/decorators/Compatibility/#behaviors","title":"<code>behaviors</code>","text":"<p>Type: string Required: No</p> <p>JSON string mapping model names to specific adaptations (e.g., '{\"gpt-3.5-turbo\": \"simplify complex reasoning\", \"gpt-4\": \"maximize detailed analysis\"}')</p>"},{"location":"api/decorators/Compatibility/#examples","title":"Examples","text":""},{"location":"api/decorators/Compatibility/#basic-model-specific-adaptation","title":"Basic model-specific adaptation","text":"<pre><code>+++Compatibility(models=[gpt-4], fallback=StepByStep)\n+++TreeOfThought(branches=3, depth=3)\nSolve this complex optimization problem.\n</code></pre> <p>Result:</p> <p>If using GPT-4, applies the TreeOfThought decorator with full functionality; if using any other model, falls back to the simpler StepByStep decorator</p>"},{"location":"api/decorators/Compatibility/#detailed-model-specific-behavior-adaptations","title":"Detailed model-specific behavior adaptations","text":"<pre><code>+++Compatibility(models=[gpt-4,gpt-3.5-turbo], behaviors={\"gpt-4\":\"use full mathematical notation and derivations\", \"gpt-3.5-turbo\":\"use simplified equations and more intuitive explanations\"})\n+++Academic(style=scientific)\nExplain quantum field theory.\n</code></pre> <p>Result:</p> <p>Applies the Academic decorator but adapts how quantum field theory is explained based on the specific model capabilities, with full mathematical rigor for GPT-4 or simplified explanations for GPT-3.5-turbo</p>"},{"location":"api/decorators/Compatibility/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/Compatibility/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Compatibility/#methods","title":"Methods","text":""},{"location":"api/decorators/Compatibility/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(models, fallback, behaviors) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Compatibility decorator.</p> <p>Args:     models: List of specific models to adapt for (e.g., gpt-3.5-turbo, gpt-4, etc.)     fallback: Decorator to apply if the current model doesn't match any in the models list     behaviors: JSON string mapping model names to specific adaptations (e.g., '{\"gpt-3.5-turbo\": \"simplify complex reasoning\", \"gpt-4\": \"maximize detailed analysis\"}')</p> <p>Returns:     None</p>"},{"location":"api/decorators/Compatibility/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Compatibility/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Compatibility/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Compatibility/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Compatibility/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Compatibility/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Compatibility/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Compatibility/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Concise/","title":"Decorator <code>Concise</code>","text":"<p>Version: 1.0.0</p> <p>Optimizes the response for brevity and directness, eliminating unnecessary details and verbose language. This decorator is ideal for obtaining quick answers, executive summaries, or essential information when time or space is limited.</p>"},{"location":"api/decorators/Concise/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Concise/#maxwords","title":"<code>maxWords</code>","text":"<p>Type: number Required: No</p> <p>Maximum word count for the entire response</p>"},{"location":"api/decorators/Concise/#bulletpoints","title":"<code>bulletPoints</code>","text":"<p>Type: boolean Required: No</p> <p>Whether to use bullet points for maximum brevity</p>"},{"location":"api/decorators/Concise/#level","title":"<code>level</code>","text":"<p>Type: enum Required: No Default: <code>moderate</code></p> <p>The degree of conciseness to apply</p> <p>Allowed values:</p> <ul> <li><code>moderate</code></li> <li><code>high</code></li> <li><code>extreme</code></li> </ul>"},{"location":"api/decorators/Concise/#examples","title":"Examples","text":""},{"location":"api/decorators/Concise/#basic-concise-explanation-of-a-complex-topic","title":"Basic concise explanation of a complex topic","text":"<pre><code>+++Concise\nExplain how blockchain technology works.\n</code></pre> <p>Result:</p> <p>Provides a brief, to-the-point explanation of blockchain technology focusing only on essential concepts</p>"},{"location":"api/decorators/Concise/#extremely-concise-bulleted-answer-with-word-limit","title":"Extremely concise bulleted answer with word limit","text":"<pre><code>+++Concise(maxWords=50, bulletPoints=true, level=extreme)\nWhat are the key factors in successful project management?\n</code></pre> <p>Result:</p> <p>Delivers a set of extremely concise bullet points covering only the most critical project management factors, totaling under 50 words</p>"},{"location":"api/decorators/Concise/#compatibility","title":"Compatibility","text":"<p>Conflicts with:</p> <ul> <li><code>Detailed</code></li> </ul> <p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/Concise/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Concise/#methods","title":"Methods","text":""},{"location":"api/decorators/Concise/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(maxWords, bulletPoints=False, level=moderate) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Concise decorator.</p> <p>Args:     maxWords: Maximum word count for the entire response     bulletPoints: Whether to use bullet points for maximum brevity     level: The degree of conciseness to apply</p> <p>Returns:     None</p>"},{"location":"api/decorators/Concise/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Concise/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Concise/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Concise/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Concise/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Concise/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Concise/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Concise/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Conditional/","title":"Decorator <code>Conditional</code>","text":"<p>Version: 1.0.0</p> <p>A meta-decorator that applies different decorators based on specified conditions. This enables dynamic behavior where the response formatting and approach changes depending on the content, context, or user-specified parameters.</p>"},{"location":"api/decorators/Conditional/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Conditional/#if_param","title":"<code>if_param</code>","text":"<p>Type: string Required: Yes</p> <p>The condition to evaluate (e.g., 'technical', 'complex', 'controversial', or a parameter like '{param}')</p>"},{"location":"api/decorators/Conditional/#then","title":"<code>then</code>","text":"<p>Type: string Required: Yes</p> <p>The decorator to apply if the condition is true (can be a specific decorator with parameters)</p>"},{"location":"api/decorators/Conditional/#else_param","title":"<code>else_param</code>","text":"<p>Type: string Required: No</p> <p>The decorator to apply if the condition is false (can be a specific decorator with parameters)</p>"},{"location":"api/decorators/Conditional/#examples","title":"Examples","text":""},{"location":"api/decorators/Conditional/#basic-conditional-application-based-on-content-complexity","title":"Basic conditional application based on content complexity","text":"<pre><code>+++Conditional(if_param=complex, then=StepByStep, else_param=Concise)\nExplain how quantum computing works.\n</code></pre> <p>Result:</p> <p>Evaluates if the topic is complex, which quantum computing is, so it applies the StepByStep decorator</p>"},{"location":"api/decorators/Conditional/#conditional-application-with-parameterized-decorators","title":"Conditional application with parameterized decorators","text":"<pre><code>+++Conditional(if_param=controversial, then=Debate(perspectives=3), else_param=Reasoning(depth=moderate))\nDiscuss the ethical implications of gene editing in humans.\n</code></pre> <p>Result:</p> <p>Determines that gene editing ethics is controversial, so it applies the Debate decorator with 3 perspectives rather than the Reasoning decorator</p>"},{"location":"api/decorators/Conditional/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> </ul>"},{"location":"api/decorators/Conditional/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Conditional/#methods","title":"Methods","text":""},{"location":"api/decorators/Conditional/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(if_param, then, else_param) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Conditional decorator.</p> <p>Args:     if_param: The condition to evaluate (e.g., 'technical', 'complex', 'controversial', or a parameter like '{param}')     then: The decorator to apply if the condition is true (can be a specific decorator with parameters)     else_param: The decorator to apply if the condition is false (can be a specific decorator with parameters)</p> <p>Returns:     None</p>"},{"location":"api/decorators/Conditional/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Conditional/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Conditional/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Conditional/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Conditional/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Conditional/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Conditional/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Conditional/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Confidence/","title":"Decorator <code>Confidence</code>","text":"<p>Version: 1.0.0</p> <p>Enhances the response with explicit indications of confidence levels for different statements or claims. This decorator promotes transparency about knowledge certainty and helps differentiate between well-established facts and more speculative content.</p>"},{"location":"api/decorators/Confidence/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Confidence/#scale","title":"<code>scale</code>","text":"<p>Type: enum Required: No Default: <code>qualitative</code></p> <p>The method used to express confidence levels</p> <p>Allowed values:</p> <ul> <li><code>percent</code></li> <li><code>qualitative</code></li> <li><code>stars</code></li> <li><code>numeric</code></li> </ul>"},{"location":"api/decorators/Confidence/#threshold","title":"<code>threshold</code>","text":"<p>Type: number Required: No Default: <code>50</code></p> <p>Minimum confidence level for including information (as a percentage)</p>"},{"location":"api/decorators/Confidence/#detailed","title":"<code>detailed</code>","text":"<p>Type: boolean Required: No</p> <p>Whether to provide explanations for confidence assessments</p>"},{"location":"api/decorators/Confidence/#examples","title":"Examples","text":""},{"location":"api/decorators/Confidence/#qualitative-confidence-indicators-for-a-complex-topic","title":"Qualitative confidence indicators for a complex topic","text":"<pre><code>+++Confidence\nExplain the current understanding of dark matter.\n</code></pre> <p>Result:</p> <p>Explains dark matter theories with qualitative confidence indicators (high confidence, moderate confidence, etc.) for different claims</p>"},{"location":"api/decorators/Confidence/#detailed-percentage-based-confidence-with-high-threshold","title":"Detailed percentage-based confidence with high threshold","text":"<pre><code>+++Confidence(scale=percent, threshold=80, detailed=true)\nWhat are the most effective treatments for depression?\n</code></pre> <p>Result:</p> <p>Discusses only high-confidence (80%+) depression treatments with percentage indicators and explanations for confidence assessments</p>"},{"location":"api/decorators/Confidence/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/Confidence/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Confidence/#methods","title":"Methods","text":""},{"location":"api/decorators/Confidence/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(scale=qualitative, threshold=50, detailed=False) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Confidence decorator.</p> <p>Args:     scale: The method used to express confidence levels     threshold: Minimum confidence level for including information (as a percentage)     detailed: Whether to provide explanations for confidence assessments</p> <p>Returns:     None</p>"},{"location":"api/decorators/Confidence/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Confidence/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Confidence/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Confidence/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Confidence/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Confidence/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Confidence/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Confidence/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Constraints/","title":"Decorator <code>Constraints</code>","text":"<p>Version: 1.0.0</p> <p>Applies specific limitations to the output format, length, or content. This decorator enforces creative constraints that can enhance focus, brevity, or precision by requiring the response to work within defined boundaries.</p>"},{"location":"api/decorators/Constraints/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Constraints/#wordcount","title":"<code>wordCount</code>","text":"<p>Type: number Required: No</p> <p>Maximum number of words allowed in the response</p>"},{"location":"api/decorators/Constraints/#timeframe","title":"<code>timeframe</code>","text":"<p>Type: string Required: No</p> <p>Maximum time required to implement or consume the response (e.g., '5min', '1hr', '1week')</p>"},{"location":"api/decorators/Constraints/#vocabulary","title":"<code>vocabulary</code>","text":"<p>Type: enum Required: No</p> <p>Constraints on vocabulary usage</p> <p>Allowed values:</p> <ul> <li><code>simple</code></li> <li><code>technical</code></li> <li><code>domain-specific</code></li> <li><code>creative</code></li> </ul>"},{"location":"api/decorators/Constraints/#custom","title":"<code>custom</code>","text":"<p>Type: string Required: No</p> <p>Custom constraint to apply (e.g., 'no negatives', 'use only questions', 'each sentence starts with consecutive letters of the alphabet')</p>"},{"location":"api/decorators/Constraints/#examples","title":"Examples","text":""},{"location":"api/decorators/Constraints/#word-count-constraint-for-a-complex-topic","title":"Word count constraint for a complex topic","text":"<pre><code>+++Constraints(wordCount=100)\nExplain quantum computing principles.\n</code></pre> <p>Result:</p> <p>Provides a concise explanation of quantum computing, carefully limiting the response to exactly 100 words</p>"},{"location":"api/decorators/Constraints/#multiple-constraints-for-a-creative-response","title":"Multiple constraints for a creative response","text":"<pre><code>+++Constraints(wordCount=200, vocabulary=creative, custom=each paragraph must contain exactly three sentences)\nDescribe a futuristic city.\n</code></pre> <p>Result:</p> <p>Delivers a 200-word description of a futuristic city using creative vocabulary, with each paragraph containing exactly three sentences</p>"},{"location":"api/decorators/Constraints/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/Constraints/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Constraints/#methods","title":"Methods","text":""},{"location":"api/decorators/Constraints/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(wordCount, timeframe, vocabulary, custom) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Constraints decorator.</p> <p>Args:     wordCount: Maximum number of words allowed in the response     timeframe: Maximum time required to implement or consume the response (e.g., '5min', '1hr', '1week')     vocabulary: Constraints on vocabulary usage     custom: Custom constraint to apply (e.g., 'no negatives', 'use only questions', 'each sentence starts with consecutive letters of the alphabet')</p> <p>Returns:     None</p>"},{"location":"api/decorators/Constraints/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Constraints/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Constraints/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Constraints/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Constraints/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Constraints/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Constraints/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Constraints/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Context/","title":"Decorator <code>Context</code>","text":"<p>Version: 1.0.0</p> <p>A meta-decorator that adapts standard decorators for domain-specific contexts. This provides specialized interpretations of decorators based on particular fields, industries, or subject matter to ensure appropriate adaptation to contextual requirements.</p>"},{"location":"api/decorators/Context/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Context/#domain","title":"<code>domain</code>","text":"<p>Type: string Required: Yes</p> <p>The specific domain, field, or industry to contextualize decorators for (e.g., 'medicine', 'legal', 'engineering', 'education')</p>"},{"location":"api/decorators/Context/#scope","title":"<code>scope</code>","text":"<p>Type: enum Required: No Default: <code>all</code></p> <p>Which aspects of decorators to contextualize</p> <p>Allowed values:</p> <ul> <li><code>terminology</code></li> <li><code>examples</code></li> <li><code>structure</code></li> <li><code>all</code></li> </ul>"},{"location":"api/decorators/Context/#level","title":"<code>level</code>","text":"<p>Type: enum Required: No Default: <code>mixed</code></p> <p>The expertise level to target within the domain</p> <p>Allowed values:</p> <ul> <li><code>beginner</code></li> <li><code>intermediate</code></li> <li><code>expert</code></li> <li><code>mixed</code></li> </ul>"},{"location":"api/decorators/Context/#examples","title":"Examples","text":""},{"location":"api/decorators/Context/#basic-domain-specific-adaptation-of-decorators","title":"Basic domain-specific adaptation of decorators","text":"<pre><code>+++Context(domain=medicine)\n+++StepByStep\n+++Detailed\nExplain how vaccines are developed.\n</code></pre> <p>Result:</p> <p>Applies the StepByStep and Detailed decorators with medical context-awareness, using appropriate medical terminology, examples, and structures for explaining vaccine development</p>"},{"location":"api/decorators/Context/#targeted-contextualization-for-specific-expertise-level","title":"Targeted contextualization for specific expertise level","text":"<pre><code>+++Context(domain=programming, scope=examples, level=beginner)\n+++Reasoning\n+++ELI5\nExplain how databases work.\n</code></pre> <p>Result:</p> <p>Uses the Reasoning and ELI5 decorators with programming-appropriate examples specifically tailored for beginners, while keeping general terminology and structure accessible</p>"},{"location":"api/decorators/Context/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/Context/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Context/#methods","title":"Methods","text":""},{"location":"api/decorators/Context/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(domain, scope=all, level=mixed) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Context decorator.</p> <p>Args:     domain: The specific domain, field, or industry to contextualize decorators for (e.g., 'medicine', 'legal', 'engineering', 'education')     scope: Which aspects of decorators to contextualize     level: The expertise level to target within the domain</p> <p>Returns:     None</p>"},{"location":"api/decorators/Context/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Context/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Context/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Context/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Context/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Context/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Context/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Context/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Contrarian/","title":"Decorator <code>Contrarian</code>","text":"<p>Version: 1.0.0</p> <p>Generates responses that deliberately challenge conventional wisdom or mainstream perspectives. This decorator encourages critical thinking by presenting counterarguments, alternative interpretations, or challenging established positions on a topic.</p>"},{"location":"api/decorators/Contrarian/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Contrarian/#approach","title":"<code>approach</code>","text":"<p>Type: enum Required: No Default: <code>devils-advocate</code></p> <p>The specific contrarian approach to take</p> <p>Allowed values:</p> <ul> <li><code>outsider</code></li> <li><code>skeptic</code></li> <li><code>devils-advocate</code></li> </ul>"},{"location":"api/decorators/Contrarian/#maintain","title":"<code>maintain</code>","text":"<p>Type: boolean Required: No</p> <p>Whether to maintain contrarian stance throughout (true) or provide balanced view at the end (false)</p>"},{"location":"api/decorators/Contrarian/#focus","title":"<code>focus</code>","text":"<p>Type: string Required: No</p> <p>Optional specific aspect of the topic to focus contrarian analysis on</p>"},{"location":"api/decorators/Contrarian/#examples","title":"Examples","text":""},{"location":"api/decorators/Contrarian/#basic-devils-advocate-approach-with-balanced-conclusion","title":"Basic devil's advocate approach with balanced conclusion","text":"<pre><code>+++Contrarian\nWhy is renewable energy considered the future of power generation?\n</code></pre> <p>Result:</p> <p>Challenges conventional thinking about renewable energy's dominance, presenting counterarguments and limitations, followed by a balanced perspective</p>"},{"location":"api/decorators/Contrarian/#maintained-skeptical-contrarian-stance-focused-on-a-specific-aspect","title":"Maintained skeptical contrarian stance focused on a specific aspect","text":"<pre><code>+++Contrarian(approach=skeptic, maintain=true, focus=methodology)\nDiscuss the reliability of climate models in predicting future global temperatures.\n</code></pre> <p>Result:</p> <p>Provides a consistently skeptical analysis of climate model methodologies, questioning assumptions, limitations, and historical accuracy throughout the response</p>"},{"location":"api/decorators/Contrarian/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/Contrarian/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Contrarian/#methods","title":"Methods","text":""},{"location":"api/decorators/Contrarian/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(approach=devils-advocate, maintain=False, focus) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Contrarian decorator.</p> <p>Args:     approach: The specific contrarian approach to take     maintain: Whether to maintain contrarian stance throughout (true) or provide balanced view at the end (false)     focus: Optional specific aspect of the topic to focus contrarian analysis on</p> <p>Returns:     None</p>"},{"location":"api/decorators/Contrarian/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Contrarian/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Contrarian/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Contrarian/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Contrarian/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Contrarian/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Contrarian/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Contrarian/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Creative/","title":"Decorator <code>Creative</code>","text":"<p>Version: 1.0.0</p> <p>Enhances responses with imaginative, novel, and original content. This decorator encourages divergent thinking, metaphorical language, and unusual connections to generate engaging and non-obvious outputs.</p>"},{"location":"api/decorators/Creative/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Creative/#level","title":"<code>level</code>","text":"<p>Type: enum Required: No Default: <code>high</code></p> <p>The degree of creative thinking to apply</p> <p>Allowed values:</p> <ul> <li><code>moderate</code></li> <li><code>high</code></li> <li><code>unconventional</code></li> </ul>"},{"location":"api/decorators/Creative/#elements","title":"<code>elements</code>","text":"<p>Type: array Required: No</p> <p>Specific creative elements to incorporate (e.g., metaphor, wordplay, narrative)</p>"},{"location":"api/decorators/Creative/#constraints","title":"<code>constraints</code>","text":"<p>Type: array Required: No</p> <p>Optional creative constraints to work within</p>"},{"location":"api/decorators/Creative/#examples","title":"Examples","text":""},{"location":"api/decorators/Creative/#basic-creative-response-to-a-standard-question","title":"Basic creative response to a standard question","text":"<pre><code>+++Creative\nExplain how the internet works.\n</code></pre> <p>Result:</p> <p>Provides an imaginative explanation of the internet using unexpected metaphors and creative language while maintaining accuracy</p>"},{"location":"api/decorators/Creative/#highly-creative-response-with-specific-elements","title":"Highly creative response with specific elements","text":"<pre><code>+++Creative(level=unconventional, elements=[metaphor,narrative,wordplay], constraints=[must reference nature])\nDescribe the principles of quantum computing.\n</code></pre> <p>Result:</p> <p>Delivers an unconventional explanation of quantum computing through an engaging narrative filled with nature metaphors and clever wordplay</p>"},{"location":"api/decorators/Creative/#compatibility","title":"Compatibility","text":"<p>Conflicts with:</p> <ul> <li><code>Academic</code></li> <li><code>Professional</code></li> </ul> <p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/Creative/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Creative/#methods","title":"Methods","text":""},{"location":"api/decorators/Creative/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(level=high, elements, constraints) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Creative decorator.</p> <p>Args:     level: The degree of creative thinking to apply     elements: Specific creative elements to incorporate (e.g., metaphor, wordplay, narrative)     constraints: Optional creative constraints to work within</p> <p>Returns:     None</p>"},{"location":"api/decorators/Creative/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Creative/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Creative/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Creative/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Creative/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Creative/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Creative/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Creative/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Custom/","title":"Decorator <code>Custom</code>","text":"<p>Version: 1.0.0</p> <p>A meta-decorator that enables user-defined decorator behaviors through explicit rules or instructions. This provides maximum flexibility for creating specialized behaviors not covered by standard decorators.</p>"},{"location":"api/decorators/Custom/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Custom/#rules","title":"<code>rules</code>","text":"<p>Type: string Required: Yes</p> <p>Explicit instructions defining the custom behavior (e.g., 'present all examples in a numbered list with exactly three items')</p>"},{"location":"api/decorators/Custom/#name","title":"<code>name</code>","text":"<p>Type: string Required: No</p> <p>Optional name for the custom decorator to reference in documentation or explanations</p>"},{"location":"api/decorators/Custom/#priority","title":"<code>priority</code>","text":"<p>Type: enum Required: No Default: <code>override</code></p> <p>How to prioritize custom rules relative to other decorators</p> <p>Allowed values:</p> <ul> <li><code>override</code></li> <li><code>supplement</code></li> <li><code>fallback</code></li> </ul>"},{"location":"api/decorators/Custom/#examples","title":"Examples","text":""},{"location":"api/decorators/Custom/#basic-custom-formatting-rule","title":"Basic custom formatting rule","text":"<pre><code>+++Custom(rules=every paragraph must start with a word that begins with the letter A)\nExplain how search engines work.\n</code></pre> <p>Result:</p> <p>Provides an explanation of search engines where every paragraph begins with a word starting with the letter A</p>"},{"location":"api/decorators/Custom/#complex-custom-behavior-with-named-reference","title":"Complex custom behavior with named reference","text":"<pre><code>+++Custom(name=DualPerspective, rules=present two contrasting viewpoints on each main point, label them as 'Perspective A' and 'Perspective B', and then provide a synthesis, priority=supplement)\nAnalyze the impact of social media on politics.\n</code></pre> <p>Result:</p> <p>Analyzes social media's impact on politics using dual contrasting perspectives for each point, labeled as specified, with synthesis after each point, while still respecting other decorators</p>"},{"location":"api/decorators/Custom/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> </ul>"},{"location":"api/decorators/Custom/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Custom/#methods","title":"Methods","text":""},{"location":"api/decorators/Custom/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(rules, name, priority=override) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Custom decorator.</p> <p>Args:     rules: Explicit instructions defining the custom behavior (e.g., 'present all examples in a numbered list with exactly three items')     name: Optional name for the custom decorator to reference in documentation or explanations     priority: How to prioritize custom rules relative to other decorators</p> <p>Returns:     None</p>"},{"location":"api/decorators/Custom/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Custom/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Custom/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Custom/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Custom/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Custom/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Custom/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Custom/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Debate/","title":"Decorator <code>Debate</code>","text":"<p>Version: 1.0.0</p> <p>Structures the response as a debate between multiple perspectives on a topic. This decorator encourages balanced representation of different viewpoints and helps explore complex issues from various angles.</p>"},{"location":"api/decorators/Debate/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Debate/#perspectives","title":"<code>perspectives</code>","text":"<p>Type: number Required: No Default: <code>2</code></p> <p>Number of different perspectives to include in the debate</p>"},{"location":"api/decorators/Debate/#balanced","title":"<code>balanced</code>","text":"<p>Type: boolean Required: No Default: <code>True</code></p> <p>Whether to ensure equal representation and strength of arguments for each perspective</p>"},{"location":"api/decorators/Debate/#examples","title":"Examples","text":""},{"location":"api/decorators/Debate/#two-perspective-debate-on-an-ethical-issue","title":"Two-perspective debate on an ethical issue","text":"<pre><code>+++Debate\nIs it ethical to use AI-generated content without disclosure?\n</code></pre> <p>Result:</p> <p>Presents balanced arguments for and against disclosure of AI-generated content</p>"},{"location":"api/decorators/Debate/#three-perspective-debate-on-a-policy-issue-with-balanced-representation","title":"Three-perspective debate on a policy issue with balanced representation","text":"<pre><code>+++Debate(perspectives=3, balanced=true)\nShould universal basic income be implemented nationally?\n</code></pre> <p>Result:</p> <p>Presents three balanced perspectives on UBI in a debate format, ensuring equal representation of each viewpoint</p>"},{"location":"api/decorators/Debate/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> <li><code>claude-3</code></li> </ul>"},{"location":"api/decorators/Debate/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Debate/#methods","title":"Methods","text":""},{"location":"api/decorators/Debate/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(perspectives=2, balanced=True) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Debate decorator.</p> <p>Args:     perspectives: Number of different perspectives to include in the debate     balanced: Whether to ensure equal representation and strength of arguments for each perspective</p> <p>Returns:     None</p>"},{"location":"api/decorators/Debate/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Debate/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Debate/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Debate/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Debate/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Debate/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Debate/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Debate/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/DecisionMatrix/","title":"Decorator <code>DecisionMatrix</code>","text":"<p>Version: 1.0.0</p> <p>Structures the response as a decision matrix, evaluating options against multiple criteria. This decorator facilitates systematic comparison and selection between alternatives based on weighted or unweighted criteria.</p>"},{"location":"api/decorators/DecisionMatrix/#parameters","title":"Parameters","text":""},{"location":"api/decorators/DecisionMatrix/#options","title":"<code>options</code>","text":"<p>Type: array Required: No</p> <p>Specific options or alternatives to evaluate in the matrix</p>"},{"location":"api/decorators/DecisionMatrix/#criteria","title":"<code>criteria</code>","text":"<p>Type: array Required: No</p> <p>Evaluation criteria to assess each option against</p>"},{"location":"api/decorators/DecisionMatrix/#weighted","title":"<code>weighted</code>","text":"<p>Type: boolean Required: No</p> <p>Whether to include weights for criteria importance</p>"},{"location":"api/decorators/DecisionMatrix/#scale","title":"<code>scale</code>","text":"<p>Type: enum Required: No Default: <code>1-5</code></p> <p>Rating scale to use for evaluations</p> <p>Allowed values:</p> <ul> <li><code>1-5</code></li> <li><code>1-10</code></li> <li><code>qualitative</code></li> <li><code>percentage</code></li> </ul>"},{"location":"api/decorators/DecisionMatrix/#examples","title":"Examples","text":""},{"location":"api/decorators/DecisionMatrix/#simple-decision-matrix-for-comparing-options","title":"Simple decision matrix for comparing options","text":"<pre><code>+++DecisionMatrix\nWhat smartphone should I buy?\n</code></pre> <p>Result:</p> <p>Creates a decision matrix comparing top smartphone options against key purchasing criteria, with 1-5 ratings for each combination</p>"},{"location":"api/decorators/DecisionMatrix/#weighted-decision-matrix-with-custom-options-and-criteria","title":"Weighted decision matrix with custom options and criteria","text":"<pre><code>+++DecisionMatrix(options=[Python,JavaScript,Go,Rust], criteria=[learning curve,performance,ecosystem,job market], weighted=true, scale=1-10)\nWhich programming language should I learn next?\n</code></pre> <p>Result:</p> <p>Generates a weighted decision matrix comparing the specified programming languages against the given criteria, with weighted scores on a 1-10 scale</p>"},{"location":"api/decorators/DecisionMatrix/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/DecisionMatrix/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/DecisionMatrix/#methods","title":"Methods","text":""},{"location":"api/decorators/DecisionMatrix/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(options, criteria, weighted=False, scale=1-5) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the DecisionMatrix decorator.</p> <p>Args:     options: Specific options or alternatives to evaluate in the matrix     criteria: Evaluation criteria to assess each option against     weighted: Whether to include weights for criteria importance     scale: Rating scale to use for evaluations</p> <p>Returns:     None</p>"},{"location":"api/decorators/DecisionMatrix/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/DecisionMatrix/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/DecisionMatrix/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/DecisionMatrix/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/DecisionMatrix/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/DecisionMatrix/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/DecisionMatrix/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/DecisionMatrix/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/DecoratorName/","title":"Decorator <code>DecoratorName</code>","text":"<p>Note: This documentation is currently being updated. Some details may be incomplete.</p> <p>Version: 1.0.0</p> <p>A detailed description of what the decorator does, its purpose, and how it modifies AI behavior.</p>"},{"location":"api/decorators/DecoratorName/#parameters","title":"Parameters","text":""},{"location":"api/decorators/DecoratorName/#parametername","title":"<code>parameterName</code>","text":"<p>Type: string|number|boolean|enum Required: No Default: <code>defaultValue</code></p> <p>Description of what this parameter does</p>"},{"location":"api/decorators/DecoratorName/#examples","title":"Examples","text":""},{"location":"api/decorators/DecoratorName/#example-of-how-to-use-this-decorator-with-specific-parameters","title":"Example of how to use this decorator with specific parameters","text":"<pre><code>+++DecoratorName(parameterName=value)\nUser prompt text goes here\n</code></pre> <p>Result:</p> <p>Expected behavior or output pattern from this decorator</p>"},{"location":"api/decorators/DecoratorName/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/DecoratorName/#implementation","title":"Implementation","text":"<p>Implementation details will be available in a future update.</p>"},{"location":"api/decorators/Deductive/","title":"Decorator <code>Deductive</code>","text":"<p>Version: 1.0.0</p> <p>Structures the response using deductive reasoning, moving from general principles to specific conclusions. This decorator emphasizes logical argument development, starting with premises and working methodically to necessary conclusions.</p>"},{"location":"api/decorators/Deductive/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Deductive/#premises","title":"<code>premises</code>","text":"<p>Type: number Required: No Default: <code>2</code></p> <p>Number of main premises to include before deducing conclusions</p>"},{"location":"api/decorators/Deductive/#formal","title":"<code>formal</code>","text":"<p>Type: boolean Required: No</p> <p>Whether to use formal logical structures with explicit syllogisms</p>"},{"location":"api/decorators/Deductive/#steps","title":"<code>steps</code>","text":"<p>Type: number Required: No Default: <code>3</code></p> <p>Number of logical steps to include in the deductive process</p>"},{"location":"api/decorators/Deductive/#examples","title":"Examples","text":""},{"location":"api/decorators/Deductive/#basic-deductive-reasoning-from-principles-to-specific-conclusions","title":"Basic deductive reasoning from principles to specific conclusions","text":"<pre><code>+++Deductive\nShould social media companies be regulated like utilities?\n</code></pre> <p>Result:</p> <p>Starts with general principles about utilities and regulation, establishes premises about social media characteristics, and deduces conclusions about appropriate regulatory approaches</p>"},{"location":"api/decorators/Deductive/#formal-deductive-logic-with-multiple-steps","title":"Formal deductive logic with multiple steps","text":"<pre><code>+++Deductive(formal=true, steps=5)\nIs artificial intelligence conscious?\n</code></pre> <p>Result:</p> <p>Presents formal logical syllogisms about consciousness and intelligence, proceeding through 5 distinct logical steps to reach conclusions about AI consciousness</p>"},{"location":"api/decorators/Deductive/#compatibility","title":"Compatibility","text":"<p>Conflicts with:</p> <ul> <li><code>Inductive</code></li> </ul> <p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/Deductive/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Deductive/#methods","title":"Methods","text":""},{"location":"api/decorators/Deductive/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(premises=2, formal=False, steps=3) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Deductive decorator.</p> <p>Args:     premises: Number of main premises to include before deducing conclusions     formal: Whether to use formal logical structures with explicit syllogisms     steps: Number of logical steps to include in the deductive process</p> <p>Returns:     None</p>"},{"location":"api/decorators/Deductive/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Deductive/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Deductive/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Deductive/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Deductive/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Deductive/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Deductive/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Deductive/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Detailed/","title":"Decorator <code>Detailed</code>","text":"<p>Version: 1.0.0</p> <p>Enhances the response with comprehensive information, thorough explanations, and rich context. This decorator is ideal for in-depth learning, complex topics requiring nuance, or when completeness is valued over brevity.</p>"},{"location":"api/decorators/Detailed/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Detailed/#depth","title":"<code>depth</code>","text":"<p>Type: enum Required: No Default: <code>comprehensive</code></p> <p>The level of detail and comprehensiveness</p> <p>Allowed values:</p> <ul> <li><code>moderate</code></li> <li><code>comprehensive</code></li> <li><code>exhaustive</code></li> </ul>"},{"location":"api/decorators/Detailed/#aspects","title":"<code>aspects</code>","text":"<p>Type: array Required: No</p> <p>Specific aspects or dimensions to explore in detail</p>"},{"location":"api/decorators/Detailed/#examples","title":"<code>examples</code>","text":"<p>Type: boolean Required: No Default: <code>True</code></p> <p>Whether to include detailed examples to illustrate points</p>"},{"location":"api/decorators/Detailed/#examples_1","title":"Examples","text":""},{"location":"api/decorators/Detailed/#comprehensive-detailed-explanation-of-a-concept","title":"Comprehensive detailed explanation of a concept","text":"<pre><code>+++Detailed\nExplain how the human immune system works.\n</code></pre> <p>Result:</p> <p>Provides a thorough, in-depth explanation of the immune system covering all major components, processes, and functions with illustrative examples</p>"},{"location":"api/decorators/Detailed/#exhaustive-detailed-analysis-of-specific-aspects","title":"Exhaustive detailed analysis of specific aspects","text":"<pre><code>+++Detailed(depth=exhaustive, aspects=[economic,environmental,social,technological], examples=true)\nAnalyze the implications of transitioning to renewable energy.\n</code></pre> <p>Result:</p> <p>Delivers an extremely detailed analysis of renewable energy transition, exhaustively covering all four specified aspects with comprehensive examples</p>"},{"location":"api/decorators/Detailed/#compatibility","title":"Compatibility","text":"<p>Conflicts with:</p> <ul> <li><code>Concise</code></li> <li><code>Summary</code></li> </ul> <p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/Detailed/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Detailed/#methods","title":"Methods","text":""},{"location":"api/decorators/Detailed/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(depth=comprehensive, aspects, examples=True) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Detailed decorator.</p> <p>Args:     depth: The level of detail and comprehensiveness     aspects: Specific aspects or dimensions to explore in detail     examples: Whether to include detailed examples to illustrate points</p> <p>Returns:     None</p>"},{"location":"api/decorators/Detailed/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Detailed/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Detailed/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Detailed/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Detailed/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Detailed/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Detailed/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Detailed/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/ELI5/","title":"Decorator <code>ELI5</code>","text":"<p>Version: 1.0.0</p> <p>Adapts the response to explain a concept as if to a 5-year-old child. This decorator simplifies complex topics using basic vocabulary, concrete examples, and relatable analogies to make information accessible to non-experts or those new to a subject.</p>"},{"location":"api/decorators/ELI5/#parameters","title":"Parameters","text":""},{"location":"api/decorators/ELI5/#strictness","title":"<code>strictness</code>","text":"<p>Type: boolean Required: No</p> <p>Whether to strictly maintain a child-appropriate level of simplicity or allow slightly more complexity when necessary</p>"},{"location":"api/decorators/ELI5/#examples","title":"Examples","text":""},{"location":"api/decorators/ELI5/#basic-explanation-of-a-complex-scientific-concept","title":"Basic explanation of a complex scientific concept","text":"<pre><code>+++ELI5\nExplain how nuclear fusion works.\n</code></pre> <p>Result:</p> <p>Explains nuclear fusion using simple language, analogies, and examples a child could understand</p>"},{"location":"api/decorators/ELI5/#strict-simplified-explanation-of-a-technical-subject","title":"Strict simplified explanation of a technical subject","text":"<pre><code>+++ELI5(strictness=true)\nHow does the internet work?\n</code></pre> <p>Result:</p> <p>Provides an extremely simplified explanation of the internet using only basic vocabulary and concrete examples appropriate for young children</p>"},{"location":"api/decorators/ELI5/#compatibility","title":"Compatibility","text":"<p>Conflicts with:</p> <ul> <li><code>Academic</code></li> <li><code>Professional</code></li> <li><code>AsExpert</code></li> <li><code>Precision</code></li> <li><code>Tone</code></li> </ul> <p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/ELI5/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/ELI5/#methods","title":"Methods","text":""},{"location":"api/decorators/ELI5/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(strictness=False) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the ELI5 decorator.</p> <p>Args:     strictness: Whether to strictly maintain a child-appropriate level of simplicity or allow slightly more complexity when necessary</p> <p>Returns:     None</p>"},{"location":"api/decorators/ELI5/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/ELI5/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/ELI5/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/ELI5/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/ELI5/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/ELI5/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/ELI5/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/ELI5/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Extension/","title":"Decorator <code>Extension</code>","text":"<p>Version: 1.0.0</p> <p>A meta-decorator that enables loading of community-defined decorators from external sources. This facilitates the use of specialized decorator packages, domain-specific extensions, or custom decorator libraries maintained by communities or organizations.</p>"},{"location":"api/decorators/Extension/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Extension/#source","title":"<code>source</code>","text":"<p>Type: string Required: Yes</p> <p>URI or identifier for the extension package (e.g., URL, namespace, or registry identifier)</p>"},{"location":"api/decorators/Extension/#version","title":"<code>version</code>","text":"<p>Type: string Required: No</p> <p>Specific version of the extension package to use</p>"},{"location":"api/decorators/Extension/#decorators","title":"<code>decorators</code>","text":"<p>Type: array Required: No</p> <p>Specific decorators to load from the extension (if empty, loads all decorators from the package)</p>"},{"location":"api/decorators/Extension/#examples","title":"Examples","text":""},{"location":"api/decorators/Extension/#basic-loading-of-an-extension-package","title":"Basic loading of an extension package","text":"<pre><code>+++Extension(source=https://decorator-registry.ai/scientific-pack.json)\n+++ScientificReasoning(discipline=physics)\nExplain dark matter.\n</code></pre> <p>Result:</p> <p>Loads decorators from the scientific-pack extension and then applies the ScientificReasoning decorator (defined in that pack) with physics discipline to explain dark matter</p>"},{"location":"api/decorators/Extension/#loading-specific-decorators-from-a-versioned-extension","title":"Loading specific decorators from a versioned extension","text":"<pre><code>+++Extension(source=medical-decorators, version=2.1.0, decorators=[ClinicalCase,EvidenceBased])\n+++ClinicalCase(format=SOAP)\nDescribe the treatment approach for Type 2 diabetes.\n</code></pre> <p>Result:</p> <p>Loads only the ClinicalCase and EvidenceBased decorators from version 2.1.0 of the medical-decorators package, then applies the ClinicalCase decorator with SOAP format to describe diabetes treatment</p>"},{"location":"api/decorators/Extension/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> </ul>"},{"location":"api/decorators/Extension/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Extension/#methods","title":"Methods","text":""},{"location":"api/decorators/Extension/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(source, version, decorators) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Extension decorator.</p> <p>Args:     source: URI or identifier for the extension package (e.g., URL, namespace, or registry identifier)     version: Specific version of the extension package to use     decorators: Specific decorators to load from the extension (if empty, loads all decorators from the package)</p> <p>Returns:     None</p>"},{"location":"api/decorators/Extension/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Extension/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Extension/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Extension/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Extension/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Extension/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Extension/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Extension/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Extremes/","title":"Decorator <code>Extremes</code>","text":"<p>Version: 1.0.0</p> <p>Presents content at the extreme ends of a spectrum, showing both a radical, ambitious, or maximalist version alongside a minimal, conservative, or basic version. This decorator helps explore the range of possibilities from the simplest implementation to the most expansive vision.</p>"},{"location":"api/decorators/Extremes/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Extremes/#versions","title":"<code>versions</code>","text":"<p>Type: enum Required: No Default: <code>both</code></p> <p>Which extreme versions to include</p> <p>Allowed values:</p> <ul> <li><code>radical</code></li> <li><code>minimal</code></li> <li><code>both</code></li> </ul>"},{"location":"api/decorators/Extremes/#dimension","title":"<code>dimension</code>","text":"<p>Type: string Required: No Default: <code>ambition</code></p> <p>The specific dimension along which to explore extremes (e.g., 'cost', 'time', 'ambition', 'complexity')</p>"},{"location":"api/decorators/Extremes/#compare","title":"<code>compare</code>","text":"<p>Type: boolean Required: No Default: <code>True</code></p> <p>Whether to include a comparative analysis of the extreme versions</p>"},{"location":"api/decorators/Extremes/#examples","title":"Examples","text":""},{"location":"api/decorators/Extremes/#basic-exploration-of-minimal-and-radical-approaches","title":"Basic exploration of minimal and radical approaches","text":"<pre><code>+++Extremes\nDescribe a strategy for reducing carbon emissions.\n</code></pre> <p>Result:</p> <p>Presents both a minimal, immediately achievable carbon reduction strategy and a radical, transformative approach, with a comparison of their respective impacts, feasibility, and trade-offs</p>"},{"location":"api/decorators/Extremes/#only-radical-version-along-a-specific-dimension","title":"Only radical version along a specific dimension","text":"<pre><code>+++Extremes(versions=radical, dimension=technological innovation, compare=false)\nOutline the future of transportation.\n</code></pre> <p>Result:</p> <p>Provides only a technologically radical vision of transportation's future, focusing on the most innovative and disruptive possibilities without comparison to other approaches</p>"},{"location":"api/decorators/Extremes/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/Extremes/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Extremes/#methods","title":"Methods","text":""},{"location":"api/decorators/Extremes/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(versions=both, dimension=ambition, compare=True) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Extremes decorator.</p> <p>Args:     versions: Which extreme versions to include     dimension: The specific dimension along which to explore extremes (e.g., 'cost', 'time', 'ambition', 'complexity')     compare: Whether to include a comparative analysis of the extreme versions</p> <p>Returns:     None</p>"},{"location":"api/decorators/Extremes/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Extremes/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Extremes/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Extremes/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Extremes/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Extremes/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Extremes/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Extremes/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/FactCheck/","title":"Decorator <code>FactCheck</code>","text":"<p>Version: 1.0.0</p> <p>Enhances the response with verification of factual claims and explicit indication of confidence levels. This decorator promotes accuracy by distinguishing between well-established facts, likely facts, and uncertain or speculative information.</p>"},{"location":"api/decorators/FactCheck/#parameters","title":"Parameters","text":""},{"location":"api/decorators/FactCheck/#confidence","title":"<code>confidence</code>","text":"<p>Type: boolean Required: No Default: <code>True</code></p> <p>Whether to include explicit confidence levels for claims</p>"},{"location":"api/decorators/FactCheck/#uncertain","title":"<code>uncertain</code>","text":"<p>Type: enum Required: No Default: <code>mark</code></p> <p>How to handle uncertain information</p> <p>Allowed values:</p> <ul> <li><code>mark</code></li> <li><code>exclude</code></li> <li><code>qualify</code></li> </ul>"},{"location":"api/decorators/FactCheck/#strictness","title":"<code>strictness</code>","text":"<p>Type: enum Required: No Default: <code>moderate</code></p> <p>The threshold for considering information verified</p> <p>Allowed values:</p> <ul> <li><code>low</code></li> <li><code>moderate</code></li> <li><code>high</code></li> </ul>"},{"location":"api/decorators/FactCheck/#examples","title":"Examples","text":""},{"location":"api/decorators/FactCheck/#basic-fact-checking-with-confidence-indicators","title":"Basic fact checking with confidence indicators","text":"<pre><code>+++FactCheck\nExplain the history and effectiveness of vaccines.\n</code></pre> <p>Result:</p> <p>Provides information about vaccines with clear indications of confidence levels for different claims</p>"},{"location":"api/decorators/FactCheck/#high-strictness-fact-checking-that-excludes-uncertain-information","title":"High-strictness fact checking that excludes uncertain information","text":"<pre><code>+++FactCheck(strictness=high, uncertain=exclude)\nDescribe what we know about dark matter.\n</code></pre> <p>Result:</p> <p>Presents only well-established scientific facts about dark matter, excluding speculative or uncertain information</p>"},{"location":"api/decorators/FactCheck/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/FactCheck/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/FactCheck/#methods","title":"Methods","text":""},{"location":"api/decorators/FactCheck/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(confidence=True, uncertain=mark, strictness=moderate) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the FactCheck decorator.</p> <p>Args:     confidence: Whether to include explicit confidence levels for claims     uncertain: How to handle uncertain information     strictness: The threshold for considering information verified</p> <p>Returns:     None</p>"},{"location":"api/decorators/FactCheck/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/FactCheck/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/FactCheck/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/FactCheck/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/FactCheck/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/FactCheck/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/FactCheck/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/FactCheck/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/FindGaps/","title":"Decorator <code>FindGaps</code>","text":"<p>Version: 1.0.0</p> <p>Identifies missing elements, unanswered questions, or overlooked considerations in an idea, plan, or argument. This decorator helps improve completeness by systematically discovering and highlighting gaps that need addressing.</p>"},{"location":"api/decorators/FindGaps/#parameters","title":"Parameters","text":""},{"location":"api/decorators/FindGaps/#aspects","title":"<code>aspects</code>","text":"<p>Type: enum Required: No Default: <code>comprehensive</code></p> <p>The specific types of gaps to focus on finding</p> <p>Allowed values:</p> <ul> <li><code>questions</code></li> <li><code>resources</code></li> <li><code>stakeholders</code></li> <li><code>risks</code></li> <li><code>dependencies</code></li> <li><code>comprehensive</code></li> </ul>"},{"location":"api/decorators/FindGaps/#depth","title":"<code>depth</code>","text":"<p>Type: enum Required: No Default: <code>thorough</code></p> <p>How thoroughly to analyze for gaps</p> <p>Allowed values:</p> <ul> <li><code>basic</code></li> <li><code>thorough</code></li> <li><code>exhaustive</code></li> </ul>"},{"location":"api/decorators/FindGaps/#solutions","title":"<code>solutions</code>","text":"<p>Type: boolean Required: No Default: <code>True</code></p> <p>Whether to suggest solutions or approaches for addressing the identified gaps</p>"},{"location":"api/decorators/FindGaps/#examples","title":"Examples","text":""},{"location":"api/decorators/FindGaps/#basic-comprehensive-gap-analysis-of-a-business-plan","title":"Basic comprehensive gap analysis of a business plan","text":"<pre><code>+++FindGaps\nWe plan to launch our SaaS product with these features and marketing channels...\n</code></pre> <p>Result:</p> <p>First identifies gaps across various aspects of the SaaS product launch plan, then suggests solutions for addressing each gap</p>"},{"location":"api/decorators/FindGaps/#exhaustive-stakeholder-focused-gap-analysis-without-solutions","title":"Exhaustive stakeholder-focused gap analysis without solutions","text":"<pre><code>+++FindGaps(aspects=stakeholders, depth=exhaustive, solutions=false)\nHere's our urban redevelopment proposal...\n</code></pre> <p>Result:</p> <p>Provides an exhaustive analysis of overlooked or inadequately considered stakeholders in the urban redevelopment proposal, without suggesting solutions</p>"},{"location":"api/decorators/FindGaps/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/FindGaps/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/FindGaps/#methods","title":"Methods","text":""},{"location":"api/decorators/FindGaps/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(aspects=comprehensive, depth=thorough, solutions=True) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the FindGaps decorator.</p> <p>Args:     aspects: The specific types of gaps to focus on finding     depth: How thoroughly to analyze for gaps     solutions: Whether to suggest solutions or approaches for addressing the identified gaps</p> <p>Returns:     None</p>"},{"location":"api/decorators/FindGaps/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/FindGaps/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/FindGaps/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/FindGaps/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/FindGaps/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/FindGaps/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/FindGaps/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/FindGaps/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/FirstPrinciples/","title":"Decorator <code>FirstPrinciples</code>","text":"<p>Version: 1.0.0</p> <p>Structures the response by breaking down complex topics into their fundamental truths or axioms, then building up from there. This decorator promotes a deeper understanding by examining the most basic elements of a concept before constructing more complex ideas.</p>"},{"location":"api/decorators/FirstPrinciples/#parameters","title":"Parameters","text":""},{"location":"api/decorators/FirstPrinciples/#depth","title":"<code>depth</code>","text":"<p>Type: number Required: No Default: <code>3</code></p> <p>Level of detail in breaking down to fundamental principles</p>"},{"location":"api/decorators/FirstPrinciples/#examples","title":"Examples","text":""},{"location":"api/decorators/FirstPrinciples/#basic-first-principles-analysis-of-a-concept","title":"Basic first principles analysis of a concept","text":"<pre><code>+++FirstPrinciples\nHow do electric vehicles work?\n</code></pre> <p>Result:</p> <p>Breaks down electric vehicles into fundamental principles of electricity, motors, and energy storage before explaining the complete system</p>"},{"location":"api/decorators/FirstPrinciples/#deep-first-principles-analysis-with-maximum-depth","title":"Deep first principles analysis with maximum depth","text":"<pre><code>+++FirstPrinciples(depth=5)\nWhat makes machine learning effective?\n</code></pre> <p>Result:</p> <p>Provides an extensive breakdown of machine learning starting from mathematical foundations and progressively building up to complex algorithms</p>"},{"location":"api/decorators/FirstPrinciples/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/FirstPrinciples/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/FirstPrinciples/#methods","title":"Methods","text":""},{"location":"api/decorators/FirstPrinciples/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(depth=3) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the FirstPrinciples decorator.</p> <p>Args:     depth: Level of detail in breaking down to fundamental principles</p> <p>Returns:     None</p>"},{"location":"api/decorators/FirstPrinciples/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/FirstPrinciples/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/FirstPrinciples/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/FirstPrinciples/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/FirstPrinciples/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/FirstPrinciples/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/FirstPrinciples/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/FirstPrinciples/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/ForcedAnalogy/","title":"Decorator <code>ForcedAnalogy</code>","text":"<p>Version: 1.0.0</p> <p>Explains concepts by specifically comparing them to a particular domain or field. This decorator forces analogies from a specified source domain to make complex or unfamiliar topics more relatable and understandable.</p>"},{"location":"api/decorators/ForcedAnalogy/#parameters","title":"Parameters","text":""},{"location":"api/decorators/ForcedAnalogy/#source","title":"<code>source</code>","text":"<p>Type: string Required: Yes</p> <p>The specific domain, field, or context to draw analogies from</p>"},{"location":"api/decorators/ForcedAnalogy/#comprehensiveness","title":"<code>comprehensiveness</code>","text":"<p>Type: enum Required: No Default: <code>comprehensive</code></p> <p>How comprehensively to map concepts between domains</p> <p>Allowed values:</p> <ul> <li><code>basic</code></li> <li><code>comprehensive</code></li> <li><code>detailed</code></li> </ul>"},{"location":"api/decorators/ForcedAnalogy/#mappings","title":"<code>mappings</code>","text":"<p>Type: number Required: No Default: <code>3</code></p> <p>Number of distinct concept mappings to create between domains</p>"},{"location":"api/decorators/ForcedAnalogy/#examples","title":"Examples","text":""},{"location":"api/decorators/ForcedAnalogy/#explaining-a-technical-concept-using-sports-analogies","title":"Explaining a technical concept using sports analogies","text":"<pre><code>+++ForcedAnalogy(source=sports)\nExplain how blockchain technology works.\n</code></pre> <p>Result:</p> <p>Explains blockchain technology by mapping concepts to sports analogies (e.g., ledger as scoreboard, miners as referees, consensus as rulebook)</p>"},{"location":"api/decorators/ForcedAnalogy/#detailed-cooking-analogy-for-complex-scientific-process","title":"Detailed cooking analogy for complex scientific process","text":"<pre><code>+++ForcedAnalogy(source=cooking, comprehensiveness=detailed, mappings=5)\nDescribe how CRISPR gene editing works.\n</code></pre> <p>Result:</p> <p>Provides a detailed explanation of CRISPR through cooking analogies, with 5 distinct concept mappings (e.g., DNA as recipe, Cas9 as kitchen knife, guide RNA as cooking instructions)</p>"},{"location":"api/decorators/ForcedAnalogy/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/ForcedAnalogy/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/ForcedAnalogy/#methods","title":"Methods","text":""},{"location":"api/decorators/ForcedAnalogy/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(source, comprehensiveness=comprehensive, mappings=3) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the ForcedAnalogy decorator.</p> <p>Args:     source: The specific domain, field, or context to draw analogies from     comprehensiveness: How comprehensively to map concepts between domains     mappings: Number of distinct concept mappings to create between domains</p> <p>Returns:     None</p>"},{"location":"api/decorators/ForcedAnalogy/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/ForcedAnalogy/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/ForcedAnalogy/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/ForcedAnalogy/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/ForcedAnalogy/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/ForcedAnalogy/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/ForcedAnalogy/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/ForcedAnalogy/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Inductive/","title":"Decorator <code>Inductive</code>","text":"<p>Version: 1.0.0</p> <p>Structures the response using inductive reasoning, moving from specific observations to broader generalizations and theories. This decorator emphasizes pattern recognition and the derivation of general principles from particular instances.</p>"},{"location":"api/decorators/Inductive/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Inductive/#examples","title":"<code>examples</code>","text":"<p>Type: number Required: No Default: <code>3</code></p> <p>Number of specific examples or observations to include before generalizing</p>"},{"location":"api/decorators/Inductive/#confidence","title":"<code>confidence</code>","text":"<p>Type: boolean Required: No</p> <p>Whether to explicitly state the confidence level of the inductive conclusions</p>"},{"location":"api/decorators/Inductive/#structure","title":"<code>structure</code>","text":"<p>Type: enum Required: No Default: <code>generalization</code></p> <p>The pattern of inductive reasoning to follow</p> <p>Allowed values:</p> <ul> <li><code>generalization</code></li> <li><code>causal</code></li> <li><code>statistical</code></li> <li><code>analogical</code></li> </ul>"},{"location":"api/decorators/Inductive/#examples_1","title":"Examples","text":""},{"location":"api/decorators/Inductive/#basic-inductive-reasoning-from-examples-to-general-principles","title":"Basic inductive reasoning from examples to general principles","text":"<pre><code>+++Inductive\nWhat factors contribute to successful startups?\n</code></pre> <p>Result:</p> <p>Provides specific examples of successful startups, identifies patterns across them, and derives general principles of startup success</p>"},{"location":"api/decorators/Inductive/#causal-inductive-reasoning-with-confidence-levels","title":"Causal inductive reasoning with confidence levels","text":"<pre><code>+++Inductive(examples=5, confidence=true, structure=causal)\nHow does screen time affect child development?\n</code></pre> <p>Result:</p> <p>Presents 5 specific observations about screen time and child development, infers causal relationships, and generalizes with explicit confidence levels for each conclusion</p>"},{"location":"api/decorators/Inductive/#compatibility","title":"Compatibility","text":"<p>Conflicts with:</p> <ul> <li><code>Deductive</code></li> </ul> <p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/Inductive/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Inductive/#methods","title":"Methods","text":""},{"location":"api/decorators/Inductive/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(examples=3, confidence=False, structure=generalization) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Inductive decorator.</p> <p>Args:     examples: Number of specific examples or observations to include before generalizing     confidence: Whether to explicitly state the confidence level of the inductive conclusions     structure: The pattern of inductive reasoning to follow</p> <p>Returns:     None</p>"},{"location":"api/decorators/Inductive/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Inductive/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Inductive/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Inductive/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Inductive/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Inductive/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Inductive/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Inductive/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Layered/","title":"Decorator <code>Layered</code>","text":"<p>Version: 1.0.0</p> <p>Presents content at multiple levels of explanation depth, allowing readers to engage with information at their preferred level of detail. This decorator structures responses with progressive disclosure, from high-level summaries to increasingly detailed explanations.</p>"},{"location":"api/decorators/Layered/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Layered/#levels","title":"<code>levels</code>","text":"<p>Type: enum Required: No Default: <code>summary-detail-technical</code></p> <p>The granularity of explanation levels to include</p> <p>Allowed values:</p> <ul> <li><code>sentence-paragraph-full</code></li> <li><code>basic-intermediate-advanced</code></li> <li><code>summary-detail-technical</code></li> </ul>"},{"location":"api/decorators/Layered/#count","title":"<code>count</code>","text":"<p>Type: number Required: No Default: <code>3</code></p> <p>Number of distinct explanation layers to provide</p>"},{"location":"api/decorators/Layered/#progression","title":"<code>progression</code>","text":"<p>Type: enum Required: No Default: <code>separate</code></p> <p>How to structure the progression between layers</p> <p>Allowed values:</p> <ul> <li><code>separate</code></li> <li><code>nested</code></li> <li><code>incremental</code></li> </ul>"},{"location":"api/decorators/Layered/#examples","title":"Examples","text":""},{"location":"api/decorators/Layered/#basic-three-level-explanation-of-a-complex-concept","title":"Basic three-level explanation of a complex concept","text":"<pre><code>+++Layered\nExplain how blockchain technology works.\n</code></pre> <p>Result:</p> <p>Provides a summary-level explanation of blockchain, followed by a detailed explanation, and finally a technical deep dive with implementation details</p>"},{"location":"api/decorators/Layered/#multi-layered-nested-progression-with-custom-levels","title":"Multi-layered nested progression with custom levels","text":"<pre><code>+++Layered(levels=basic-intermediate-advanced, count=4, progression=nested)\nDescribe the principles of quantum computing.\n</code></pre> <p>Result:</p> <p>Delivers a nested explanation of quantum computing with four progressive layers of understanding, each building on the previous and increasing in complexity from basic to advanced</p>"},{"location":"api/decorators/Layered/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/Layered/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Layered/#methods","title":"Methods","text":""},{"location":"api/decorators/Layered/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(levels=summary-detail-technical, count=3, progression=separate) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Layered decorator.</p> <p>Args:     levels: The granularity of explanation levels to include     count: Number of distinct explanation layers to provide     progression: How to structure the progression between layers</p> <p>Returns:     None</p>"},{"location":"api/decorators/Layered/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Layered/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Layered/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Layered/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Layered/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Layered/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Layered/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Layered/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Limitations/","title":"Decorator <code>Limitations</code>","text":"<p>Version: 1.0.0</p> <p>Adds an explicit statement of limitations, caveats, or uncertainties related to the provided information. This decorator promotes intellectual honesty by acknowledging the boundaries of current knowledge, potential biases, or contextual constraints.</p>"},{"location":"api/decorators/Limitations/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Limitations/#detail","title":"<code>detail</code>","text":"<p>Type: enum Required: No Default: <code>moderate</code></p> <p>The level of detail in the limitations statement</p> <p>Allowed values:</p> <ul> <li><code>brief</code></li> <li><code>moderate</code></li> <li><code>comprehensive</code></li> </ul>"},{"location":"api/decorators/Limitations/#position","title":"<code>position</code>","text":"<p>Type: enum Required: No Default: <code>end</code></p> <p>Where to place the limitations statement in the response</p> <p>Allowed values:</p> <ul> <li><code>beginning</code></li> <li><code>end</code></li> </ul>"},{"location":"api/decorators/Limitations/#focus","title":"<code>focus</code>","text":"<p>Type: enum Required: No Default: <code>all</code></p> <p>The primary aspect to focus on in the limitations</p> <p>Allowed values:</p> <ul> <li><code>knowledge</code></li> <li><code>methodology</code></li> <li><code>context</code></li> <li><code>biases</code></li> <li><code>all</code></li> </ul>"},{"location":"api/decorators/Limitations/#examples","title":"Examples","text":""},{"location":"api/decorators/Limitations/#brief-limitations-statement-at-the-end-focused-on-methodology","title":"Brief limitations statement at the end focused on methodology","text":"<pre><code>+++Limitations(detail=brief, focus=methodology)\nExplain how personality tests predict career success.\n</code></pre> <p>Result:</p> <p>Explains personality tests and career success, concluding with a brief statement of methodological limitations</p>"},{"location":"api/decorators/Limitations/#comprehensive-limitations-at-the-beginning-covering-all-aspects","title":"Comprehensive limitations at the beginning covering all aspects","text":"<pre><code>+++Limitations(detail=comprehensive, position=beginning, focus=all)\nDescribe the current understanding of consciousness.\n</code></pre> <p>Result:</p> <p>Begins with a thorough discussion of the limitations in our understanding of consciousness before presenting the current state of knowledge</p>"},{"location":"api/decorators/Limitations/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/Limitations/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Limitations/#methods","title":"Methods","text":""},{"location":"api/decorators/Limitations/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(detail=moderate, position=end, focus=all) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Limitations decorator.</p> <p>Args:     detail: The level of detail in the limitations statement     position: Where to place the limitations statement in the response     focus: The primary aspect to focus on in the limitations</p> <p>Returns:     None</p>"},{"location":"api/decorators/Limitations/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Limitations/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Limitations/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Limitations/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Limitations/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Limitations/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Limitations/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Limitations/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/MECE/","title":"Decorator <code>MECE</code>","text":"<p>Version: 1.0.0</p> <p>Structures the response using the Mutually Exclusive, Collectively Exhaustive framework - a principle where categories have no overlaps and cover all possibilities. This decorator ensures comprehensive analysis with clear categorization for decision-making and problem-solving.</p>"},{"location":"api/decorators/MECE/#parameters","title":"Parameters","text":""},{"location":"api/decorators/MECE/#dimensions","title":"<code>dimensions</code>","text":"<p>Type: number Required: No Default: <code>3</code></p> <p>Number of top-level MECE dimensions to use for categorization</p>"},{"location":"api/decorators/MECE/#depth","title":"<code>depth</code>","text":"<p>Type: number Required: No Default: <code>2</code></p> <p>Maximum level of hierarchical breakdown within each dimension</p>"},{"location":"api/decorators/MECE/#framework","title":"<code>framework</code>","text":"<p>Type: enum Required: No Default: <code>custom</code></p> <p>Optional predefined MECE framework to apply</p> <p>Allowed values:</p> <ul> <li><code>issue tree</code></li> <li><code>value chain</code></li> <li><code>business segments</code></li> <li><code>stakeholders</code></li> <li><code>custom</code></li> </ul>"},{"location":"api/decorators/MECE/#examples","title":"Examples","text":""},{"location":"api/decorators/MECE/#basic-mece-analysis-of-a-business-problem","title":"Basic MECE analysis of a business problem","text":"<pre><code>+++MECE\nWhat factors should we consider when expanding to a new market?\n</code></pre> <p>Result:</p> <p>Organizes market expansion factors into 3 mutually exclusive, collectively exhaustive categories with no overlaps and full coverage of all considerations</p>"},{"location":"api/decorators/MECE/#detailed-mece-framework-with-stakeholder-focus","title":"Detailed MECE framework with stakeholder focus","text":"<pre><code>+++MECE(dimensions=4, depth=3, framework=stakeholders)\nAnalyze the implications of implementing a four-day work week.\n</code></pre> <p>Result:</p> <p>Provides a 4-dimension MECE analysis of a four-day work week using a stakeholder framework, with up to 3 levels of hierarchical breakdown within each stakeholder category</p>"},{"location":"api/decorators/MECE/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/MECE/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/MECE/#methods","title":"Methods","text":""},{"location":"api/decorators/MECE/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(dimensions=3, depth=2, framework=custom) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the MECE decorator.</p> <p>Args:     dimensions: Number of top-level MECE dimensions to use for categorization     depth: Maximum level of hierarchical breakdown within each dimension     framework: Optional predefined MECE framework to apply</p> <p>Returns:     None</p>"},{"location":"api/decorators/MECE/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/MECE/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/MECE/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/MECE/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/MECE/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/MECE/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/MECE/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/MECE/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Motivational/","title":"Decorator <code>Motivational</code>","text":"<p>Version: 1.0.0</p> <p>Enhances responses with encouraging, inspiring, and empowering language. This decorator is designed to motivate action, build confidence, and create a positive emotional impact while still delivering substantive content.</p>"},{"location":"api/decorators/Motivational/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Motivational/#intensity","title":"<code>intensity</code>","text":"<p>Type: enum Required: No Default: <code>moderate</code></p> <p>The level of motivational energy and enthusiasm</p> <p>Allowed values:</p> <ul> <li><code>mild</code></li> <li><code>moderate</code></li> <li><code>high</code></li> </ul>"},{"location":"api/decorators/Motivational/#focus","title":"<code>focus</code>","text":"<p>Type: enum Required: No Default: <code>balanced</code></p> <p>The primary motivational approach to emphasize</p> <p>Allowed values:</p> <ul> <li><code>achievement</code></li> <li><code>growth</code></li> <li><code>resilience</code></li> <li><code>purpose</code></li> <li><code>balanced</code></li> </ul>"},{"location":"api/decorators/Motivational/#actionable","title":"<code>actionable</code>","text":"<p>Type: boolean Required: No Default: <code>True</code></p> <p>Whether to include specific actionable steps or only inspirational content</p>"},{"location":"api/decorators/Motivational/#examples","title":"Examples","text":""},{"location":"api/decorators/Motivational/#basic-moderately-motivational-response","title":"Basic moderately motivational response","text":"<pre><code>+++Motivational\nWhat are some strategies for building healthy habits?\n</code></pre> <p>Result:</p> <p>Provides strategies for building healthy habits with moderate motivational language, encouraging tone, and confidence-building framing</p>"},{"location":"api/decorators/Motivational/#high-intensity-resilience-focused-motivational-content","title":"High-intensity resilience-focused motivational content","text":"<pre><code>+++Motivational(intensity=high, focus=resilience, actionable=true)\nHow can I overcome setbacks in my professional life?\n</code></pre> <p>Result:</p> <p>Delivers highly energetic and inspiring advice for professional resilience, emphasizing overcoming adversity with specific actionable steps, using powerful language and empowering framing</p>"},{"location":"api/decorators/Motivational/#compatibility","title":"Compatibility","text":"<p>Conflicts with:</p> <ul> <li><code>Academic</code></li> </ul> <p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/Motivational/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Motivational/#methods","title":"Methods","text":""},{"location":"api/decorators/Motivational/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(intensity=moderate, focus=balanced, actionable=True) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Motivational decorator.</p> <p>Args:     intensity: The level of motivational energy and enthusiasm     focus: The primary motivational approach to emphasize     actionable: Whether to include specific actionable steps or only inspirational content</p> <p>Returns:     None</p>"},{"location":"api/decorators/Motivational/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Motivational/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Motivational/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Motivational/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Motivational/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Motivational/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Motivational/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Motivational/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Narrative/","title":"Decorator <code>Narrative</code>","text":"<p>Version: 1.0.0</p> <p>Structures the response as a story-based delivery with narrative elements. This decorator employs storytelling techniques to make information more engaging, memorable, and contextually rich.</p>"},{"location":"api/decorators/Narrative/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Narrative/#structure","title":"<code>structure</code>","text":"<p>Type: enum Required: No Default: <code>classic</code></p> <p>The narrative structure to employ</p> <p>Allowed values:</p> <ul> <li><code>classic</code></li> <li><code>nonlinear</code></li> <li><code>case-study</code></li> </ul>"},{"location":"api/decorators/Narrative/#characters","title":"<code>characters</code>","text":"<p>Type: boolean Required: No Default: <code>True</code></p> <p>Whether to include character elements in the narrative</p>"},{"location":"api/decorators/Narrative/#length","title":"<code>length</code>","text":"<p>Type: enum Required: No Default: <code>moderate</code></p> <p>The relative length of the narrative</p> <p>Allowed values:</p> <ul> <li><code>brief</code></li> <li><code>moderate</code></li> <li><code>extended</code></li> </ul>"},{"location":"api/decorators/Narrative/#examples","title":"Examples","text":""},{"location":"api/decorators/Narrative/#classic-narrative-structure-to-explain-a-concept","title":"Classic narrative structure to explain a concept","text":"<pre><code>+++Narrative\nExplain how the stock market works.\n</code></pre> <p>Result:</p> <p>Explains the stock market through a classic narrative structure, introducing character elements and following a traditional story arc</p>"},{"location":"api/decorators/Narrative/#brief-case-study-without-character-elements","title":"Brief case study without character elements","text":"<pre><code>+++Narrative(structure=case-study, characters=false, length=brief)\nDescribe the impact of social media on mental health.\n</code></pre> <p>Result:</p> <p>Presents a concise case study narrative about social media's impact on mental health, focusing on situations and outcomes without personified characters</p>"},{"location":"api/decorators/Narrative/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/Narrative/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Narrative/#methods","title":"Methods","text":""},{"location":"api/decorators/Narrative/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(structure=classic, characters=True, length=moderate) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Narrative decorator.</p> <p>Args:     structure: The narrative structure to employ     characters: Whether to include character elements in the narrative     length: The relative length of the narrative</p> <p>Returns:     None</p>"},{"location":"api/decorators/Narrative/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Narrative/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Narrative/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Narrative/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Narrative/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Narrative/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Narrative/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Narrative/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/NegativeSpace/","title":"Decorator <code>NegativeSpace</code>","text":"<p>Version: 1.0.0</p> <p>Focuses on analyzing what is not explicitly stated, implied, or missing from a topic or question. This decorator explores the 'negative space' by identifying unexplored angles, implicit assumptions, unasked questions, and contextual elements that may have been overlooked.</p>"},{"location":"api/decorators/NegativeSpace/#parameters","title":"Parameters","text":""},{"location":"api/decorators/NegativeSpace/#focus","title":"<code>focus</code>","text":"<p>Type: enum Required: No Default: <code>comprehensive</code></p> <p>The specific aspect of negative space to emphasize</p> <p>Allowed values:</p> <ul> <li><code>implications</code></li> <li><code>missing</code></li> <li><code>unstated</code></li> <li><code>comprehensive</code></li> </ul>"},{"location":"api/decorators/NegativeSpace/#depth","title":"<code>depth</code>","text":"<p>Type: enum Required: No Default: <code>moderate</code></p> <p>How deeply to explore the negative space</p> <p>Allowed values:</p> <ul> <li><code>surface</code></li> <li><code>moderate</code></li> <li><code>deep</code></li> </ul>"},{"location":"api/decorators/NegativeSpace/#structure","title":"<code>structure</code>","text":"<p>Type: enum Required: No Default: <code>integrated</code></p> <p>How to present the negative space analysis</p> <p>Allowed values:</p> <ul> <li><code>before</code></li> <li><code>after</code></li> <li><code>integrated</code></li> <li><code>separate</code></li> </ul>"},{"location":"api/decorators/NegativeSpace/#examples","title":"Examples","text":""},{"location":"api/decorators/NegativeSpace/#basic-comprehensive-negative-space-analysis","title":"Basic comprehensive negative space analysis","text":"<pre><code>+++NegativeSpace\nDiscuss the impact of social media on society.\n</code></pre> <p>Result:</p> <p>Provides a discussion of social media's societal impact while integrating analysis of unstated assumptions, overlooked factors, and typically unaddressed implications</p>"},{"location":"api/decorators/NegativeSpace/#deep-negative-space-analysis-focused-on-missing-elements","title":"Deep negative space analysis focused on missing elements","text":"<pre><code>+++NegativeSpace(focus=missing, depth=deep, structure=after)\nExplain the current approaches to artificial intelligence safety.\n</code></pre> <p>Result:</p> <p>First explains current AI safety approaches, then provides a separate deep analysis of missing elements in the discussion, such as unstudied risks, overlooked stakeholders, and neglected scenarios</p>"},{"location":"api/decorators/NegativeSpace/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/NegativeSpace/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/NegativeSpace/#methods","title":"Methods","text":""},{"location":"api/decorators/NegativeSpace/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(focus=comprehensive, depth=moderate, structure=integrated) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the NegativeSpace decorator.</p> <p>Args:     focus: The specific aspect of negative space to emphasize     depth: How deeply to explore the negative space     structure: How to present the negative space analysis</p> <p>Returns:     None</p>"},{"location":"api/decorators/NegativeSpace/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/NegativeSpace/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/NegativeSpace/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/NegativeSpace/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/NegativeSpace/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/NegativeSpace/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/NegativeSpace/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/NegativeSpace/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Nested/","title":"Decorator <code>Nested</code>","text":"<p>Version: 1.0.0</p> <p>Organizes information in a deeply hierarchical structure with multiple levels of nesting. This decorator is ideal for complex topics with many subcategories, helping to maintain clarity through consistent organization patterns.</p>"},{"location":"api/decorators/Nested/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Nested/#depth","title":"<code>depth</code>","text":"<p>Type: number Required: No Default: <code>3</code></p> <p>Maximum nesting level of the hierarchy</p>"},{"location":"api/decorators/Nested/#style","title":"<code>style</code>","text":"<p>Type: enum Required: No Default: <code>mixed</code></p> <p>Visual style for hierarchical levels</p> <p>Allowed values:</p> <ul> <li><code>bullet</code></li> <li><code>numbered</code></li> <li><code>mixed</code></li> </ul>"},{"location":"api/decorators/Nested/#collapsible","title":"<code>collapsible</code>","text":"<p>Type: boolean Required: No</p> <p>Whether to suggest the hierarchy could be rendered as collapsible sections (for UI implementations)</p>"},{"location":"api/decorators/Nested/#examples","title":"Examples","text":""},{"location":"api/decorators/Nested/#deep-hierarchical-organization-of-a-complex-domain","title":"Deep hierarchical organization of a complex domain","text":"<pre><code>+++Nested\nExplain the classification of living organisms.\n</code></pre> <p>Result:</p> <p>Presents taxonomy in a nested hierarchy with domains, kingdoms, phyla, etc., using mixed notation styles for different levels</p>"},{"location":"api/decorators/Nested/#maximum-depth-collapsible-structure-for-reference-material","title":"Maximum depth collapsible structure for reference material","text":"<pre><code>+++Nested(depth=5, style=bullet, collapsible=true)\nProvide a comprehensive overview of programming paradigms.\n</code></pre> <p>Result:</p> <p>Creates a 5-level deep bullet-point hierarchy of programming paradigms, designed to be rendered as collapsible sections</p>"},{"location":"api/decorators/Nested/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/Nested/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Nested/#methods","title":"Methods","text":""},{"location":"api/decorators/Nested/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(depth=3, style=mixed, collapsible=False) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Nested decorator.</p> <p>Args:     depth: Maximum nesting level of the hierarchy     style: Visual style for hierarchical levels     collapsible: Whether to suggest the hierarchy could be rendered as collapsible sections (for UI implementations)</p> <p>Returns:     None</p>"},{"location":"api/decorators/Nested/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Nested/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Nested/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Nested/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Nested/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Nested/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Nested/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Nested/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Outline/","title":"Decorator <code>Outline</code>","text":"<p>Version: 1.0.0</p> <p>Structures the response as a hierarchical outline with headings and subheadings. This decorator organizes information in a clear, logical structure that highlights relationships between main topics and subtopics.</p>"},{"location":"api/decorators/Outline/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Outline/#depth","title":"<code>depth</code>","text":"<p>Type: number Required: No Default: <code>3</code></p> <p>Maximum nesting level of the outline</p>"},{"location":"api/decorators/Outline/#style","title":"<code>style</code>","text":"<p>Type: enum Required: No Default: <code>numeric</code></p> <p>Numbering or bullet style for the outline</p> <p>Allowed values:</p> <ul> <li><code>numeric</code></li> <li><code>bullet</code></li> <li><code>roman</code></li> <li><code>alpha</code></li> <li><code>mixed</code></li> </ul>"},{"location":"api/decorators/Outline/#detailed","title":"<code>detailed</code>","text":"<p>Type: boolean Required: No</p> <p>Whether to include brief explanations under each outline point</p>"},{"location":"api/decorators/Outline/#examples","title":"Examples","text":""},{"location":"api/decorators/Outline/#simple-numeric-outline-of-a-complex-topic","title":"Simple numeric outline of a complex topic","text":"<pre><code>+++Outline\nExplain the structure of the United States government.\n</code></pre> <p>Result:</p> <p>Presents the US government structure as a numbered outline with up to 3 levels of hierarchy</p>"},{"location":"api/decorators/Outline/#detailed-outline-with-mixed-notation-and-deep-hierarchy","title":"Detailed outline with mixed notation and deep hierarchy","text":"<pre><code>+++Outline(style=mixed, depth=5, detailed=true)\nProvide a comprehensive overview of machine learning techniques.\n</code></pre> <p>Result:</p> <p>Creates a 5-level deep outline using mixed notation (numbers, letters, roman numerals) with brief explanations under each point, covering machine learning techniques</p>"},{"location":"api/decorators/Outline/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/Outline/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Outline/#methods","title":"Methods","text":""},{"location":"api/decorators/Outline/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(depth=3, style=numeric, detailed=False) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Outline decorator.</p> <p>Args:     depth: Maximum nesting level of the outline     style: Numbering or bullet style for the outline     detailed: Whether to include brief explanations under each outline point</p> <p>Returns:     None</p>"},{"location":"api/decorators/Outline/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Outline/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Outline/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Outline/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Outline/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Outline/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Outline/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Outline/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/OutputFormat/","title":"Decorator <code>OutputFormat</code>","text":"<p>Version: 1.0.0</p> <p>Specifies the format of the AI's response. This decorator ensures the output follows a specific format, making it easier to parse, display, or process the response in a consistent way.</p>"},{"location":"api/decorators/OutputFormat/#parameters","title":"Parameters","text":""},{"location":"api/decorators/OutputFormat/#format","title":"<code>format</code>","text":"<p>Type: enum Required: Yes Default: <code>markdown</code></p> <p>The format to use for the response</p> <p>Allowed values:</p> <ul> <li><code>json</code></li> <li><code>markdown</code></li> <li><code>yaml</code></li> <li><code>xml</code></li> <li><code>plaintext</code></li> </ul>"},{"location":"api/decorators/OutputFormat/#examples","title":"Examples","text":""},{"location":"api/decorators/OutputFormat/#json-output-for-structured-data","title":"JSON output for structured data","text":"<pre><code>+++OutputFormat(format=json)\nList the top 5 programming languages and their key features.\n</code></pre> <p>Result:</p> <p>Returns a JSON object with programming languages and their features</p>"},{"location":"api/decorators/OutputFormat/#markdown-output-for-formatted-text","title":"Markdown output for formatted text","text":"<pre><code>+++OutputFormat(format=markdown)\nWrite a tutorial on setting up a React project.\n</code></pre> <p>Result:</p> <p>Returns a nicely formatted markdown document with headings, code blocks, and lists</p>"},{"location":"api/decorators/OutputFormat/#compatibility","title":"Compatibility","text":"<p>Conflicts with:</p> <ul> <li><code>Schema</code></li> <li><code>TableFormat</code></li> <li><code>Bullet</code></li> </ul> <p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/OutputFormat/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/OutputFormat/#methods","title":"Methods","text":""},{"location":"api/decorators/OutputFormat/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(format) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the OutputFormat decorator.</p> <p>Args:     format: The format to use for the response</p> <p>Returns:     None</p>"},{"location":"api/decorators/OutputFormat/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/OutputFormat/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/OutputFormat/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/OutputFormat/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/OutputFormat/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/OutputFormat/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/OutputFormat/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/OutputFormat/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Override/","title":"Decorator <code>Override</code>","text":"<p>Version: 1.0.0</p> <p>A meta-decorator that overrides the default parameters or behaviors of other decorators. This enables customization of standard decorators without modifying their definitions, allowing for reuse of established patterns with specific adjustments.</p>"},{"location":"api/decorators/Override/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Override/#decorator","title":"<code>decorator</code>","text":"<p>Type: string Required: Yes</p> <p>The specific decorator whose behavior to override</p>"},{"location":"api/decorators/Override/#parameters_1","title":"<code>parameters</code>","text":"<p>Type: string Required: No</p> <p>JSON string specifying the parameters to override (e.g., '{\"depth\": \"comprehensive\", \"focus\": \"methodology\"}')</p>"},{"location":"api/decorators/Override/#behavior","title":"<code>behavior</code>","text":"<p>Type: string Required: No</p> <p>Optional custom behavior modification instructions that override the standard decorator interpretation</p>"},{"location":"api/decorators/Override/#examples","title":"Examples","text":""},{"location":"api/decorators/Override/#basic-parameter-override-for-a-standard-decorator","title":"Basic parameter override for a standard decorator","text":"<pre><code>+++Override(decorator=StepByStep, parameters={\"numbered\": true, \"steps\": 7})\nExplain how to bake bread.\n</code></pre> <p>Result:</p> <p>Applies the StepByStep decorator to explain bread baking, but overrides its default parameters to ensure exactly 7 numbered steps</p>"},{"location":"api/decorators/Override/#complex-behavior-override-with-custom-instructions","title":"Complex behavior override with custom instructions","text":"<pre><code>+++Override(decorator=Debate, parameters={\"perspectives\": 2}, behavior=instead of presenting neutral perspectives, adopt strongly opposing viewpoints with clear advocacy for each position)\nDiscuss the ethics of gene editing.\n</code></pre> <p>Result:</p> <p>Uses the Debate decorator structure for discussing gene editing ethics, but modifies its standard neutral approach to present strongly advocated opposing positions</p>"},{"location":"api/decorators/Override/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> </ul>"},{"location":"api/decorators/Override/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Override/#methods","title":"Methods","text":""},{"location":"api/decorators/Override/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(decorator, parameters, behavior) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Override decorator.</p> <p>Args:     decorator: The specific decorator whose behavior to override     parameters: JSON string specifying the parameters to override (e.g., '{\"depth\": \"comprehensive\", \"focus\": \"methodology\"}')     behavior: Optional custom behavior modification instructions that override the standard decorator interpretation</p> <p>Returns:     None</p>"},{"location":"api/decorators/Override/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Override/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Override/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Override/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Override/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Override/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Override/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Override/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/PeerReview/","title":"Decorator <code>PeerReview</code>","text":"<p>Version: 1.0.0</p> <p>Augments the response with a simulated peer review of the content. This decorator enhances critical thinking by evaluating the response's strengths, weaknesses, methodological soundness, and potential improvements as an academic reviewer would.</p>"},{"location":"api/decorators/PeerReview/#parameters","title":"Parameters","text":""},{"location":"api/decorators/PeerReview/#criteria","title":"<code>criteria</code>","text":"<p>Type: enum Required: No Default: <code>all</code></p> <p>Primary criteria to focus on in the review</p> <p>Allowed values:</p> <ul> <li><code>accuracy</code></li> <li><code>methodology</code></li> <li><code>limitations</code></li> <li><code>completeness</code></li> <li><code>all</code></li> </ul>"},{"location":"api/decorators/PeerReview/#style","title":"<code>style</code>","text":"<p>Type: enum Required: No Default: <code>balanced</code></p> <p>The tone and approach of the peer review</p> <p>Allowed values:</p> <ul> <li><code>constructive</code></li> <li><code>critical</code></li> <li><code>balanced</code></li> </ul>"},{"location":"api/decorators/PeerReview/#position","title":"<code>position</code>","text":"<p>Type: enum Required: No Default: <code>after</code></p> <p>Where to place the peer review relative to the main content</p> <p>Allowed values:</p> <ul> <li><code>after</code></li> <li><code>before</code></li> <li><code>alongside</code></li> </ul>"},{"location":"api/decorators/PeerReview/#examples","title":"Examples","text":""},{"location":"api/decorators/PeerReview/#basic-peer-review-of-content-accuracy","title":"Basic peer review of content accuracy","text":"<pre><code>+++PeerReview(criteria=accuracy)\nExplain the current understanding of dark matter in astrophysics.\n</code></pre> <p>Result:</p> <p>Provides an explanation of dark matter, followed by a balanced peer review focusing on the accuracy of the information presented</p>"},{"location":"api/decorators/PeerReview/#critical-peer-review-of-multiple-aspects-shown-alongside-content","title":"Critical peer review of multiple aspects, shown alongside content","text":"<pre><code>+++PeerReview(criteria=all, style=critical, position=alongside)\nAnalyze the methodology used in Stanford's prison experiment.\n</code></pre> <p>Result:</p> <p>Delivers an analysis of the Stanford prison experiment methodology with a parallel critical peer review addressing accuracy, methodology, limitations, and completeness</p>"},{"location":"api/decorators/PeerReview/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/PeerReview/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/PeerReview/#methods","title":"Methods","text":""},{"location":"api/decorators/PeerReview/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(criteria=all, style=balanced, position=after) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the PeerReview decorator.</p> <p>Args:     criteria: Primary criteria to focus on in the review     style: The tone and approach of the peer review     position: Where to place the peer review relative to the main content</p> <p>Returns:     None</p>"},{"location":"api/decorators/PeerReview/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/PeerReview/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/PeerReview/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/PeerReview/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/PeerReview/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/PeerReview/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/PeerReview/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/PeerReview/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Persona/","title":"Decorator <code>Persona</code>","text":"<p>Version: 1.0.0</p> <p>Adapts the response to reflect the perspective and concerns of a specific persona. This decorator helps explore how different stakeholders or personality types would view a situation or topic.</p>"},{"location":"api/decorators/Persona/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Persona/#role","title":"<code>role</code>","text":"<p>Type: string Required: Yes</p> <p>The specific persona or stakeholder role to adopt</p>"},{"location":"api/decorators/Persona/#traits","title":"<code>traits</code>","text":"<p>Type: array Required: No</p> <p>Key personality traits or characteristics of the persona</p>"},{"location":"api/decorators/Persona/#goals","title":"<code>goals</code>","text":"<p>Type: array Required: No</p> <p>Primary goals or concerns of the persona</p>"},{"location":"api/decorators/Persona/#examples","title":"Examples","text":""},{"location":"api/decorators/Persona/#response-from-the-perspective-of-a-specific-stakeholder","title":"Response from the perspective of a specific stakeholder","text":"<pre><code>+++Persona(role=customer)\nWhat are the implications of implementing a new subscription model?\n</code></pre> <p>Result:</p> <p>Analyzes the subscription model from a customer's perspective, focusing on value, convenience, and potential concerns</p>"},{"location":"api/decorators/Persona/#detailed-persona-with-specific-traits-and-goals","title":"Detailed persona with specific traits and goals","text":"<pre><code>+++Persona(role=senior software engineer, traits=[pragmatic,detail-oriented,experienced], goals=[code quality,maintainability,efficiency])\nEvaluate the proposal to switch from monolith to microservices.\n</code></pre> <p>Result:</p> <p>Provides a detailed analysis of the monolith-to-microservices transition from the perspective of a pragmatic, detail-oriented senior engineer who prioritizes code quality and maintainability</p>"},{"location":"api/decorators/Persona/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/Persona/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Persona/#methods","title":"Methods","text":""},{"location":"api/decorators/Persona/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(role, traits, goals) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Persona decorator.</p> <p>Args:     role: The specific persona or stakeholder role to adopt     traits: Key personality traits or characteristics of the persona     goals: Primary goals or concerns of the persona</p> <p>Returns:     None</p>"},{"location":"api/decorators/Persona/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Persona/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Persona/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Persona/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Persona/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Persona/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Persona/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Persona/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Precision/","title":"Decorator <code>Precision</code>","text":"<p>Version: 1.0.0</p> <p>Enhances responses with exact, specific, and precisely defined information. This decorator prioritizes accuracy in measurements, terms, definitions, and claims, avoiding vague language in favor of concrete specificity.</p>"},{"location":"api/decorators/Precision/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Precision/#level","title":"<code>level</code>","text":"<p>Type: enum Required: No Default: <code>high</code></p> <p>The degree of precision to apply</p> <p>Allowed values:</p> <ul> <li><code>moderate</code></li> <li><code>high</code></li> <li><code>scientific</code></li> </ul>"},{"location":"api/decorators/Precision/#units","title":"<code>units</code>","text":"<p>Type: boolean Required: No Default: <code>True</code></p> <p>Whether to consistently provide units for all measurements</p>"},{"location":"api/decorators/Precision/#definitions","title":"<code>definitions</code>","text":"<p>Type: boolean Required: No</p> <p>Whether to include precise definitions for key terms</p>"},{"location":"api/decorators/Precision/#examples","title":"Examples","text":""},{"location":"api/decorators/Precision/#basic-precise-explanation-of-a-scientific-concept","title":"Basic precise explanation of a scientific concept","text":"<pre><code>+++Precision\nExplain how vaccines work.\n</code></pre> <p>Result:</p> <p>Provides an explanation of vaccine mechanisms using precise terminology, specific examples, and accurate measurements where relevant</p>"},{"location":"api/decorators/Precision/#highly-precise-response-with-scientific-rigor","title":"Highly precise response with scientific rigor","text":"<pre><code>+++Precision(level=scientific, units=true, definitions=true)\nDescribe the process of photosynthesis.\n</code></pre> <p>Result:</p> <p>Delivers a scientifically precise explanation of photosynthesis with exact units for all measurements, precise definitions for key terms, and specific chemical reactions</p>"},{"location":"api/decorators/Precision/#compatibility","title":"Compatibility","text":"<p>Conflicts with:</p> <ul> <li><code>ELI5</code></li> </ul> <p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/Precision/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Precision/#methods","title":"Methods","text":""},{"location":"api/decorators/Precision/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(level=high, units=True, definitions=False) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Precision decorator.</p> <p>Args:     level: The degree of precision to apply     units: Whether to consistently provide units for all measurements     definitions: Whether to include precise definitions for key terms</p> <p>Returns:     None</p>"},{"location":"api/decorators/Precision/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Precision/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Precision/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Precision/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Precision/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Precision/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Precision/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Precision/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Prioritize/","title":"Decorator <code>Prioritize</code>","text":"<p>Version: 1.0.0</p> <p>Structures the response by ranking information according to importance, urgency, or impact. This decorator helps identify the most critical aspects of a topic and presents information in a hierarchical manner from most to least important.</p>"},{"location":"api/decorators/Prioritize/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Prioritize/#criteria","title":"<code>criteria</code>","text":"<p>Type: string Required: No Default: <code>importance</code></p> <p>The specific criterion to use for prioritization (e.g., importance, urgency, ROI)</p>"},{"location":"api/decorators/Prioritize/#count","title":"<code>count</code>","text":"<p>Type: number Required: No Default: <code>5</code></p> <p>Number of prioritized items to include</p>"},{"location":"api/decorators/Prioritize/#showrationale","title":"<code>showRationale</code>","text":"<p>Type: boolean Required: No</p> <p>Whether to explain the reasoning behind each priority ranking</p>"},{"location":"api/decorators/Prioritize/#examples","title":"Examples","text":""},{"location":"api/decorators/Prioritize/#basic-prioritization-of-key-factors","title":"Basic prioritization of key factors","text":"<pre><code>+++Prioritize\nWhat factors should be considered when designing a mobile app?\n</code></pre> <p>Result:</p> <p>Presents the top 5 factors for mobile app design, ranked by importance from most to least critical</p>"},{"location":"api/decorators/Prioritize/#detailed-prioritization-with-custom-criteria-and-rationale","title":"Detailed prioritization with custom criteria and rationale","text":"<pre><code>+++Prioritize(criteria=ROI, count=7, showRationale=true)\nWhat marketing strategies should our startup focus on?\n</code></pre> <p>Result:</p> <p>Provides 7 marketing strategies ranked by return on investment, with explanations for each ranking position</p>"},{"location":"api/decorators/Prioritize/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/Prioritize/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Prioritize/#methods","title":"Methods","text":""},{"location":"api/decorators/Prioritize/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(criteria=importance, count=5, showRationale=False) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Prioritize decorator.</p> <p>Args:     criteria: The specific criterion to use for prioritization (e.g., importance, urgency, ROI)     count: Number of prioritized items to include     showRationale: Whether to explain the reasoning behind each priority ranking</p> <p>Returns:     None</p>"},{"location":"api/decorators/Prioritize/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Prioritize/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Prioritize/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Prioritize/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Prioritize/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Prioritize/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Prioritize/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Prioritize/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Priority/","title":"Decorator <code>Priority</code>","text":"<p>Version: 1.0.0</p> <p>A meta-decorator that establishes a precedence hierarchy among multiple decorators. This allows explicit control over which decorator's parameters or behaviors take precedence when conflicts arise, overriding the default last-decorator-wins behavior.</p>"},{"location":"api/decorators/Priority/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Priority/#decorators","title":"<code>decorators</code>","text":"<p>Type: array Required: Yes</p> <p>Ordered list of decorators by priority (highest priority first)</p>"},{"location":"api/decorators/Priority/#explicit","title":"<code>explicit</code>","text":"<p>Type: boolean Required: No</p> <p>Whether to explicitly mention overridden behaviors in the response</p>"},{"location":"api/decorators/Priority/#mode","title":"<code>mode</code>","text":"<p>Type: enum Required: No Default: <code>override</code></p> <p>How to handle conflicts between decorators</p> <p>Allowed values:</p> <ul> <li><code>override</code></li> <li><code>merge</code></li> <li><code>cascade</code></li> </ul>"},{"location":"api/decorators/Priority/#examples","title":"Examples","text":""},{"location":"api/decorators/Priority/#basic-priority-ordering-between-potentially-conflicting-decorators","title":"Basic priority ordering between potentially conflicting decorators","text":"<pre><code>+++Priority(decorators=[Concise,Detailed])\nExplain quantum computing.\n</code></pre> <p>Result:</p> <p>Applies both decorators, but when conflicts arise, Concise takes precedence over Detailed, resulting in a more concise explanation of quantum computing</p>"},{"location":"api/decorators/Priority/#complex-priority-with-explicit-conflict-resolution","title":"Complex priority with explicit conflict resolution","text":"<pre><code>+++Priority(decorators=[Academic,Creative,StepByStep], explicit=true, mode=cascade)\nExplain the water cycle.\n</code></pre> <p>Result:</p> <p>Implements a cascading priority where Academic style dominates, with Creative elements where they don't conflict with Academic style, and StepByStep structure throughout, explicitly noting where decorator behaviors were modified due to conflicts</p>"},{"location":"api/decorators/Priority/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> </ul>"},{"location":"api/decorators/Priority/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Priority/#methods","title":"Methods","text":""},{"location":"api/decorators/Priority/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(decorators, explicit=False, mode=override) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Priority decorator.</p> <p>Args:     decorators: Ordered list of decorators by priority (highest priority first)     explicit: Whether to explicitly mention overridden behaviors in the response     mode: How to handle conflicts between decorators</p> <p>Returns:     None</p>"},{"location":"api/decorators/Priority/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Priority/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Priority/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Priority/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Priority/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Priority/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Priority/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Priority/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Professional/","title":"Decorator <code>Professional</code>","text":"<p>Version: 1.0.0</p> <p>Adapts the response to use business-oriented language appropriate for professional contexts. This decorator generates content using formal business terminology, clear and concise phrasing, and industry-appropriate jargon when relevant.</p>"},{"location":"api/decorators/Professional/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Professional/#industry","title":"<code>industry</code>","text":"<p>Type: string Required: No Default: <code>general</code></p> <p>The specific industry context to adapt the language for</p>"},{"location":"api/decorators/Professional/#formality","title":"<code>formality</code>","text":"<p>Type: enum Required: No Default: <code>standard</code></p> <p>The level of formality to maintain in the response</p> <p>Allowed values:</p> <ul> <li><code>standard</code></li> <li><code>high</code></li> <li><code>executive</code></li> </ul>"},{"location":"api/decorators/Professional/#examples","title":"Examples","text":""},{"location":"api/decorators/Professional/#standard-professional-business-communication","title":"Standard professional business communication","text":"<pre><code>+++Professional\nExplain the benefits of implementing a CRM system.\n</code></pre> <p>Result:</p> <p>Delivers a clear, professional explanation of CRM benefits using business-appropriate language and structure</p>"},{"location":"api/decorators/Professional/#industry-specific-executive-level-communication","title":"Industry-specific executive-level communication","text":"<pre><code>+++Professional(industry=healthcare, formality=executive)\nSummarize the impact of telehealth adoption on patient outcomes.\n</code></pre> <p>Result:</p> <p>Produces an executive-level analysis of telehealth impacts using healthcare industry terminology and highly formal business language</p>"},{"location":"api/decorators/Professional/#compatibility","title":"Compatibility","text":"<p>Conflicts with:</p> <ul> <li><code>ELI5</code></li> <li><code>Creative</code></li> </ul> <p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/Professional/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Professional/#methods","title":"Methods","text":""},{"location":"api/decorators/Professional/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(industry=general, formality=standard) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Professional decorator.</p> <p>Args:     industry: The specific industry context to adapt the language for     formality: The level of formality to maintain in the response</p> <p>Returns:     None</p>"},{"location":"api/decorators/Professional/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Professional/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Professional/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Professional/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Professional/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Professional/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Professional/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Professional/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/QualityMetrics/","title":"Decorator <code>QualityMetrics</code>","text":"<p>Version: 1.0.0</p> <p>Applies specific quality measurements to evaluate content against defined criteria. This decorator enhances verification by providing quantifiable assessments of aspects like accuracy, completeness, clarity, or other custom metrics.</p>"},{"location":"api/decorators/QualityMetrics/#parameters","title":"Parameters","text":""},{"location":"api/decorators/QualityMetrics/#metrics","title":"<code>metrics</code>","text":"<p>Type: array Required: No</p> <p>Specific quality metrics to measure (e.g., accuracy, completeness, clarity, usefulness)</p>"},{"location":"api/decorators/QualityMetrics/#scale","title":"<code>scale</code>","text":"<p>Type: enum Required: No Default: <code>1-5</code></p> <p>Rating scale to use for evaluations</p> <p>Allowed values:</p> <ul> <li><code>1-5</code></li> <li><code>1-10</code></li> <li><code>percentage</code></li> <li><code>qualitative</code></li> </ul>"},{"location":"api/decorators/QualityMetrics/#explanation","title":"<code>explanation</code>","text":"<p>Type: boolean Required: No Default: <code>True</code></p> <p>Whether to provide detailed explanations for each metric score</p>"},{"location":"api/decorators/QualityMetrics/#examples","title":"Examples","text":""},{"location":"api/decorators/QualityMetrics/#basic-quality-assessment-of-an-analysis","title":"Basic quality assessment of an analysis","text":"<pre><code>+++QualityMetrics\nMy analysis of the financial market trends is as follows...\n</code></pre> <p>Result:</p> <p>Provides the analysis of financial market trends, followed by 1-5 ratings across standard quality metrics with explanations for each score</p>"},{"location":"api/decorators/QualityMetrics/#specific-custom-metrics-with-detailed-qualitative-assessment","title":"Specific custom metrics with detailed qualitative assessment","text":"<pre><code>+++QualityMetrics(metrics=[factual accuracy,predictive value,consideration of alternatives,logical flow], scale=qualitative, explanation=true)\nHere's my policy proposal for urban housing...\n</code></pre> <p>Result:</p> <p>Delivers the policy proposal, followed by qualitative assessments (poor/fair/good/excellent) of the four specified metrics, with detailed explanations for each evaluation</p>"},{"location":"api/decorators/QualityMetrics/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/QualityMetrics/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/QualityMetrics/#methods","title":"Methods","text":""},{"location":"api/decorators/QualityMetrics/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(metrics, scale=1-5, explanation=True) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the QualityMetrics decorator.</p> <p>Args:     metrics: Specific quality metrics to measure (e.g., accuracy, completeness, clarity, usefulness)     scale: Rating scale to use for evaluations     explanation: Whether to provide detailed explanations for each metric score</p> <p>Returns:     None</p>"},{"location":"api/decorators/QualityMetrics/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/QualityMetrics/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/QualityMetrics/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/QualityMetrics/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/QualityMetrics/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/QualityMetrics/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/QualityMetrics/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/QualityMetrics/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Reasoning/","title":"Decorator <code>Reasoning</code>","text":"<p>Version: 1.0.0</p> <p>Modifies the AI's response to provide explicit reasoning paths before reaching conclusions. This decorator encourages the model to show its thought process, making responses more transparent and trustworthy.</p>"},{"location":"api/decorators/Reasoning/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Reasoning/#depth","title":"<code>depth</code>","text":"<p>Type: enum Required: No Default: <code>moderate</code></p> <p>The level of detail in the reasoning process</p> <p>Allowed values:</p> <ul> <li><code>basic</code></li> <li><code>moderate</code></li> <li><code>comprehensive</code></li> </ul>"},{"location":"api/decorators/Reasoning/#examples","title":"Examples","text":""},{"location":"api/decorators/Reasoning/#basic-reasoning-for-a-simple-question","title":"Basic reasoning for a simple question","text":"<pre><code>+++Reasoning(depth=basic)\nWhat is the best programming language for beginners?\n</code></pre> <p>Result:</p> <p>Provides a brief explanation of key factors before recommending a language</p>"},{"location":"api/decorators/Reasoning/#comprehensive-analysis-of-a-complex-topic","title":"Comprehensive analysis of a complex topic","text":"<pre><code>+++Reasoning(depth=comprehensive)\nWhat are the implications of quantum computing for cybersecurity?\n</code></pre> <p>Result:</p> <p>Delivers an in-depth analysis covering multiple aspects and their interconnections</p>"},{"location":"api/decorators/Reasoning/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/Reasoning/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Reasoning/#methods","title":"Methods","text":""},{"location":"api/decorators/Reasoning/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(depth=moderate) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Reasoning decorator.</p> <p>Args:     depth: The level of detail in the reasoning process</p> <p>Returns:     None</p>"},{"location":"api/decorators/Reasoning/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Reasoning/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Reasoning/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Reasoning/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Reasoning/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Reasoning/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Reasoning/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Reasoning/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/RedTeam/","title":"Decorator <code>RedTeam</code>","text":"<p>Version: 1.0.0</p> <p>Applies adversarial analysis to test assumptions, identify vulnerabilities, and strengthen proposals by actively looking for flaws. This decorator simulates how an opponent or critic would evaluate and attack ideas, plans, or arguments.</p>"},{"location":"api/decorators/RedTeam/#parameters","title":"Parameters","text":""},{"location":"api/decorators/RedTeam/#strength","title":"<code>strength</code>","text":"<p>Type: enum Required: No Default: <code>moderate</code></p> <p>How aggressive or challenging the red team analysis should be</p> <p>Allowed values:</p> <ul> <li><code>moderate</code></li> <li><code>aggressive</code></li> <li><code>steelman</code></li> </ul>"},{"location":"api/decorators/RedTeam/#focus","title":"<code>focus</code>","text":"<p>Type: array Required: No</p> <p>Specific aspects to focus the red team analysis on</p>"},{"location":"api/decorators/RedTeam/#constructive","title":"<code>constructive</code>","text":"<p>Type: boolean Required: No Default: <code>True</code></p> <p>Whether to include constructive suggestions for improvement after critiques</p>"},{"location":"api/decorators/RedTeam/#examples","title":"Examples","text":""},{"location":"api/decorators/RedTeam/#basic-red-team-analysis-of-a-business-proposal","title":"Basic red team analysis of a business proposal","text":"<pre><code>+++RedTeam\nHere's our plan to launch a new subscription service...\n</code></pre> <p>Result:</p> <p>Analyzes the subscription service plan from an adversarial perspective, identifying potential weaknesses, oversights, and challenges</p>"},{"location":"api/decorators/RedTeam/#aggressive-red-team-analysis-with-specific-focus-areas","title":"Aggressive red team analysis with specific focus areas","text":"<pre><code>+++RedTeam(strength=aggressive, focus=[security,scalability,market-fit], constructive=true)\nReview our new authentication system design.\n</code></pre> <p>Result:</p> <p>Aggressively challenges the authentication system design, specifically targeting security, scalability, and market-fit concerns, followed by constructive improvement suggestions</p>"},{"location":"api/decorators/RedTeam/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/RedTeam/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/RedTeam/#methods","title":"Methods","text":""},{"location":"api/decorators/RedTeam/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(strength=moderate, focus, constructive=True) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the RedTeam decorator.</p> <p>Args:     strength: How aggressive or challenging the red team analysis should be     focus: Specific aspects to focus the red team analysis on     constructive: Whether to include constructive suggestions for improvement after critiques</p> <p>Returns:     None</p>"},{"location":"api/decorators/RedTeam/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/RedTeam/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/RedTeam/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/RedTeam/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/RedTeam/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/RedTeam/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/RedTeam/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/RedTeam/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Refine/","title":"Decorator <code>Refine</code>","text":"<p>Version: 1.0.0</p> <p>A meta-decorator that iteratively improves the output based on specified criteria or dimensions. This decorator simulates multiple drafts or revisions of content, with each iteration focusing on enhancing particular aspects of the response.</p>"},{"location":"api/decorators/Refine/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Refine/#iterations","title":"<code>iterations</code>","text":"<p>Type: number Required: No Default: <code>2</code></p> <p>Number of refinement cycles to perform</p>"},{"location":"api/decorators/Refine/#focus","title":"<code>focus</code>","text":"<p>Type: array Required: No</p> <p>Specific aspects to focus on during refinement (e.g., clarity, conciseness, evidence)</p>"},{"location":"api/decorators/Refine/#showprocess","title":"<code>showProcess</code>","text":"<p>Type: boolean Required: No</p> <p>Whether to show the intermediate steps in the refinement process</p>"},{"location":"api/decorators/Refine/#examples","title":"Examples","text":""},{"location":"api/decorators/Refine/#basic-refinement-of-a-complex-explanation","title":"Basic refinement of a complex explanation","text":"<pre><code>+++Refine\nExplain the implications of quantum computing for cybersecurity.\n</code></pre> <p>Result:</p> <p>Provides a refined explanation of quantum computing implications for cybersecurity, with two hidden iterations improving clarity and accuracy</p>"},{"location":"api/decorators/Refine/#detailed-refinement-with-visible-iterations","title":"Detailed refinement with visible iterations","text":"<pre><code>+++Refine(iterations=3, focus=[clarity,evidence,conciseness], showProcess=true)\nAnalyze the economic impacts of artificial intelligence.\n</code></pre> <p>Result:</p> <p>Shows three visible iterations of analyzing AI economic impacts, with each step focusing on improving clarity, strengthening evidence, and enhancing conciseness</p>"},{"location":"api/decorators/Refine/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/Refine/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Refine/#methods","title":"Methods","text":""},{"location":"api/decorators/Refine/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(iterations=2, focus, showProcess=False) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Refine decorator.</p> <p>Args:     iterations: Number of refinement cycles to perform     focus: Specific aspects to focus on during refinement (e.g., clarity, conciseness, evidence)     showProcess: Whether to show the intermediate steps in the refinement process</p> <p>Returns:     None</p>"},{"location":"api/decorators/Refine/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Refine/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Refine/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Refine/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Refine/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Refine/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Refine/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Refine/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Remix/","title":"Decorator <code>Remix</code>","text":"<p>Version: 1.0.0</p> <p>Reframes or adapts content for a different context, purpose, or audience than originally intended. This decorator transforms the presentation style while preserving core information, making it accessible and relevant to specific scenarios or demographics.</p>"},{"location":"api/decorators/Remix/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Remix/#target","title":"<code>target</code>","text":"<p>Type: string Required: Yes</p> <p>The specific audience or context to adapt the content for (e.g., 'executives', 'teenagers', 'technical team', 'sales pitch')</p>"},{"location":"api/decorators/Remix/#preserve","title":"<code>preserve</code>","text":"<p>Type: enum Required: No Default: <code>facts</code></p> <p>What aspects of the original content to prioritize preserving</p> <p>Allowed values:</p> <ul> <li><code>facts</code></li> <li><code>structure</code></li> <li><code>tone</code></li> <li><code>comprehensiveness</code></li> </ul>"},{"location":"api/decorators/Remix/#contrast","title":"<code>contrast</code>","text":"<p>Type: boolean Required: No</p> <p>Whether to highlight differences between the original framing and the remixed version</p>"},{"location":"api/decorators/Remix/#examples","title":"Examples","text":""},{"location":"api/decorators/Remix/#basic-remix-for-a-different-audience","title":"Basic remix for a different audience","text":"<pre><code>+++Remix(target=high school students)\nExplain how neural networks function in artificial intelligence.\n</code></pre> <p>Result:</p> <p>Reframes the technical explanation of neural networks to be accessible and engaging for high school students while preserving the core facts</p>"},{"location":"api/decorators/Remix/#business-remix-with-contrasting-approach","title":"Business remix with contrasting approach","text":"<pre><code>+++Remix(target=board presentation, preserve=comprehensiveness, contrast=true)\nDescribe the technical details of our new software architecture.\n</code></pre> <p>Result:</p> <p>Transforms the technical software architecture description into a board-appropriate presentation format, maintaining comprehensive coverage while highlighting how this differs from a technical explanation</p>"},{"location":"api/decorators/Remix/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/Remix/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Remix/#methods","title":"Methods","text":""},{"location":"api/decorators/Remix/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(target, preserve=facts, contrast=False) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Remix decorator.</p> <p>Args:     target: The specific audience or context to adapt the content for (e.g., 'executives', 'teenagers', 'technical team', 'sales pitch')     preserve: What aspects of the original content to prioritize preserving     contrast: Whether to highlight differences between the original framing and the remixed version</p> <p>Returns:     None</p>"},{"location":"api/decorators/Remix/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Remix/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Remix/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Remix/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Remix/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Remix/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Remix/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Remix/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/RootCause/","title":"Decorator <code>RootCause</code>","text":"<p>Version: 1.0.0</p> <p>Structures the response to systematically analyze underlying causes of problems or situations. This decorator applies formal root cause analysis methodologies to identify fundamental factors rather than just symptoms or immediate causes.</p>"},{"location":"api/decorators/RootCause/#parameters","title":"Parameters","text":""},{"location":"api/decorators/RootCause/#method","title":"<code>method</code>","text":"<p>Type: enum Required: No Default: <code>fivewhys</code></p> <p>The specific root cause analysis methodology to apply</p> <p>Allowed values:</p> <ul> <li><code>fivewhys</code></li> <li><code>fishbone</code></li> <li><code>pareto</code></li> </ul>"},{"location":"api/decorators/RootCause/#depth","title":"<code>depth</code>","text":"<p>Type: number Required: No Default: <code>5</code></p> <p>Level of detail in the analysis (for fivewhys, represents number of 'why' iterations)</p>"},{"location":"api/decorators/RootCause/#examples","title":"Examples","text":""},{"location":"api/decorators/RootCause/#basic-5-whys-analysis-of-a-business-problem","title":"Basic 5 Whys analysis of a business problem","text":"<pre><code>+++RootCause\nWhy is our website's bounce rate increasing?\n</code></pre> <p>Result:</p> <p>Performs a systematic 5 Whys analysis to trace the increasing bounce rate back to its fundamental causes</p>"},{"location":"api/decorators/RootCause/#fishbone-diagram-approach-to-a-technical-issue","title":"Fishbone diagram approach to a technical issue","text":"<pre><code>+++RootCause(method=fishbone)\nWhy do our application servers crash under moderate load?\n</code></pre> <p>Result:</p> <p>Analyzes the server crashes using the fishbone (Ishikawa) methodology, categorizing potential causes into major categories like People, Process, Equipment, etc.</p>"},{"location":"api/decorators/RootCause/#pareto-analysis-with-deeper-investigation","title":"Pareto analysis with deeper investigation","text":"<pre><code>+++RootCause(method=pareto, depth=7)\nWhat factors are causing our manufacturing defects?\n</code></pre> <p>Result:</p> <p>Uses Pareto principle to identify the vital few causes responsible for most manufacturing defects, with an exceptionally thorough analysis</p>"},{"location":"api/decorators/RootCause/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/RootCause/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/RootCause/#methods","title":"Methods","text":""},{"location":"api/decorators/RootCause/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(method=fivewhys, depth=5) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the RootCause decorator.</p> <p>Args:     method: The specific root cause analysis methodology to apply     depth: Level of detail in the analysis (for fivewhys, represents number of 'why' iterations)</p> <p>Returns:     None</p>"},{"location":"api/decorators/RootCause/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/RootCause/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/RootCause/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/RootCause/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/RootCause/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/RootCause/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/RootCause/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/RootCause/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Schema/","title":"Decorator <code>Schema</code>","text":"<p>Version: 1.0.0</p> <p>Defines a custom structure for the AI's response using a specified schema format. This decorator enables precise control over the output structure, ensuring responses follow a consistent, well-defined format optimized for specific use cases or data processing needs.</p>"},{"location":"api/decorators/Schema/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Schema/#schema","title":"<code>schema</code>","text":"<p>Type: string Required: Yes</p> <p>JSON Schema definition or reference to a predefined schema that defines the structure of the response</p>"},{"location":"api/decorators/Schema/#strict","title":"<code>strict</code>","text":"<p>Type: boolean Required: No</p> <p>Whether to enforce strict schema compliance or allow flexibility</p>"},{"location":"api/decorators/Schema/#examples","title":"Examples","text":""},{"location":"api/decorators/Schema/#basic-schema-for-a-persons-information","title":"Basic schema for a person's information","text":"<pre><code>+++Schema(schema={\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"age\":{\"type\":\"number\"},\"interests\":{\"type\":\"array\",\"items\":{\"type\":\"string\"}}}})\nDescribe a fictional character.\n</code></pre> <p>Result:</p> <p>Returns information about a fictional character structured according to the specified schema with name, age, and interests</p>"},{"location":"api/decorators/Schema/#strict-schema-for-product-information","title":"Strict schema for product information","text":"<pre><code>+++Schema(schema={\"type\":\"object\",\"required\":[\"productName\",\"price\",\"features\"],\"properties\":{\"productName\":{\"type\":\"string\"},\"price\":{\"type\":\"number\"},\"features\":{\"type\":\"array\"},\"availability\":{\"type\":\"boolean\"}}}, strict=true)\nDescribe a smartphone.\n</code></pre> <p>Result:</p> <p>Returns smartphone information strictly following the specified schema with all required fields and proper data types</p>"},{"location":"api/decorators/Schema/#compatibility","title":"Compatibility","text":"<p>Conflicts with:</p> <ul> <li><code>OutputFormat</code></li> </ul> <p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/Schema/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Schema/#methods","title":"Methods","text":""},{"location":"api/decorators/Schema/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(schema, strict=False) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Schema decorator.</p> <p>Args:     schema: JSON Schema definition or reference to a predefined schema that defines the structure of the response     strict: Whether to enforce strict schema compliance or allow flexibility</p> <p>Returns:     None</p>"},{"location":"api/decorators/Schema/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Schema/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Schema/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Schema/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Schema/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Schema/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Schema/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Schema/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Socratic/","title":"Decorator <code>Socratic</code>","text":"<p>Version: 1.0.0</p> <p>Structures the response as a series of questions that guide the user through a problem or topic. This decorator encourages critical thinking through question-based exploration, helping to uncover assumptions and lead to deeper understanding.</p>"},{"location":"api/decorators/Socratic/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Socratic/#iterations","title":"<code>iterations</code>","text":"<p>Type: number Required: No Default: <code>3</code></p> <p>Number of question-answer cycles to include</p>"},{"location":"api/decorators/Socratic/#examples","title":"Examples","text":""},{"location":"api/decorators/Socratic/#basic-socratic-exploration-of-a-philosophical-concept","title":"Basic socratic exploration of a philosophical concept","text":"<pre><code>+++Socratic\nWhat is justice?\n</code></pre> <p>Result:</p> <p>Explores the concept of justice through a series of guiding questions</p>"},{"location":"api/decorators/Socratic/#deep-socratic-analysis-with-5-iterations","title":"Deep socratic analysis with 5 iterations","text":"<pre><code>+++Socratic(iterations=5)\nHow do we know what we know?\n</code></pre> <p>Result:</p> <p>Provides an extended series of 5 question-answer cycles to explore epistemology</p>"},{"location":"api/decorators/Socratic/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/Socratic/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Socratic/#methods","title":"Methods","text":""},{"location":"api/decorators/Socratic/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(iterations=3) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Socratic decorator.</p> <p>Args:     iterations: Number of question-answer cycles to include</p> <p>Returns:     None</p>"},{"location":"api/decorators/Socratic/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Socratic/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Socratic/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Socratic/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Socratic/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Socratic/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Socratic/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Socratic/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Steelman/","title":"Decorator <code>Steelman</code>","text":"<p>Version: 1.0.0</p> <p>Presents the strongest possible version of an argument or position, even those the AI might not agree with. This decorator opposes strawman fallacies by ensuring each viewpoint is represented in its most compelling and charitable form.</p>"},{"location":"api/decorators/Steelman/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Steelman/#sides","title":"<code>sides</code>","text":"<p>Type: number Required: No Default: <code>2</code></p> <p>Number of different viewpoints to steel-man</p>"},{"location":"api/decorators/Steelman/#critique","title":"<code>critique</code>","text":"<p>Type: boolean Required: No</p> <p>Whether to include critique after presenting the steel-manned arguments</p>"},{"location":"api/decorators/Steelman/#separation","title":"<code>separation</code>","text":"<p>Type: boolean Required: No Default: <code>True</code></p> <p>Whether to clearly separate the steel-manned presentations from any analysis</p>"},{"location":"api/decorators/Steelman/#examples","title":"Examples","text":""},{"location":"api/decorators/Steelman/#steel-manning-both-sides-of-a-controversial-issue","title":"Steel-manning both sides of a controversial issue","text":"<pre><code>+++Steelman\nIs universal basic income a good policy?\n</code></pre> <p>Result:</p> <p>Presents the strongest possible cases both for and against universal basic income, with each position articulated in its most compelling form</p>"},{"location":"api/decorators/Steelman/#steel-manning-one-position-with-subsequent-critique","title":"Steel-manning one position with subsequent critique","text":"<pre><code>+++Steelman(sides=1, critique=true, separation=true)\nWhat is the strongest case for cryptocurrency as the future of finance?\n</code></pre> <p>Result:</p> <p>Provides the most compelling possible argument for cryptocurrency as the future of finance, clearly separated from a subsequent balanced critique</p>"},{"location":"api/decorators/Steelman/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/Steelman/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Steelman/#methods","title":"Methods","text":""},{"location":"api/decorators/Steelman/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(sides=2, critique=False, separation=True) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Steelman decorator.</p> <p>Args:     sides: Number of different viewpoints to steel-man     critique: Whether to include critique after presenting the steel-manned arguments     separation: Whether to clearly separate the steel-manned presentations from any analysis</p> <p>Returns:     None</p>"},{"location":"api/decorators/Steelman/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Steelman/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Steelman/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Steelman/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Steelman/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Steelman/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Steelman/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Steelman/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/StepByStep/","title":"Decorator <code>StepByStep</code>","text":"<p>Version: 1.0.0</p> <p>Structures the AI's response as a sequence of clearly labeled steps. This decorator helps break down complex processes, explanations, or solutions into manageable, sequential parts for better understanding.</p>"},{"location":"api/decorators/StepByStep/#parameters","title":"Parameters","text":""},{"location":"api/decorators/StepByStep/#numbered","title":"<code>numbered</code>","text":"<p>Type: boolean Required: No Default: <code>True</code></p> <p>Whether to number the steps or use bullet points</p>"},{"location":"api/decorators/StepByStep/#examples","title":"Examples","text":""},{"location":"api/decorators/StepByStep/#numbered-steps-for-a-technical-process","title":"Numbered steps for a technical process","text":"<pre><code>+++StepByStep(numbered=true)\nHow do I set up a Python virtual environment?\n</code></pre> <p>Result:</p> <p>Provides numbered steps for creating and activating a virtual environment</p>"},{"location":"api/decorators/StepByStep/#bullet-point-steps-for-a-creative-process","title":"Bullet-point steps for a creative process","text":"<pre><code>+++StepByStep(numbered=false)\nHow do I brainstorm effectively?\n</code></pre> <p>Result:</p> <p>Delivers bullet-pointed steps for conducting a brainstorming session</p>"},{"location":"api/decorators/StepByStep/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/StepByStep/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/StepByStep/#methods","title":"Methods","text":""},{"location":"api/decorators/StepByStep/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(numbered=True) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the StepByStep decorator.</p> <p>Args:     numbered: Whether to number the steps or use bullet points</p> <p>Returns:     None</p>"},{"location":"api/decorators/StepByStep/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/StepByStep/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/StepByStep/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/StepByStep/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/StepByStep/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/StepByStep/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/StepByStep/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/StepByStep/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/StressTest/","title":"Decorator <code>StressTest</code>","text":"<p>Version: 1.0.0</p> <p>Tests the robustness of ideas, theories, plans, or systems by applying extreme conditions, edge cases, and unlikely scenarios. This decorator helps identify vulnerabilities, limitations, and breaking points that might not be apparent under normal circumstances.</p>"},{"location":"api/decorators/StressTest/#parameters","title":"Parameters","text":""},{"location":"api/decorators/StressTest/#scenarios","title":"<code>scenarios</code>","text":"<p>Type: number Required: No Default: <code>3</code></p> <p>Number of stress test scenarios to apply</p>"},{"location":"api/decorators/StressTest/#severity","title":"<code>severity</code>","text":"<p>Type: enum Required: No Default: <code>severe</code></p> <p>The intensity level of the stress conditions</p> <p>Allowed values:</p> <ul> <li><code>moderate</code></li> <li><code>severe</code></li> <li><code>extreme</code></li> </ul>"},{"location":"api/decorators/StressTest/#domain","title":"<code>domain</code>","text":"<p>Type: string Required: No</p> <p>Optional specific domain or dimension to stress test (e.g., financial, ethical, scalability)</p>"},{"location":"api/decorators/StressTest/#examples","title":"Examples","text":""},{"location":"api/decorators/StressTest/#basic-stress-test-of-a-business-model","title":"Basic stress test of a business model","text":"<pre><code>+++StressTest\nEvaluate this subscription-based SaaS business model.\n</code></pre> <p>Result:</p> <p>Provides an analysis of the business model followed by three severe stress test scenarios that challenge its core assumptions and viability</p>"},{"location":"api/decorators/StressTest/#extreme-stress-test-focused-on-a-specific-domain","title":"Extreme stress test focused on a specific domain","text":"<pre><code>+++StressTest(scenarios=5, severity=extreme, domain=security)\nAssess our new authentication protocol design.\n</code></pre> <p>Result:</p> <p>Delivers an assessment of the authentication protocol followed by five extreme security-focused stress test scenarios that identify potential vulnerabilities and breaking points</p>"},{"location":"api/decorators/StressTest/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/StressTest/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/StressTest/#methods","title":"Methods","text":""},{"location":"api/decorators/StressTest/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(scenarios=3, severity=severe, domain) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the StressTest decorator.</p> <p>Args:     scenarios: Number of stress test scenarios to apply     severity: The intensity level of the stress conditions     domain: Optional specific domain or dimension to stress test (e.g., financial, ethical, scalability)</p> <p>Returns:     None</p>"},{"location":"api/decorators/StressTest/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/StressTest/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/StressTest/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/StressTest/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/StressTest/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/StressTest/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/StressTest/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/StressTest/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/StyleShift/","title":"Decorator <code>StyleShift</code>","text":"<p>Version: 1.0.0</p> <p>Modifies specific style characteristics of responses such as formality, persuasiveness, or urgency. This decorator enables fine-tuned control over particular aspects of communication style without changing the overall tone.</p>"},{"location":"api/decorators/StyleShift/#parameters","title":"Parameters","text":""},{"location":"api/decorators/StyleShift/#aspect","title":"<code>aspect</code>","text":"<p>Type: enum Required: Yes</p> <p>The specific style aspect to modify</p> <p>Allowed values:</p> <ul> <li><code>formality</code></li> <li><code>persuasion</code></li> <li><code>urgency</code></li> <li><code>confidence</code></li> <li><code>complexity</code></li> </ul>"},{"location":"api/decorators/StyleShift/#level","title":"<code>level</code>","text":"<p>Type: number Required: No Default: <code>3</code></p> <p>The intensity level of the style aspect (1-5, where 1 is minimal and 5 is maximal)</p>"},{"location":"api/decorators/StyleShift/#maintain","title":"<code>maintain</code>","text":"<p>Type: array Required: No</p> <p>Style aspects to explicitly maintain while modifying the target aspect</p>"},{"location":"api/decorators/StyleShift/#examples","title":"Examples","text":""},{"location":"api/decorators/StyleShift/#highly-formal-style-while-maintaining-normal-complexity","title":"Highly formal style while maintaining normal complexity","text":"<pre><code>+++StyleShift(aspect=formality, level=5, maintain=[complexity])\nExplain the process of photosynthesis.\n</code></pre> <p>Result:</p> <p>Provides a highly formal explanation of photosynthesis with elevated language and structure, while keeping the complexity at a moderate level</p>"},{"location":"api/decorators/StyleShift/#increased-urgency-for-a-business-communication","title":"Increased urgency for a business communication","text":"<pre><code>+++StyleShift(aspect=urgency, level=4)\nDescribe the steps needed to prepare for the upcoming product launch.\n</code></pre> <p>Result:</p> <p>Delivers a description of product launch preparation steps with heightened sense of urgency and time-sensitivity in the language and framing</p>"},{"location":"api/decorators/StyleShift/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/StyleShift/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/StyleShift/#methods","title":"Methods","text":""},{"location":"api/decorators/StyleShift/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(aspect, level=3, maintain) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the StyleShift decorator.</p> <p>Args:     aspect: The specific style aspect to modify     level: The intensity level of the style aspect (1-5, where 1 is minimal and 5 is maximal)     maintain: Style aspects to explicitly maintain while modifying the target aspect</p> <p>Returns:     None</p>"},{"location":"api/decorators/StyleShift/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/StyleShift/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/StyleShift/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/StyleShift/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/StyleShift/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/StyleShift/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/StyleShift/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/StyleShift/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Summary/","title":"Decorator <code>Summary</code>","text":"<p>Version: 1.0.0</p> <p>Provides a condensed summary of information that would otherwise be presented in a more detailed format. This decorator is useful for generating executive summaries, article summaries, or concise overviews of complex topics.</p>"},{"location":"api/decorators/Summary/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Summary/#length","title":"<code>length</code>","text":"<p>Type: enum Required: No Default: <code>medium</code></p> <p>Relative length of the summary</p> <p>Allowed values:</p> <ul> <li><code>short</code></li> <li><code>medium</code></li> <li><code>long</code></li> </ul>"},{"location":"api/decorators/Summary/#wordcount","title":"<code>wordCount</code>","text":"<p>Type: number Required: No</p> <p>Approximate target word count for the summary</p>"},{"location":"api/decorators/Summary/#position","title":"<code>position</code>","text":"<p>Type: enum Required: No Default: <code>standalone</code></p> <p>Where to position the summary in relation to any full content</p> <p>Allowed values:</p> <ul> <li><code>beginning</code></li> <li><code>end</code></li> <li><code>standalone</code></li> </ul>"},{"location":"api/decorators/Summary/#examples","title":"Examples","text":""},{"location":"api/decorators/Summary/#short-standalone-summary-of-a-complex-topic","title":"Short standalone summary of a complex topic","text":"<pre><code>+++Summary(length=short)\nExplain quantum computing and its potential applications.\n</code></pre> <p>Result:</p> <p>Delivers a concise overview of quantum computing and its applications in approximately 2-3 sentences</p>"},{"location":"api/decorators/Summary/#specific-word-count-summary-at-the-beginning-of-a-response","title":"Specific word count summary at the beginning of a response","text":"<pre><code>+++Summary(wordCount=100, position=beginning)\nDescribe the causes and effects of climate change.\n</code></pre> <p>Result:</p> <p>Starts with a 100-word summary of climate change causes and effects, followed by more detailed information</p>"},{"location":"api/decorators/Summary/#compatibility","title":"Compatibility","text":"<p>Conflicts with:</p> <ul> <li><code>Detailed</code></li> </ul> <p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/Summary/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Summary/#methods","title":"Methods","text":""},{"location":"api/decorators/Summary/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(length=medium, wordCount, position=standalone) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Summary decorator.</p> <p>Args:     length: Relative length of the summary     wordCount: Approximate target word count for the summary     position: Where to position the summary in relation to any full content</p> <p>Returns:     None</p>"},{"location":"api/decorators/Summary/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Summary/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Summary/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Summary/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Summary/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Summary/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Summary/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Summary/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/TableFormat/","title":"Decorator <code>TableFormat</code>","text":"<p>Version: 1.0.0</p> <p>Structures the AI's response in a tabular format with defined columns. This decorator is ideal for presenting comparative data, lists of items with attributes, or any information that benefits from clear columnar organization.</p>"},{"location":"api/decorators/TableFormat/#parameters","title":"Parameters","text":""},{"location":"api/decorators/TableFormat/#columns","title":"<code>columns</code>","text":"<p>Type: array Required: Yes</p> <p>List of column names for the table</p>"},{"location":"api/decorators/TableFormat/#format","title":"<code>format</code>","text":"<p>Type: enum Required: No Default: <code>markdown</code></p> <p>Format style for the table representation</p> <p>Allowed values:</p> <ul> <li><code>markdown</code></li> <li><code>ascii</code></li> <li><code>csv</code></li> </ul>"},{"location":"api/decorators/TableFormat/#alignment","title":"<code>alignment</code>","text":"<p>Type: enum Required: No Default: <code>left</code></p> <p>Text alignment within table cells</p> <p>Allowed values:</p> <ul> <li><code>left</code></li> <li><code>center</code></li> <li><code>right</code></li> </ul>"},{"location":"api/decorators/TableFormat/#examples","title":"Examples","text":""},{"location":"api/decorators/TableFormat/#simple-comparison-table-in-markdown-format","title":"Simple comparison table in markdown format","text":"<pre><code>+++TableFormat(columns=[Feature, TypeScript, JavaScript])\nCompare TypeScript and JavaScript features.\n</code></pre> <p>Result:</p> <p>Presents a markdown table comparing features of TypeScript and JavaScript with three columns</p>"},{"location":"api/decorators/TableFormat/#detailed-csv-table-with-specific-columns","title":"Detailed CSV table with specific columns","text":"<pre><code>+++TableFormat(columns=[Planet, Diameter, Distance from Sun, Orbital Period, Number of Moons], format=csv)\nList the planets in our solar system with their key characteristics.\n</code></pre> <p>Result:</p> <p>Generates a CSV-formatted table containing detailed information about each planet with the specified columns</p>"},{"location":"api/decorators/TableFormat/#compatibility","title":"Compatibility","text":"<p>Conflicts with:</p> <ul> <li><code>OutputFormat</code></li> </ul> <p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/TableFormat/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/TableFormat/#methods","title":"Methods","text":""},{"location":"api/decorators/TableFormat/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(columns, format=markdown, alignment=left) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the TableFormat decorator.</p> <p>Args:     columns: List of column names for the table     format: Format style for the table representation     alignment: Text alignment within table cells</p> <p>Returns:     None</p>"},{"location":"api/decorators/TableFormat/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/TableFormat/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/TableFormat/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/TableFormat/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/TableFormat/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/TableFormat/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/TableFormat/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/TableFormat/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Timeline/","title":"Decorator <code>Timeline</code>","text":"<p>Version: 1.0.0</p> <p>Organizes information in chronological order, highlighting key events or developments over time. This decorator is ideal for historical accounts, project planning, process evolution, or any topic with a temporal dimension.</p>"},{"location":"api/decorators/Timeline/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Timeline/#granularity","title":"<code>granularity</code>","text":"<p>Type: enum Required: No Default: <code>year</code></p> <p>The level of time detail to include in the timeline</p> <p>Allowed values:</p> <ul> <li><code>day</code></li> <li><code>month</code></li> <li><code>year</code></li> <li><code>decade</code></li> <li><code>century</code></li> <li><code>era</code></li> </ul>"},{"location":"api/decorators/Timeline/#format","title":"<code>format</code>","text":"<p>Type: enum Required: No Default: <code>list</code></p> <p>The presentation format for the timeline</p> <p>Allowed values:</p> <ul> <li><code>list</code></li> <li><code>narrative</code></li> <li><code>table</code></li> </ul>"},{"location":"api/decorators/Timeline/#details","title":"<code>details</code>","text":"<p>Type: enum Required: No Default: <code>moderate</code></p> <p>The level of detail to include for each timeline event</p> <p>Allowed values:</p> <ul> <li><code>minimal</code></li> <li><code>moderate</code></li> <li><code>comprehensive</code></li> </ul>"},{"location":"api/decorators/Timeline/#examples","title":"Examples","text":""},{"location":"api/decorators/Timeline/#basic-chronological-timeline-of-major-events","title":"Basic chronological timeline of major events","text":"<pre><code>+++Timeline\nDescribe the key developments in artificial intelligence.\n</code></pre> <p>Result:</p> <p>Presents a year-by-year list of important AI milestones and breakthroughs from earliest developments to present day</p>"},{"location":"api/decorators/Timeline/#detailed-narrative-timeline-with-specific-date-granularity","title":"Detailed narrative timeline with specific date granularity","text":"<pre><code>+++Timeline(granularity=month, format=narrative, details=comprehensive)\nWhat were the major events of the Apollo 11 mission?\n</code></pre> <p>Result:</p> <p>Provides a flowing narrative account of the Apollo 11 mission with month/day dates and comprehensive details of each significant event</p>"},{"location":"api/decorators/Timeline/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/Timeline/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Timeline/#methods","title":"Methods","text":""},{"location":"api/decorators/Timeline/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(granularity=year, format=list, details=moderate) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Timeline decorator.</p> <p>Args:     granularity: The level of time detail to include in the timeline     format: The presentation format for the timeline     details: The level of detail to include for each timeline event</p> <p>Returns:     None</p>"},{"location":"api/decorators/Timeline/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Timeline/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Timeline/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Timeline/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Timeline/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Timeline/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Timeline/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Timeline/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Tone/","title":"Decorator <code>Tone</code>","text":"<p>Version: 1.0.0</p> <p>Adjusts the writing style and tone of the AI's response. This decorator helps ensure that responses are appropriately styled for different audiences and contexts, from formal technical documentation to casual explanations.</p>"},{"location":"api/decorators/Tone/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Tone/#style","title":"<code>style</code>","text":"<p>Type: enum Required: Yes Default: <code>formal</code></p> <p>The desired tone and style for the response</p> <p>Allowed values:</p> <ul> <li><code>formal</code></li> <li><code>casual</code></li> <li><code>friendly</code></li> <li><code>technical</code></li> <li><code>humorous</code></li> </ul>"},{"location":"api/decorators/Tone/#examples","title":"Examples","text":""},{"location":"api/decorators/Tone/#technical-documentation-tone","title":"Technical documentation tone","text":"<pre><code>+++Tone(style=technical)\nExplain how garbage collection works in Python\n</code></pre> <p>Result:</p> <p>Provides a technically precise explanation using appropriate terminology</p>"},{"location":"api/decorators/Tone/#casual-explanation","title":"Casual explanation","text":"<pre><code>+++Tone(style=casual)\nWhy is the sky blue?\n</code></pre> <p>Result:</p> <p>Delivers a relaxed, conversational explanation of atmospheric optics</p>"},{"location":"api/decorators/Tone/#compatibility","title":"Compatibility","text":"<p>Conflicts with:</p> <ul> <li><code>ELI5</code></li> </ul> <p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/Tone/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Tone/#methods","title":"Methods","text":""},{"location":"api/decorators/Tone/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(style) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Tone decorator.</p> <p>Args:     style: The desired tone and style for the response</p> <p>Returns:     None</p>"},{"location":"api/decorators/Tone/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Tone/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Tone/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Tone/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Tone/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Tone/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Tone/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Tone/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/TreeOfThought/","title":"Decorator <code>TreeOfThought</code>","text":"<p>Version: 1.0.0</p> <p>Organizes the response as a branching exploration of multiple reasoning paths. This decorator enables the AI to consider several possible approaches or hypotheses simultaneously, exploring the implications of each before reaching conclusions.</p>"},{"location":"api/decorators/TreeOfThought/#parameters","title":"Parameters","text":""},{"location":"api/decorators/TreeOfThought/#branches","title":"<code>branches</code>","text":"<p>Type: number Required: No Default: <code>3</code></p> <p>Number of different reasoning branches to explore</p>"},{"location":"api/decorators/TreeOfThought/#depth","title":"<code>depth</code>","text":"<p>Type: number Required: No Default: <code>3</code></p> <p>Maximum depth of reasoning in each branch</p>"},{"location":"api/decorators/TreeOfThought/#pruning","title":"<code>pruning</code>","text":"<p>Type: boolean Required: No</p> <p>Whether to eliminate less promising branches early</p>"},{"location":"api/decorators/TreeOfThought/#examples","title":"Examples","text":""},{"location":"api/decorators/TreeOfThought/#multi-branch-problem-solving-for-a-complex-question","title":"Multi-branch problem solving for a complex question","text":"<pre><code>+++TreeOfThought\nWhat might explain the Fermi Paradox?\n</code></pre> <p>Result:</p> <p>Explores three different reasoning branches about potential explanations for the Fermi Paradox, developing each path to moderate depth</p>"},{"location":"api/decorators/TreeOfThought/#deep-focused-exploration-with-pruning","title":"Deep, focused exploration with pruning","text":"<pre><code>+++TreeOfThought(branches=5, depth=5, pruning=true)\nHow might we solve the climate change crisis?\n</code></pre> <p>Result:</p> <p>Starts with five different approaches to climate change, explores each in depth, and eliminates less promising branches to focus on the most viable solutions</p>"},{"location":"api/decorators/TreeOfThought/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/TreeOfThought/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/TreeOfThought/#methods","title":"Methods","text":""},{"location":"api/decorators/TreeOfThought/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(branches=3, depth=3, pruning=False) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the TreeOfThought decorator.</p> <p>Args:     branches: Number of different reasoning branches to explore     depth: Maximum depth of reasoning in each branch     pruning: Whether to eliminate less promising branches early</p> <p>Returns:     None</p>"},{"location":"api/decorators/TreeOfThought/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/TreeOfThought/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/TreeOfThought/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/TreeOfThought/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/TreeOfThought/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/TreeOfThought/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/TreeOfThought/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/TreeOfThought/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Uncertainty/","title":"Decorator <code>Uncertainty</code>","text":"<p>Version: 1.0.0</p> <p>Explicitly highlights areas of uncertainty in the response. This decorator promotes intellectual honesty by clearly indicating what is known with confidence versus what is speculative, unknown, or subject to debate.</p>"},{"location":"api/decorators/Uncertainty/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Uncertainty/#format","title":"<code>format</code>","text":"<p>Type: enum Required: No Default: <code>inline</code></p> <p>How to format uncertainty indications in the response</p> <p>Allowed values:</p> <ul> <li><code>inline</code></li> <li><code>section</code></li> <li><code>confidence</code></li> </ul>"},{"location":"api/decorators/Uncertainty/#threshold","title":"<code>threshold</code>","text":"<p>Type: enum Required: No Default: <code>medium</code></p> <p>The threshold for flagging uncertain content</p> <p>Allowed values:</p> <ul> <li><code>low</code></li> <li><code>medium</code></li> <li><code>high</code></li> </ul>"},{"location":"api/decorators/Uncertainty/#reason","title":"<code>reason</code>","text":"<p>Type: boolean Required: No</p> <p>Whether to explain the reason for uncertainty</p>"},{"location":"api/decorators/Uncertainty/#examples","title":"Examples","text":""},{"location":"api/decorators/Uncertainty/#inline-uncertainty-markers-in-a-technical-explanation","title":"Inline uncertainty markers in a technical explanation","text":"<pre><code>+++Uncertainty\nExplain the potential timeline for achieving artificial general intelligence.\n</code></pre> <p>Result:</p> <p>Explains AGI timelines with inline uncertainty markers highlighting speculative predictions, areas of expert disagreement, and knowledge gaps</p>"},{"location":"api/decorators/Uncertainty/#dedicated-uncertainty-section-with-detailed-reasoning","title":"Dedicated uncertainty section with detailed reasoning","text":"<pre><code>+++Uncertainty(format=section, reason=true, threshold=low)\nWhat are the environmental impacts of fusion energy?\n</code></pre> <p>Result:</p> <p>Provides information about fusion energy's environmental impacts followed by a dedicated section discussing all points of uncertainty with explanations for why each point is uncertain</p>"},{"location":"api/decorators/Uncertainty/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/Uncertainty/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Uncertainty/#methods","title":"Methods","text":""},{"location":"api/decorators/Uncertainty/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(format=inline, threshold=medium, reason=False) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Uncertainty decorator.</p> <p>Args:     format: How to format uncertainty indications in the response     threshold: The threshold for flagging uncertain content     reason: Whether to explain the reason for uncertainty</p> <p>Returns:     None</p>"},{"location":"api/decorators/Uncertainty/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Uncertainty/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Uncertainty/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Uncertainty/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Uncertainty/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Uncertainty/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Uncertainty/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Uncertainty/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/decorators/Version/","title":"Decorator <code>Version</code>","text":"<p>Version: 1.0.0</p> <p>Specifies the version of the Prompt Decorators standard to use. This decorator must be the first in any sequence when used, ensuring proper interpretation of decorators according to the specified standard version.</p>"},{"location":"api/decorators/Version/#parameters","title":"Parameters","text":""},{"location":"api/decorators/Version/#standard","title":"<code>standard</code>","text":"<p>Type: string Required: Yes Default: <code>1.0.0</code></p> <p>The semantic version of the Prompt Decorators standard to use</p>"},{"location":"api/decorators/Version/#examples","title":"Examples","text":""},{"location":"api/decorators/Version/#specify-standard-version-for-compatibility","title":"Specify standard version for compatibility","text":"<pre><code>+++Version(standard=1.0.0)\n+++Reasoning(depth=comprehensive)\nExplain quantum entanglement\n</code></pre> <p>Result:</p> <p>Ensures decorators are interpreted according to version 1.0.0 of the standard</p>"},{"location":"api/decorators/Version/#compatibility","title":"Compatibility","text":"<p>Supported models:</p> <ul> <li><code>gpt-4</code></li> <li><code>gpt-3.5-turbo</code></li> </ul>"},{"location":"api/decorators/Version/#implementation","title":"Implementation","text":"<p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/decorators/Version/#methods","title":"Methods","text":""},{"location":"api/decorators/Version/#__init__","title":"<code>__init__</code>","text":"<p>Signature: <code>__init__(standard) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Initialize the Version decorator.</p> <p>Args:     standard: The semantic version of the Prompt Decorators standard to use</p> <p>Returns:     None</p>"},{"location":"api/decorators/Version/#apply","title":"<code>apply</code>","text":"<p>Signature: <code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt string.</p> <p>Args:     prompt: The prompt to apply the decorator to</p> <p>Returns:     The modified prompt</p>"},{"location":"api/decorators/Version/#apply_to_prompt","title":"<code>apply_to_prompt</code>","text":"<p>Signature: <code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></p> <p>Apply the decorator to a prompt.</p> <p>This method transforms the prompt using the transformation template.</p> <p>Args:     prompt: The prompt to decorate</p> <p>Returns:     The decorated prompt</p>"},{"location":"api/decorators/Version/#from_dict","title":"<code>from_dict</code>","text":"<p>Signature: <code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></p> <p>Create a decorator instance from a dictionary representation.</p> <p>Args:     data: Dictionary representation of the decorator</p> <p>Returns:     A new decorator instance</p> <p>Raises:     ValidationError: If the dictionary is invalid</p>"},{"location":"api/decorators/Version/#get_metadata","title":"<code>get_metadata</code>","text":"<p>Signature: <code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Get metadata about the decorator.</p> <p>Returns:     Dictionary containing metadata about the decorator</p> <p>Args:     cls: The decorator class</p>"},{"location":"api/decorators/Version/#is_compatible_with_version","title":"<code>is_compatible_with_version</code>","text":"<p>Signature: <code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></p> <p>Check if the decorator is compatible with a specific version.</p> <p>Args:     version: The version to check compatibility with.</p> <p>Returns:     True if compatible, False otherwise.</p> <p>Raises:     IncompatibleVersionError: If the version is incompatible.</p>"},{"location":"api/decorators/Version/#to_dict","title":"<code>to_dict</code>","text":"<p>Signature: <code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></p> <p>Convert the decorator to a dictionary.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     Dictionary representation of the decorator</p>"},{"location":"api/decorators/Version/#to_string","title":"<code>to_string</code>","text":"<p>Signature: <code>to_string() -&gt; &lt;class 'str'&gt;</code></p> <p>Convert the decorator to a string.</p> <p>Args:     self: The decorator instance</p> <p>Returns:     String representation of the decorator</p>"},{"location":"api/decorators/Version/#transform_response","title":"<code>transform_response</code>","text":"<p>Signature: <code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></p> <p>Transform the response from the model.</p> <p>Args:     response: The response to transform</p> <p>Returns:     The transformed response</p>"},{"location":"api/modules/prompt_decorators.core.base/","title":"Module <code>prompt_decorators.core.base</code>","text":"<p>Base classes for prompt decorators.</p> <p>This module provides the base classes and utilities for creating and using prompt decorators.</p>"},{"location":"api/modules/prompt_decorators.core.base/#classes","title":"Classes","text":"<ul> <li><code>BaseDecorator</code>: Base class for all prompt decorators.</li> <li><code>Parameter</code>: Represents a parameter for a decorator.</li> <li><code>ParameterType</code>: Types of parameters supported in decorators.</li> <li><code>ValidationError</code>: Exception raised when decorator validation fails.</li> </ul>"},{"location":"api/modules/prompt_decorators.core.base/#class-basedecorator","title":"Class <code>BaseDecorator</code>","text":"<p>Base class for all prompt decorators.</p> <p>This class defines the common interface and behavior for all decorators. Subclasses should implement the apply_to_prompt and transform_response methods.</p>"},{"location":"api/modules/prompt_decorators.core.base/#methods","title":"Methods","text":"<ul> <li><code>__init__(kwargs)</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.core.base/#class-parameter","title":"Class <code>Parameter</code>","text":"<p>Represents a parameter for a decorator.</p> <p>This class defines the metadata for a parameter, including its name, type, description, default value, and constraints.</p> <p>Inherits from: <code>BaseModel</code></p>"},{"location":"api/modules/prompt_decorators.core.base/#methods_1","title":"Methods","text":"<ul> <li><code>__init__(data) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>construct(_fields_set, values) -&gt; Model</code></li> <li><code>copy(include, exclude, update, deep=False) -&gt; Model</code></li> <li><code>dict(include, exclude, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False) -&gt; typing.Dict[str, Any]</code></li> <li><code>from_orm(obj) -&gt; Model</code></li> <li><code>json(include, exclude, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False, encoder=PydanticUndefined, models_as_dict=PydanticUndefined, dumps_kwargs) -&gt; str</code></li> <li><code>model_construct(_fields_set, values) -&gt; Model</code></li> <li><code>model_copy(update, deep=False) -&gt; Model</code></li> <li><code>model_dump(mode=python, include, exclude, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True) -&gt; dict[str, Any]</code></li> <li><code>model_dump_json(indent, include, exclude, by_alias=False, exclude_unset=False, exclude_defaults=False, exclude_none=False, round_trip=False, warnings=True) -&gt; str</code></li> <li><code>model_json_schema(by_alias=True, ref_template=#/$defs/{model}, schema_generator=&lt;class 'pydantic.json_schema.GenerateJsonSchema'&gt;, mode=validation) -&gt; dict[str, typing.Any]</code></li> <li><code>model_parametrized_name(params) -&gt; &lt;class 'str'&gt;</code></li> <li><code>model_post_init(_BaseModel__context) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>model_rebuild(force=False, raise_errors=True, _parent_namespace_depth=2, _types_namespace) -&gt; bool | None</code></li> <li><code>model_validate(obj, strict, from_attributes, context) -&gt; Model</code></li> <li><code>model_validate_json(json_data, strict, context) -&gt; Model</code></li> <li><code>model_validate_strings(obj, strict, context) -&gt; Model</code></li> <li><code>parse_file(path, content_type, encoding=utf8, proto, allow_pickle=False) -&gt; Model</code></li> <li><code>parse_obj(obj) -&gt; Model</code></li> <li><code>parse_raw(b, content_type, encoding=utf8, proto, allow_pickle=False) -&gt; Model</code></li> <li><code>schema(by_alias=True, ref_template=#/$defs/{model}) -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>schema_json(by_alias=True, ref_template=#/$defs/{model}, dumps_kwargs) -&gt; &lt;class 'str'&gt;</code></li> <li><code>update_forward_refs(localns) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>validate(value) -&gt; Model</code></li> <li><code>validate_value(value) -&gt; typing.Any</code></li> </ul>"},{"location":"api/modules/prompt_decorators.core.base/#properties","title":"Properties","text":"<ul> <li><code>model_extra</code>: Get extra fields set during validation.</li> <li><code>model_fields_set</code>: Returns the set of fields that have been explicitly set on this model instance.</li> </ul>"},{"location":"api/modules/prompt_decorators.core.base/#class-parametertype","title":"Class <code>ParameterType</code>","text":"<p>Types of parameters supported in decorators.</p> <p>Inherits from: <code>str, Enum</code></p>"},{"location":"api/modules/prompt_decorators.core.base/#methods_2","title":"Methods","text":"<ul> <li><code>__init__(args, kwds)</code></li> </ul>"},{"location":"api/modules/prompt_decorators.core.base/#class-validationerror","title":"Class <code>ValidationError</code>","text":"<p>Exception raised when decorator validation fails.</p> <p>Inherits from: <code>Exception</code></p>"},{"location":"api/modules/prompt_decorators.core.base/#methods_3","title":"Methods","text":"<ul> <li><code>__init__(message, decorator_name)</code></li> </ul>"},{"location":"api/modules/prompt_decorators.core.exceptions/","title":"Module <code>prompt_decorators.core.exceptions</code>","text":"<p>Exceptions for the prompt-decorators package.</p> <p>This module defines custom exceptions used throughout the package.</p>"},{"location":"api/modules/prompt_decorators.core.exceptions/#classes","title":"Classes","text":"<ul> <li><code>IncompatibleVersionError</code>: Raised when a decorator version is incompatible.</li> <li><code>RegistryError</code>: Raised when there is an error with the decorator registry.</li> </ul>"},{"location":"api/modules/prompt_decorators.core.exceptions/#class-incompatibleversionerror","title":"Class <code>IncompatibleVersionError</code>","text":"<p>Raised when a decorator version is incompatible.</p> <p>This exception is raised when attempting to use a decorator with a version that is not compatible with the current version of the package.</p> <p>Inherits from: <code>Exception</code></p>"},{"location":"api/modules/prompt_decorators.core.exceptions/#class-registryerror","title":"Class <code>RegistryError</code>","text":"<p>Raised when there is an error with the decorator registry.</p> <p>This exception is raised when there is an issue with registering or retrieving decorators from the registry.</p> <p>Inherits from: <code>Exception</code></p>"},{"location":"api/modules/prompt_decorators.core/","title":"Module <code>prompt_decorators.core</code>","text":"<p>Core components of the prompt decorators system.</p> <p>This package contains the core components and functionality that power the prompt decorators system, including the base decorator classes, validation logic, request handling, and model-specific adaptations.</p>"},{"location":"api/modules/prompt_decorators.core.model_specific/","title":"Module <code>prompt_decorators.core.model_specific</code>","text":"<p>Model-Specific Decorator Module.</p> <p>This module provides base classes and utilities for model-specific decorator adaptations.</p>"},{"location":"api/modules/prompt_decorators.core.model_specific/#classes","title":"Classes","text":"<ul> <li><code>ModelSpecificDecorator</code>: Base class for model-specific decorator adaptations.</li> <li><code>ModelSpecificDecoratorFactory</code>: Factory for creating model-specific decorators.</li> </ul>"},{"location":"api/modules/prompt_decorators.core.model_specific/#class-modelspecificdecorator","title":"Class <code>ModelSpecificDecorator</code>","text":"<p>Base class for model-specific decorator adaptations.</p> <p>This class extends BaseDecorator to support model-specific adaptations, allowing decorators to adjust their behavior based on the model being used.</p> <p>Inherits from: <code>BaseDecorator, Generic</code></p>"},{"location":"api/modules/prompt_decorators.core.model_specific/#methods","title":"Methods","text":"<ul> <li><code>__init__(model_id, kwargs)</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_fallback(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_for_model(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.model_specific.ModelSpecificDecorator'&gt;</code></li> <li><code>is_supported_by_model() -&gt; &lt;class 'bool'&gt;</code></li> <li><code>set_model(model_id) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.core.model_specific/#class-modelspecificdecoratorfactory","title":"Class <code>ModelSpecificDecoratorFactory</code>","text":"<p>Factory for creating model-specific decorators.</p> <p>This class provides methods for creating model-specific versions of decorators. It allows for customizing decorator behavior based on specific model requirements.</p> <p>The factory creates decorator instances that are tailored to work optimally with particular language models, taking into account their unique capabilities and limitations.</p>"},{"location":"api/modules/prompt_decorators.core.model_specific/#methods_1","title":"Methods","text":"<ul> <li><code>create_for_model(decorator_class, model_id, params) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.core.registry/","title":"Module <code>prompt_decorators.core.registry</code>","text":"<p>Registry for prompt decorators.</p> <p>This module maintains a global registry of all available decorators and provides functions for registering and retrieving them.</p>"},{"location":"api/modules/prompt_decorators.core.registry/#functions","title":"Functions","text":"<ul> <li><code>clear_registry</code>: Clear the decorator registry.</li> <li><code>get_categories</code>: Get all decorator categories and their members.</li> <li><code>get_decorator</code>: Get a decorator class by name.</li> <li><code>get_decorators_by_category</code>: Get all decorators in a specific category.</li> <li><code>get_registry</code>: Get the complete decorator registry.</li> <li><code>register_decorator</code>: Register a decorator class in the global registry.</li> </ul>"},{"location":"api/modules/prompt_decorators.core.registry/#function-clear_registry","title":"Function <code>clear_registry</code>","text":"<p>Signature: <code>clear_registry() -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Clear the decorator registry.</p> <p>This is primarily used for testing.</p> <p>Returns:     None</p>"},{"location":"api/modules/prompt_decorators.core.registry/#function-get_categories","title":"Function <code>get_categories</code>","text":"<p>Signature: <code>get_categories() -&gt; typing.Dict[str, typing.Set[str]]</code></p> <p>Get all decorator categories and their members.</p> <p>Returns:     Dictionary mapping category names to sets of decorator names</p>"},{"location":"api/modules/prompt_decorators.core.registry/#function-get_decorator","title":"Function <code>get_decorator</code>","text":"<p>Signature: <code>get_decorator(name) -&gt; typing.Optional[typing.Type[prompt_decorators.core.base.BaseDecorator]]</code></p> <p>Get a decorator class by name.</p> <p>Args:     name: Name of the decorator</p> <p>Returns:     The decorator class if found, None otherwise</p>"},{"location":"api/modules/prompt_decorators.core.registry/#function-get_decorators_by_category","title":"Function <code>get_decorators_by_category</code>","text":"<p>Signature: <code>get_decorators_by_category(category) -&gt; typing.List[typing.Type[prompt_decorators.core.base.BaseDecorator]]</code></p> <p>Get all decorators in a specific category.</p> <p>Args:     category: The category name</p> <p>Returns:     List of decorator classes in the specified category</p>"},{"location":"api/modules/prompt_decorators.core.registry/#function-get_registry","title":"Function <code>get_registry</code>","text":"<p>Signature: <code>get_registry() -&gt; typing.Dict[str, typing.Type[prompt_decorators.core.base.BaseDecorator]]</code></p> <p>Get the complete decorator registry.</p> <p>Returns:     Dictionary mapping decorator names to decorator classes</p>"},{"location":"api/modules/prompt_decorators.core.registry/#function-register_decorator","title":"Function <code>register_decorator</code>","text":"<p>Signature: <code>register_decorator(decorator_class, category=unknown) -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Register a decorator class in the global registry.</p> <p>Args:     decorator_class: The decorator class to register     category: Optional category for organizing decorators</p> <p>Returns:     None</p>"},{"location":"api/modules/prompt_decorators.core.request/","title":"Module <code>prompt_decorators.core.request</code>","text":"<p>Request handling for prompt decorators.</p> <p>This module provides the DecoratedRequest class for managing decorated prompts.</p>"},{"location":"api/modules/prompt_decorators.core.request/#classes","title":"Classes","text":"<ul> <li><code>DecoratedRequest</code>: Class representing a request decorated with prompt decorators.</li> </ul>"},{"location":"api/modules/prompt_decorators.core.request/#class-decoratedrequest","title":"Class <code>DecoratedRequest</code>","text":"<p>Class representing a request decorated with prompt decorators.</p>"},{"location":"api/modules/prompt_decorators.core.request/#methods","title":"Methods","text":"<ul> <li><code>__init__(prompt, decorators, model, api_params)</code></li> <li><code>add_decorator(decorator) -&gt; &lt;class 'prompt_decorators.core.request.DecoratedRequest'&gt;</code></li> <li><code>apply_decorators() -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.request.DecoratedRequest'&gt;</code></li> <li><code>from_json(json_str) -&gt; &lt;class 'prompt_decorators.core.request.DecoratedRequest'&gt;</code></li> <li><code>get_decorator(decorator_name) -&gt; typing.Optional[prompt_decorators.core.base.BaseDecorator]</code></li> <li><code>remove_decorator(decorator_name) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_json(indent) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.core.validation/","title":"Module <code>prompt_decorators.core.validation</code>","text":"<p>Parameter Validation Module.</p> <p>This module provides utilities for validating decorator parameters.</p>"},{"location":"api/modules/prompt_decorators.core.validation/#classes","title":"Classes","text":"<ul> <li><code>DictValidator</code>: Validator for dictionary parameters.</li> <li><code>EnumValidator</code>: Validator for enum values.</li> <li><code>ListValidator</code>: Validator for list parameters.</li> <li><code>PatternValidator</code>: Validator for string patterns.</li> <li><code>RangeValidator</code>: Validator for numeric ranges.</li> <li><code>TypeValidator</code>: Validator for parameter types.</li> <li><code>ValidationPipeline</code>: Pipeline for validating multiple parameters.</li> <li><code>Validator</code>: Base class for parameter validators.</li> </ul>"},{"location":"api/modules/prompt_decorators.core.validation/#class-dictvalidator","title":"Class <code>DictValidator</code>","text":"<p>Validator for dictionary parameters.</p> <p>Inherits from: <code>Validator</code></p>"},{"location":"api/modules/prompt_decorators.core.validation/#methods","title":"Methods","text":"<ul> <li><code>__init__(key_validator, value_validator, required_keys, allow_extra_keys=True, allow_none=False)</code></li> <li><code>validate(decorator_name, param_name, value) -&gt; typing.Optional[typing.Dict[typing.Any, typing.Any]]</code></li> </ul>"},{"location":"api/modules/prompt_decorators.core.validation/#class-enumvalidator","title":"Class <code>EnumValidator</code>","text":"<p>Validator for enum values.</p> <p>Inherits from: <code>Validator</code></p>"},{"location":"api/modules/prompt_decorators.core.validation/#methods_1","title":"Methods","text":"<ul> <li><code>__init__(enum_class, allow_none=False)</code></li> <li><code>validate(decorator_name, param_name, value) -&gt; typing.Optional[enum.Enum]</code></li> </ul>"},{"location":"api/modules/prompt_decorators.core.validation/#class-listvalidator","title":"Class <code>ListValidator</code>","text":"<p>Validator for list parameters.</p> <p>Inherits from: <code>Validator</code></p>"},{"location":"api/modules/prompt_decorators.core.validation/#methods_2","title":"Methods","text":"<ul> <li><code>__init__(item_validator, min_length, max_length, allow_none=False)</code></li> <li><code>validate(decorator_name, param_name, value) -&gt; typing.Optional[typing.List[typing.Any]]</code></li> </ul>"},{"location":"api/modules/prompt_decorators.core.validation/#class-patternvalidator","title":"Class <code>PatternValidator</code>","text":"<p>Validator for string patterns.</p> <p>Inherits from: <code>Validator</code></p>"},{"location":"api/modules/prompt_decorators.core.validation/#methods_3","title":"Methods","text":"<ul> <li><code>__init__(pattern, allow_none=False)</code></li> <li><code>validate(decorator_name, param_name, value) -&gt; typing.Optional[str]</code></li> </ul>"},{"location":"api/modules/prompt_decorators.core.validation/#class-rangevalidator","title":"Class <code>RangeValidator</code>","text":"<p>Validator for numeric ranges.</p> <p>Inherits from: <code>Validator</code></p>"},{"location":"api/modules/prompt_decorators.core.validation/#methods_4","title":"Methods","text":"<ul> <li><code>__init__(minimum, maximum, allow_none=False)</code></li> <li><code>validate(decorator_name, param_name, value) -&gt; typing.Union[int, float, NoneType]</code></li> </ul>"},{"location":"api/modules/prompt_decorators.core.validation/#class-typevalidator","title":"Class <code>TypeValidator</code>","text":"<p>Validator for parameter types.</p> <p>Inherits from: <code>Validator</code></p>"},{"location":"api/modules/prompt_decorators.core.validation/#methods_5","title":"Methods","text":"<ul> <li><code>__init__(expected_type, allow_none=False)</code></li> <li><code>validate(decorator_name, param_name, value) -&gt; typing.Optional[~T]</code></li> </ul>"},{"location":"api/modules/prompt_decorators.core.validation/#class-validationpipeline","title":"Class <code>ValidationPipeline</code>","text":"<p>Pipeline for validating multiple parameters.</p>"},{"location":"api/modules/prompt_decorators.core.validation/#methods_6","title":"Methods","text":"<ul> <li><code>__init__(validators)</code></li> <li><code>validate(decorator_name, parameters) -&gt; typing.Dict[str, typing.Any]</code></li> </ul>"},{"location":"api/modules/prompt_decorators.core.validation/#class-validator","title":"Class <code>Validator</code>","text":"<p>Base class for parameter validators.</p>"},{"location":"api/modules/prompt_decorators.core.validation/#methods_7","title":"Methods","text":"<ul> <li><code>validate(decorator_name, param_name, value) -&gt; typing.Any</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.abductive/","title":"Module <code>prompt_decorators.decorators.generated.decorators.abductive</code>","text":"<p>Implementation of the Abductive decorator.</p> <p>This module provides the Abductive decorator class for use in prompt engineering.</p> <p>Structures the response using abductive reasoning, developing the most likely explanations for observations or phenomena. This decorator emphasizes inference to the best explanation and hypothetical reasoning to address incomplete information.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.abductive/#classes","title":"Classes","text":"<ul> <li><code>Abductive</code>: Structures the response using abductive reasoning, developing the most likely explanations for observations or phenomena. This decorator emphasizes inference to the best explanation and hypothetical reasoning to address incomplete information.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.abductive/#class-abductive","title":"Class <code>Abductive</code>","text":"<p>Structures the response using abductive reasoning, developing the most likely explanations for observations or phenomena. This decorator emphasizes inference to the best explanation and hypothetical reasoning to address incomplete information.</p> <p>Attributes:     hypotheses: Number of alternative hypotheses or explanations to generate. (Any)     criteria: Specific criteria to evaluate hypotheses against (e.g., simplicity, explanatory power). (List[Any])     rank: Whether to explicitly rank hypotheses by likelihood. (bool)</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.abductive/#methods","title":"Methods","text":"<ul> <li><code>__init__(hypotheses=3, criteria, rank=True) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.abductive/#properties","title":"Properties","text":"<ul> <li><code>criteria</code>: Get the criteria parameter value.</li> <li><code>hypotheses</code>: Get the hypotheses parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> <li><code>rank</code>: Get the rank parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.academic/","title":"Module <code>prompt_decorators.decorators.generated.decorators.academic</code>","text":"<p>Implementation of the Academic decorator.</p> <p>This module provides the Academic decorator class for use in prompt engineering.</p> <p>Adapts the response to follow scholarly writing conventions appropriate for academic publications. This decorator generates responses with formal language, structured argumentation, and proper citations following established academic citation styles.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.academic/#classes","title":"Classes","text":"<ul> <li><code>Academic</code>: Adapts the response to follow scholarly writing conventions appropriate for academic publications. This decorator generates responses with formal language, structured argumentation, and proper citations following established academic citation styles.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.academic/#class-academic","title":"Class <code>Academic</code>","text":"<p>Adapts the response to follow scholarly writing conventions appropriate for academic publications. This decorator generates responses with formal language, structured argumentation, and proper citations following established academic citation styles.</p> <p>Attributes:     style: The academic discipline style to follow. (Literal[\"humanities\", \"scientific\", \"legal\"])     format: The citation format to use for references. (Literal[\"APA\", \"MLA\", \"Chicago\", \"Harvard\", \"IEEE\"])</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.academic/#methods","title":"Methods","text":"<ul> <li><code>__init__(style=scientific, format=APA) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.academic/#properties","title":"Properties","text":"<ul> <li><code>format</code>: Get the format parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> <li><code>style</code>: Get the style parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.alternatives/","title":"Module <code>prompt_decorators.decorators.generated.decorators.alternatives</code>","text":"<p>Implementation of the Alternatives decorator.</p> <p>This module provides the Alternatives decorator class for use in prompt engineering.</p> <p>Presents multiple distinct options, approaches, or solutions to a question or problem. This decorator encourages exploring different paths or perspectives rather than providing a single definitive answer.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.alternatives/#classes","title":"Classes","text":"<ul> <li><code>Alternatives</code>: Presents multiple distinct options, approaches, or solutions to a question or problem. This decorator encourages exploring different paths or perspectives rather than providing a single definitive answer.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.alternatives/#class-alternatives","title":"Class <code>Alternatives</code>","text":"<p>Presents multiple distinct options, approaches, or solutions to a question or problem. This decorator encourages exploring different paths or perspectives rather than providing a single definitive answer.</p> <p>Attributes:     count: Number of alternative options or approaches to generate. (Any)     diversity: How different or varied the alternatives should be from each other. (Literal[\"low\", \"medium\", \"high\"])     comparison: Whether to include a comparative analysis of the alternatives. (bool)</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.alternatives/#methods","title":"Methods","text":"<ul> <li><code>__init__(count=3, diversity=medium, comparison=False) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.alternatives/#properties","title":"Properties","text":"<ul> <li><code>comparison</code>: Get the comparison parameter value.</li> <li><code>count</code>: Get the count parameter value.</li> <li><code>diversity</code>: Get the diversity parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.analogical/","title":"Module <code>prompt_decorators.decorators.generated.decorators.analogical</code>","text":"<p>Implementation of the Analogical decorator.</p> <p>This module provides the Analogical decorator class for use in prompt engineering.</p> <p>Enhances explanations through the use of analogies and metaphors. This decorator helps make complex or abstract concepts more accessible by systematically comparing them to more familiar domains or experiences.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.analogical/#classes","title":"Classes","text":"<ul> <li><code>Analogical</code>: Enhances explanations through the use of analogies and metaphors. This decorator helps make complex or abstract concepts more accessible by systematically comparing them to more familiar domains or experiences.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.analogical/#class-analogical","title":"Class <code>Analogical</code>","text":"<p>Enhances explanations through the use of analogies and metaphors. This decorator helps make complex or abstract concepts more accessible by systematically comparing them to more familiar domains or experiences.</p> <p>Attributes:     domain: Specific domain or context to draw analogies from (if not specified, will choose appropriate domains). (str)     count: Number of distinct analogies to provide. (Any)     depth: Level of detail in developing the analogy. (Literal[\"brief\", \"moderate\", \"extended\"])</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.analogical/#methods","title":"Methods","text":"<ul> <li><code>__init__(domain=general, count=1, depth=moderate) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.analogical/#properties","title":"Properties","text":"<ul> <li><code>count</code>: Get the count parameter value.</li> <li><code>depth</code>: Get the depth parameter value.</li> <li><code>domain</code>: Get the domain parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.as_expert/","title":"Module <code>prompt_decorators.decorators.generated.decorators.as_expert</code>","text":"<p>Implementation of the AsExpert decorator.</p> <p>This module provides the AsExpert decorator class for use in prompt engineering.</p> <p>Generates responses from the perspective of a specified domain expert or specialist. This decorator provides authoritative content that reflects the knowledge, terminology, and analytical approach of an expert in the specified field.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.as_expert/#classes","title":"Classes","text":"<ul> <li><code>AsExpert</code>: Generates responses from the perspective of a specified domain expert or specialist. This decorator provides authoritative content that reflects the knowledge, terminology, and analytical approach of an expert in the specified field.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.as_expert/#class-asexpert","title":"Class <code>AsExpert</code>","text":"<p>Generates responses from the perspective of a specified domain expert or specialist. This decorator provides authoritative content that reflects the knowledge, terminology, and analytical approach of an expert in the specified field.</p> <p>Attributes:     domain: The specific field or discipline the expert specializes in. (str)     experience: The experience level of the expert. (Literal[\"junior\", \"senior\", \"leading\", \"pioneering\"])     technical: Whether to use highly technical language and domain-specific terminology. (bool)</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.as_expert/#methods","title":"Methods","text":"<ul> <li><code>__init__(domain, experience=senior, technical=True) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.as_expert/#properties","title":"Properties","text":"<ul> <li><code>domain</code>: Get the domain parameter value.</li> <li><code>experience</code>: Get the experience parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> <li><code>technical</code>: Get the technical parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.audience/","title":"Module <code>prompt_decorators.decorators.generated.decorators.audience</code>","text":"<p>Implementation of the Audience decorator.</p> <p>This module provides the Audience decorator class for use in prompt engineering.</p> <p>Adapts the response for a specific audience expertise level. This decorator ensures content is appropriately tailored to the knowledge, vocabulary, and needs of different audience types, from beginners to technical experts.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.audience/#classes","title":"Classes","text":"<ul> <li><code>Audience</code>: Adapts the response for a specific audience expertise level. This decorator ensures content is appropriately tailored to the knowledge, vocabulary, and needs of different audience types, from beginners to technical experts.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.audience/#class-audience","title":"Class <code>Audience</code>","text":"<p>Adapts the response for a specific audience expertise level. This decorator ensures content is appropriately tailored to the knowledge, vocabulary, and needs of different audience types, from beginners to technical experts.</p> <p>Attributes:     level: The expertise level of the target audience. (Literal[\"beginner\", \"intermediate\", \"expert\", \"technical\"])     domain: Specific knowledge domain or field for domain-specific terminology adaptation. (str)     examples: Whether to include additional examples for clarity. (bool)</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.audience/#methods","title":"Methods","text":"<ul> <li><code>__init__(level=intermediate, domain=general, examples=True) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.audience/#properties","title":"Properties","text":"<ul> <li><code>domain</code>: Get the domain parameter value.</li> <li><code>examples</code>: Get the examples parameter value.</li> <li><code>level</code>: Get the level parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.balanced/","title":"Module <code>prompt_decorators.decorators.generated.decorators.balanced</code>","text":"<p>Implementation of the Balanced decorator.</p> <p>This module provides the Balanced decorator class for use in prompt engineering.</p> <p>Ensures equal representation of different perspectives or viewpoints on a topic. This decorator promotes fairness and comprehensiveness by giving proportional attention to multiple sides of an issue, avoiding bias toward any particular position.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.balanced/#classes","title":"Classes","text":"<ul> <li><code>Balanced</code>: Ensures equal representation of different perspectives or viewpoints on a topic. This decorator promotes fairness and comprehensiveness by giving proportional attention to multiple sides of an issue, avoiding bias toward any particular position.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.balanced/#class-balanced","title":"Class <code>Balanced</code>","text":"<p>Ensures equal representation of different perspectives or viewpoints on a topic. This decorator promotes fairness and comprehensiveness by giving proportional attention to multiple sides of an issue, avoiding bias toward any particular position.</p> <p>Attributes:     perspectives: Number of different perspectives to include. (Any)     structure: How to structure the different perspectives. (Literal[\"alternating\", \"sequential\", \"comparative\"])     equal: Whether to strictly enforce equal word count for each perspective. (bool)</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.balanced/#methods","title":"Methods","text":"<ul> <li><code>__init__(perspectives=2, structure=sequential, equal=True) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.balanced/#properties","title":"Properties","text":"<ul> <li><code>equal</code>: Get the equal parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> <li><code>perspectives</code>: Get the perspectives parameter value.</li> <li><code>structure</code>: Get the structure parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.blind_spots/","title":"Module <code>prompt_decorators.decorators.generated.decorators.blind_spots</code>","text":"<p>Implementation of the BlindSpots decorator.</p> <p>This module provides the BlindSpots decorator class for use in prompt engineering.</p> <p>Identifies potential cognitive blind spots, unstated assumptions, and overlooked perspectives in the response. This decorator helps mitigate bias by explicitly acknowledging the limitations of one's thinking and analysis.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.blind_spots/#classes","title":"Classes","text":"<ul> <li><code>BlindSpots</code>: Identifies potential cognitive blind spots, unstated assumptions, and overlooked perspectives in the response. This decorator helps mitigate bias by explicitly acknowledging the limitations of one's thinking and analysis.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.blind_spots/#class-blindspots","title":"Class <code>BlindSpots</code>","text":"<p>Identifies potential cognitive blind spots, unstated assumptions, and overlooked perspectives in the response. This decorator helps mitigate bias by explicitly acknowledging the limitations of one's thinking and analysis.</p> <p>Attributes:     categories: Specific categories of blind spots to check for (e.g., cultural, temporal, confirmation bias). (List[Any])     depth: How thoroughly to analyze for blind spots. (Literal[\"basic\", \"thorough\", \"comprehensive\"])     position: Where to place the blind spots analysis. (Literal[\"after\", \"before\", \"integrated\"])</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.blind_spots/#methods","title":"Methods","text":"<ul> <li><code>__init__(categories, depth=thorough, position=after) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.blind_spots/#properties","title":"Properties","text":"<ul> <li><code>categories</code>: Get the categories parameter value.</li> <li><code>depth</code>: Get the depth parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> <li><code>position</code>: Get the position parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.break_and_build/","title":"Module <code>prompt_decorators.decorators.generated.decorators.break_and_build</code>","text":"<p>Implementation of the BreakAndBuild decorator.</p> <p>This module provides the BreakAndBuild decorator class for use in prompt engineering.</p> <p>Structures responses in two distinct phases: first critically analyzing and 'breaking down' an idea by identifying flaws, assumptions, and weaknesses, then 'building it back up' with improvements, refinements, and solutions. This decorator enhances critical thinking while maintaining constructive output.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.break_and_build/#classes","title":"Classes","text":"<ul> <li><code>BreakAndBuild</code>: Structures responses in two distinct phases: first critically analyzing and 'breaking down' an idea by identifying flaws, assumptions, and weaknesses, then 'building it back up' with improvements, refinements, and solutions. This decorator enhances critical thinking while maintaining constructive output.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.break_and_build/#class-breakandbuild","title":"Class <code>BreakAndBuild</code>","text":"<p>Structures responses in two distinct phases: first critically analyzing and 'breaking down' an idea by identifying flaws, assumptions, and weaknesses, then 'building it back up' with improvements, refinements, and solutions. This decorator enhances critical thinking while maintaining constructive output.</p> <p>Attributes:     breakdown: Primary approach for the critical breakdown phase. (Literal[\"weaknesses\", \"assumptions\", \"risks\", \"comprehensive\"])     intensity: How thorough and challenging the breakdown phase should be. (Literal[\"mild\", \"thorough\", \"intense\"])     buildRatio: Approximate ratio of build-up content to breakdown content (e.g., 2 means twice as much reconstruction as critique). (Any)</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.break_and_build/#methods","title":"Methods","text":"<ul> <li><code>__init__(breakdown=comprehensive, intensity=thorough, buildRatio=1) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.break_and_build/#properties","title":"Properties","text":"<ul> <li><code>breakdown</code>: Get the breakdown parameter value.</li> <li><code>buildRatio</code>: Get the buildRatio parameter value.</li> <li><code>intensity</code>: Get the intensity parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.build_on/","title":"Module <code>prompt_decorators.decorators.generated.decorators.build_on</code>","text":"<p>Implementation of the BuildOn decorator.</p> <p>This module provides the BuildOn decorator class for use in prompt engineering.</p> <p>A meta-decorator that builds upon previous context or responses rather than starting from scratch. This enables continuity across interactions, allowing refinement, extension, or alteration of previous outputs in a coherent manner.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.build_on/#classes","title":"Classes","text":"<ul> <li><code>BuildOn</code>: A meta-decorator that builds upon previous context or responses rather than starting from scratch. This enables continuity across interactions, allowing refinement, extension, or alteration of previous outputs in a coherent manner.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.build_on/#class-buildon","title":"Class <code>BuildOn</code>","text":"<p>A meta-decorator that builds upon previous context or responses rather than starting from scratch. This enables continuity across interactions, allowing refinement, extension, or alteration of previous outputs in a coherent manner.</p> <p>Attributes:     reference: What to build upon from the previous context. (Literal[\"last\", \"specific\", \"all\"])     approach: How to build upon the referenced content. (Literal[\"extend\", \"refine\", \"contrast\", \"synthesize\"])     preserveStructure: Whether to maintain the structure of the referenced content. (bool)</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.build_on/#methods","title":"Methods","text":"<ul> <li><code>__init__(reference=last, approach=extend, preserveStructure=True) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.build_on/#properties","title":"Properties","text":"<ul> <li><code>approach</code>: Get the approach parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> <li><code>preserveStructure</code>: Get the preserveStructure parameter value.</li> <li><code>reference</code>: Get the reference parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.bullet/","title":"Module <code>prompt_decorators.decorators.generated.decorators.bullet</code>","text":"<p>Implementation of the Bullet decorator.</p> <p>This module provides the Bullet decorator class for use in prompt engineering.</p> <p>Formats the response as a bulleted list, making information easier to scan and digest. This decorator is ideal for presenting sequential steps, key points, or collections of related items in a clean, concise format.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.bullet/#classes","title":"Classes","text":"<ul> <li><code>Bullet</code>: Formats the response as a bulleted list, making information easier to scan and digest. This decorator is ideal for presenting sequential steps, key points, or collections of related items in a clean, concise format.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.bullet/#class-bullet","title":"Class <code>Bullet</code>","text":"<p>Formats the response as a bulleted list, making information easier to scan and digest. This decorator is ideal for presenting sequential steps, key points, or collections of related items in a clean, concise format.</p> <p>Attributes:     style: The visual marker used for bullet points. (Literal[\"dash\", \"dot\", \"arrow\", \"star\", \"plus\"])     indented: Whether to allow nested, indented bullet points. (bool)     compact: Whether to keep bullet points short and concise (true) or allow longer, more detailed points (false). (bool)</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.bullet/#methods","title":"Methods","text":"<ul> <li><code>__init__(style=dash, indented=True, compact=False) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.bullet/#properties","title":"Properties","text":"<ul> <li><code>compact</code>: Get the compact parameter value.</li> <li><code>indented</code>: Get the indented parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> <li><code>style</code>: Get the style parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.chain/","title":"Module <code>prompt_decorators.decorators.generated.decorators.chain</code>","text":"<p>Implementation of the Chain decorator.</p> <p>This module provides the Chain decorator class for use in prompt engineering.</p> <p>A meta-decorator that applies multiple decorators in sequence, with each decorator processing the output of the previous one. This enables complex transformations by combining multiple simpler decorators in a pipeline.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.chain/#classes","title":"Classes","text":"<ul> <li><code>Chain</code>: A meta-decorator that applies multiple decorators in sequence, with each decorator processing the output of the previous one. This enables complex transformations by combining multiple simpler decorators in a pipeline.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.chain/#class-chain","title":"Class <code>Chain</code>","text":"<p>A meta-decorator that applies multiple decorators in sequence, with each decorator processing the output of the previous one. This enables complex transformations by combining multiple simpler decorators in a pipeline.</p> <p>Attributes:     decorators: Ordered list of decorators to apply in sequence. (List[Any])     showSteps: Whether to show intermediate outputs after each decorator in the chain. (bool)     stopOnFailure: Whether to stop the chain if a decorator fails to apply correctly. (bool)</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.chain/#methods","title":"Methods","text":"<ul> <li><code>__init__(decorators, showSteps=False, stopOnFailure=True) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.chain/#properties","title":"Properties","text":"<ul> <li><code>decorators</code>: Get the decorators parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> <li><code>showSteps</code>: Get the showSteps parameter value.</li> <li><code>stopOnFailure</code>: Get the stopOnFailure parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.cite_sources/","title":"Module <code>prompt_decorators.decorators.generated.decorators.cite_sources</code>","text":"<p>Implementation of the CiteSources decorator.</p> <p>This module provides the CiteSources decorator class for use in prompt engineering.</p> <p>Structures the response to include citations for claims and information. This decorator enhances credibility by providing references to source material, enabling fact verification and further exploration of topics.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.cite_sources/#classes","title":"Classes","text":"<ul> <li><code>CiteSources</code>: Structures the response to include citations for claims and information. This decorator enhances credibility by providing references to source material, enabling fact verification and further exploration of topics.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.cite_sources/#class-citesources","title":"Class <code>CiteSources</code>","text":"<p>Structures the response to include citations for claims and information. This decorator enhances credibility by providing references to source material, enabling fact verification and further exploration of topics.</p> <p>Attributes:     style: The placement and format of citations within the response. (Literal[\"inline\", \"footnote\", \"endnote\"])     format: The citation format to use. (Literal[\"APA\", \"MLA\", \"Chicago\", \"Harvard\", \"IEEE\"])     comprehensive: Whether to cite every claim (true) or only major claims (false). (bool)</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.cite_sources/#methods","title":"Methods","text":"<ul> <li><code>__init__(style=inline, format=APA, comprehensive=False) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.cite_sources/#properties","title":"Properties","text":"<ul> <li><code>comprehensive</code>: Get the comprehensive parameter value.</li> <li><code>format</code>: Get the format parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> <li><code>style</code>: Get the style parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.comparison/","title":"Module <code>prompt_decorators.decorators.generated.decorators.comparison</code>","text":"<p>Implementation of the Comparison decorator.</p> <p>This module provides the Comparison decorator class for use in prompt engineering.</p> <p>Structures the response as a direct comparison between multiple items, concepts, or approaches. This decorator is ideal for highlighting similarities and differences across specific dimensions or criteria.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.comparison/#classes","title":"Classes","text":"<ul> <li><code>Comparison</code>: Structures the response as a direct comparison between multiple items, concepts, or approaches. This decorator is ideal for highlighting similarities and differences across specific dimensions or criteria.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.comparison/#class-comparison","title":"Class <code>Comparison</code>","text":"<p>Structures the response as a direct comparison between multiple items, concepts, or approaches. This decorator is ideal for highlighting similarities and differences across specific dimensions or criteria.</p> <p>Attributes:     aspects: Specific aspects or dimensions to compare. (List[Any])     format: The presentation format for the comparison. (Literal[\"table\", \"prose\", \"bullets\"])     highlight: Whether to explicitly emphasize key differences. (bool)</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.comparison/#methods","title":"Methods","text":"<ul> <li><code>__init__(aspects, format=table, highlight=True) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.comparison/#properties","title":"Properties","text":"<ul> <li><code>aspects</code>: Get the aspects parameter value.</li> <li><code>format</code>: Get the format parameter value.</li> <li><code>highlight</code>: Get the highlight parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.compatibility/","title":"Module <code>prompt_decorators.decorators.generated.decorators.compatibility</code>","text":"<p>Implementation of the Compatibility decorator.</p> <p>This module provides the Compatibility decorator class for use in prompt engineering.</p> <p>A meta-decorator that specifies model-specific adaptations or fall-back behaviors. This enables graceful degradation of decorator functionalities across different LLM capabilities and ensures optimal performance across model variants.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.compatibility/#classes","title":"Classes","text":"<ul> <li><code>Compatibility</code>: A meta-decorator that specifies model-specific adaptations or fall-back behaviors. This enables graceful degradation of decorator functionalities across different LLM capabilities and ensures optimal performance across model variants.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.compatibility/#class-compatibility","title":"Class <code>Compatibility</code>","text":"<p>A meta-decorator that specifies model-specific adaptations or fall-back behaviors. This enables graceful degradation of decorator functionalities across different LLM capabilities and ensures optimal performance across model variants.</p> <p>Attributes:     models: List of specific models to adapt for (e.g., gpt-3.5-turbo, gpt-4, etc.). (List[Any])     fallback: Decorator to apply if the current model doesn't match any in the models list. (str)     behaviors: JSON string mapping model names to specific adaptations (e.g., '{\"gpt-3.5-turbo\": \"simplify complex reasoning\", \"gpt-4\": \"maximize detailed analysis\"}'). (str)</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.compatibility/#methods","title":"Methods","text":"<ul> <li><code>__init__(models, fallback, behaviors) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.compatibility/#properties","title":"Properties","text":"<ul> <li><code>behaviors</code>: Get the behaviors parameter value.</li> <li><code>fallback</code>: Get the fallback parameter value.</li> <li><code>models</code>: Get the models parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.concise/","title":"Module <code>prompt_decorators.decorators.generated.decorators.concise</code>","text":"<p>Implementation of the Concise decorator.</p> <p>This module provides the Concise decorator class for use in prompt engineering.</p> <p>Optimizes the response for brevity and directness, eliminating unnecessary details and verbose language. This decorator is ideal for obtaining quick answers, executive summaries, or essential information when time or space is limited.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.concise/#classes","title":"Classes","text":"<ul> <li><code>Concise</code>: Optimizes the response for brevity and directness, eliminating unnecessary details and verbose language. This decorator is ideal for obtaining quick answers, executive summaries, or essential information when time or space is limited.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.concise/#class-concise","title":"Class <code>Concise</code>","text":"<p>Optimizes the response for brevity and directness, eliminating unnecessary details and verbose language. This decorator is ideal for obtaining quick answers, executive summaries, or essential information when time or space is limited.</p> <p>Attributes:     maxWords: Maximum word count for the entire response. (Any)     bulletPoints: Whether to use bullet points for maximum brevity. (bool)     level: The degree of conciseness to apply. (Literal[\"moderate\", \"high\", \"extreme\"])</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.concise/#methods","title":"Methods","text":"<ul> <li><code>__init__(maxWords, bulletPoints=False, level=moderate) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.concise/#properties","title":"Properties","text":"<ul> <li><code>bulletPoints</code>: Get the bulletPoints parameter value.</li> <li><code>level</code>: Get the level parameter value.</li> <li><code>maxWords</code>: Get the maxWords parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.conditional/","title":"Module <code>prompt_decorators.decorators.generated.decorators.conditional</code>","text":"<p>Implementation of the Conditional decorator.</p> <p>This module provides the Conditional decorator class for use in prompt engineering.</p> <p>A meta-decorator that applies different decorators based on specified conditions. This enables dynamic behavior where the response formatting and approach changes depending on the content, context, or user-specified parameters.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.conditional/#classes","title":"Classes","text":"<ul> <li><code>Conditional</code>: A meta-decorator that applies different decorators based on specified conditions. This enables dynamic behavior where the response formatting and approach changes depending on the content, context, or user-specified parameters.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.conditional/#class-conditional","title":"Class <code>Conditional</code>","text":"<p>A meta-decorator that applies different decorators based on specified conditions. This enables dynamic behavior where the response formatting and approach changes depending on the content, context, or user-specified parameters.</p> <p>Attributes:     if_param: The condition to evaluate (e.g., 'technical', 'complex', 'controversial', or a parameter like '{param}'). (str)     then: The decorator to apply if the condition is true (can be a specific decorator with parameters). (str)     else_param: The decorator to apply if the condition is false (can be a specific decorator with parameters). (str)</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.conditional/#methods","title":"Methods","text":"<ul> <li><code>__init__(if_param, then, else_param) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.conditional/#properties","title":"Properties","text":"<ul> <li><code>else_param</code>: Get the else_param parameter value.</li> <li><code>if_param</code>: Get the if_param parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> <li><code>then</code>: Get the then parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.confidence/","title":"Module <code>prompt_decorators.decorators.generated.decorators.confidence</code>","text":"<p>Implementation of the Confidence decorator.</p> <p>This module provides the Confidence decorator class for use in prompt engineering.</p> <p>Enhances the response with explicit indications of confidence levels for different statements or claims. This decorator promotes transparency about knowledge certainty and helps differentiate between well-established facts and more speculative content.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.confidence/#classes","title":"Classes","text":"<ul> <li><code>Confidence</code>: Enhances the response with explicit indications of confidence levels for different statements or claims. This decorator promotes transparency about knowledge certainty and helps differentiate between well-established facts and more speculative content.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.confidence/#class-confidence","title":"Class <code>Confidence</code>","text":"<p>Enhances the response with explicit indications of confidence levels for different statements or claims. This decorator promotes transparency about knowledge certainty and helps differentiate between well-established facts and more speculative content.</p> <p>Attributes:     scale: The method used to express confidence levels. (Literal[\"percent\", \"qualitative\", \"stars\", \"numeric\"])     threshold: Minimum confidence level for including information (as a percentage). (Any)     detailed: Whether to provide explanations for confidence assessments. (bool)</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.confidence/#methods","title":"Methods","text":"<ul> <li><code>__init__(scale=qualitative, threshold=50, detailed=False) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.confidence/#properties","title":"Properties","text":"<ul> <li><code>detailed</code>: Get the detailed parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> <li><code>scale</code>: Get the scale parameter value.</li> <li><code>threshold</code>: Get the threshold parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.constraints/","title":"Module <code>prompt_decorators.decorators.generated.decorators.constraints</code>","text":"<p>Implementation of the Constraints decorator.</p> <p>This module provides the Constraints decorator class for use in prompt engineering.</p> <p>Applies specific limitations to the output format, length, or content. This decorator enforces creative constraints that can enhance focus, brevity, or precision by requiring the response to work within defined boundaries.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.constraints/#classes","title":"Classes","text":"<ul> <li><code>Constraints</code>: Applies specific limitations to the output format, length, or content. This decorator enforces creative constraints that can enhance focus, brevity, or precision by requiring the response to work within defined boundaries.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.constraints/#class-constraints","title":"Class <code>Constraints</code>","text":"<p>Applies specific limitations to the output format, length, or content. This decorator enforces creative constraints that can enhance focus, brevity, or precision by requiring the response to work within defined boundaries.</p> <p>Attributes:     wordCount: Maximum number of words allowed in the response. (Any)     timeframe: Maximum time required to implement or consume the response (e.g., '5min', '1hr', '1week'). (str)     vocabulary: Constraints on vocabulary usage. (Literal[\"simple\", \"technical\", \"domain-specific\", \"creative\"])     custom: Custom constraint to apply (e.g., 'no negatives', 'use only questions', 'each sentence starts with consecutive letters of the alphabet'). (str)</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.constraints/#methods","title":"Methods","text":"<ul> <li><code>__init__(wordCount, timeframe, vocabulary, custom) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.constraints/#properties","title":"Properties","text":"<ul> <li><code>custom</code>: Get the custom parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> <li><code>timeframe</code>: Get the timeframe parameter value.</li> <li><code>vocabulary</code>: Get the vocabulary parameter value.</li> <li><code>wordCount</code>: Get the wordCount parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.context/","title":"Module <code>prompt_decorators.decorators.generated.decorators.context</code>","text":"<p>Implementation of the Context decorator.</p> <p>This module provides the Context decorator class for use in prompt engineering.</p> <p>A meta-decorator that adapts standard decorators for domain-specific contexts. This provides specialized interpretations of decorators based on particular fields, industries, or subject matter to ensure appropriate adaptation to contextual requirements.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.context/#classes","title":"Classes","text":"<ul> <li><code>Context</code>: A meta-decorator that adapts standard decorators for domain-specific contexts. This provides specialized interpretations of decorators based on particular fields, industries, or subject matter to ensure appropriate adaptation to contextual requirements.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.context/#class-context","title":"Class <code>Context</code>","text":"<p>A meta-decorator that adapts standard decorators for domain-specific contexts. This provides specialized interpretations of decorators based on particular fields, industries, or subject matter to ensure appropriate adaptation to contextual requirements.</p> <p>Attributes:     domain: The specific domain, field, or industry to contextualize decorators for (e.g., 'medicine', 'legal', 'engineering', 'education'). (str)     scope: Which aspects of decorators to contextualize. (Literal[\"terminology\", \"examples\", \"structure\", \"all\"])     level: The expertise level to target within the domain. (Literal[\"beginner\", \"intermediate\", \"expert\", \"mixed\"])</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.context/#methods","title":"Methods","text":"<ul> <li><code>__init__(domain, scope=all, level=mixed) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.context/#properties","title":"Properties","text":"<ul> <li><code>domain</code>: Get the domain parameter value.</li> <li><code>level</code>: Get the level parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> <li><code>scope</code>: Get the scope parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.contrarian/","title":"Module <code>prompt_decorators.decorators.generated.decorators.contrarian</code>","text":"<p>Implementation of the Contrarian decorator.</p> <p>This module provides the Contrarian decorator class for use in prompt engineering.</p> <p>Generates responses that deliberately challenge conventional wisdom or mainstream perspectives. This decorator encourages critical thinking by presenting counterarguments, alternative interpretations, or challenging established positions on a topic.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.contrarian/#classes","title":"Classes","text":"<ul> <li><code>Contrarian</code>: Generates responses that deliberately challenge conventional wisdom or mainstream perspectives. This decorator encourages critical thinking by presenting counterarguments, alternative interpretations, or challenging established positions on a topic.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.contrarian/#class-contrarian","title":"Class <code>Contrarian</code>","text":"<p>Generates responses that deliberately challenge conventional wisdom or mainstream perspectives. This decorator encourages critical thinking by presenting counterarguments, alternative interpretations, or challenging established positions on a topic.</p> <p>Attributes:     approach: The specific contrarian approach to take. (Literal[\"outsider\", \"skeptic\", \"devils-advocate\"])     maintain: Whether to maintain contrarian stance throughout (true) or provide balanced view at the end (false). (bool)     focus: Optional specific aspect of the topic to focus contrarian analysis on. (str)</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.contrarian/#methods","title":"Methods","text":"<ul> <li><code>__init__(approach=devils-advocate, maintain=False, focus) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.contrarian/#properties","title":"Properties","text":"<ul> <li><code>approach</code>: Get the approach parameter value.</li> <li><code>focus</code>: Get the focus parameter value.</li> <li><code>maintain</code>: Get the maintain parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.creative/","title":"Module <code>prompt_decorators.decorators.generated.decorators.creative</code>","text":"<p>Implementation of the Creative decorator.</p> <p>This module provides the Creative decorator class for use in prompt engineering.</p> <p>Enhances responses with imaginative, novel, and original content. This decorator encourages divergent thinking, metaphorical language, and unusual connections to generate engaging and non-obvious outputs.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.creative/#classes","title":"Classes","text":"<ul> <li><code>Creative</code>: Enhances responses with imaginative, novel, and original content. This decorator encourages divergent thinking, metaphorical language, and unusual connections to generate engaging and non-obvious outputs.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.creative/#class-creative","title":"Class <code>Creative</code>","text":"<p>Enhances responses with imaginative, novel, and original content. This decorator encourages divergent thinking, metaphorical language, and unusual connections to generate engaging and non-obvious outputs.</p> <p>Attributes:     level: The degree of creative thinking to apply. (Literal[\"moderate\", \"high\", \"unconventional\"])     elements: Specific creative elements to incorporate (e.g., metaphor, wordplay, narrative). (List[Any])     constraints: Optional creative constraints to work within. (List[Any])</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.creative/#methods","title":"Methods","text":"<ul> <li><code>__init__(level=high, elements, constraints) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.creative/#properties","title":"Properties","text":"<ul> <li><code>constraints</code>: Get the constraints parameter value.</li> <li><code>elements</code>: Get the elements parameter value.</li> <li><code>level</code>: Get the level parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.custom/","title":"Module <code>prompt_decorators.decorators.generated.decorators.custom</code>","text":"<p>Implementation of the Custom decorator.</p> <p>This module provides the Custom decorator class for use in prompt engineering.</p> <p>A meta-decorator that enables user-defined decorator behaviors through explicit rules or instructions. This provides maximum flexibility for creating specialized behaviors not covered by standard decorators.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.custom/#classes","title":"Classes","text":"<ul> <li><code>Custom</code>: A meta-decorator that enables user-defined decorator behaviors through explicit rules or instructions. This provides maximum flexibility for creating specialized behaviors not covered by standard decorators.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.custom/#class-custom","title":"Class <code>Custom</code>","text":"<p>A meta-decorator that enables user-defined decorator behaviors through explicit rules or instructions. This provides maximum flexibility for creating specialized behaviors not covered by standard decorators.</p> <p>Attributes:     rules: Explicit instructions defining the custom behavior (e.g., 'present all examples in a numbered list with exactly three items'). (str)     name: Optional name for the custom decorator to reference in documentation or explanations. (str)     priority: How to prioritize custom rules relative to other decorators. (Literal[\"override\", \"supplement\", \"fallback\"])</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.custom/#methods","title":"Methods","text":"<ul> <li><code>__init__(rules, name, priority=override) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.custom/#properties","title":"Properties","text":"<ul> <li><code>name</code>: Get the name parameter value.</li> <li><code>priority</code>: Get the priority parameter value.</li> <li><code>rules</code>: Get the rules parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.debate/","title":"Module <code>prompt_decorators.decorators.generated.decorators.debate</code>","text":"<p>Implementation of the Debate decorator.</p> <p>This module provides the Debate decorator class for use in prompt engineering.</p> <p>Structures the response as a debate between multiple perspectives on a topic. This decorator encourages balanced representation of different viewpoints and helps explore complex issues from various angles.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.debate/#classes","title":"Classes","text":"<ul> <li><code>Debate</code>: Structures the response as a debate between multiple perspectives on a topic. This decorator encourages balanced representation of different viewpoints and helps explore complex issues from various angles.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.debate/#class-debate","title":"Class <code>Debate</code>","text":"<p>Structures the response as a debate between multiple perspectives on a topic. This decorator encourages balanced representation of different viewpoints and helps explore complex issues from various angles.</p> <p>Attributes:     perspectives: Number of different perspectives to include in the debate. (Any)     balanced: Whether to ensure equal representation and strength of arguments for each perspective. (bool)</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.debate/#methods","title":"Methods","text":"<ul> <li><code>__init__(perspectives=2, balanced=True) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.debate/#properties","title":"Properties","text":"<ul> <li><code>balanced</code>: Get the balanced parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> <li><code>perspectives</code>: Get the perspectives parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.decision_matrix/","title":"Module <code>prompt_decorators.decorators.generated.decorators.decision_matrix</code>","text":"<p>Implementation of the DecisionMatrix decorator.</p> <p>This module provides the DecisionMatrix decorator class for use in prompt engineering.</p> <p>Structures the response as a decision matrix, evaluating options against multiple criteria. This decorator facilitates systematic comparison and selection between alternatives based on weighted or unweighted criteria.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.decision_matrix/#classes","title":"Classes","text":"<ul> <li><code>DecisionMatrix</code>: Structures the response as a decision matrix, evaluating options against multiple criteria. This decorator facilitates systematic comparison and selection between alternatives based on weighted or unweighted criteria.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.decision_matrix/#class-decisionmatrix","title":"Class <code>DecisionMatrix</code>","text":"<p>Structures the response as a decision matrix, evaluating options against multiple criteria. This decorator facilitates systematic comparison and selection between alternatives based on weighted or unweighted criteria.</p> <p>Attributes:     options: Specific options or alternatives to evaluate in the matrix. (List[Any])     criteria: Evaluation criteria to assess each option against. (List[Any])     weighted: Whether to include weights for criteria importance. (bool)     scale: Rating scale to use for evaluations. (Literal[\"1-5\", \"1-10\", \"qualitative\", \"percentage\"])</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.decision_matrix/#methods","title":"Methods","text":"<ul> <li><code>__init__(options, criteria, weighted=False, scale=1-5) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.decision_matrix/#properties","title":"Properties","text":"<ul> <li><code>criteria</code>: Get the criteria parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> <li><code>options</code>: Get the options parameter value.</li> <li><code>scale</code>: Get the scale parameter value.</li> <li><code>weighted</code>: Get the weighted parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.deductive/","title":"Module <code>prompt_decorators.decorators.generated.decorators.deductive</code>","text":"<p>Implementation of the Deductive decorator.</p> <p>This module provides the Deductive decorator class for use in prompt engineering.</p> <p>Structures the response using deductive reasoning, moving from general principles to specific conclusions. This decorator emphasizes logical argument development, starting with premises and working methodically to necessary conclusions.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.deductive/#classes","title":"Classes","text":"<ul> <li><code>Deductive</code>: Structures the response using deductive reasoning, moving from general principles to specific conclusions. This decorator emphasizes logical argument development, starting with premises and working methodically to necessary conclusions.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.deductive/#class-deductive","title":"Class <code>Deductive</code>","text":"<p>Structures the response using deductive reasoning, moving from general principles to specific conclusions. This decorator emphasizes logical argument development, starting with premises and working methodically to necessary conclusions.</p> <p>Attributes:     premises: Number of main premises to include before deducing conclusions. (Any)     formal: Whether to use formal logical structures with explicit syllogisms. (bool)     steps: Number of logical steps to include in the deductive process. (Any)</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.deductive/#methods","title":"Methods","text":"<ul> <li><code>__init__(premises=2, formal=False, steps=3) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.deductive/#properties","title":"Properties","text":"<ul> <li><code>formal</code>: Get the formal parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> <li><code>premises</code>: Get the premises parameter value.</li> <li><code>steps</code>: Get the steps parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.detailed/","title":"Module <code>prompt_decorators.decorators.generated.decorators.detailed</code>","text":"<p>Implementation of the Detailed decorator.</p> <p>This module provides the Detailed decorator class for use in prompt engineering.</p> <p>Enhances the response with comprehensive information, thorough explanations, and rich context. This decorator is ideal for in-depth learning, complex topics requiring nuance, or when completeness is valued over brevity.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.detailed/#classes","title":"Classes","text":"<ul> <li><code>Detailed</code>: Enhances the response with comprehensive information, thorough explanations, and rich context. This decorator is ideal for in-depth learning, complex topics requiring nuance, or when completeness is valued over brevity.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.detailed/#class-detailed","title":"Class <code>Detailed</code>","text":"<p>Enhances the response with comprehensive information, thorough explanations, and rich context. This decorator is ideal for in-depth learning, complex topics requiring nuance, or when completeness is valued over brevity.</p> <p>Attributes:     depth: The level of detail and comprehensiveness. (Literal[\"moderate\", \"comprehensive\", \"exhaustive\"])     aspects: Specific aspects or dimensions to explore in detail. (List[Any])     examples: Whether to include detailed examples to illustrate points. (bool)</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.detailed/#methods","title":"Methods","text":"<ul> <li><code>__init__(depth=comprehensive, aspects, examples=True) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.detailed/#properties","title":"Properties","text":"<ul> <li><code>aspects</code>: Get the aspects parameter value.</li> <li><code>depth</code>: Get the depth parameter value.</li> <li><code>examples</code>: Get the examples parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.eli5/","title":"Module <code>prompt_decorators.decorators.generated.decorators.eli5</code>","text":"<p>Implementation of the ELI5 decorator.</p> <p>This module provides the ELI5 decorator class for use in prompt engineering.</p> <p>Adapts the response to explain a concept as if to a 5-year-old child. This decorator simplifies complex topics using basic vocabulary, concrete examples, and relatable analogies to make information accessible to non-experts or those new to a subject.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.eli5/#classes","title":"Classes","text":"<ul> <li><code>ELI5</code>: Adapts the response to explain a concept as if to a 5-year-old child. This decorator simplifies complex topics using basic vocabulary, concrete examples, and relatable analogies to make information accessible to non-experts or those new to a subject.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.eli5/#class-eli5","title":"Class <code>ELI5</code>","text":"<p>Adapts the response to explain a concept as if to a 5-year-old child. This decorator simplifies complex topics using basic vocabulary, concrete examples, and relatable analogies to make information accessible to non-experts or those new to a subject.</p> <p>Attributes:     strictness: Whether to strictly maintain a child-appropriate level of simplicity or allow slightly more complexity when necessary. (bool)</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.eli5/#methods","title":"Methods","text":"<ul> <li><code>__init__(strictness=False) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.eli5/#properties","title":"Properties","text":"<ul> <li><code>name</code>: Get the name of the decorator.</li> <li><code>strictness</code>: Get the strictness parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/","title":"Module <code>prompt_decorators.decorators.generated.decorators.enums</code>","text":"<p>Decorator Enum Definitions.</p> <p>This module provides enum types used by decorators.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#classes","title":"Classes","text":"<ul> <li><code>AcademicFormatEnum</code>: The citation format to use for references.</li> <li><code>AcademicStyleEnum</code>: The academic discipline style to follow.</li> <li><code>AlternativesDiversityEnum</code>: How different or varied the alternatives should be from each other.</li> <li><code>AnalogicalDepthEnum</code>: Level of detail in developing the analogy.</li> <li><code>AsExpertExperienceEnum</code>: The experience level of the expert.</li> <li><code>AudienceLevelEnum</code>: The expertise level of the target audience.</li> <li><code>BalancedStructureEnum</code>: How to structure the different perspectives.</li> <li><code>BlindSpotsDepthEnum</code>: How thoroughly to analyze for blind spots.</li> <li><code>BlindSpotsPositionEnum</code>: Where to place the blind spots analysis.</li> <li><code>BreakAndBuildBreakdownEnum</code>: Primary approach for the critical breakdown phase.</li> <li><code>BreakAndBuildIntensityEnum</code>: How thorough and challenging the breakdown phase should be.</li> <li><code>BuildOnApproachEnum</code>: How to build upon the referenced content.</li> <li><code>BuildOnReferenceEnum</code>: What to build upon from the previous context.</li> <li><code>BulletStyleEnum</code>: The visual marker used for bullet points.</li> <li><code>CiteSourcesFormatEnum</code>: The citation format to use.</li> <li><code>CiteSourcesStyleEnum</code>: The placement and format of citations within the response.</li> <li><code>ComparisonFormatEnum</code>: The presentation format for the comparison.</li> <li><code>ConciseLevelEnum</code>: The degree of conciseness to apply.</li> <li><code>ConfidenceScaleEnum</code>: The method used to express confidence levels.</li> <li><code>ConstraintsVocabularyEnum</code>: Constraints on vocabulary usage.</li> <li><code>ContextLevelEnum</code>: The expertise level to target within the domain.</li> <li><code>ContextScopeEnum</code>: Which aspects of decorators to contextualize.</li> <li><code>ContrarianApproachEnum</code>: The specific contrarian approach to take.</li> <li><code>CreativeLevelEnum</code>: The degree of creative thinking to apply.</li> <li><code>CustomPriorityEnum</code>: How to prioritize custom rules relative to other decorators.</li> <li><code>DecisionMatrixScaleEnum</code>: Rating scale to use for evaluations.</li> <li><code>DetailedDepthEnum</code>: The level of detail and comprehensiveness.</li> <li><code>ExtremesVersionsEnum</code>: Which extreme versions to include.</li> <li><code>FactCheckStrictnessEnum</code>: The threshold for considering information verified.</li> <li><code>FactCheckUncertainEnum</code>: How to handle uncertain information.</li> <li><code>FindGapsAspectsEnum</code>: The specific types of gaps to focus on finding.</li> <li><code>FindGapsDepthEnum</code>: How thoroughly to analyze for gaps.</li> <li><code>ForcedAnalogyComprehensivenessEnum</code>: How comprehensively to map concepts between domains.</li> <li><code>InductiveStructureEnum</code>: The pattern of inductive reasoning to follow.</li> <li><code>LayeredLevelsEnum</code>: The granularity of explanation levels to include.</li> <li><code>LayeredProgressionEnum</code>: How to structure the progression between layers.</li> <li><code>LimitationsDetailEnum</code>: The level of detail in the limitations statement.</li> <li><code>LimitationsFocusEnum</code>: The primary aspect to focus on in the limitations.</li> <li><code>LimitationsPositionEnum</code>: Where to place the limitations statement in the response.</li> <li><code>MECEFrameworkEnum</code>: Optional predefined MECE framework to apply.</li> <li><code>MotivationalFocusEnum</code>: The primary motivational approach to emphasize.</li> <li><code>MotivationalIntensityEnum</code>: The level of motivational energy and enthusiasm.</li> <li><code>NarrativeLengthEnum</code>: The relative length of the narrative.</li> <li><code>NarrativeStructureEnum</code>: The narrative structure to employ.</li> <li><code>NegativeSpaceDepthEnum</code>: How deeply to explore the negative space.</li> <li><code>NegativeSpaceFocusEnum</code>: The specific aspect of negative space to emphasize.</li> <li><code>NegativeSpaceStructureEnum</code>: How to present the negative space analysis.</li> <li><code>NestedStyleEnum</code>: Visual style for hierarchical levels.</li> <li><code>OutlineStyleEnum</code>: Numbering or bullet style for the outline.</li> <li><code>OutputFormatFormatEnum</code>: The format to use for the response.</li> <li><code>PeerReviewCriteriaEnum</code>: Primary criteria to focus on in the review.</li> <li><code>PeerReviewPositionEnum</code>: Where to place the peer review relative to the main content.</li> <li><code>PeerReviewStyleEnum</code>: The tone and approach of the peer review.</li> <li><code>PrecisionLevelEnum</code>: The degree of precision to apply.</li> <li><code>PriorityModeEnum</code>: How to handle conflicts between decorators.</li> <li><code>ProfessionalFormalityEnum</code>: The level of formality to maintain in the response.</li> <li><code>QualityMetricsScaleEnum</code>: Rating scale to use for evaluations.</li> <li><code>ReasoningDepthEnum</code>: The level of detail in the reasoning process.</li> <li><code>RedTeamStrengthEnum</code>: How aggressive or challenging the red team analysis should be.</li> <li><code>RemixPreserveEnum</code>: What aspects of the original content to prioritize preserving.</li> <li><code>RootCauseMethodEnum</code>: The specific root cause analysis methodology to apply.</li> <li><code>StressTestSeverityEnum</code>: The intensity level of the stress conditions.</li> <li><code>StyleShiftAspectEnum</code>: The specific style aspect to modify.</li> <li><code>SummaryLengthEnum</code>: Relative length of the summary.</li> <li><code>SummaryPositionEnum</code>: Where to position the summary in relation to any full content.</li> <li><code>TableFormatAlignmentEnum</code>: Text alignment within table cells.</li> <li><code>TableFormatFormatEnum</code>: Format style for the table representation.</li> <li><code>TimelineDetailsEnum</code>: The level of detail to include for each timeline event.</li> <li><code>TimelineFormatEnum</code>: The presentation format for the timeline.</li> <li><code>TimelineGranularityEnum</code>: The level of time detail to include in the timeline.</li> <li><code>ToneStyleEnum</code>: The desired tone and style for the response.</li> <li><code>UncertaintyFormatEnum</code>: How to format uncertainty indications in the response.</li> <li><code>UncertaintyThresholdEnum</code>: The threshold for flagging uncertain content.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-academicformatenum","title":"Class <code>AcademicFormatEnum</code>","text":"<p>The citation format to use for references.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-academicstyleenum","title":"Class <code>AcademicStyleEnum</code>","text":"<p>The academic discipline style to follow.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-alternativesdiversityenum","title":"Class <code>AlternativesDiversityEnum</code>","text":"<p>How different or varied the alternatives should be from each other.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-analogicaldepthenum","title":"Class <code>AnalogicalDepthEnum</code>","text":"<p>Level of detail in developing the analogy.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-asexpertexperienceenum","title":"Class <code>AsExpertExperienceEnum</code>","text":"<p>The experience level of the expert.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-audiencelevelenum","title":"Class <code>AudienceLevelEnum</code>","text":"<p>The expertise level of the target audience.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-balancedstructureenum","title":"Class <code>BalancedStructureEnum</code>","text":"<p>How to structure the different perspectives.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-blindspotsdepthenum","title":"Class <code>BlindSpotsDepthEnum</code>","text":"<p>How thoroughly to analyze for blind spots.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-blindspotspositionenum","title":"Class <code>BlindSpotsPositionEnum</code>","text":"<p>Where to place the blind spots analysis.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-breakandbuildbreakdownenum","title":"Class <code>BreakAndBuildBreakdownEnum</code>","text":"<p>Primary approach for the critical breakdown phase.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-breakandbuildintensityenum","title":"Class <code>BreakAndBuildIntensityEnum</code>","text":"<p>How thorough and challenging the breakdown phase should be.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-buildonapproachenum","title":"Class <code>BuildOnApproachEnum</code>","text":"<p>How to build upon the referenced content.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-buildonreferenceenum","title":"Class <code>BuildOnReferenceEnum</code>","text":"<p>What to build upon from the previous context.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-bulletstyleenum","title":"Class <code>BulletStyleEnum</code>","text":"<p>The visual marker used for bullet points.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-citesourcesformatenum","title":"Class <code>CiteSourcesFormatEnum</code>","text":"<p>The citation format to use.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-citesourcesstyleenum","title":"Class <code>CiteSourcesStyleEnum</code>","text":"<p>The placement and format of citations within the response.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-comparisonformatenum","title":"Class <code>ComparisonFormatEnum</code>","text":"<p>The presentation format for the comparison.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-conciselevelenum","title":"Class <code>ConciseLevelEnum</code>","text":"<p>The degree of conciseness to apply.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-confidencescaleenum","title":"Class <code>ConfidenceScaleEnum</code>","text":"<p>The method used to express confidence levels.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-constraintsvocabularyenum","title":"Class <code>ConstraintsVocabularyEnum</code>","text":"<p>Constraints on vocabulary usage.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-contextlevelenum","title":"Class <code>ContextLevelEnum</code>","text":"<p>The expertise level to target within the domain.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-contextscopeenum","title":"Class <code>ContextScopeEnum</code>","text":"<p>Which aspects of decorators to contextualize.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-contrarianapproachenum","title":"Class <code>ContrarianApproachEnum</code>","text":"<p>The specific contrarian approach to take.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-creativelevelenum","title":"Class <code>CreativeLevelEnum</code>","text":"<p>The degree of creative thinking to apply.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-custompriorityenum","title":"Class <code>CustomPriorityEnum</code>","text":"<p>How to prioritize custom rules relative to other decorators.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-decisionmatrixscaleenum","title":"Class <code>DecisionMatrixScaleEnum</code>","text":"<p>Rating scale to use for evaluations.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-detaileddepthenum","title":"Class <code>DetailedDepthEnum</code>","text":"<p>The level of detail and comprehensiveness.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-extremesversionsenum","title":"Class <code>ExtremesVersionsEnum</code>","text":"<p>Which extreme versions to include.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-factcheckstrictnessenum","title":"Class <code>FactCheckStrictnessEnum</code>","text":"<p>The threshold for considering information verified.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-factcheckuncertainenum","title":"Class <code>FactCheckUncertainEnum</code>","text":"<p>How to handle uncertain information.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-findgapsaspectsenum","title":"Class <code>FindGapsAspectsEnum</code>","text":"<p>The specific types of gaps to focus on finding.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-findgapsdepthenum","title":"Class <code>FindGapsDepthEnum</code>","text":"<p>How thoroughly to analyze for gaps.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-forcedanalogycomprehensivenessenum","title":"Class <code>ForcedAnalogyComprehensivenessEnum</code>","text":"<p>How comprehensively to map concepts between domains.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-inductivestructureenum","title":"Class <code>InductiveStructureEnum</code>","text":"<p>The pattern of inductive reasoning to follow.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-layeredlevelsenum","title":"Class <code>LayeredLevelsEnum</code>","text":"<p>The granularity of explanation levels to include.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-layeredprogressionenum","title":"Class <code>LayeredProgressionEnum</code>","text":"<p>How to structure the progression between layers.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-limitationsdetailenum","title":"Class <code>LimitationsDetailEnum</code>","text":"<p>The level of detail in the limitations statement.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-limitationsfocusenum","title":"Class <code>LimitationsFocusEnum</code>","text":"<p>The primary aspect to focus on in the limitations.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-limitationspositionenum","title":"Class <code>LimitationsPositionEnum</code>","text":"<p>Where to place the limitations statement in the response.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-meceframeworkenum","title":"Class <code>MECEFrameworkEnum</code>","text":"<p>Optional predefined MECE framework to apply.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-motivationalfocusenum","title":"Class <code>MotivationalFocusEnum</code>","text":"<p>The primary motivational approach to emphasize.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-motivationalintensityenum","title":"Class <code>MotivationalIntensityEnum</code>","text":"<p>The level of motivational energy and enthusiasm.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-narrativelengthenum","title":"Class <code>NarrativeLengthEnum</code>","text":"<p>The relative length of the narrative.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-narrativestructureenum","title":"Class <code>NarrativeStructureEnum</code>","text":"<p>The narrative structure to employ.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-negativespacedepthenum","title":"Class <code>NegativeSpaceDepthEnum</code>","text":"<p>How deeply to explore the negative space.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-negativespacefocusenum","title":"Class <code>NegativeSpaceFocusEnum</code>","text":"<p>The specific aspect of negative space to emphasize.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-negativespacestructureenum","title":"Class <code>NegativeSpaceStructureEnum</code>","text":"<p>How to present the negative space analysis.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-nestedstyleenum","title":"Class <code>NestedStyleEnum</code>","text":"<p>Visual style for hierarchical levels.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-outlinestyleenum","title":"Class <code>OutlineStyleEnum</code>","text":"<p>Numbering or bullet style for the outline.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-outputformatformatenum","title":"Class <code>OutputFormatFormatEnum</code>","text":"<p>The format to use for the response.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-peerreviewcriteriaenum","title":"Class <code>PeerReviewCriteriaEnum</code>","text":"<p>Primary criteria to focus on in the review.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-peerreviewpositionenum","title":"Class <code>PeerReviewPositionEnum</code>","text":"<p>Where to place the peer review relative to the main content.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-peerreviewstyleenum","title":"Class <code>PeerReviewStyleEnum</code>","text":"<p>The tone and approach of the peer review.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-precisionlevelenum","title":"Class <code>PrecisionLevelEnum</code>","text":"<p>The degree of precision to apply.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-prioritymodeenum","title":"Class <code>PriorityModeEnum</code>","text":"<p>How to handle conflicts between decorators.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-professionalformalityenum","title":"Class <code>ProfessionalFormalityEnum</code>","text":"<p>The level of formality to maintain in the response.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-qualitymetricsscaleenum","title":"Class <code>QualityMetricsScaleEnum</code>","text":"<p>Rating scale to use for evaluations.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-reasoningdepthenum","title":"Class <code>ReasoningDepthEnum</code>","text":"<p>The level of detail in the reasoning process.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-redteamstrengthenum","title":"Class <code>RedTeamStrengthEnum</code>","text":"<p>How aggressive or challenging the red team analysis should be.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-remixpreserveenum","title":"Class <code>RemixPreserveEnum</code>","text":"<p>What aspects of the original content to prioritize preserving.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-rootcausemethodenum","title":"Class <code>RootCauseMethodEnum</code>","text":"<p>The specific root cause analysis methodology to apply.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-stresstestseverityenum","title":"Class <code>StressTestSeverityEnum</code>","text":"<p>The intensity level of the stress conditions.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-styleshiftaspectenum","title":"Class <code>StyleShiftAspectEnum</code>","text":"<p>The specific style aspect to modify.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-summarylengthenum","title":"Class <code>SummaryLengthEnum</code>","text":"<p>Relative length of the summary.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-summarypositionenum","title":"Class <code>SummaryPositionEnum</code>","text":"<p>Where to position the summary in relation to any full content.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-tableformatalignmentenum","title":"Class <code>TableFormatAlignmentEnum</code>","text":"<p>Text alignment within table cells.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-tableformatformatenum","title":"Class <code>TableFormatFormatEnum</code>","text":"<p>Format style for the table representation.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-timelinedetailsenum","title":"Class <code>TimelineDetailsEnum</code>","text":"<p>The level of detail to include for each timeline event.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-timelineformatenum","title":"Class <code>TimelineFormatEnum</code>","text":"<p>The presentation format for the timeline.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-timelinegranularityenum","title":"Class <code>TimelineGranularityEnum</code>","text":"<p>The level of time detail to include in the timeline.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-tonestyleenum","title":"Class <code>ToneStyleEnum</code>","text":"<p>The desired tone and style for the response.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-uncertaintyformatenum","title":"Class <code>UncertaintyFormatEnum</code>","text":"<p>How to format uncertainty indications in the response.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.enums/#class-uncertaintythresholdenum","title":"Class <code>UncertaintyThresholdEnum</code>","text":"<p>The threshold for flagging uncertain content.</p> <p>Inherits from: <code>Enum</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.extension/","title":"Module <code>prompt_decorators.decorators.generated.decorators.extension</code>","text":"<p>Implementation of the Extension decorator.</p> <p>This module provides the Extension decorator class for use in prompt engineering.</p> <p>A meta-decorator that enables loading of community-defined decorators from external sources. This facilitates the use of specialized decorator packages, domain-specific extensions, or custom decorator libraries maintained by communities or organizations.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.extension/#classes","title":"Classes","text":"<ul> <li><code>Extension</code>: A meta-decorator that enables loading of community-defined decorators from external sources. This facilitates the use of specialized decorator packages, domain-specific extensions, or custom decorator libraries maintained by communities or organizations.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.extension/#class-extension","title":"Class <code>Extension</code>","text":"<p>A meta-decorator that enables loading of community-defined decorators from external sources. This facilitates the use of specialized decorator packages, domain-specific extensions, or custom decorator libraries maintained by communities or organizations.</p> <p>Attributes:     source: URI or identifier for the extension package (e.g., URL, namespace, or registry identifier). (str)     version: Specific version of the extension package to use. (str)     decorators: Specific decorators to load from the extension (if empty, loads all decorators from the package). (List[Any])</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.extension/#methods","title":"Methods","text":"<ul> <li><code>__init__(source, version, decorators) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.extension/#properties","title":"Properties","text":"<ul> <li><code>decorators</code>: Get the decorators parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> <li><code>source</code>: Get the source parameter value.</li> <li><code>version</code>: Get the version parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.extremes/","title":"Module <code>prompt_decorators.decorators.generated.decorators.extremes</code>","text":"<p>Implementation of the Extremes decorator.</p> <p>This module provides the Extremes decorator class for use in prompt engineering.</p> <p>Presents content at the extreme ends of a spectrum, showing both a radical, ambitious, or maximalist version alongside a minimal, conservative, or basic version. This decorator helps explore the range of possibilities from the simplest implementation to the most expansive vision.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.extremes/#classes","title":"Classes","text":"<ul> <li><code>Extremes</code>: Presents content at the extreme ends of a spectrum, showing both a radical, ambitious, or maximalist version alongside a minimal, conservative, or basic version. This decorator helps explore the range of possibilities from the simplest implementation to the most expansive vision.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.extremes/#class-extremes","title":"Class <code>Extremes</code>","text":"<p>Presents content at the extreme ends of a spectrum, showing both a radical, ambitious, or maximalist version alongside a minimal, conservative, or basic version. This decorator helps explore the range of possibilities from the simplest implementation to the most expansive vision.</p> <p>Attributes:     versions: Which extreme versions to include. (Literal[\"radical\", \"minimal\", \"both\"])     dimension: The specific dimension along which to explore extremes (e.g., 'cost', 'time', 'ambition', 'complexity'). (str)     compare: Whether to include a comparative analysis of the extreme versions. (bool)</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.extremes/#methods","title":"Methods","text":"<ul> <li><code>__init__(versions=both, dimension=ambition, compare=True) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.extremes/#properties","title":"Properties","text":"<ul> <li><code>compare</code>: Get the compare parameter value.</li> <li><code>dimension</code>: Get the dimension parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> <li><code>versions</code>: Get the versions parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.fact_check/","title":"Module <code>prompt_decorators.decorators.generated.decorators.fact_check</code>","text":"<p>Implementation of the FactCheck decorator.</p> <p>This module provides the FactCheck decorator class for use in prompt engineering.</p> <p>Enhances the response with verification of factual claims and explicit indication of confidence levels. This decorator promotes accuracy by distinguishing between well-established facts, likely facts, and uncertain or speculative information.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.fact_check/#classes","title":"Classes","text":"<ul> <li><code>FactCheck</code>: Enhances the response with verification of factual claims and explicit indication of confidence levels. This decorator promotes accuracy by distinguishing between well-established facts, likely facts, and uncertain or speculative information.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.fact_check/#class-factcheck","title":"Class <code>FactCheck</code>","text":"<p>Enhances the response with verification of factual claims and explicit indication of confidence levels. This decorator promotes accuracy by distinguishing between well-established facts, likely facts, and uncertain or speculative information.</p> <p>Attributes:     confidence: Whether to include explicit confidence levels for claims. (bool)     uncertain: How to handle uncertain information. (Literal[\"mark\", \"exclude\", \"qualify\"])     strictness: The threshold for considering information verified. (Literal[\"low\", \"moderate\", \"high\"])</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.fact_check/#methods","title":"Methods","text":"<ul> <li><code>__init__(confidence=True, uncertain=mark, strictness=moderate) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.fact_check/#properties","title":"Properties","text":"<ul> <li><code>confidence</code>: Get the confidence parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> <li><code>strictness</code>: Get the strictness parameter value.</li> <li><code>uncertain</code>: Get the uncertain parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.find_gaps/","title":"Module <code>prompt_decorators.decorators.generated.decorators.find_gaps</code>","text":"<p>Implementation of the FindGaps decorator.</p> <p>This module provides the FindGaps decorator class for use in prompt engineering.</p> <p>Identifies missing elements, unanswered questions, or overlooked considerations in an idea, plan, or argument. This decorator helps improve completeness by systematically discovering and highlighting gaps that need addressing.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.find_gaps/#classes","title":"Classes","text":"<ul> <li><code>FindGaps</code>: Identifies missing elements, unanswered questions, or overlooked considerations in an idea, plan, or argument. This decorator helps improve completeness by systematically discovering and highlighting gaps that need addressing.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.find_gaps/#class-findgaps","title":"Class <code>FindGaps</code>","text":"<p>Identifies missing elements, unanswered questions, or overlooked considerations in an idea, plan, or argument. This decorator helps improve completeness by systematically discovering and highlighting gaps that need addressing.</p> <p>Attributes:     aspects: The specific types of gaps to focus on finding. (Literal[\"questions\", \"resources\", \"stakeholders\", \"risks\", \"dependencies\", \"comprehensive\"])     depth: How thoroughly to analyze for gaps. (Literal[\"basic\", \"thorough\", \"exhaustive\"])     solutions: Whether to suggest solutions or approaches for addressing the identified gaps. (bool)</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.find_gaps/#methods","title":"Methods","text":"<ul> <li><code>__init__(aspects=comprehensive, depth=thorough, solutions=True) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.find_gaps/#properties","title":"Properties","text":"<ul> <li><code>aspects</code>: Get the aspects parameter value.</li> <li><code>depth</code>: Get the depth parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> <li><code>solutions</code>: Get the solutions parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.first_principles/","title":"Module <code>prompt_decorators.decorators.generated.decorators.first_principles</code>","text":"<p>Implementation of the FirstPrinciples decorator.</p> <p>This module provides the FirstPrinciples decorator class for use in prompt engineering.</p> <p>Structures the response by breaking down complex topics into their fundamental truths or axioms, then building up from there. This decorator promotes a deeper understanding by examining the most basic elements of a concept before constructing more complex ideas.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.first_principles/#classes","title":"Classes","text":"<ul> <li><code>FirstPrinciples</code>: Structures the response by breaking down complex topics into their fundamental truths or axioms, then building up from there. This decorator promotes a deeper understanding by examining the most basic elements of a concept before constructing more complex ideas.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.first_principles/#class-firstprinciples","title":"Class <code>FirstPrinciples</code>","text":"<p>Structures the response by breaking down complex topics into their fundamental truths or axioms, then building up from there. This decorator promotes a deeper understanding by examining the most basic elements of a concept before constructing more complex ideas.</p> <p>Attributes:     depth: Level of detail in breaking down to fundamental principles. (Any)</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.first_principles/#methods","title":"Methods","text":"<ul> <li><code>__init__(depth=3) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.first_principles/#properties","title":"Properties","text":"<ul> <li><code>depth</code>: Get the depth parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.forced_analogy/","title":"Module <code>prompt_decorators.decorators.generated.decorators.forced_analogy</code>","text":"<p>Implementation of the ForcedAnalogy decorator.</p> <p>This module provides the ForcedAnalogy decorator class for use in prompt engineering.</p> <p>Explains concepts by specifically comparing them to a particular domain or field. This decorator forces analogies from a specified source domain to make complex or unfamiliar topics more relatable and understandable.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.forced_analogy/#classes","title":"Classes","text":"<ul> <li><code>ForcedAnalogy</code>: Explains concepts by specifically comparing them to a particular domain or field. This decorator forces analogies from a specified source domain to make complex or unfamiliar topics more relatable and understandable.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.forced_analogy/#class-forcedanalogy","title":"Class <code>ForcedAnalogy</code>","text":"<p>Explains concepts by specifically comparing them to a particular domain or field. This decorator forces analogies from a specified source domain to make complex or unfamiliar topics more relatable and understandable.</p> <p>Attributes:     source: The specific domain, field, or context to draw analogies from. (str)     comprehensiveness: How comprehensively to map concepts between domains. (Literal[\"basic\", \"comprehensive\", \"detailed\"])     mappings: Number of distinct concept mappings to create between domains. (Any)</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.forced_analogy/#methods","title":"Methods","text":"<ul> <li><code>__init__(source, comprehensiveness=comprehensive, mappings=3) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.forced_analogy/#properties","title":"Properties","text":"<ul> <li><code>comprehensiveness</code>: Get the comprehensiveness parameter value.</li> <li><code>mappings</code>: Get the mappings parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> <li><code>source</code>: Get the source parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.inductive/","title":"Module <code>prompt_decorators.decorators.generated.decorators.inductive</code>","text":"<p>Implementation of the Inductive decorator.</p> <p>This module provides the Inductive decorator class for use in prompt engineering.</p> <p>Structures the response using inductive reasoning, moving from specific observations to broader generalizations and theories. This decorator emphasizes pattern recognition and the derivation of general principles from particular instances.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.inductive/#classes","title":"Classes","text":"<ul> <li><code>Inductive</code>: Structures the response using inductive reasoning, moving from specific observations to broader generalizations and theories. This decorator emphasizes pattern recognition and the derivation of general principles from particular instances.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.inductive/#class-inductive","title":"Class <code>Inductive</code>","text":"<p>Structures the response using inductive reasoning, moving from specific observations to broader generalizations and theories. This decorator emphasizes pattern recognition and the derivation of general principles from particular instances.</p> <p>Attributes:     examples: Number of specific examples or observations to include before generalizing. (Any)     confidence: Whether to explicitly state the confidence level of the inductive conclusions. (bool)     structure: The pattern of inductive reasoning to follow. (Literal[\"generalization\", \"causal\", \"statistical\", \"analogical\"])</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.inductive/#methods","title":"Methods","text":"<ul> <li><code>__init__(examples=3, confidence=False, structure=generalization) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.inductive/#properties","title":"Properties","text":"<ul> <li><code>confidence</code>: Get the confidence parameter value.</li> <li><code>examples</code>: Get the examples parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> <li><code>structure</code>: Get the structure parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.layered/","title":"Module <code>prompt_decorators.decorators.generated.decorators.layered</code>","text":"<p>Implementation of the Layered decorator.</p> <p>This module provides the Layered decorator class for use in prompt engineering.</p> <p>Presents content at multiple levels of explanation depth, allowing readers to engage with information at their preferred level of detail. This decorator structures responses with progressive disclosure, from high-level summaries to increasingly detailed explanations.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.layered/#classes","title":"Classes","text":"<ul> <li><code>Layered</code>: Presents content at multiple levels of explanation depth, allowing readers to engage with information at their preferred level of detail. This decorator structures responses with progressive disclosure, from high-level summaries to increasingly detailed explanations.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.layered/#class-layered","title":"Class <code>Layered</code>","text":"<p>Presents content at multiple levels of explanation depth, allowing readers to engage with information at their preferred level of detail. This decorator structures responses with progressive disclosure, from high-level summaries to increasingly detailed explanations.</p> <p>Attributes:     levels: The granularity of explanation levels to include. (Literal[\"sentence-paragraph-full\", \"basic-intermediate-advanced\", \"summary-detail-technical\"])     count: Number of distinct explanation layers to provide. (Any)     progression: How to structure the progression between layers. (Literal[\"separate\", \"nested\", \"incremental\"])</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.layered/#methods","title":"Methods","text":"<ul> <li><code>__init__(levels=summary-detail-technical, count=3, progression=separate) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.layered/#properties","title":"Properties","text":"<ul> <li><code>count</code>: Get the count parameter value.</li> <li><code>levels</code>: Get the levels parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> <li><code>progression</code>: Get the progression parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.limitations/","title":"Module <code>prompt_decorators.decorators.generated.decorators.limitations</code>","text":"<p>Implementation of the Limitations decorator.</p> <p>This module provides the Limitations decorator class for use in prompt engineering.</p> <p>Adds an explicit statement of limitations, caveats, or uncertainties related to the provided information. This decorator promotes intellectual honesty by acknowledging the boundaries of current knowledge, potential biases, or contextual constraints.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.limitations/#classes","title":"Classes","text":"<ul> <li><code>Limitations</code>: Adds an explicit statement of limitations, caveats, or uncertainties related to the provided information. This decorator promotes intellectual honesty by acknowledging the boundaries of current knowledge, potential biases, or contextual constraints.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.limitations/#class-limitations","title":"Class <code>Limitations</code>","text":"<p>Adds an explicit statement of limitations, caveats, or uncertainties related to the provided information. This decorator promotes intellectual honesty by acknowledging the boundaries of current knowledge, potential biases, or contextual constraints.</p> <p>Attributes:     detail: The level of detail in the limitations statement. (Literal[\"brief\", \"moderate\", \"comprehensive\"])     position: Where to place the limitations statement in the response. (Literal[\"beginning\", \"end\"])     focus: The primary aspect to focus on in the limitations. (Literal[\"knowledge\", \"methodology\", \"context\", \"biases\", \"all\"])</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.limitations/#methods","title":"Methods","text":"<ul> <li><code>__init__(detail=moderate, position=end, focus=all) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.limitations/#properties","title":"Properties","text":"<ul> <li><code>detail</code>: Get the detail parameter value.</li> <li><code>focus</code>: Get the focus parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> <li><code>position</code>: Get the position parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators/","title":"Module <code>prompt_decorators.decorators.generated.decorators</code>","text":"<p>Decorator Classes</p> <p>This package provides classes for all decorators in the Prompt Decorators specification.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.mece/","title":"Module <code>prompt_decorators.decorators.generated.decorators.mece</code>","text":"<p>Implementation of the MECE decorator.</p> <p>This module provides the MECE decorator class for use in prompt engineering.</p> <p>Structures the response using the Mutually Exclusive, Collectively Exhaustive framework - a principle where categories have no overlaps and cover all possibilities. This decorator ensures comprehensive analysis with clear categorization for decision-making and problem-solving.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.mece/#classes","title":"Classes","text":"<ul> <li><code>MECE</code>: Structures the response using the Mutually Exclusive, Collectively Exhaustive framework - a principle where categories have no overlaps and cover all possibilities. This decorator ensures comprehensive analysis with clear categorization for decision-making and problem-solving.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.mece/#class-mece","title":"Class <code>MECE</code>","text":"<p>Structures the response using the Mutually Exclusive, Collectively Exhaustive framework - a principle where categories have no overlaps and cover all possibilities. This decorator ensures comprehensive analysis with clear categorization for decision-making and problem-solving.</p> <p>Attributes:     dimensions: Number of top-level MECE dimensions to use for categorization. (Any)     depth: Maximum level of hierarchical breakdown within each dimension. (Any)     framework: Optional predefined MECE framework to apply. (Literal[\"issue tree\", \"value chain\", \"business segments\", \"stakeholders\", \"custom\"])</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.mece/#methods","title":"Methods","text":"<ul> <li><code>__init__(dimensions=3, depth=2, framework=custom) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.mece/#properties","title":"Properties","text":"<ul> <li><code>depth</code>: Get the depth parameter value.</li> <li><code>dimensions</code>: Get the dimensions parameter value.</li> <li><code>framework</code>: Get the framework parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.motivational/","title":"Module <code>prompt_decorators.decorators.generated.decorators.motivational</code>","text":"<p>Implementation of the Motivational decorator.</p> <p>This module provides the Motivational decorator class for use in prompt engineering.</p> <p>Enhances responses with encouraging, inspiring, and empowering language. This decorator is designed to motivate action, build confidence, and create a positive emotional impact while still delivering substantive content.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.motivational/#classes","title":"Classes","text":"<ul> <li><code>Motivational</code>: Enhances responses with encouraging, inspiring, and empowering language. This decorator is designed to motivate action, build confidence, and create a positive emotional impact while still delivering substantive content.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.motivational/#class-motivational","title":"Class <code>Motivational</code>","text":"<p>Enhances responses with encouraging, inspiring, and empowering language. This decorator is designed to motivate action, build confidence, and create a positive emotional impact while still delivering substantive content.</p> <p>Attributes:     intensity: The level of motivational energy and enthusiasm. (Literal[\"mild\", \"moderate\", \"high\"])     focus: The primary motivational approach to emphasize. (Literal[\"achievement\", \"growth\", \"resilience\", \"purpose\", \"balanced\"])     actionable: Whether to include specific actionable steps or only inspirational content. (bool)</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.motivational/#methods","title":"Methods","text":"<ul> <li><code>__init__(intensity=moderate, focus=balanced, actionable=True) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.motivational/#properties","title":"Properties","text":"<ul> <li><code>actionable</code>: Get the actionable parameter value.</li> <li><code>focus</code>: Get the focus parameter value.</li> <li><code>intensity</code>: Get the intensity parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.narrative/","title":"Module <code>prompt_decorators.decorators.generated.decorators.narrative</code>","text":"<p>Implementation of the Narrative decorator.</p> <p>This module provides the Narrative decorator class for use in prompt engineering.</p> <p>Structures the response as a story-based delivery with narrative elements. This decorator employs storytelling techniques to make information more engaging, memorable, and contextually rich.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.narrative/#classes","title":"Classes","text":"<ul> <li><code>Narrative</code>: Structures the response as a story-based delivery with narrative elements. This decorator employs storytelling techniques to make information more engaging, memorable, and contextually rich.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.narrative/#class-narrative","title":"Class <code>Narrative</code>","text":"<p>Structures the response as a story-based delivery with narrative elements. This decorator employs storytelling techniques to make information more engaging, memorable, and contextually rich.</p> <p>Attributes:     structure: The narrative structure to employ. (Literal[\"classic\", \"nonlinear\", \"case-study\"])     characters: Whether to include character elements in the narrative. (bool)     length: The relative length of the narrative. (Literal[\"brief\", \"moderate\", \"extended\"])</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.narrative/#methods","title":"Methods","text":"<ul> <li><code>__init__(structure=classic, characters=True, length=moderate) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.narrative/#properties","title":"Properties","text":"<ul> <li><code>characters</code>: Get the characters parameter value.</li> <li><code>length</code>: Get the length parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> <li><code>structure</code>: Get the structure parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.negative_space/","title":"Module <code>prompt_decorators.decorators.generated.decorators.negative_space</code>","text":"<p>Implementation of the NegativeSpace decorator.</p> <p>This module provides the NegativeSpace decorator class for use in prompt engineering.</p> <p>Focuses on analyzing what is not explicitly stated, implied, or missing from a topic or question. This decorator explores the 'negative space' by identifying unexplored angles, implicit assumptions, unasked questions, and contextual elements that may have been overlooked.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.negative_space/#classes","title":"Classes","text":"<ul> <li><code>NegativeSpace</code>: Focuses on analyzing what is not explicitly stated, implied, or missing from a topic or question. This decorator explores the 'negative space' by identifying unexplored angles, implicit assumptions, unasked questions, and contextual elements that may have been overlooked.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.negative_space/#class-negativespace","title":"Class <code>NegativeSpace</code>","text":"<p>Focuses on analyzing what is not explicitly stated, implied, or missing from a topic or question. This decorator explores the 'negative space' by identifying unexplored angles, implicit assumptions, unasked questions, and contextual elements that may have been overlooked.</p> <p>Attributes:     focus: The specific aspect of negative space to emphasize. (Literal[\"implications\", \"missing\", \"unstated\", \"comprehensive\"])     depth: How deeply to explore the negative space. (Literal[\"surface\", \"moderate\", \"deep\"])     structure: How to present the negative space analysis. (Literal[\"before\", \"after\", \"integrated\", \"separate\"])</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.negative_space/#methods","title":"Methods","text":"<ul> <li><code>__init__(focus=comprehensive, depth=moderate, structure=integrated) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.negative_space/#properties","title":"Properties","text":"<ul> <li><code>depth</code>: Get the depth parameter value.</li> <li><code>focus</code>: Get the focus parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> <li><code>structure</code>: Get the structure parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.nested/","title":"Module <code>prompt_decorators.decorators.generated.decorators.nested</code>","text":"<p>Implementation of the Nested decorator.</p> <p>This module provides the Nested decorator class for use in prompt engineering.</p> <p>Organizes information in a deeply hierarchical structure with multiple levels of nesting. This decorator is ideal for complex topics with many subcategories, helping to maintain clarity through consistent organization patterns.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.nested/#classes","title":"Classes","text":"<ul> <li><code>Nested</code>: Organizes information in a deeply hierarchical structure with multiple levels of nesting. This decorator is ideal for complex topics with many subcategories, helping to maintain clarity through consistent organization patterns.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.nested/#class-nested","title":"Class <code>Nested</code>","text":"<p>Organizes information in a deeply hierarchical structure with multiple levels of nesting. This decorator is ideal for complex topics with many subcategories, helping to maintain clarity through consistent organization patterns.</p> <p>Attributes:     depth: Maximum nesting level of the hierarchy. (Any)     style: Visual style for hierarchical levels. (Literal[\"bullet\", \"numbered\", \"mixed\"])     collapsible: Whether to suggest the hierarchy could be rendered as collapsible sections (for UI implementations). (bool)</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.nested/#methods","title":"Methods","text":"<ul> <li><code>__init__(depth=3, style=mixed, collapsible=False) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.nested/#properties","title":"Properties","text":"<ul> <li><code>collapsible</code>: Get the collapsible parameter value.</li> <li><code>depth</code>: Get the depth parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> <li><code>style</code>: Get the style parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.outline/","title":"Module <code>prompt_decorators.decorators.generated.decorators.outline</code>","text":"<p>Implementation of the Outline decorator.</p> <p>This module provides the Outline decorator class for use in prompt engineering.</p> <p>Structures the response as a hierarchical outline with headings and subheadings. This decorator organizes information in a clear, logical structure that highlights relationships between main topics and subtopics.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.outline/#classes","title":"Classes","text":"<ul> <li><code>Outline</code>: Structures the response as a hierarchical outline with headings and subheadings. This decorator organizes information in a clear, logical structure that highlights relationships between main topics and subtopics.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.outline/#class-outline","title":"Class <code>Outline</code>","text":"<p>Structures the response as a hierarchical outline with headings and subheadings. This decorator organizes information in a clear, logical structure that highlights relationships between main topics and subtopics.</p> <p>Attributes:     depth: Maximum nesting level of the outline. (Any)     style: Numbering or bullet style for the outline. (Literal[\"numeric\", \"bullet\", \"roman\", \"alpha\", \"mixed\"])     detailed: Whether to include brief explanations under each outline point. (bool)</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.outline/#methods","title":"Methods","text":"<ul> <li><code>__init__(depth=3, style=numeric, detailed=False) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.outline/#properties","title":"Properties","text":"<ul> <li><code>depth</code>: Get the depth parameter value.</li> <li><code>detailed</code>: Get the detailed parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> <li><code>style</code>: Get the style parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.output_format/","title":"Module <code>prompt_decorators.decorators.generated.decorators.output_format</code>","text":"<p>Implementation of the OutputFormat decorator.</p> <p>This module provides the OutputFormat decorator class for use in prompt engineering.</p> <p>Specifies the format of the AI's response. This decorator ensures the output follows a specific format, making it easier to parse, display, or process the response in a consistent way.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.output_format/#classes","title":"Classes","text":"<ul> <li><code>OutputFormat</code>: Specifies the format of the AI's response. This decorator ensures the output follows a specific format, making it easier to parse, display, or process the response in a consistent way.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.output_format/#class-outputformat","title":"Class <code>OutputFormat</code>","text":"<p>Specifies the format of the AI's response. This decorator ensures the output follows a specific format, making it easier to parse, display, or process the response in a consistent way.</p> <p>Attributes:     format: The format to use for the response. (Literal[\"json\", \"markdown\", \"yaml\", \"xml\", \"plaintext\"])</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.output_format/#methods","title":"Methods","text":"<ul> <li><code>__init__(format) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.output_format/#properties","title":"Properties","text":"<ul> <li><code>format</code>: Get the format parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.override/","title":"Module <code>prompt_decorators.decorators.generated.decorators.override</code>","text":"<p>Implementation of the Override decorator.</p> <p>This module provides the Override decorator class for use in prompt engineering.</p> <p>A meta-decorator that overrides the default parameters or behaviors of other decorators. This enables customization of standard decorators without modifying their definitions, allowing for reuse of established patterns with specific adjustments.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.override/#classes","title":"Classes","text":"<ul> <li><code>Override</code>: A meta-decorator that overrides the default parameters or behaviors of other decorators. This enables customization of standard decorators without modifying their definitions, allowing for reuse of established patterns with specific adjustments.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.override/#class-override","title":"Class <code>Override</code>","text":"<p>A meta-decorator that overrides the default parameters or behaviors of other decorators. This enables customization of standard decorators without modifying their definitions, allowing for reuse of established patterns with specific adjustments.</p> <p>Attributes:     decorator: The specific decorator whose behavior to override. (str)     parameters: JSON string specifying the parameters to override (e.g., '{\"depth\": \"comprehensive\", \"focus\": \"methodology\"}'). (str)     behavior: Optional custom behavior modification instructions that override the standard decorator interpretation. (str)</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.override/#methods","title":"Methods","text":"<ul> <li><code>__init__(decorator, parameters, behavior) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.override/#properties","title":"Properties","text":"<ul> <li><code>behavior</code>: Get the behavior parameter value.</li> <li><code>decorator</code>: Get the decorator parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> <li><code>params</code>: Get the parameters parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.peer_review/","title":"Module <code>prompt_decorators.decorators.generated.decorators.peer_review</code>","text":"<p>Implementation of the PeerReview decorator.</p> <p>This module provides the PeerReview decorator class for use in prompt engineering.</p> <p>Augments the response with a simulated peer review of the content. This decorator enhances critical thinking by evaluating the response's strengths, weaknesses, methodological soundness, and potential improvements as an academic reviewer would.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.peer_review/#classes","title":"Classes","text":"<ul> <li><code>PeerReview</code>: Augments the response with a simulated peer review of the content. This decorator enhances critical thinking by evaluating the response's strengths, weaknesses, methodological soundness, and potential improvements as an academic reviewer would.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.peer_review/#class-peerreview","title":"Class <code>PeerReview</code>","text":"<p>Augments the response with a simulated peer review of the content. This decorator enhances critical thinking by evaluating the response's strengths, weaknesses, methodological soundness, and potential improvements as an academic reviewer would.</p> <p>Attributes:     criteria: Primary criteria to focus on in the review. (Literal[\"accuracy\", \"methodology\", \"limitations\", \"completeness\", \"all\"])     style: The tone and approach of the peer review. (Literal[\"constructive\", \"critical\", \"balanced\"])     position: Where to place the peer review relative to the main content. (Literal[\"after\", \"before\", \"alongside\"])</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.peer_review/#methods","title":"Methods","text":"<ul> <li><code>__init__(criteria=all, style=balanced, position=after) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.peer_review/#properties","title":"Properties","text":"<ul> <li><code>criteria</code>: Get the criteria parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> <li><code>position</code>: Get the position parameter value.</li> <li><code>style</code>: Get the style parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.persona/","title":"Module <code>prompt_decorators.decorators.generated.decorators.persona</code>","text":"<p>Implementation of the Persona decorator.</p> <p>This module provides the Persona decorator class for use in prompt engineering.</p> <p>Adapts the response to reflect the perspective and concerns of a specific persona. This decorator helps explore how different stakeholders or personality types would view a situation or topic.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.persona/#classes","title":"Classes","text":"<ul> <li><code>Persona</code>: Adapts the response to reflect the perspective and concerns of a specific persona. This decorator helps explore how different stakeholders or personality types would view a situation or topic.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.persona/#class-persona","title":"Class <code>Persona</code>","text":"<p>Adapts the response to reflect the perspective and concerns of a specific persona. This decorator helps explore how different stakeholders or personality types would view a situation or topic.</p> <p>Attributes:     role: The specific persona or stakeholder role to adopt. (str)     traits: Key personality traits or characteristics of the persona. (List[Any])     goals: Primary goals or concerns of the persona. (List[Any])</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.persona/#methods","title":"Methods","text":"<ul> <li><code>__init__(role, traits, goals) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.persona/#properties","title":"Properties","text":"<ul> <li><code>goals</code>: Get the goals parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> <li><code>role</code>: Get the role parameter value.</li> <li><code>traits</code>: Get the traits parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.precision/","title":"Module <code>prompt_decorators.decorators.generated.decorators.precision</code>","text":"<p>Implementation of the Precision decorator.</p> <p>This module provides the Precision decorator class for use in prompt engineering.</p> <p>Enhances responses with exact, specific, and precisely defined information. This decorator prioritizes accuracy in measurements, terms, definitions, and claims, avoiding vague language in favor of concrete specificity.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.precision/#classes","title":"Classes","text":"<ul> <li><code>Precision</code>: Enhances responses with exact, specific, and precisely defined information. This decorator prioritizes accuracy in measurements, terms, definitions, and claims, avoiding vague language in favor of concrete specificity.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.precision/#class-precision","title":"Class <code>Precision</code>","text":"<p>Enhances responses with exact, specific, and precisely defined information. This decorator prioritizes accuracy in measurements, terms, definitions, and claims, avoiding vague language in favor of concrete specificity.</p> <p>Attributes:     level: The degree of precision to apply. (Literal[\"moderate\", \"high\", \"scientific\"])     units: Whether to consistently provide units for all measurements. (bool)     definitions: Whether to include precise definitions for key terms. (bool)</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.precision/#methods","title":"Methods","text":"<ul> <li><code>__init__(level=high, units=True, definitions=False) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.precision/#properties","title":"Properties","text":"<ul> <li><code>definitions</code>: Get the definitions parameter value.</li> <li><code>level</code>: Get the level parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> <li><code>units</code>: Get the units parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.prioritize/","title":"Module <code>prompt_decorators.decorators.generated.decorators.prioritize</code>","text":"<p>Implementation of the Prioritize decorator.</p> <p>This module provides the Prioritize decorator class for use in prompt engineering.</p> <p>Structures the response by ranking information according to importance, urgency, or impact. This decorator helps identify the most critical aspects of a topic and presents information in a hierarchical manner from most to least important.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.prioritize/#classes","title":"Classes","text":"<ul> <li><code>Prioritize</code>: Structures the response by ranking information according to importance, urgency, or impact. This decorator helps identify the most critical aspects of a topic and presents information in a hierarchical manner from most to least important.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.prioritize/#class-prioritize","title":"Class <code>Prioritize</code>","text":"<p>Structures the response by ranking information according to importance, urgency, or impact. This decorator helps identify the most critical aspects of a topic and presents information in a hierarchical manner from most to least important.</p> <p>Attributes:     criteria: The specific criterion to use for prioritization (e.g., importance, urgency, ROI). (str)     count: Number of prioritized items to include. (Any)     showRationale: Whether to explain the reasoning behind each priority ranking. (bool)</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.prioritize/#methods","title":"Methods","text":"<ul> <li><code>__init__(criteria=importance, count=5, showRationale=False) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.prioritize/#properties","title":"Properties","text":"<ul> <li><code>count</code>: Get the count parameter value.</li> <li><code>criteria</code>: Get the criteria parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> <li><code>showRationale</code>: Get the showRationale parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.priority/","title":"Module <code>prompt_decorators.decorators.generated.decorators.priority</code>","text":"<p>Implementation of the Priority decorator.</p> <p>This module provides the Priority decorator class for use in prompt engineering.</p> <p>A meta-decorator that establishes a precedence hierarchy among multiple decorators. This allows explicit control over which decorator's parameters or behaviors take precedence when conflicts arise, overriding the default last-decorator-wins behavior.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.priority/#classes","title":"Classes","text":"<ul> <li><code>Priority</code>: A meta-decorator that establishes a precedence hierarchy among multiple decorators. This allows explicit control over which decorator's parameters or behaviors take precedence when conflicts arise, overriding the default last-decorator-wins behavior.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.priority/#class-priority","title":"Class <code>Priority</code>","text":"<p>A meta-decorator that establishes a precedence hierarchy among multiple decorators. This allows explicit control over which decorator's parameters or behaviors take precedence when conflicts arise, overriding the default last-decorator-wins behavior.</p> <p>Attributes:     decorators: Ordered list of decorators by priority (highest priority first). (List[Any])     explicit: Whether to explicitly mention overridden behaviors in the response. (bool)     mode: How to handle conflicts between decorators. (Literal[\"override\", \"merge\", \"cascade\"])</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.priority/#methods","title":"Methods","text":"<ul> <li><code>__init__(decorators, explicit=False, mode=override) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.priority/#properties","title":"Properties","text":"<ul> <li><code>decorators</code>: Get the decorators parameter value.</li> <li><code>explicit</code>: Get the explicit parameter value.</li> <li><code>mode</code>: Get the mode parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.professional/","title":"Module <code>prompt_decorators.decorators.generated.decorators.professional</code>","text":"<p>Implementation of the Professional decorator.</p> <p>This module provides the Professional decorator class for use in prompt engineering.</p> <p>Adapts the response to use business-oriented language appropriate for professional contexts. This decorator generates content using formal business terminology, clear and concise phrasing, and industry-appropriate jargon when relevant.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.professional/#classes","title":"Classes","text":"<ul> <li><code>Professional</code>: Adapts the response to use business-oriented language appropriate for professional contexts. This decorator generates content using formal business terminology, clear and concise phrasing, and industry-appropriate jargon when relevant.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.professional/#class-professional","title":"Class <code>Professional</code>","text":"<p>Adapts the response to use business-oriented language appropriate for professional contexts. This decorator generates content using formal business terminology, clear and concise phrasing, and industry-appropriate jargon when relevant.</p> <p>Attributes:     industry: The specific industry context to adapt the language for. (str)     formality: The level of formality to maintain in the response. (Literal[\"standard\", \"high\", \"executive\"])</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.professional/#methods","title":"Methods","text":"<ul> <li><code>__init__(industry=general, formality=standard) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.professional/#properties","title":"Properties","text":"<ul> <li><code>formality</code>: Get the formality parameter value.</li> <li><code>industry</code>: Get the industry parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.quality_metrics/","title":"Module <code>prompt_decorators.decorators.generated.decorators.quality_metrics</code>","text":"<p>Implementation of the QualityMetrics decorator.</p> <p>This module provides the QualityMetrics decorator class for use in prompt engineering.</p> <p>Applies specific quality measurements to evaluate content against defined criteria. This decorator enhances verification by providing quantifiable assessments of aspects like accuracy, completeness, clarity, or other custom metrics.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.quality_metrics/#classes","title":"Classes","text":"<ul> <li><code>QualityMetrics</code>: Applies specific quality measurements to evaluate content against defined criteria. This decorator enhances verification by providing quantifiable assessments of aspects like accuracy, completeness, clarity, or other custom metrics.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.quality_metrics/#class-qualitymetrics","title":"Class <code>QualityMetrics</code>","text":"<p>Applies specific quality measurements to evaluate content against defined criteria. This decorator enhances verification by providing quantifiable assessments of aspects like accuracy, completeness, clarity, or other custom metrics.</p> <p>Attributes:     metrics: Specific quality metrics to measure (e.g., accuracy, completeness, clarity, usefulness). (List[Any])     scale: Rating scale to use for evaluations. (Literal[\"1-5\", \"1-10\", \"percentage\", \"qualitative\"])     explanation: Whether to provide detailed explanations for each metric score. (bool)</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.quality_metrics/#methods","title":"Methods","text":"<ul> <li><code>__init__(metrics, scale=1-5, explanation=True) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.quality_metrics/#properties","title":"Properties","text":"<ul> <li><code>explanation</code>: Get the explanation parameter value.</li> <li><code>metrics</code>: Get the metrics parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> <li><code>scale</code>: Get the scale parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.reasoning/","title":"Module <code>prompt_decorators.decorators.generated.decorators.reasoning</code>","text":"<p>Implementation of the Reasoning decorator.</p> <p>This module provides the Reasoning decorator class for use in prompt engineering.</p> <p>Modifies the AI's response to provide explicit reasoning paths before reaching conclusions. This decorator encourages the model to show its thought process, making responses more transparent and trustworthy.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.reasoning/#classes","title":"Classes","text":"<ul> <li><code>Reasoning</code>: Modifies the AI's response to provide explicit reasoning paths before reaching conclusions. This decorator encourages the model to show its thought process, making responses more transparent and trustworthy.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.reasoning/#class-reasoning","title":"Class <code>Reasoning</code>","text":"<p>Modifies the AI's response to provide explicit reasoning paths before reaching conclusions. This decorator encourages the model to show its thought process, making responses more transparent and trustworthy.</p> <p>Attributes:     depth: The level of detail in the reasoning process. (Literal[\"basic\", \"moderate\", \"comprehensive\"])</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.reasoning/#methods","title":"Methods","text":"<ul> <li><code>__init__(depth=moderate) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.reasoning/#properties","title":"Properties","text":"<ul> <li><code>depth</code>: Get the depth parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.red_team/","title":"Module <code>prompt_decorators.decorators.generated.decorators.red_team</code>","text":"<p>Implementation of the RedTeam decorator.</p> <p>This module provides the RedTeam decorator class for use in prompt engineering.</p> <p>Applies adversarial analysis to test assumptions, identify vulnerabilities, and strengthen proposals by actively looking for flaws. This decorator simulates how an opponent or critic would evaluate and attack ideas, plans, or arguments.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.red_team/#classes","title":"Classes","text":"<ul> <li><code>RedTeam</code>: Applies adversarial analysis to test assumptions, identify vulnerabilities, and strengthen proposals by actively looking for flaws. This decorator simulates how an opponent or critic would evaluate and attack ideas, plans, or arguments.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.red_team/#class-redteam","title":"Class <code>RedTeam</code>","text":"<p>Applies adversarial analysis to test assumptions, identify vulnerabilities, and strengthen proposals by actively looking for flaws. This decorator simulates how an opponent or critic would evaluate and attack ideas, plans, or arguments.</p> <p>Attributes:     strength: How aggressive or challenging the red team analysis should be. (Literal[\"moderate\", \"aggressive\", \"steelman\"])     focus: Specific aspects to focus the red team analysis on. (List[Any])     constructive: Whether to include constructive suggestions for improvement after critiques. (bool)</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.red_team/#methods","title":"Methods","text":"<ul> <li><code>__init__(strength=moderate, focus, constructive=True) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.red_team/#properties","title":"Properties","text":"<ul> <li><code>constructive</code>: Get the constructive parameter value.</li> <li><code>focus</code>: Get the focus parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> <li><code>strength</code>: Get the strength parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.refine/","title":"Module <code>prompt_decorators.decorators.generated.decorators.refine</code>","text":"<p>Implementation of the Refine decorator.</p> <p>This module provides the Refine decorator class for use in prompt engineering.</p> <p>A meta-decorator that iteratively improves the output based on specified criteria or dimensions. This decorator simulates multiple drafts or revisions of content, with each iteration focusing on enhancing particular aspects of the response.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.refine/#classes","title":"Classes","text":"<ul> <li><code>Refine</code>: A meta-decorator that iteratively improves the output based on specified criteria or dimensions. This decorator simulates multiple drafts or revisions of content, with each iteration focusing on enhancing particular aspects of the response.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.refine/#class-refine","title":"Class <code>Refine</code>","text":"<p>A meta-decorator that iteratively improves the output based on specified criteria or dimensions. This decorator simulates multiple drafts or revisions of content, with each iteration focusing on enhancing particular aspects of the response.</p> <p>Attributes:     iterations: Number of refinement cycles to perform. (Any)     focus: Specific aspects to focus on during refinement (e.g., clarity, conciseness, evidence). (List[Any])     showProcess: Whether to show the intermediate steps in the refinement process. (bool)</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.refine/#methods","title":"Methods","text":"<ul> <li><code>__init__(iterations=2, focus, showProcess=False) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.refine/#properties","title":"Properties","text":"<ul> <li><code>focus</code>: Get the focus parameter value.</li> <li><code>iterations</code>: Get the iterations parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> <li><code>showProcess</code>: Get the showProcess parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.remix/","title":"Module <code>prompt_decorators.decorators.generated.decorators.remix</code>","text":"<p>Implementation of the Remix decorator.</p> <p>This module provides the Remix decorator class for use in prompt engineering.</p> <p>Reframes or adapts content for a different context, purpose, or audience than originally intended. This decorator transforms the presentation style while preserving core information, making it accessible and relevant to specific scenarios or demographics.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.remix/#classes","title":"Classes","text":"<ul> <li><code>Remix</code>: Reframes or adapts content for a different context, purpose, or audience than originally intended. This decorator transforms the presentation style while preserving core information, making it accessible and relevant to specific scenarios or demographics.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.remix/#class-remix","title":"Class <code>Remix</code>","text":"<p>Reframes or adapts content for a different context, purpose, or audience than originally intended. This decorator transforms the presentation style while preserving core information, making it accessible and relevant to specific scenarios or demographics.</p> <p>Attributes:     target: The specific audience or context to adapt the content for (e.g., 'executives', 'teenagers', 'technical team', 'sales pitch'). (str)     preserve: What aspects of the original content to prioritize preserving. (Literal[\"facts\", \"structure\", \"tone\", \"comprehensiveness\"])     contrast: Whether to highlight differences between the original framing and the remixed version. (bool)</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.remix/#methods","title":"Methods","text":"<ul> <li><code>__init__(target, preserve=facts, contrast=False) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.remix/#properties","title":"Properties","text":"<ul> <li><code>contrast</code>: Get the contrast parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> <li><code>preserve</code>: Get the preserve parameter value.</li> <li><code>target</code>: Get the target parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.root_cause/","title":"Module <code>prompt_decorators.decorators.generated.decorators.root_cause</code>","text":"<p>Implementation of the RootCause decorator.</p> <p>This module provides the RootCause decorator class for use in prompt engineering.</p> <p>Structures the response to systematically analyze underlying causes of problems or situations. This decorator applies formal root cause analysis methodologies to identify fundamental factors rather than just symptoms or immediate causes.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.root_cause/#classes","title":"Classes","text":"<ul> <li><code>RootCause</code>: Structures the response to systematically analyze underlying causes of problems or situations. This decorator applies formal root cause analysis methodologies to identify fundamental factors rather than just symptoms or immediate causes.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.root_cause/#class-rootcause","title":"Class <code>RootCause</code>","text":"<p>Structures the response to systematically analyze underlying causes of problems or situations. This decorator applies formal root cause analysis methodologies to identify fundamental factors rather than just symptoms or immediate causes.</p> <p>Attributes:     method: The specific root cause analysis methodology to apply. (Literal[\"fivewhys\", \"fishbone\", \"pareto\"])     depth: Level of detail in the analysis (for fivewhys, represents number of 'why' iterations). (Any)</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.root_cause/#methods","title":"Methods","text":"<ul> <li><code>__init__(method=fivewhys, depth=5) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.root_cause/#properties","title":"Properties","text":"<ul> <li><code>depth</code>: Get the depth parameter value.</li> <li><code>method</code>: Get the method parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.schema/","title":"Module <code>prompt_decorators.decorators.generated.decorators.schema</code>","text":"<p>Implementation of the Schema decorator.</p> <p>This module provides the Schema decorator class for use in prompt engineering.</p> <p>Defines a custom structure for the AI's response using a specified schema format. This decorator enables precise control over the output structure, ensuring responses follow a consistent, well-defined format optimized for specific use cases or data processing needs.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.schema/#classes","title":"Classes","text":"<ul> <li><code>Schema</code>: Defines a custom structure for the AI's response using a specified schema format. This decorator enables precise control over the output structure, ensuring responses follow a consistent, well-defined format optimized for specific use cases or data processing needs.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.schema/#class-schema","title":"Class <code>Schema</code>","text":"<p>Defines a custom structure for the AI's response using a specified schema format. This decorator enables precise control over the output structure, ensuring responses follow a consistent, well-defined format optimized for specific use cases or data processing needs.</p> <p>Attributes:     schema: JSON Schema definition or reference to a predefined schema that defines the structure of the response. (str)     strict: Whether to enforce strict schema compliance or allow flexibility. (bool)</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.schema/#methods","title":"Methods","text":"<ul> <li><code>__init__(schema, strict=False) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.schema/#properties","title":"Properties","text":"<ul> <li><code>name</code>: Get the name of the decorator.</li> <li><code>schema</code>: Get the schema parameter value.</li> <li><code>strict</code>: Get the strict parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.socratic/","title":"Module <code>prompt_decorators.decorators.generated.decorators.socratic</code>","text":"<p>Implementation of the Socratic decorator.</p> <p>This module provides the Socratic decorator class for use in prompt engineering.</p> <p>Structures the response as a series of questions that guide the user through a problem or topic. This decorator encourages critical thinking through question-based exploration, helping to uncover assumptions and lead to deeper understanding.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.socratic/#classes","title":"Classes","text":"<ul> <li><code>Socratic</code>: Structures the response as a series of questions that guide the user through a problem or topic. This decorator encourages critical thinking through question-based exploration, helping to uncover assumptions and lead to deeper understanding.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.socratic/#class-socratic","title":"Class <code>Socratic</code>","text":"<p>Structures the response as a series of questions that guide the user through a problem or topic. This decorator encourages critical thinking through question-based exploration, helping to uncover assumptions and lead to deeper understanding.</p> <p>Attributes:     iterations: Number of question-answer cycles to include. (Any)</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.socratic/#methods","title":"Methods","text":"<ul> <li><code>__init__(iterations=3) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.socratic/#properties","title":"Properties","text":"<ul> <li><code>iterations</code>: Get the iterations parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.steelman/","title":"Module <code>prompt_decorators.decorators.generated.decorators.steelman</code>","text":"<p>Implementation of the Steelman decorator.</p> <p>This module provides the Steelman decorator class for use in prompt engineering.</p> <p>Presents the strongest possible version of an argument or position, even those the AI might not agree with. This decorator opposes strawman fallacies by ensuring each viewpoint is represented in its most compelling and charitable form.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.steelman/#classes","title":"Classes","text":"<ul> <li><code>Steelman</code>: Presents the strongest possible version of an argument or position, even those the AI might not agree with. This decorator opposes strawman fallacies by ensuring each viewpoint is represented in its most compelling and charitable form.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.steelman/#class-steelman","title":"Class <code>Steelman</code>","text":"<p>Presents the strongest possible version of an argument or position, even those the AI might not agree with. This decorator opposes strawman fallacies by ensuring each viewpoint is represented in its most compelling and charitable form.</p> <p>Attributes:     sides: Number of different viewpoints to steel-man. (Any)     critique: Whether to include critique after presenting the steel-manned arguments. (bool)     separation: Whether to clearly separate the steel-manned presentations from any analysis. (bool)</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.steelman/#methods","title":"Methods","text":"<ul> <li><code>__init__(sides=2, critique=False, separation=True) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.steelman/#properties","title":"Properties","text":"<ul> <li><code>critique</code>: Get the critique parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> <li><code>separation</code>: Get the separation parameter value.</li> <li><code>sides</code>: Get the sides parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.step_by_step/","title":"Module <code>prompt_decorators.decorators.generated.decorators.step_by_step</code>","text":"<p>Implementation of the StepByStep decorator.</p> <p>This module provides the StepByStep decorator class for use in prompt engineering.</p> <p>Structures the AI's response as a sequence of clearly labeled steps. This decorator helps break down complex processes, explanations, or solutions into manageable, sequential parts for better understanding.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.step_by_step/#classes","title":"Classes","text":"<ul> <li><code>StepByStep</code>: Structures the AI's response as a sequence of clearly labeled steps. This decorator helps break down complex processes, explanations, or solutions into manageable, sequential parts for better understanding.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.step_by_step/#class-stepbystep","title":"Class <code>StepByStep</code>","text":"<p>Structures the AI's response as a sequence of clearly labeled steps. This decorator helps break down complex processes, explanations, or solutions into manageable, sequential parts for better understanding.</p> <p>Attributes:     numbered: Whether to number the steps or use bullet points. (bool)</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.step_by_step/#methods","title":"Methods","text":"<ul> <li><code>__init__(numbered=True) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.step_by_step/#properties","title":"Properties","text":"<ul> <li><code>name</code>: Get the name of the decorator.</li> <li><code>numbered</code>: Get the numbered parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.stress_test/","title":"Module <code>prompt_decorators.decorators.generated.decorators.stress_test</code>","text":"<p>Implementation of the StressTest decorator.</p> <p>This module provides the StressTest decorator class for use in prompt engineering.</p> <p>Tests the robustness of ideas, theories, plans, or systems by applying extreme conditions, edge cases, and unlikely scenarios. This decorator helps identify vulnerabilities, limitations, and breaking points that might not be apparent under normal circumstances.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.stress_test/#classes","title":"Classes","text":"<ul> <li><code>StressTest</code>: Tests the robustness of ideas, theories, plans, or systems by applying extreme conditions, edge cases, and unlikely scenarios. This decorator helps identify vulnerabilities, limitations, and breaking points that might not be apparent under normal circumstances.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.stress_test/#class-stresstest","title":"Class <code>StressTest</code>","text":"<p>Tests the robustness of ideas, theories, plans, or systems by applying extreme conditions, edge cases, and unlikely scenarios. This decorator helps identify vulnerabilities, limitations, and breaking points that might not be apparent under normal circumstances.</p> <p>Attributes:     scenarios: Number of stress test scenarios to apply. (Any)     severity: The intensity level of the stress conditions. (Literal[\"moderate\", \"severe\", \"extreme\"])     domain: Optional specific domain or dimension to stress test (e.g., financial, ethical, scalability). (str)</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.stress_test/#methods","title":"Methods","text":"<ul> <li><code>__init__(scenarios=3, severity=severe, domain) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.stress_test/#properties","title":"Properties","text":"<ul> <li><code>domain</code>: Get the domain parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> <li><code>scenarios</code>: Get the scenarios parameter value.</li> <li><code>severity</code>: Get the severity parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.style_shift/","title":"Module <code>prompt_decorators.decorators.generated.decorators.style_shift</code>","text":"<p>Implementation of the StyleShift decorator.</p> <p>This module provides the StyleShift decorator class for use in prompt engineering.</p> <p>Modifies specific style characteristics of responses such as formality, persuasiveness, or urgency. This decorator enables fine-tuned control over particular aspects of communication style without changing the overall tone.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.style_shift/#classes","title":"Classes","text":"<ul> <li><code>StyleShift</code>: Modifies specific style characteristics of responses such as formality, persuasiveness, or urgency. This decorator enables fine-tuned control over particular aspects of communication style without changing the overall tone.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.style_shift/#class-styleshift","title":"Class <code>StyleShift</code>","text":"<p>Modifies specific style characteristics of responses such as formality, persuasiveness, or urgency. This decorator enables fine-tuned control over particular aspects of communication style without changing the overall tone.</p> <p>Attributes:     aspect: The specific style aspect to modify. (Literal[\"formality\", \"persuasion\", \"urgency\", \"confidence\", \"complexity\"])     level: The intensity level of the style aspect (1-5, where 1 is minimal and 5 is maximal). (Any)     maintain: Style aspects to explicitly maintain while modifying the target aspect. (List[Any])</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.style_shift/#methods","title":"Methods","text":"<ul> <li><code>__init__(aspect, level=3, maintain) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.style_shift/#properties","title":"Properties","text":"<ul> <li><code>aspect</code>: Get the aspect parameter value.</li> <li><code>level</code>: Get the level parameter value.</li> <li><code>maintain</code>: Get the maintain parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.summary/","title":"Module <code>prompt_decorators.decorators.generated.decorators.summary</code>","text":"<p>Implementation of the Summary decorator.</p> <p>This module provides the Summary decorator class for use in prompt engineering.</p> <p>Provides a condensed summary of information that would otherwise be presented in a more detailed format. This decorator is useful for generating executive summaries, article summaries, or concise overviews of complex topics.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.summary/#classes","title":"Classes","text":"<ul> <li><code>Summary</code>: Provides a condensed summary of information that would otherwise be presented in a more detailed format. This decorator is useful for generating executive summaries, article summaries, or concise overviews of complex topics.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.summary/#class-summary","title":"Class <code>Summary</code>","text":"<p>Provides a condensed summary of information that would otherwise be presented in a more detailed format. This decorator is useful for generating executive summaries, article summaries, or concise overviews of complex topics.</p> <p>Attributes:     length: Relative length of the summary. (Literal[\"short\", \"medium\", \"long\"])     wordCount: Approximate target word count for the summary. (Any)     position: Where to position the summary in relation to any full content. (Literal[\"beginning\", \"end\", \"standalone\"])</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.summary/#methods","title":"Methods","text":"<ul> <li><code>__init__(length=medium, wordCount, position=standalone) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.summary/#properties","title":"Properties","text":"<ul> <li><code>length</code>: Get the length parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> <li><code>position</code>: Get the position parameter value.</li> <li><code>wordCount</code>: Get the wordCount parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.table_format/","title":"Module <code>prompt_decorators.decorators.generated.decorators.table_format</code>","text":"<p>Implementation of the TableFormat decorator.</p> <p>This module provides the TableFormat decorator class for use in prompt engineering.</p> <p>Structures the AI's response in a tabular format with defined columns. This decorator is ideal for presenting comparative data, lists of items with attributes, or any information that benefits from clear columnar organization.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.table_format/#classes","title":"Classes","text":"<ul> <li><code>TableFormat</code>: Structures the AI's response in a tabular format with defined columns. This decorator is ideal for presenting comparative data, lists of items with attributes, or any information that benefits from clear columnar organization.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.table_format/#class-tableformat","title":"Class <code>TableFormat</code>","text":"<p>Structures the AI's response in a tabular format with defined columns. This decorator is ideal for presenting comparative data, lists of items with attributes, or any information that benefits from clear columnar organization.</p> <p>Attributes:     columns: List of column names for the table. (List[Any])     format: Format style for the table representation. (Literal[\"markdown\", \"ascii\", \"csv\"])     alignment: Text alignment within table cells. (Literal[\"left\", \"center\", \"right\"])</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.table_format/#methods","title":"Methods","text":"<ul> <li><code>__init__(columns, format=markdown, alignment=left) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.table_format/#properties","title":"Properties","text":"<ul> <li><code>alignment</code>: Get the alignment parameter value.</li> <li><code>columns</code>: Get the columns parameter value.</li> <li><code>format</code>: Get the format parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.timeline/","title":"Module <code>prompt_decorators.decorators.generated.decorators.timeline</code>","text":"<p>Implementation of the Timeline decorator.</p> <p>This module provides the Timeline decorator class for use in prompt engineering.</p> <p>Organizes information in chronological order, highlighting key events or developments over time. This decorator is ideal for historical accounts, project planning, process evolution, or any topic with a temporal dimension.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.timeline/#classes","title":"Classes","text":"<ul> <li><code>Timeline</code>: Organizes information in chronological order, highlighting key events or developments over time. This decorator is ideal for historical accounts, project planning, process evolution, or any topic with a temporal dimension.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.timeline/#class-timeline","title":"Class <code>Timeline</code>","text":"<p>Organizes information in chronological order, highlighting key events or developments over time. This decorator is ideal for historical accounts, project planning, process evolution, or any topic with a temporal dimension.</p> <p>Attributes:     granularity: The level of time detail to include in the timeline. (Literal[\"day\", \"month\", \"year\", \"decade\", \"century\", \"era\"])     format: The presentation format for the timeline. (Literal[\"list\", \"narrative\", \"table\"])     details: The level of detail to include for each timeline event. (Literal[\"minimal\", \"moderate\", \"comprehensive\"])</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.timeline/#methods","title":"Methods","text":"<ul> <li><code>__init__(granularity=year, format=list, details=moderate) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.timeline/#properties","title":"Properties","text":"<ul> <li><code>details</code>: Get the details parameter value.</li> <li><code>format</code>: Get the format parameter value.</li> <li><code>granularity</code>: Get the granularity parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.tone/","title":"Module <code>prompt_decorators.decorators.generated.decorators.tone</code>","text":"<p>Implementation of the Tone decorator.</p> <p>This module provides the Tone decorator class for use in prompt engineering.</p> <p>Adjusts the writing style and tone of the AI's response. This decorator helps ensure that responses are appropriately styled for different audiences and contexts, from formal technical documentation to casual explanations.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.tone/#classes","title":"Classes","text":"<ul> <li><code>Tone</code>: Adjusts the writing style and tone of the AI's response. This decorator helps ensure that responses are appropriately styled for different audiences and contexts, from formal technical documentation to casual explanations.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.tone/#class-tone","title":"Class <code>Tone</code>","text":"<p>Adjusts the writing style and tone of the AI's response. This decorator helps ensure that responses are appropriately styled for different audiences and contexts, from formal technical documentation to casual explanations.</p> <p>Attributes:     style: The desired tone and style for the response. (Literal[\"formal\", \"casual\", \"friendly\", \"technical\", \"humorous\"])</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.tone/#methods","title":"Methods","text":"<ul> <li><code>__init__(style) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.tone/#properties","title":"Properties","text":"<ul> <li><code>name</code>: Get the name of the decorator.</li> <li><code>style</code>: Get the style parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.tree_of_thought/","title":"Module <code>prompt_decorators.decorators.generated.decorators.tree_of_thought</code>","text":"<p>Implementation of the TreeOfThought decorator.</p> <p>This module provides the TreeOfThought decorator class for use in prompt engineering.</p> <p>Organizes the response as a branching exploration of multiple reasoning paths. This decorator enables the AI to consider several possible approaches or hypotheses simultaneously, exploring the implications of each before reaching conclusions.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.tree_of_thought/#classes","title":"Classes","text":"<ul> <li><code>TreeOfThought</code>: Organizes the response as a branching exploration of multiple reasoning paths. This decorator enables the AI to consider several possible approaches or hypotheses simultaneously, exploring the implications of each before reaching conclusions.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.tree_of_thought/#class-treeofthought","title":"Class <code>TreeOfThought</code>","text":"<p>Organizes the response as a branching exploration of multiple reasoning paths. This decorator enables the AI to consider several possible approaches or hypotheses simultaneously, exploring the implications of each before reaching conclusions.</p> <p>Attributes:     branches: Number of different reasoning branches to explore. (Any)     depth: Maximum depth of reasoning in each branch. (Any)     pruning: Whether to eliminate less promising branches early. (bool)</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.tree_of_thought/#methods","title":"Methods","text":"<ul> <li><code>__init__(branches=3, depth=3, pruning=False) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.tree_of_thought/#properties","title":"Properties","text":"<ul> <li><code>branches</code>: Get the branches parameter value.</li> <li><code>depth</code>: Get the depth parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> <li><code>pruning</code>: Get the pruning parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.uncertainty/","title":"Module <code>prompt_decorators.decorators.generated.decorators.uncertainty</code>","text":"<p>Implementation of the Uncertainty decorator.</p> <p>This module provides the Uncertainty decorator class for use in prompt engineering.</p> <p>Explicitly highlights areas of uncertainty in the response. This decorator promotes intellectual honesty by clearly indicating what is known with confidence versus what is speculative, unknown, or subject to debate.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.uncertainty/#classes","title":"Classes","text":"<ul> <li><code>Uncertainty</code>: Explicitly highlights areas of uncertainty in the response. This decorator promotes intellectual honesty by clearly indicating what is known with confidence versus what is speculative, unknown, or subject to debate.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.uncertainty/#class-uncertainty","title":"Class <code>Uncertainty</code>","text":"<p>Explicitly highlights areas of uncertainty in the response. This decorator promotes intellectual honesty by clearly indicating what is known with confidence versus what is speculative, unknown, or subject to debate.</p> <p>Attributes:     format: How to format uncertainty indications in the response. (Literal[\"inline\", \"section\", \"confidence\"])     threshold: The threshold for flagging uncertain content. (Literal[\"low\", \"medium\", \"high\"])     reason: Whether to explain the reason for uncertainty. (bool)</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.uncertainty/#methods","title":"Methods","text":"<ul> <li><code>__init__(format=inline, threshold=medium, reason=False) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.uncertainty/#properties","title":"Properties","text":"<ul> <li><code>format</code>: Get the format parameter value.</li> <li><code>name</code>: Get the name of the decorator.</li> <li><code>reason</code>: Get the reason parameter value.</li> <li><code>threshold</code>: Get the threshold parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.version/","title":"Module <code>prompt_decorators.decorators.generated.decorators.version</code>","text":"<p>Implementation of the Version decorator.</p> <p>This module provides the Version decorator class for use in prompt engineering.</p> <p>Specifies the version of the Prompt Decorators standard to use. This decorator must be the first in any sequence when used, ensuring proper interpretation of decorators according to the specified standard version.</p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.version/#classes","title":"Classes","text":"<ul> <li><code>Version</code>: Specifies the version of the Prompt Decorators standard to use. This decorator must be the first in any sequence when used, ensuring proper interpretation of decorators according to the specified standard version.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.version/#class-version","title":"Class <code>Version</code>","text":"<p>Specifies the version of the Prompt Decorators standard to use. This decorator must be the first in any sequence when used, ensuring proper interpretation of decorators according to the specified standard version.</p> <p>Attributes:     standard: The semantic version of the Prompt Decorators standard to use. (str)</p> <p>Inherits from: <code>BaseDecorator</code></p>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.version/#methods","title":"Methods","text":"<ul> <li><code>__init__(standard) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>apply(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>apply_to_prompt(prompt) -&gt; &lt;class 'str'&gt;</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.core.base.BaseDecorator'&gt;</code></li> <li><code>get_metadata() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>is_compatible_with_version(version) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>to_string() -&gt; &lt;class 'str'&gt;</code></li> <li><code>transform_response(response) -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated.decorators.version/#properties","title":"Properties","text":"<ul> <li><code>name</code>: Get the name of the decorator.</li> <li><code>standard</code>: Get the standard parameter value.</li> </ul>"},{"location":"api/modules/prompt_decorators.decorators.generated/","title":"Module <code>prompt_decorators.decorators.generated</code>","text":"<p>Generated decorators package.</p> <p>This package contains auto-generated decorator implementations.</p>"},{"location":"api/modules/prompt_decorators.decorators/","title":"Module <code>prompt_decorators.decorators</code>","text":"<p>Decorators package for prompt_decorators.</p> <p>This package contains all the decorator implementations.</p>"},{"location":"api/modules/prompt_decorators.generator.code_gen/","title":"Module <code>prompt_decorators.generator.code_gen</code>","text":"<p>Code Generator Module.</p> <p>This module generates Python code from decorator definitions in the registry.</p>"},{"location":"api/modules/prompt_decorators.generator.code_gen/#classes","title":"Classes","text":"<ul> <li><code>CodeGenerator</code>: Generator for Python code from decorator definitions.</li> </ul>"},{"location":"api/modules/prompt_decorators.generator.code_gen/#class-codegenerator","title":"Class <code>CodeGenerator</code>","text":"<p>Generator for Python code from decorator definitions.</p>"},{"location":"api/modules/prompt_decorators.generator.code_gen/#methods","title":"Methods","text":"<ul> <li><code>__init__(decorators)</code></li> <li><code>generate_all() -&gt; dict[str, str]</code></li> </ul>"},{"location":"api/modules/prompt_decorators.generator.code_gen/#functions","title":"Functions","text":"<ul> <li><code>camel_to_snake</code>: Convert CamelCase to snake_case.</li> <li><code>generate_code</code>: Generate Python code from decorator definitions.</li> <li><code>snake_to_camel</code>: Convert snake_case to CamelCase.</li> </ul>"},{"location":"api/modules/prompt_decorators.generator.code_gen/#function-camel_to_snake","title":"Function <code>camel_to_snake</code>","text":"<p>Signature: <code>camel_to_snake(name) -&gt; &lt;class 'str'&gt;</code></p> <p>Convert CamelCase to snake_case.</p>"},{"location":"api/modules/prompt_decorators.generator.code_gen/#function-generate_code","title":"Function <code>generate_code</code>","text":"<p>Signature: <code>generate_code(decorators, output_dir) -&gt; typing.Dict[str, str]</code></p> <p>Generate Python code from decorator definitions.</p> <p>Args:     decorators: List of decorator definitions     output_dir: Optional output directory to write files to</p> <p>Returns:     Dictionary mapping file paths to generated code</p>"},{"location":"api/modules/prompt_decorators.generator.code_gen/#function-snake_to_camel","title":"Function <code>snake_to_camel</code>","text":"<p>Signature: <code>snake_to_camel(name) -&gt; &lt;class 'str'&gt;</code></p> <p>Convert snake_case to CamelCase.</p> <p>If the input is already in camelCase, it will be properly converted to CamelCase with the first letter capitalized.</p> <p>Args:     name: The name to convert</p> <p>Returns:     The converted name</p>"},{"location":"api/modules/prompt_decorators.generator/","title":"Module <code>prompt_decorators.generator</code>","text":"<p>Generator package for prompt decorators.</p> <p>This package contains the code generators and registry scanners for prompt decorators. It allows for automatic generation of decorator code and tests from registry definitions.</p>"},{"location":"api/modules/prompt_decorators.generator.registry/","title":"Module <code>prompt_decorators.generator.registry</code>","text":"<p>Registry Scanner Module.</p> <p>This module scans the registry directory and parses decorator JSON files.</p>"},{"location":"api/modules/prompt_decorators.generator.registry/#classes","title":"Classes","text":"<ul> <li><code>RegistryScanner</code>: Scanner for decorator registry files.</li> </ul>"},{"location":"api/modules/prompt_decorators.generator.registry/#class-registryscanner","title":"Class <code>RegistryScanner</code>","text":"<p>Scanner for decorator registry files.</p>"},{"location":"api/modules/prompt_decorators.generator.registry/#methods","title":"Methods","text":"<ul> <li><code>__init__(registry_path)</code></li> <li><code>get_decorators_by_category(category) -&gt; typing.List[typing.Dict[str, typing.Any]]</code></li> <li><code>scan() -&gt; typing.List[typing.Dict[str, typing.Any]]</code></li> </ul>"},{"location":"api/modules/prompt_decorators.generator.registry/#functions","title":"Functions","text":"<ul> <li><code>scan_registry</code>: Scan the registry at the given path and return all decorator definitions.</li> </ul>"},{"location":"api/modules/prompt_decorators.generator.registry/#function-scan_registry","title":"Function <code>scan_registry</code>","text":"<p>Signature: <code>scan_registry(registry_path) -&gt; typing.List[typing.Dict[str, typing.Any]]</code></p> <p>Scan the registry at the given path and return all decorator definitions.</p> <p>Args:     registry_path: Path to the decorator registry</p> <p>Returns:     List of decorator definitions</p>"},{"location":"api/modules/prompt_decorators.generator.test_gen/","title":"Module <code>prompt_decorators.generator.test_gen</code>","text":"<p>Test Generator for Prompt Decorators. This module generates comprehensive unit tests for all decorators defined in the registry. It creates test cases for: 1. Decorator initialization with valid and invalid parameters 2. Parameter validation 3. Apply method functionality 4. Serialization/deserialization 5. Compatibility checks</p> <p>The generated tests follow pytest conventions and can be run with standard pytest commands.</p>"},{"location":"api/modules/prompt_decorators.generator.test_gen/#classes","title":"Classes","text":"<ul> <li><code>Parameter</code>: Parameter class for test generation.</li> <li><code>TestGenerator</code>: Generator for decorator unit tests.</li> </ul>"},{"location":"api/modules/prompt_decorators.generator.test_gen/#class-parameter","title":"Class <code>Parameter</code>","text":"<p>Parameter class for test generation.</p>"},{"location":"api/modules/prompt_decorators.generator.test_gen/#methods","title":"Methods","text":"<ul> <li><code>__init__(name, type=string, required=False, validation, schema, enum, description)</code></li> </ul>"},{"location":"api/modules/prompt_decorators.generator.test_gen/#class-testgenerator","title":"Class <code>TestGenerator</code>","text":"<p>Generator for decorator unit tests.</p>"},{"location":"api/modules/prompt_decorators.generator.test_gen/#methods_1","title":"Methods","text":"<ul> <li><code>__init__(registry_dir, output_dir, template_dir)</code></li> <li><code>generate_all_tests() -&gt; typing.List[str]</code></li> <li><code>generate_conftest() -&gt; &lt;class 'str'&gt;</code></li> <li><code>generate_decorator_test(decorator_data) -&gt; typing.Optional[str]</code></li> <li><code>generate_test_discovery() -&gt; &lt;class 'str'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.generator.test_gen/#functions","title":"Functions","text":"<ul> <li><code>main</code>: Run the test generator as a standalone script.</li> </ul>"},{"location":"api/modules/prompt_decorators.generator.test_gen/#function-main","title":"Function <code>main</code>","text":"<p>Signature: <code>main()</code></p> <p>Run the test generator as a standalone script.</p>"},{"location":"api/modules/prompt_decorators/","title":"Module <code>prompt_decorators</code>","text":"<p>Prompt Decorators Framework.</p> <p>A Python framework for defining, managing, and applying prompt decorators to enhance interactions with Large Language Models (LLMs).</p>"},{"location":"api/modules/prompt_decorators.utils.cache/","title":"Module <code>prompt_decorators.utils.cache</code>","text":"<p>Decorator Cache Module.</p> <p>This module provides a caching system for decorator definitions and instances.</p>"},{"location":"api/modules/prompt_decorators.utils.cache/#classes","title":"Classes","text":"<ul> <li><code>DecoratorCache</code>: Cache for decorator definitions and instances.</li> </ul>"},{"location":"api/modules/prompt_decorators.utils.cache/#class-decoratorcache","title":"Class <code>DecoratorCache</code>","text":"<p>Cache for decorator definitions and instances.</p> <p>This class provides a caching system for decorator definitions and instances, with support for cache invalidation and metrics.</p>"},{"location":"api/modules/prompt_decorators.utils.cache/#methods","title":"Methods","text":"<ul> <li><code>clear() -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>get_class(key) -&gt; typing.Optional[typing.Type[prompt_decorators.core.base.BaseDecorator]]</code></li> <li><code>get_config() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>get_definition(key) -&gt; typing.Optional[typing.Dict[str, typing.Any]]</code></li> <li><code>get_instance(key) -&gt; typing.Optional[prompt_decorators.core.base.BaseDecorator]</code></li> <li><code>get_metrics() -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>invalidate_definition(key) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>invalidate_instance(key) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>set_class(key, decorator_class) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>set_config(config) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>set_definition(key, definition) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>set_instance(key, instance) -&gt; &lt;class 'NoneType'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.utils.cache/#functions","title":"Functions","text":"<ul> <li><code>get_cache</code>: Get the global decorator cache instance.</li> </ul>"},{"location":"api/modules/prompt_decorators.utils.cache/#function-get_cache","title":"Function <code>get_cache</code>","text":"<p>Signature: <code>get_cache() -&gt; &lt;class 'prompt_decorators.utils.cache.DecoratorCache'&gt;</code></p> <p>Get the global decorator cache instance.</p> <p>Returns:     The global decorator cache instance</p>"},{"location":"api/modules/prompt_decorators.utils.compatibility/","title":"Module <code>prompt_decorators.utils.compatibility</code>","text":"<p>Decorator Compatibility Module.</p> <p>This module provides utilities for checking compatibility between decorators.</p>"},{"location":"api/modules/prompt_decorators.utils.compatibility/#classes","title":"Classes","text":"<ul> <li><code>CompatibilityChecker</code>: Checker for decorator compatibility.</li> <li><code>CompatibilityIssue</code>: Class representing a compatibility issue between decorators.</li> </ul>"},{"location":"api/modules/prompt_decorators.utils.compatibility/#class-compatibilitychecker","title":"Class <code>CompatibilityChecker</code>","text":"<p>Checker for decorator compatibility.</p>"},{"location":"api/modules/prompt_decorators.utils.compatibility/#methods","title":"Methods","text":"<ul> <li><code>__init__()</code></li> <li><code>add_incompatible_pair(decorator1, decorator2, message) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>add_rule(decorator1, decorator2, rule) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>check_compatibility(decorator1, decorator2) -&gt; typing.List[prompt_decorators.utils.compatibility.CompatibilityIssue]</code></li> <li><code>check_compatibility_group(decorators) -&gt; typing.List[prompt_decorators.utils.compatibility.CompatibilityIssue]</code></li> </ul>"},{"location":"api/modules/prompt_decorators.utils.compatibility/#class-compatibilityissue","title":"Class <code>CompatibilityIssue</code>","text":"<p>Class representing a compatibility issue between decorators.</p>"},{"location":"api/modules/prompt_decorators.utils.compatibility/#methods_1","title":"Methods","text":"<ul> <li><code>__init__(message, decorator1, decorator2, severity=warning)</code></li> </ul>"},{"location":"api/modules/prompt_decorators.utils.compatibility/#functions","title":"Functions","text":"<ul> <li><code>get_compatibility_checker</code>: Get the global compatibility checker.</li> <li><code>setup_core_compatibility_rules</code>: Set up compatibility rules for core decorators.</li> </ul>"},{"location":"api/modules/prompt_decorators.utils.compatibility/#function-get_compatibility_checker","title":"Function <code>get_compatibility_checker</code>","text":"<p>Signature: <code>get_compatibility_checker() -&gt; &lt;class 'prompt_decorators.utils.compatibility.CompatibilityChecker'&gt;</code></p> <p>Get the global compatibility checker.</p> <p>Returns:     The global compatibility checker instance</p>"},{"location":"api/modules/prompt_decorators.utils.compatibility/#function-setup_core_compatibility_rules","title":"Function <code>setup_core_compatibility_rules</code>","text":"<p>Signature: <code>setup_core_compatibility_rules() -&gt; &lt;class 'NoneType'&gt;</code></p> <p>Set up compatibility rules for core decorators.</p>"},{"location":"api/modules/prompt_decorators.utils.discovery/","title":"Module <code>prompt_decorators.utils.discovery</code>","text":"<p>Decorator discovery and registration utilities.</p> <p>This module provides utilities for discovering and registering prompt decorators.</p>"},{"location":"api/modules/prompt_decorators.utils.discovery/#classes","title":"Classes","text":"<ul> <li><code>DecoratorRegistry</code>: Registry for prompt decorators.</li> </ul>"},{"location":"api/modules/prompt_decorators.utils.discovery/#class-decoratorregistry","title":"Class <code>DecoratorRegistry</code>","text":"<p>Registry for prompt decorators.</p> <p>This class provides methods for registering and discovering decorators at runtime.</p>"},{"location":"api/modules/prompt_decorators.utils.discovery/#methods","title":"Methods","text":"<ul> <li><code>__init__()</code></li> <li><code>clear()</code></li> <li><code>create_decorator(name, parameters) -&gt; typing.Optional[prompt_decorators.core.base.BaseDecorator]</code></li> <li><code>find_decorators_by_category(category) -&gt; typing.Dict[str, typing.Type[prompt_decorators.core.base.BaseDecorator]]</code></li> <li><code>get_all_decorator_instances() -&gt; typing.Dict[str, prompt_decorators.core.base.BaseDecorator]</code></li> <li><code>get_all_decorators() -&gt; typing.Dict[str, typing.Type[prompt_decorators.core.base.BaseDecorator]]</code></li> <li><code>get_categories() -&gt; typing.Set[str]</code></li> <li><code>get_decorator(name) -&gt; typing.Optional[typing.Type[prompt_decorators.core.base.BaseDecorator]]</code></li> <li><code>get_decorator_instance(name) -&gt; typing.Optional[prompt_decorators.core.base.BaseDecorator]</code></li> <li><code>register_all_from_directory(directory) -&gt; &lt;class 'int'&gt;</code></li> <li><code>register_all_from_json_directory(directory) -&gt; &lt;class 'int'&gt;</code></li> <li><code>register_decorator(decorator_class) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>register_decorator_instance(decorator) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>register_from_json_file(file_path) -&gt; typing.Optional[typing.Type[prompt_decorators.core.base.BaseDecorator]]</code></li> <li><code>register_from_json_string(json_string) -&gt; typing.Optional[typing.Type[prompt_decorators.core.base.BaseDecorator]]</code></li> </ul>"},{"location":"api/modules/prompt_decorators.utils.discovery/#functions","title":"Functions","text":"<ul> <li><code>get_registry</code>: Get the global decorator registry.</li> </ul>"},{"location":"api/modules/prompt_decorators.utils.discovery/#function-get_registry","title":"Function <code>get_registry</code>","text":"<p>Signature: <code>get_registry() -&gt; &lt;class 'prompt_decorators.utils.discovery.DecoratorRegistry'&gt;</code></p> <p>Get the global decorator registry.</p> <p>Returns:     The global decorator registry instance</p>"},{"location":"api/modules/prompt_decorators.utils.doc_gen/","title":"Module <code>prompt_decorators.utils.doc_gen</code>","text":"<p>Documentation Generator Module.</p> <p>This module provides utilities for generating API documentation from code and registry metadata.</p>"},{"location":"api/modules/prompt_decorators.utils.doc_gen/#classes","title":"Classes","text":"<ul> <li><code>DocGenerator</code>: Generator for API documentation from code and registry metadata.</li> </ul>"},{"location":"api/modules/prompt_decorators.utils.doc_gen/#class-docgenerator","title":"Class <code>DocGenerator</code>","text":"<p>Generator for API documentation from code and registry metadata.</p> <p>This class provides utilities for extracting docstrings, type annotations, and other metadata from Python code, and generating documentation in various formats.</p>"},{"location":"api/modules/prompt_decorators.utils.doc_gen/#methods","title":"Methods","text":"<ul> <li><code>__init__(package_path, registry_path, output_dir)</code></li> <li><code>extract_package_docs(package_name) -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>generate_cli() -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>generate_html_docs(output_dir) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>generate_markdown_docs(output_dir) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>load_registry_data() -&gt; typing.Dict[str, typing.Dict[str, typing.Any]]</code></li> <li><code>merge_code_and_registry_docs() -&gt; typing.Dict[str, typing.Dict[str, typing.Any]]</code></li> </ul>"},{"location":"api/modules/prompt_decorators.utils.doc_gen/#functions","title":"Functions","text":"<ul> <li><code>get_doc_generator</code>: Get a documentation generator.</li> </ul>"},{"location":"api/modules/prompt_decorators.utils.doc_gen/#function-get_doc_generator","title":"Function <code>get_doc_generator</code>","text":"<p>Signature: <code>get_doc_generator(package_path, registry_path, output_dir) -&gt; &lt;class 'prompt_decorators.utils.doc_gen.DocGenerator'&gt;</code></p> <p>Get a documentation generator.</p> <p>Args:     package_path: Path to the Python package to document     registry_path: Path to the registry directory containing decorator definitions     output_dir: Directory where documentation should be written</p> <p>Returns:     A documentation generator instance</p>"},{"location":"api/modules/prompt_decorators.utils.factory/","title":"Module <code>prompt_decorators.utils.factory</code>","text":"<p>Decorator Factory Module.</p> <p>This module provides utilities for creating decorator instances from JSON definitions.</p>"},{"location":"api/modules/prompt_decorators.utils.factory/#classes","title":"Classes","text":"<ul> <li><code>DecoratorFactory</code>: Factory for creating decorator instances from JSON definitions.</li> </ul>"},{"location":"api/modules/prompt_decorators.utils.factory/#class-decoratorfactory","title":"Class <code>DecoratorFactory</code>","text":"<p>Factory for creating decorator instances from JSON definitions.</p> <p>This class provides utilities for creating decorator instances from JSON definitions, either by using existing decorator classes or by dynamically generating new ones.</p>"},{"location":"api/modules/prompt_decorators.utils.factory/#methods","title":"Methods","text":"<ul> <li><code>__init__(registry)</code></li> <li><code>create_all_from_directory(directory_path) -&gt; typing.List[prompt_decorators.core.base.BaseDecorator]</code></li> <li><code>create_dynamic_class(decorator_data) -&gt; typing.Type[prompt_decorators.core.base.BaseDecorator]</code></li> <li><code>create_from_dict(decorator_data) -&gt; typing.Optional[prompt_decorators.core.base.BaseDecorator]</code></li> <li><code>create_from_file(file_path) -&gt; typing.Optional[prompt_decorators.core.base.BaseDecorator]</code></li> <li><code>create_from_json_string(json_string) -&gt; typing.Optional[prompt_decorators.core.base.BaseDecorator]</code></li> <li><code>extract_parameters(decorator_data) -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>find_decorator_class(decorator_name) -&gt; typing.Optional[typing.Type[prompt_decorators.core.base.BaseDecorator]]</code></li> </ul>"},{"location":"api/modules/prompt_decorators.utils.json_loader/","title":"Module <code>prompt_decorators.utils.json_loader</code>","text":"<p>JSON loading utilities for decorator definitions.</p> <p>This module provides utilities for loading and validating decorator definitions from JSON.</p>"},{"location":"api/modules/prompt_decorators.utils.json_loader/#classes","title":"Classes","text":"<ul> <li><code>JSONLoader</code>: Loader for decorator definitions from JSON.</li> </ul>"},{"location":"api/modules/prompt_decorators.utils.json_loader/#class-jsonloader","title":"Class <code>JSONLoader</code>","text":"<p>Loader for decorator definitions from JSON.</p> <p>This class provides utilities for loading decorator definitions from JSON strings, files, or directories, and validating them against a schema.</p>"},{"location":"api/modules/prompt_decorators.utils.json_loader/#methods","title":"Methods","text":"<ul> <li><code>__init__(schema_path)</code></li> <li><code>load_from_directory(directory_path, validate=True) -&gt; typing.List[typing.Dict[str, typing.Any]]</code></li> <li><code>load_from_file(file_path, validate=True) -&gt; typing.Dict[str, typing.Any]</code></li> <li><code>load_from_string(json_string, validate=True) -&gt; typing.Dict[str, typing.Any]</code></li> </ul>"},{"location":"api/modules/prompt_decorators.utils.json_loader/#functions","title":"Functions","text":"<ul> <li><code>load_json_file</code>: Load a JSON file.</li> </ul>"},{"location":"api/modules/prompt_decorators.utils.json_loader/#function-load_json_file","title":"Function <code>load_json_file</code>","text":"<p>Signature: <code>load_json_file(file_path) -&gt; typing.Dict[str, typing.Any]</code></p> <p>Load a JSON file.</p> <p>Args:     file_path: Path to the JSON file</p> <p>Returns:     The loaded JSON data as a dictionary</p> <p>Raises:     FileNotFoundError: If the file is not found     json.JSONDecodeError: If the JSON is invalid</p>"},{"location":"api/modules/prompt_decorators.utils/","title":"Module <code>prompt_decorators.utils</code>","text":"<p>Utils package for prompt decorators.</p> <p>This package provides utility functions and classes for the prompt decorators framework.</p>"},{"location":"api/modules/prompt_decorators.utils.model_detection/","title":"Module <code>prompt_decorators.utils.model_detection</code>","text":"<p>Model detection and capability utilities.</p> <p>This module provides utilities for detecting model capabilities and features.</p>"},{"location":"api/modules/prompt_decorators.utils.model_detection/#classes","title":"Classes","text":"<ul> <li><code>ModelCapabilities</code>: Class to represent the capabilities of a model.</li> <li><code>ModelDetector</code>: Detector for model capabilities.</li> </ul>"},{"location":"api/modules/prompt_decorators.utils.model_detection/#class-modelcapabilities","title":"Class <code>ModelCapabilities</code>","text":"<p>Class to represent the capabilities of a model.</p> <p>This class stores information about what a model can and cannot do, such as supported decorator features and parameter types.</p>"},{"location":"api/modules/prompt_decorators.utils.model_detection/#methods","title":"Methods","text":"<ul> <li><code>__init__(model_id, model_family=unknown, version=unknown, capabilities)</code></li> <li><code>from_dict(data) -&gt; &lt;class 'prompt_decorators.utils.model_detection.ModelCapabilities'&gt;</code></li> <li><code>get_capability(capability, default) -&gt; typing.Any</code></li> <li><code>set_capability(capability, value) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>supports_feature(feature) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> </ul>"},{"location":"api/modules/prompt_decorators.utils.model_detection/#class-modeldetector","title":"Class <code>ModelDetector</code>","text":"<p>Detector for model capabilities.</p> <p>This class provides utilities for detecting and querying model capabilities.</p>"},{"location":"api/modules/prompt_decorators.utils.model_detection/#methods_1","title":"Methods","text":"<ul> <li><code>detect_model_from_api(api_name) -&gt; typing.Optional[str]</code></li> <li><code>get_all_families() -&gt; typing.List[str]</code></li> <li><code>get_all_models() -&gt; typing.List[prompt_decorators.utils.model_detection.ModelCapabilities]</code></li> <li><code>get_model_capabilities(model_id) -&gt; typing.Optional[prompt_decorators.utils.model_detection.ModelCapabilities]</code></li> <li><code>get_models_by_family(family) -&gt; typing.List[prompt_decorators.utils.model_detection.ModelCapabilities]</code></li> <li><code>register_model(model) -&gt; &lt;class 'NoneType'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.utils.model_detection/#functions","title":"Functions","text":"<ul> <li><code>get_model_detector</code>: Get the global model detector instance.</li> </ul>"},{"location":"api/modules/prompt_decorators.utils.model_detection/#function-get_model_detector","title":"Function <code>get_model_detector</code>","text":"<p>Signature: <code>get_model_detector() -&gt; &lt;class 'prompt_decorators.utils.model_detection.ModelDetector'&gt;</code></p> <p>Get the global model detector instance.</p> <p>Returns:     The global model detector instance</p>"},{"location":"api/modules/prompt_decorators.utils.plugins/","title":"Module <code>prompt_decorators.utils.plugins</code>","text":"<p>Plugin System Module.</p> <p>This module provides a plugin architecture for decorator extensions.</p>"},{"location":"api/modules/prompt_decorators.utils.plugins/#classes","title":"Classes","text":"<ul> <li><code>Plugin</code>: Class representing a plugin containing decorator extensions.</li> <li><code>PluginManager</code>: Manager for decorator plugins.</li> </ul>"},{"location":"api/modules/prompt_decorators.utils.plugins/#class-plugin","title":"Class <code>Plugin</code>","text":"<p>Class representing a plugin containing decorator extensions.</p> <p>A plugin is a collection of decorators that can be loaded dynamically.</p>"},{"location":"api/modules/prompt_decorators.utils.plugins/#methods","title":"Methods","text":"<ul> <li><code>__init__(name, version, description, author, path, decorators, metadata)</code></li> <li><code>disable() -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>enable() -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>to_dict() -&gt; typing.Dict[str, typing.Any]</code></li> </ul>"},{"location":"api/modules/prompt_decorators.utils.plugins/#class-pluginmanager","title":"Class <code>PluginManager</code>","text":"<p>Manager for decorator plugins.</p> <p>This class provides functionality for loading, managing, and monitoring plugins.</p>"},{"location":"api/modules/prompt_decorators.utils.plugins/#methods_1","title":"Methods","text":"<ul> <li><code>add_plugin_directory(directory) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>discover_plugins() -&gt; typing.List[prompt_decorators.utils.plugins.Plugin]</code></li> <li><code>get_all_plugins() -&gt; typing.Dict[str, prompt_decorators.utils.plugins.Plugin]</code></li> <li><code>get_plugin(plugin_name) -&gt; typing.Optional[prompt_decorators.utils.plugins.Plugin]</code></li> <li><code>load_discovered_plugins() -&gt; &lt;class 'int'&gt;</code></li> <li><code>load_plugin(plugin) -&gt; &lt;class 'bool'&gt;</code></li> <li><code>register_hook(hook_name, callback) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>start_watching_directories(interval=10) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>stop_watching_directories() -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>unload_plugin(plugin_name) -&gt; &lt;class 'bool'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.utils.plugins/#functions","title":"Functions","text":"<ul> <li><code>get_plugin_manager</code>: Get the global plugin manager.</li> </ul>"},{"location":"api/modules/prompt_decorators.utils.plugins/#function-get_plugin_manager","title":"Function <code>get_plugin_manager</code>","text":"<p>Signature: <code>get_plugin_manager() -&gt; &lt;class 'prompt_decorators.utils.plugins.PluginManager'&gt;</code></p> <p>Get the global plugin manager.</p> <p>Returns:     The global plugin manager instance</p>"},{"location":"api/modules/prompt_decorators.utils.telemetry/","title":"Module <code>prompt_decorators.utils.telemetry</code>","text":"<p>Telemetry Module.</p> <p>This module provides an opt-in telemetry system for tracking decorator usage patterns.</p>"},{"location":"api/modules/prompt_decorators.utils.telemetry/#classes","title":"Classes","text":"<ul> <li><code>TelemetryManager</code>: Manager for collecting and reporting telemetry data.</li> </ul>"},{"location":"api/modules/prompt_decorators.utils.telemetry/#class-telemetrymanager","title":"Class <code>TelemetryManager</code>","text":"<p>Manager for collecting and reporting telemetry data.</p> <p>This class provides utilities for collecting usage data about decorators and reporting it for analytics purposes. All telemetry is opt-in.</p>"},{"location":"api/modules/prompt_decorators.utils.telemetry/#methods","title":"Methods","text":"<ul> <li><code>disable() -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>enable() -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>is_enabled() -&gt; &lt;class 'bool'&gt;</code></li> <li><code>register_callback(event_type, callback) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>track_decorator_combination(decorators, prompt_length, metadata) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>track_decorator_usage(decorator_name, version, parameters, metadata) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>track_performance(decorator_name, version, execution_time, metadata) -&gt; &lt;class 'NoneType'&gt;</code></li> <li><code>unregister_callback(event_type, callback) -&gt; &lt;class 'NoneType'&gt;</code></li> </ul>"},{"location":"api/modules/prompt_decorators.utils.telemetry/#functions","title":"Functions","text":"<ul> <li><code>get_telemetry_manager</code>: Get the global telemetry manager.</li> </ul>"},{"location":"api/modules/prompt_decorators.utils.telemetry/#function-get_telemetry_manager","title":"Function <code>get_telemetry_manager</code>","text":"<p>Signature: <code>get_telemetry_manager() -&gt; &lt;class 'prompt_decorators.utils.telemetry.TelemetryManager'&gt;</code></p> <p>Get the global telemetry manager.</p> <p>Returns:     The global telemetry manager instance</p>"},{"location":"examples/advanced/","title":"Advanced Examples","text":"<p>This page provides advanced examples of using the Prompt Decorators framework for more complex scenarios.</p>"},{"location":"examples/advanced/#custom-decorator-implementation","title":"Custom Decorator Implementation","text":"<p>This example shows how to create a custom decorator that implements a specific prompt engineering technique:</p> <pre><code>from typing import Dict, Any, Optional\nfrom prompt_decorators.core.base import BaseDecorator\n\nclass FewShotDecorator(BaseDecorator):\n    \"\"\"A decorator that adds few-shot examples to a prompt.\"\"\"\n\n    def __init__(\n        self,\n        examples: list[Dict[str, str]],\n        example_format: str = \"{input} -&gt; {output}\",\n        separator: str = \"\\n\\n\",\n        intro_text: Optional[str] = \"Here are some examples:\"\n    ):\n        \"\"\"Initialize the FewShotDecorator.\n\n        Args:\n            examples: List of dictionaries containing input/output pairs\n            example_format: Format string for each example\n            separator: Separator between examples\n            intro_text: Text to introduce the examples\n        \"\"\"\n        self.examples = examples\n        self.example_format = example_format\n        self.separator = separator\n        self.intro_text = intro_text\n\n    def apply(self, prompt: str) -&gt; str:\n        \"\"\"Apply the few-shot decorator to the prompt.\n\n        Args:\n            prompt: The original prompt\n\n        Returns:\n            The prompt with few-shot examples added\n        \"\"\"\n        # Format each example\n        formatted_examples = [\n            self.example_format.format(**example)\n            for example in self.examples\n        ]\n\n        # Join examples with separator\n        examples_text = self.separator.join(formatted_examples)\n\n        # Construct the full prompt\n        if self.intro_text:\n            full_prompt = f\"{prompt}\\n\\n{self.intro_text}\\n\\n{examples_text}\\n\\nNow your turn:\"\n        else:\n            full_prompt = f\"{prompt}\\n\\n{examples_text}\\n\\nNow your turn:\"\n\n        return full_prompt\n\n    def to_dict(self) -&gt; Dict[str, Any]:\n        \"\"\"Convert the decorator to a dictionary.\n\n        Returns:\n            Dictionary representation of the decorator\n        \"\"\"\n        return {\n            \"type\": \"FewShotDecorator\",\n            \"examples\": self.examples,\n            \"example_format\": self.example_format,\n            \"separator\": self.separator,\n            \"intro_text\": self.intro_text\n        }\n\n    @classmethod\n    def from_dict(cls, data: Dict[str, Any]) -&gt; 'FewShotDecorator':\n        \"\"\"Create a decorator from a dictionary.\n\n        Args:\n            data: Dictionary representation of the decorator\n\n        Returns:\n            A new FewShotDecorator instance\n        \"\"\"\n        return cls(\n            examples=data.get(\"examples\", []),\n            example_format=data.get(\"example_format\", \"{input} -&gt; {output}\"),\n            separator=data.get(\"separator\", \"\\n\\n\"),\n            intro_text=data.get(\"intro_text\")\n        )\n\n# Example usage\nexamples = [\n    {\"input\": \"Classify this review: 'This movie was fantastic!'\", \"output\": \"Positive\"},\n    {\"input\": \"Classify this review: 'Terrible service and food.'\", \"output\": \"Negative\"},\n    {\"input\": \"Classify this review: 'The experience was okay.'\", \"output\": \"Neutral\"}\n]\n\nfew_shot = FewShotDecorator(examples=examples)\nprompt = \"Classify this review: 'I really enjoyed the concert but the venue was too small.'\"\ndecorated_prompt = few_shot.apply(prompt)\n\nprint(decorated_prompt)\n</code></pre>"},{"location":"examples/advanced/#conditional-decorator-chain","title":"Conditional Decorator Chain","text":"<p>This example demonstrates how to create a conditional chain of decorators based on the content of the prompt:</p> <pre><code>from prompt_decorators.decorators import Reasoning, OutputFormat, Persona\nfrom prompt_decorators.core.request import DecoratedRequest\nimport re\n\ndef create_conditional_chain(prompt: str) -&gt; DecoratedRequest:\n    \"\"\"Create a conditional chain of decorators based on prompt content.\n\n    Args:\n        prompt: The user's prompt\n\n    Returns:\n        A DecoratedRequest with appropriate decorators\n    \"\"\"\n    decorators = []\n\n    # Add a persona decorator based on topic\n    if re.search(r'math|equation|calculus|algebra', prompt, re.IGNORECASE):\n        decorators.append(Persona(\n            role=\"mathematician\",\n            background=\"PhD in Mathematics with expertise in various mathematical fields\",\n            tone=\"educational\"\n        ))\n    elif re.search(r'physics|quantum|relativity|mechanics', prompt, re.IGNORECASE):\n        decorators.append(Persona(\n            role=\"physicist\",\n            background=\"Theoretical physicist with expertise in quantum mechanics and relativity\",\n            tone=\"educational\"\n        ))\n    elif re.search(r'code|program|function|algorithm', prompt, re.IGNORECASE):\n        decorators.append(Persona(\n            role=\"software engineer\",\n            background=\"Senior software engineer with 15 years of experience\",\n            tone=\"technical\"\n        ))\n\n    # Add reasoning for complex questions\n    if len(prompt.split()) &gt; 15 or '?' in prompt or re.search(r'explain|how|why', prompt, re.IGNORECASE):\n        decorators.append(Reasoning(style=\"detailed\", show_working=True))\n\n    # Add output format based on content\n    if re.search(r'code|program|function', prompt, re.IGNORECASE):\n        decorators.append(OutputFormat(format_type=\"code\"))\n    elif re.search(r'list|steps|bullet', prompt, re.IGNORECASE):\n        decorators.append(OutputFormat(format_type=\"markdown\", pretty_print=True))\n    elif re.search(r'json|api|data', prompt, re.IGNORECASE):\n        decorators.append(OutputFormat(format_type=\"json\"))\n    else:\n        decorators.append(OutputFormat(format_type=\"markdown\", pretty_print=True))\n\n    # Create and return the decorated request\n    return DecoratedRequest(\n        prompt=prompt,\n        decorators=decorators,\n        model=\"gpt-4\",\n        api_params={\"temperature\": 0.7, \"max_tokens\": 1000}\n    )\n\n# Example usage\nprompt1 = \"Explain the quadratic formula and its applications in algebra.\"\nrequest1 = create_conditional_chain(prompt1)\nprint(f\"Prompt: {prompt1}\")\nprint(f\"Decorators: {[d.__class__.__name__ for d in request1.decorators]}\")\nprint(f\"Decorated prompt: {request1.apply_decorators()[:100]}...\\n\")\n\nprompt2 = \"Write a Python function to find the nth Fibonacci number using recursion.\"\nrequest2 = create_conditional_chain(prompt2)\nprint(f\"Prompt: {prompt2}\")\nprint(f\"Decorators: {[d.__class__.__name__ for d in request2.decorators]}\")\nprint(f\"Decorated prompt: {request2.apply_decorators()[:100]}...\\n\")\n</code></pre>"},{"location":"examples/advanced/#dynamic-decorator-registry","title":"Dynamic Decorator Registry","text":"<p>This example shows how to dynamically discover, load, and apply decorators from a custom registry:</p> <pre><code>import os\nimport json\nfrom typing import Dict, List, Any, Optional\nfrom prompt_decorators.core.base import BaseDecorator\nfrom prompt_decorators.registry.discovery import discover_decorators\nfrom prompt_decorators.registry.registry import DecoratorRegistry\n\nclass DynamicDecoratorManager:\n    \"\"\"A manager for dynamically discovering and applying decorators.\"\"\"\n\n    def __init__(self, registry_paths: List[str]):\n        \"\"\"Initialize the manager with paths to decorator registries.\n\n        Args:\n            registry_paths: List of paths to search for decorators\n        \"\"\"\n        self.registry = DecoratorRegistry()\n        self.registry_paths = registry_paths\n        self.load_decorators()\n\n    def load_decorators(self) -&gt; None:\n        \"\"\"Discover and load decorators from registry paths.\"\"\"\n        for path in self.registry_paths:\n            if os.path.exists(path):\n                decorators = discover_decorators(path)\n                for decorator_class in decorators:\n                    self.registry.register(decorator_class)\n\n    def get_decorators_by_category(self, category: str) -&gt; List[str]:\n        \"\"\"Get decorator names by category.\n\n        Args:\n            category: Category to filter by\n\n        Returns:\n            List of decorator names in the category\n        \"\"\"\n        return [\n            name for name, info in self.registry.get_all_decorators().items()\n            if info.get(\"category\") == category\n        ]\n\n    def create_decorator(self, name: str, params: Optional[Dict[str, Any]] = None) -&gt; BaseDecorator:\n        \"\"\"Create a decorator instance by name.\n\n        Args:\n            name: Name of the decorator\n            params: Parameters for the decorator\n\n        Returns:\n            An instance of the decorator\n\n        Raises:\n            ValueError: If decorator not found\n        \"\"\"\n        if params is None:\n            params = {}\n\n        decorator_class = self.registry.get_decorator_class(name)\n        if decorator_class is None:\n            raise ValueError(f\"Decorator '{name}' not found in registry\")\n\n        return decorator_class(**params)\n\n    def apply_decorators_from_config(self, prompt: str, config_file: str) -&gt; str:\n        \"\"\"Apply decorators based on a configuration file.\n\n        Args:\n            prompt: The original prompt\n            config_file: Path to a JSON configuration file\n\n        Returns:\n            The decorated prompt\n\n        Raises:\n            FileNotFoundError: If config file not found\n        \"\"\"\n        if not os.path.exists(config_file):\n            raise FileNotFoundError(f\"Config file '{config_file}' not found\")\n\n        with open(config_file, 'r') as f:\n            config = json.load(f)\n\n        decorated_prompt = prompt\n        for decorator_config in config.get(\"decorators\", []):\n            name = decorator_config.get(\"name\")\n            params = decorator_config.get(\"params\", {})\n\n            decorator = self.create_decorator(name, params)\n            decorated_prompt = decorator.apply(decorated_prompt)\n\n        return decorated_prompt\n\n# Example usage\nmanager = DynamicDecoratorManager([\n    \"./decorators\",\n    \"~/.prompt-decorators/custom\"\n])\n\n# List decorators by category\nreasoning_decorators = manager.get_decorators_by_category(\"reasoning\")\nprint(f\"Reasoning decorators: {reasoning_decorators}\\n\")\n\n# Create and apply a decorator\nreasoning = manager.create_decorator(\"Reasoning\", {\"style\": \"detailed\", \"show_working\": True})\nprompt = \"Explain the concept of recursion in programming.\"\ndecorated_prompt = reasoning.apply(prompt)\nprint(f\"Decorated prompt: {decorated_prompt[:100]}...\\n\")\n\n# Apply decorators from a config file\nconfig_content = {\n    \"decorators\": [\n        {\"name\": \"Persona\", \"params\": {\"role\": \"teacher\", \"tone\": \"educational\"}},\n        {\"name\": \"Reasoning\", \"params\": {\"style\": \"step_by_step\"}},\n        {\"name\": \"OutputFormat\", \"params\": {\"format_type\": \"markdown\"}}\n    ]\n}\n\nwith open(\"decorator_config.json\", \"w\") as f:\n    json.dump(config_content, f)\n\ndecorated_prompt = manager.apply_decorators_from_config(\n    \"Explain how photosynthesis works.\",\n    \"decorator_config.json\"\n)\nprint(f\"Decorated prompt from config: {decorated_prompt[:100]}...\")\n</code></pre>"},{"location":"examples/advanced/#decorator-composition-with-middleware","title":"Decorator Composition with Middleware","text":"<p>This example demonstrates how to implement a middleware pattern for decorator composition:</p> <pre><code>from typing import Callable, List, Dict, Any\nfrom prompt_decorators.core.base import BaseDecorator\n\nclass DecoratorMiddleware:\n    \"\"\"Middleware for intercepting and modifying decorator behavior.\"\"\"\n\n    def __init__(self, pre_hooks: List[Callable] = None, post_hooks: List[Callable] = None):\n        \"\"\"Initialize the middleware.\n\n        Args:\n            pre_hooks: Functions to call before decorator application\n            post_hooks: Functions to call after decorator application\n        \"\"\"\n        self.pre_hooks = pre_hooks or []\n        self.post_hooks = post_hooks or []\n\n    def apply(self, decorator: BaseDecorator, prompt: str) -&gt; str:\n        \"\"\"Apply the middleware and decorator to a prompt.\n\n        Args:\n            decorator: The decorator to apply\n            prompt: The original prompt\n\n        Returns:\n            The decorated prompt after middleware processing\n        \"\"\"\n        # Apply pre-hooks\n        modified_prompt = prompt\n        for hook in self.pre_hooks:\n            modified_prompt = hook(decorator, modified_prompt)\n\n        # Apply the decorator\n        decorated_prompt = decorator.apply(modified_prompt)\n\n        # Apply post-hooks\n        for hook in self.post_hooks:\n            decorated_prompt = hook(decorator, decorated_prompt)\n\n        return decorated_prompt\n\n# Example hooks\ndef log_decorator_application(decorator: BaseDecorator, prompt: str) -&gt; str:\n    \"\"\"Log decorator application.\"\"\"\n    print(f\"Applying {decorator.__class__.__name__} to prompt: {prompt[:30]}...\")\n    return prompt\n\ndef validate_prompt_length(decorator: BaseDecorator, prompt: str) -&gt; str:\n    \"\"\"Validate prompt length and truncate if necessary.\"\"\"\n    max_length = 1000\n    if len(prompt) &gt; max_length:\n        print(f\"Warning: Prompt exceeds {max_length} characters. Truncating...\")\n        return prompt[:max_length] + \"...\"\n    return prompt\n\ndef add_decorator_metadata(decorator: BaseDecorator, prompt: str) -&gt; str:\n    \"\"\"Add metadata about the applied decorator.\"\"\"\n    metadata = f\"\\n\\n[Processed with {decorator.__class__.__name__}]\"\n    return prompt + metadata\n\n# Example usage\nfrom prompt_decorators.decorators import Reasoning, OutputFormat\n\n# Create middleware\nmiddleware = DecoratorMiddleware(\n    pre_hooks=[log_decorator_application, validate_prompt_length],\n    post_hooks=[add_decorator_metadata]\n)\n\n# Create decorators\nreasoning = Reasoning(style=\"detailed\", show_working=True)\noutput_format = OutputFormat(format_type=\"markdown\", pretty_print=True)\n\n# Apply decorators with middleware\nprompt = \"Explain the concept of neural networks in artificial intelligence.\"\ndecorated_prompt = middleware.apply(reasoning, prompt)\ndecorated_prompt = middleware.apply(output_format, decorated_prompt)\n\nprint(\"\\nFinal decorated prompt:\")\nprint(decorated_prompt)\n</code></pre>"},{"location":"examples/advanced/#decorator-versioning-and-compatibility","title":"Decorator Versioning and Compatibility","text":"<p>This example shows how to implement versioning and compatibility checks for decorators:</p> <pre><code>from typing import Dict, Any, List, Optional, Set, Tuple\nfrom prompt_decorators.core.base import BaseDecorator\nfrom prompt_decorators.registry.compatibility import check_compatibility\nimport semver\n\nclass VersionedDecorator(BaseDecorator):\n    \"\"\"A decorator with versioning support.\"\"\"\n\n    def __init__(self, version: str = \"1.0.0\", **kwargs):\n        \"\"\"Initialize the versioned decorator.\n\n        Args:\n            version: Semantic version of the decorator\n            **kwargs: Additional parameters for the decorator\n        \"\"\"\n        self.version = version\n        self.params = kwargs\n\n    def apply(self, prompt: str) -&gt; str:\n        \"\"\"Apply the decorator to the prompt.\n\n        Args:\n            prompt: The original prompt\n\n        Returns:\n            The decorated prompt\n        \"\"\"\n        # Implementation would depend on the specific decorator\n        return prompt\n\n    def to_dict(self) -&gt; Dict[str, Any]:\n        \"\"\"Convert the decorator to a dictionary.\n\n        Returns:\n            Dictionary representation of the decorator\n        \"\"\"\n        return {\n            \"type\": self.__class__.__name__,\n            \"version\": self.version,\n            **self.params\n        }\n\n    @classmethod\n    def from_dict(cls, data: Dict[str, Any]) -&gt; 'VersionedDecorator':\n        \"\"\"Create a decorator from a dictionary.\n\n        Args:\n            data: Dictionary representation of the decorator\n\n        Returns:\n            A new VersionedDecorator instance\n        \"\"\"\n        version = data.pop(\"version\", \"1.0.0\")\n        return cls(version=version, **data)\n\n    def is_compatible_with(self, other: 'VersionedDecorator') -&gt; Tuple[bool, Optional[str]]:\n        \"\"\"Check if this decorator is compatible with another.\n\n        Args:\n            other: Another decorator to check compatibility with\n\n        Returns:\n            Tuple of (is_compatible, reason)\n        \"\"\"\n        # Check if decorators are of the same type\n        if self.__class__.__name__ != other.__class__.__name__:\n            return True, None  # Different types are assumed compatible\n\n        # Check version compatibility\n        try:\n            this_version = semver.VersionInfo.parse(self.version)\n            other_version = semver.VersionInfo.parse(other.version)\n\n            # Major version must match for compatibility\n            if this_version.major != other_version.major:\n                return False, f\"Major version mismatch: {self.version} vs {other.version}\"\n\n            return True, None\n        except ValueError:\n            return False, \"Invalid version format\"\n\nclass DecoratorChain:\n    \"\"\"A chain of versioned decorators with compatibility checking.\"\"\"\n\n    def __init__(self, decorators: Optional[List[VersionedDecorator]] = None):\n        \"\"\"Initialize the decorator chain.\n\n        Args:\n            decorators: List of decorators to chain\n        \"\"\"\n        self.decorators = decorators or []\n\n    def add_decorator(self, decorator: VersionedDecorator) -&gt; Tuple[bool, Optional[str]]:\n        \"\"\"Add a decorator to the chain if compatible.\n\n        Args:\n            decorator: Decorator to add\n\n        Returns:\n            Tuple of (success, error_message)\n        \"\"\"\n        # Check compatibility with existing decorators\n        for existing in self.decorators:\n            is_compatible, reason = existing.is_compatible_with(decorator)\n            if not is_compatible:\n                return False, f\"Incompatible with {existing.__class__.__name__}: {reason}\"\n\n        # Add the decorator if compatible\n        self.decorators.append(decorator)\n        return True, None\n\n    def apply(self, prompt: str) -&gt; str:\n        \"\"\"Apply all decorators in the chain.\n\n        Args:\n            prompt: The original prompt\n\n        Returns:\n            The decorated prompt\n        \"\"\"\n        decorated_prompt = prompt\n        for decorator in self.decorators:\n            decorated_prompt = decorator.apply(decorated_prompt)\n        return decorated_prompt\n\n    def to_dict(self) -&gt; Dict[str, Any]:\n        \"\"\"Convert the chain to a dictionary.\n\n        Returns:\n            Dictionary representation of the chain\n        \"\"\"\n        return {\n            \"decorators\": [d.to_dict() for d in self.decorators]\n        }\n\n    @classmethod\n    def from_dict(cls, data: Dict[str, Any]) -&gt; 'DecoratorChain':\n        \"\"\"Create a chain from a dictionary.\n\n        Args:\n            data: Dictionary representation of the chain\n\n        Returns:\n            A new DecoratorChain instance\n        \"\"\"\n        chain = cls()\n        for decorator_data in data.get(\"decorators\", []):\n            decorator_type = decorator_data.pop(\"type\", None)\n            if decorator_type:\n                # In a real implementation, you would look up the decorator class\n                # based on the type name\n                decorator = VersionedDecorator.from_dict(decorator_data)\n                chain.add_decorator(decorator)\n        return chain\n\n# Example usage\nclass ReasoningV1(VersionedDecorator):\n    def apply(self, prompt: str) -&gt; str:\n        return f\"{prompt}\\n\\nLet me think through this step by step...\"\n\nclass ReasoningV2(VersionedDecorator):\n    def apply(self, prompt: str) -&gt; str:\n        return f\"{prompt}\\n\\nI'll analyze this systematically:\\n1. First, I'll understand the problem\\n2. Then, I'll develop a solution approach\\n3. Finally, I'll implement and verify the solution\"\n\n# Create a chain\nchain = DecoratorChain()\n\n# Add compatible decorators\nreasoning_v1 = ReasoningV1(version=\"1.0.0\", style=\"basic\")\nsuccess, error = chain.add_decorator(reasoning_v1)\nprint(f\"Adding ReasoningV1: {'Success' if success else f'Failed - {error}'}\")\n\n# Try to add an incompatible decorator\nreasoning_v2 = ReasoningV2(version=\"2.0.0\", style=\"advanced\")\nsuccess, error = chain.add_decorator(reasoning_v2)\nprint(f\"Adding ReasoningV2: {'Success' if success else f'Failed - {error}'}\")\n\n# Apply the chain\nprompt = \"Explain the concept of blockchain.\"\ndecorated_prompt = chain.apply(prompt)\nprint(f\"\\nDecorated prompt: {decorated_prompt}\")\n</code></pre>"},{"location":"examples/advanced/#next-steps","title":"Next Steps","text":"<ul> <li>Explore the API Reference</li> <li>Learn about API Integration</li> <li>Check out Provider Examples</li> </ul>"},{"location":"examples/basic/","title":"Basic Examples","text":"<p>This page provides basic examples of using the Prompt Decorators framework.</p>"},{"location":"examples/basic/#using-individual-decorators","title":"Using Individual Decorators","text":""},{"location":"examples/basic/#reasoning-decorator","title":"Reasoning Decorator","text":"<pre><code>from prompt_decorators.decorators import Reasoning\nfrom prompt_decorators.decorators.reasoning import ReasoningStyle\n\n# Create a Reasoning decorator\nreasoning = Reasoning(\n    style=ReasoningStyle.DETAILED.value,\n    show_working=True,\n    consider_alternatives=True\n)\n\n# Apply the decorator to a prompt\nprompt = \"Explain quantum entanglement.\"\ndecorated_prompt = reasoning.apply(prompt)\n\nprint(decorated_prompt)\n</code></pre>"},{"location":"examples/basic/#output-format-decorator","title":"Output Format Decorator","text":"<pre><code>from prompt_decorators.decorators import OutputFormat\nfrom prompt_decorators.decorators.format import FormatType\n\n# Create an OutputFormat decorator\noutput_format = OutputFormat(\n    format_type=FormatType.MARKDOWN.value,\n    pretty_print=True\n)\n\n# Apply the decorator to a prompt\nprompt = \"List the top 5 programming languages.\"\ndecorated_prompt = output_format.apply(prompt)\n\nprint(decorated_prompt)\n</code></pre>"},{"location":"examples/basic/#combining-multiple-decorators","title":"Combining Multiple Decorators","text":"<pre><code>from prompt_decorators.decorators import Reasoning, OutputFormat\nfrom prompt_decorators.decorators.reasoning import ReasoningStyle\nfrom prompt_decorators.decorators.format import FormatType\n\n# Create decorators\nreasoning = Reasoning(\n    style=ReasoningStyle.DETAILED.value,\n    show_working=True,\n    consider_alternatives=True\n)\n\noutput_format = OutputFormat(\n    format_type=FormatType.MARKDOWN.value,\n    pretty_print=True\n)\n\n# Apply decorators to a prompt (order matters)\nprompt = \"Explain quantum entanglement.\"\ndecorated_prompt = output_format.apply(reasoning.apply(prompt))\n\nprint(decorated_prompt)\n</code></pre>"},{"location":"examples/basic/#using-the-decorator-registry","title":"Using the Decorator Registry","text":"<pre><code>from prompt_decorators.utils.discovery import DecoratorRegistry\n\n# Get the registry instance\nregistry = DecoratorRegistry()\n\n# Get a decorator by name\nconcise = registry.get_decorator(\"Concise\")\n\n# Create an instance with parameters\nconcise_instance = concise(maxWords=100, bulletPoints=True)\n\n# Apply to a prompt\nprompt = \"Explain quantum computing in detail.\"\ndecorated_prompt = concise_instance.apply(prompt)\n\nprint(decorated_prompt)\n</code></pre>"},{"location":"examples/basic/#using-decorated-requests","title":"Using Decorated Requests","text":"<pre><code>from prompt_decorators.core.request import DecoratedRequest\nfrom prompt_decorators.decorators import Reasoning, OutputFormat\n\n# Create decorators\nreasoning = Reasoning(style=\"detailed\", show_working=True)\noutput_format = OutputFormat(format_type=\"markdown\", pretty_print=True)\n\n# Create a decorated request\nrequest = DecoratedRequest(\n    prompt=\"Explain quantum mechanics.\",\n    decorators=[reasoning, output_format],\n    model=\"gpt-4\",\n    api_params={\"temperature\": 0.7}\n)\n\n# Apply all decorators\ndecorated_prompt = request.apply_decorators()\n\nprint(decorated_prompt)\n\n# Serialize for storage or transmission\nrequest_json = request.to_json()\nprint(request_json)\n</code></pre>"},{"location":"examples/basic/#checking-decorator-compatibility","title":"Checking Decorator Compatibility","text":"<pre><code>from prompt_decorators.utils.compatibility import get_compatibility_checker\nfrom prompt_decorators.decorators import Reasoning, OutputFormat\n\n# Create decorators\nreasoning = Reasoning(style=\"detailed\", show_working=True)\noutput_format = OutputFormat(format_type=\"markdown\", pretty_print=True)\n\n# Get the compatibility checker\nchecker = get_compatibility_checker()\n\n# Check compatibility\nissues = checker.check_compatibility(reasoning, output_format)\n\nif issues:\n    for issue in issues:\n        print(f\"Warning: {issue}\")\nelse:\n    print(\"Decorators are compatible!\")\n</code></pre>"},{"location":"examples/providers/","title":"Provider Examples","text":"<p>This page provides specific examples of using Prompt Decorators with different LLM providers.</p>"},{"location":"examples/providers/#openai-examples","title":"OpenAI Examples","text":""},{"location":"examples/providers/#using-gpt-4-with-chain-of-thought-and-json-output","title":"Using GPT-4 with Chain-of-Thought and JSON Output","text":"<pre><code>import openai\nfrom prompt_decorators.decorators import ChainOfThought, OutputFormat\n\n# Set up OpenAI API key\nopenai.api_key = \"your-api-key\"\n\n# Create decorators\ncot = ChainOfThought(steps=[\"understand\", \"analyze\", \"solve\", \"verify\"])\njson_format = OutputFormat(format_type=\"json\", schema={\n    \"type\": \"object\",\n    \"properties\": {\n        \"answer\": {\"type\": \"string\"},\n        \"confidence\": {\"type\": \"number\", \"minimum\": 0, \"maximum\": 1},\n        \"reasoning\": {\"type\": \"string\"}\n    },\n    \"required\": [\"answer\", \"confidence\", \"reasoning\"]\n})\n\n# Apply decorators to a prompt\nprompt = \"What is the capital of France and what is its population?\"\ndecorated_prompt = json_format.apply(cot.apply(prompt))\n\n# Call OpenAI API\nresponse = openai.ChatCompletion.create(\n    model=\"gpt-4\",\n    messages=[\n        {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n        {\"role\": \"user\", \"content\": decorated_prompt}\n    ],\n    temperature=0.3,\n    max_tokens=1000\n)\n\n# Print the response\nprint(response.choices[0].message.content)\n</code></pre>"},{"location":"examples/providers/#using-gpt-35-with-persona-and-reasoning","title":"Using GPT-3.5 with Persona and Reasoning","text":"<pre><code>import openai\nfrom prompt_decorators.decorators import Persona, Reasoning\n\n# Set up OpenAI API key\nopenai.api_key = \"your-api-key\"\n\n# Create decorators\npersona = Persona(\n    role=\"expert physicist\",\n    background=\"PhD in Theoretical Physics with 15 years of research experience\",\n    tone=\"educational but accessible\"\n)\nreasoning = Reasoning(style=\"step_by_step\", show_working=True)\n\n# Apply decorators to a prompt\nprompt = \"Explain the concept of quantum tunneling.\"\ndecorated_prompt = reasoning.apply(persona.apply(prompt))\n\n# Call OpenAI API\nresponse = openai.ChatCompletion.create(\n    model=\"gpt-3.5-turbo\",\n    messages=[\n        {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n        {\"role\": \"user\", \"content\": decorated_prompt}\n    ],\n    temperature=0.7,\n    max_tokens=1000\n)\n\n# Print the response\nprint(response.choices[0].message.content)\n</code></pre>"},{"location":"examples/providers/#anthropic-examples","title":"Anthropic Examples","text":""},{"location":"examples/providers/#using-claude-with-persona-and-markdown-output","title":"Using Claude with Persona and Markdown Output","text":"<pre><code>import anthropic\nfrom prompt_decorators.decorators import Persona, OutputFormat\n\n# Set up Anthropic API key\nclient = anthropic.Anthropic(api_key=\"your-api-key\")\n\n# Create decorators\npersona = Persona(\n    role=\"expert historian\",\n    background=\"Professor of Ancient History with focus on Roman civilization\",\n    tone=\"scholarly but engaging\"\n)\nmarkdown = OutputFormat(format_type=\"markdown\", pretty_print=True)\n\n# Apply decorators to a prompt\nprompt = \"Describe the fall of the Roman Empire.\"\ndecorated_prompt = markdown.apply(persona.apply(prompt))\n\n# Call Anthropic API\nresponse = client.completions.create(\n    model=\"claude-2\",\n    prompt=f\"{anthropic.HUMAN_PROMPT} {decorated_prompt} {anthropic.AI_PROMPT}\",\n    max_tokens_to_sample=2000,\n    temperature=0.7\n)\n\n# Print the response\nprint(response.completion)\n</code></pre>"},{"location":"examples/providers/#using-claude-with-chain-of-thought-and-structured-output","title":"Using Claude with Chain-of-Thought and Structured Output","text":"<pre><code>import anthropic\nimport json\nfrom prompt_decorators.decorators import ChainOfThought, OutputFormat\n\n# Set up Anthropic API key\nclient = anthropic.Anthropic(api_key=\"your-api-key\")\n\n# Create decorators\ncot = ChainOfThought(steps=[\"understand\", \"research\", \"analyze\", \"conclude\"])\nstructured_output = OutputFormat(format_type=\"json\", schema={\n    \"type\": \"object\",\n    \"properties\": {\n        \"title\": {\"type\": \"string\"},\n        \"summary\": {\"type\": \"string\"},\n        \"key_points\": {\"type\": \"array\", \"items\": {\"type\": \"string\"}},\n        \"conclusion\": {\"type\": \"string\"}\n    },\n    \"required\": [\"title\", \"summary\", \"key_points\", \"conclusion\"]\n})\n\n# Apply decorators to a prompt\nprompt = \"Analyze the impact of the Industrial Revolution on modern society.\"\ndecorated_prompt = structured_output.apply(cot.apply(prompt))\n\n# Call Anthropic API\nresponse = client.completions.create(\n    model=\"claude-2\",\n    prompt=f\"{anthropic.HUMAN_PROMPT} {decorated_prompt} {anthropic.AI_PROMPT}\",\n    max_tokens_to_sample=2000,\n    temperature=0.5\n)\n\n# Parse the JSON response\ntry:\n    result = json.loads(response.completion)\n    print(json.dumps(result, indent=2))\nexcept json.JSONDecodeError:\n    print(\"Could not parse JSON response:\")\n    print(response.completion)\n</code></pre>"},{"location":"examples/providers/#hugging-face-examples","title":"Hugging Face Examples","text":""},{"location":"examples/providers/#using-a-local-model-with-reasoning","title":"Using a Local Model with Reasoning","text":"<pre><code>from transformers import pipeline\nfrom prompt_decorators.decorators import Reasoning\n\n# Load a local model\ngenerator = pipeline('text-generation', model='mistralai/Mistral-7B-Instruct-v0.1')\n\n# Create decorator\nreasoning = Reasoning(style=\"detailed\", show_working=True)\n\n# Apply decorator to a prompt\nprompt = \"Explain how photosynthesis works.\"\ndecorated_prompt = reasoning.apply(prompt)\n\n# Format for instruction-tuned model\nformatted_prompt = f\"\"\"&lt;s&gt;[INST] {decorated_prompt} [/INST]\"\"\"\n\n# Generate response\nresponse = generator(\n    formatted_prompt,\n    max_length=2000,\n    num_return_sequences=1,\n    temperature=0.7\n)\n\n# Print the response\nprint(response[0]['generated_text'])\n</code></pre>"},{"location":"examples/providers/#using-hugging-face-inference-api","title":"Using Hugging Face Inference API","text":"<pre><code>import requests\nfrom prompt_decorators.decorators import OutputFormat, ChainOfThought\n\n# Set up Hugging Face API key\nAPI_URL = \"https://api-inference.huggingface.co/models/meta-llama/Llama-2-70b-chat-hf\"\nheaders = {\"Authorization\": f\"Bearer your-api-key\"}\n\n# Create decorators\ncot = ChainOfThought(steps=[\"understand\", \"analyze\", \"solve\", \"verify\"])\noutput_format = OutputFormat(format_type=\"markdown\", pretty_print=True)\n\n# Apply decorators to a prompt\nprompt = \"What are the ethical implications of artificial intelligence?\"\ndecorated_prompt = output_format.apply(cot.apply(prompt))\n\n# Format for Llama 2\nformatted_prompt = f\"\"\"&lt;s&gt;[INST] {decorated_prompt} [/INST]\"\"\"\n\n# Call Hugging Face API\ndef query(payload):\n    response = requests.post(API_URL, headers=headers, json=payload)\n    return response.json()\n\noutput = query({\n    \"inputs\": formatted_prompt,\n    \"parameters\": {\n        \"max_new_tokens\": 2000,\n        \"temperature\": 0.7,\n        \"top_p\": 0.9\n    }\n})\n\n# Print the response\nprint(output[0][\"generated_text\"])\n</code></pre>"},{"location":"examples/providers/#langchain-examples","title":"LangChain Examples","text":""},{"location":"examples/providers/#using-langchain-with-multiple-decorators","title":"Using LangChain with Multiple Decorators","text":"<pre><code>from langchain.llms import OpenAI\nfrom langchain.prompts import PromptTemplate\nfrom prompt_decorators.decorators import Reasoning, OutputFormat, Persona\n\n# Create an LLM\nllm = OpenAI(temperature=0.7)\n\n# Create decorators\npersona = Persona(\n    role=\"expert data scientist\",\n    background=\"10 years of experience in machine learning and data analysis\",\n    tone=\"technical but clear\"\n)\nreasoning = Reasoning(style=\"detailed\", show_working=True)\noutput_format = OutputFormat(format_type=\"markdown\", pretty_print=True)\n\n# Create a base prompt template\nbase_template = \"Explain {topic} and provide a simple example.\"\nprompt_template = PromptTemplate(\n    input_variables=[\"topic\"],\n    template=base_template\n)\n\n# Format the prompt\ntopic = \"principal component analysis\"\nprompt = prompt_template.format(topic=topic)\n\n# Apply decorators in sequence\ndecorated_prompt = prompt\nfor decorator in [persona, reasoning, output_format]:\n    decorated_prompt = decorator.apply(decorated_prompt)\n\n# Run the LLM\nresponse = llm(decorated_prompt)\n\n# Print the response\nprint(response)\n</code></pre>"},{"location":"examples/providers/#using-langchain-agents-with-decorators","title":"Using LangChain Agents with Decorators","text":"<pre><code>from langchain.agents import initialize_agent, Tool\nfrom langchain.agents import AgentType\nfrom langchain.llms import OpenAI\nfrom langchain.utilities import SerpAPIWrapper\nfrom prompt_decorators.decorators import Reasoning, OutputFormat\n\n# Set up tools\nsearch = SerpAPIWrapper()\ntools = [\n    Tool(\n        name=\"Search\",\n        func=search.run,\n        description=\"Useful for when you need to answer questions about current events or the current state of the world\"\n    )\n]\n\n# Create an LLM\nllm = OpenAI(temperature=0)\n\n# Initialize the agent\nagent = initialize_agent(\n    tools,\n    llm,\n    agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,\n    verbose=True\n)\n\n# Create decorators\nreasoning = Reasoning(style=\"detailed\", show_working=True)\noutput_format = OutputFormat(format_type=\"markdown\", pretty_print=True)\n\n# Apply decorators to a prompt\nprompt = \"What is the current population of Paris, France?\"\ndecorated_prompt = output_format.apply(reasoning.apply(prompt))\n\n# Run the agent\nresponse = agent.run(decorated_prompt)\n\n# Print the response\nprint(response)\n</code></pre>"},{"location":"examples/providers/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about API Integration</li> <li>Explore Advanced Usage</li> <li>Check out the API Reference</li> </ul>"},{"location":"guide/advanced-usage/","title":"Advanced Usage","text":"<p>This guide covers advanced usage patterns for the Prompt Decorators framework.</p>"},{"location":"guide/advanced-usage/#creating-custom-decorators","title":"Creating Custom Decorators","text":"<p>You can create custom decorators by inheriting from the <code>BaseDecorator</code> class:</p> <pre><code>from prompt_decorators.core.base import BaseDecorator\nfrom typing import Dict, Any, Optional\n\nclass CustomDecorator(BaseDecorator):\n    \"\"\"A custom decorator that adds specific instructions to a prompt.\"\"\"\n\n    def __init__(\n        self,\n        instructions: str,\n        priority: int = 1,\n        version: str = \"1.0.0\"\n    ):\n        \"\"\"Initialize the custom decorator.\n\n        Args:\n            instructions: The instructions to add to the prompt.\n            priority: The priority of the decorator (higher values are applied later).\n            version: The semantic version of the decorator.\n        \"\"\"\n        super().__init__(version=version)\n        self.instructions = instructions\n        self.priority = priority\n\n    def apply(self, prompt: str) -&gt; str:\n        \"\"\"Apply the decorator to the prompt.\n\n        Args:\n            prompt: The prompt to decorate.\n\n        Returns:\n            The decorated prompt.\n        \"\"\"\n        return f\"{prompt}\\n\\nAdditional instructions: {self.instructions}\"\n\n    def to_dict(self) -&gt; Dict[str, Any]:\n        \"\"\"Convert the decorator to a dictionary.\n\n        Returns:\n            A dictionary representation of the decorator.\n        \"\"\"\n        return {\n            \"type\": self.__class__.__name__,\n            \"version\": self.version,\n            \"parameters\": {\n                \"instructions\": self.instructions,\n                \"priority\": self.priority\n            }\n        }\n\n    @classmethod\n    def from_dict(cls, data: Dict[str, Any]) -&gt; \"CustomDecorator\":\n        \"\"\"Create a decorator from a dictionary.\n\n        Args:\n            data: The dictionary representation of the decorator.\n\n        Returns:\n            A new decorator instance.\n        \"\"\"\n        return cls(\n            instructions=data[\"parameters\"][\"instructions\"],\n            priority=data[\"parameters\"].get(\"priority\", 1),\n            version=data[\"version\"]\n        )\n</code></pre>"},{"location":"guide/advanced-usage/#registering-custom-decorators","title":"Registering Custom Decorators","text":"<p>You can register your custom decorators with the registry:</p> <pre><code>from prompt_decorators.utils.discovery import DecoratorRegistry\n\n# Get the registry instance\nregistry = DecoratorRegistry()\n\n# Register your custom decorator\nregistry.register_decorator(CustomDecorator)\n\n# Now you can get it by name\ncustom_decorator_class = registry.get_decorator(\"CustomDecorator\")\n</code></pre>"},{"location":"guide/advanced-usage/#working-with-decorator-chains","title":"Working with Decorator Chains","text":"<p>You can create chains of decorators to apply multiple decorators in a specific order:</p> <pre><code>from prompt_decorators.decorators.generated.decorators.chain import Chain\nfrom prompt_decorators.decorators import Reasoning, OutputFormat, Concise\n\n# Create individual decorators\nreasoning = Reasoning(style=\"detailed\", show_working=True)\noutput_format = OutputFormat(format_type=\"markdown\", pretty_print=True)\nconcise = Concise(maxWords=200, bulletPoints=False)\n\n# Create a chain of decorators\nchain = Chain(\n    decorators=[reasoning, concise, output_format],\n    name=\"DetailedConciseMarkdown\"\n)\n\n# Apply the chain to a prompt\nprompt = \"Explain quantum mechanics.\"\ndecorated_prompt = chain.apply(prompt)\n\nprint(decorated_prompt)\n</code></pre>"},{"location":"guide/advanced-usage/#conditional-decorators","title":"Conditional Decorators","text":"<p>You can use conditional decorators to apply different decorators based on conditions:</p> <pre><code>from prompt_decorators.decorators.generated.decorators.conditional import Conditional\nfrom prompt_decorators.decorators import Detailed, Concise\n\n# Create individual decorators\ndetailed = Detailed(depth=3, examples=True)\nconcise = Concise(maxWords=100, bulletPoints=True)\n\n# Create a conditional decorator\ndef is_complex_topic(prompt: str) -&gt; bool:\n    complex_topics = [\"quantum\", \"relativity\", \"philosophy\", \"consciousness\"]\n    return any(topic in prompt.lower() for topic in complex_topics)\n\nconditional = Conditional(\n    condition_func=is_complex_topic,\n    true_decorator=detailed,\n    false_decorator=concise,\n    description=\"Use detailed for complex topics, concise for simple ones\"\n)\n\n# Apply to different prompts\ncomplex_prompt = \"Explain quantum entanglement.\"\nsimple_prompt = \"List the primary colors.\"\n\ncomplex_result = conditional.apply(complex_prompt)  # Will use detailed\nsimple_result = conditional.apply(simple_prompt)    # Will use concise\n\nprint(f\"Complex result: {complex_result[:100]}...\")\nprint(f\"Simple result: {simple_result[:100]}...\")\n</code></pre>"},{"location":"guide/advanced-usage/#model-specific-adaptations","title":"Model-Specific Adaptations","text":"<p>You can adapt decorators for specific LLM models:</p> <pre><code>from prompt_decorators.core.model_specific import adapt_for_model\nfrom prompt_decorators.decorators import Reasoning\n\n# Create a decorator\nreasoning = Reasoning(style=\"detailed\", show_working=True)\n\n# Adapt it for a specific model\ngpt4_reasoning = adapt_for_model(reasoning, \"gpt-4\")\nclaude_reasoning = adapt_for_model(reasoning, \"claude-2\")\n\n# Apply to a prompt\nprompt = \"Explain quantum entanglement.\"\ngpt4_prompt = gpt4_reasoning.apply(prompt)\nclaude_prompt = claude_reasoning.apply(prompt)\n\nprint(f\"GPT-4 prompt: {gpt4_prompt[:100]}...\")\nprint(f\"Claude prompt: {claude_prompt[:100]}...\")\n</code></pre>"},{"location":"guide/advanced-usage/#versioning-and-compatibility","title":"Versioning and Compatibility","text":"<p>You can work with different versions of decorators and check compatibility:</p> <pre><code>from prompt_decorators.utils.compatibility import get_compatibility_checker\nfrom prompt_decorators.decorators import Reasoning, OutputFormat\n\n# Create decorators with specific versions\nreasoning_v1 = Reasoning(style=\"detailed\", show_working=True, version=\"1.0.0\")\nreasoning_v2 = Reasoning(style=\"detailed\", show_working=True, version=\"2.0.0\")\noutput_format = OutputFormat(format_type=\"markdown\", pretty_print=True, version=\"1.5.0\")\n\n# Get the compatibility checker\nchecker = get_compatibility_checker()\n\n# Check compatibility\nissues_v1 = checker.check_compatibility(reasoning_v1, output_format)\nissues_v2 = checker.check_compatibility(reasoning_v2, output_format)\n\nprint(f\"Compatibility issues v1: {issues_v1}\")\nprint(f\"Compatibility issues v2: {issues_v2}\")\n</code></pre>"},{"location":"guide/advanced-usage/#serialization-and-deserialization","title":"Serialization and Deserialization","text":"<p>You can serialize decorators to JSON and deserialize them:</p> <pre><code>import json\nfrom prompt_decorators.decorators import Reasoning\nfrom prompt_decorators.core.base import BaseDecorator\n\n# Create a decorator\nreasoning = Reasoning(style=\"detailed\", show_working=True)\n\n# Serialize to dictionary\nreasoning_dict = reasoning.to_dict()\n\n# Serialize to JSON\nreasoning_json = json.dumps(reasoning_dict, indent=2)\nprint(reasoning_json)\n\n# Deserialize from dictionary\ndeserialized_reasoning = BaseDecorator.from_dict(reasoning_dict)\nprint(type(deserialized_reasoning))\n</code></pre>"},{"location":"guide/advanced-usage/#working-with-decorator-plugins","title":"Working with Decorator Plugins","text":"<p>You can extend the framework with plugins:</p> <pre><code>from prompt_decorators.utils.plugins import load_plugin, register_plugin\n\n# Define a plugin\nclass MyPlugin:\n    def __init__(self, name):\n        self.name = name\n\n    def process(self, prompt):\n        return f\"[Processed by {self.name}] {prompt}\"\n\n# Register the plugin\nregister_plugin(\"my_plugin\", MyPlugin(\"CustomProcessor\"))\n\n# Use the plugin\nplugin = load_plugin(\"my_plugin\")\nprocessed_prompt = plugin.process(\"Explain quantum entanglement.\")\nprint(processed_prompt)\n</code></pre> <p></p>"},{"location":"guide/advanced-usage/#compliance-and-regulatory-considerations","title":"Compliance and Regulatory Considerations","text":"<p>When using prompt decorators in regulated industries, you may need to consider compliance requirements:</p> <pre><code>from prompt_decorators.decorators import CiteSources, FactCheck, Limitations\nfrom prompt_decorators.decorators.generated.decorators.chain import Chain\n\n# Create compliance-focused decorators\ncite_sources = CiteSources(required=True, format=\"apa\")\nfact_check = FactCheck(level=\"rigorous\", highlight_uncertainties=True)\nlimitations = Limitations(scope=\"comprehensive\", include_alternatives=True)\n\n# Create a compliance chain\ncompliance_chain = Chain(\n    decorators=[cite_sources, fact_check, limitations],\n    name=\"ComplianceChain\"\n)\n\n# Apply to a prompt in a healthcare context\nmedical_prompt = \"Explain the latest treatments for type 2 diabetes.\"\ncompliant_prompt = compliance_chain.apply(medical_prompt)\n\nprint(compliant_prompt)\n</code></pre>"},{"location":"guide/advanced-usage/#healthcare-compliance","title":"Healthcare Compliance","text":"<p>For healthcare applications, consider:</p> <ol> <li>HIPAA Compliance: Ensure no PHI (Protected Health Information) is included in prompts</li> <li>Medical Accuracy: Use fact-checking decorators to verify medical information</li> <li>Disclaimers: Add appropriate medical disclaimers using the <code>Limitations</code> decorator</li> <li>Source Citation: Always cite medical sources using the <code>CiteSources</code> decorator</li> <li>Audit Trails: Maintain records of all prompts and responses for compliance auditing</li> </ol>"},{"location":"guide/advanced-usage/#financial-services-compliance","title":"Financial Services Compliance","text":"<p>For financial applications, consider:</p> <ol> <li>Regulatory Disclosures: Include required disclosures using custom decorators</li> <li>Investment Advice: Clearly mark limitations when discussing investments</li> <li>Risk Statements: Include appropriate risk statements</li> <li>Factual Accuracy: Verify financial information with fact-checking decorators</li> </ol>"},{"location":"guide/advanced-usage/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about API Integration</li> <li>Explore the API Reference</li> <li>Check out Advanced Examples</li> </ul>"},{"location":"guide/api-integration/","title":"API Integration","text":"<p>This guide covers how to integrate the Prompt Decorators framework with various LLM APIs.</p>"},{"location":"guide/api-integration/#openai-integration","title":"OpenAI Integration","text":""},{"location":"guide/api-integration/#basic-integration","title":"Basic Integration","text":"<pre><code>import openai\nfrom prompt_decorators.decorators import Reasoning, OutputFormat\n\n# Set up OpenAI API key\nopenai.api_key = \"your-api-key\"\n\n# Create decorators\nreasoning = Reasoning(style=\"detailed\", show_working=True)\noutput_format = OutputFormat(format_type=\"markdown\", pretty_print=True)\n\n# Apply decorators to a prompt\nprompt = \"Explain quantum entanglement.\"\ndecorated_prompt = output_format.apply(reasoning.apply(prompt))\n\n# Call OpenAI API\nresponse = openai.ChatCompletion.create(\n    model=\"gpt-4\",\n    messages=[\n        {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n        {\"role\": \"user\", \"content\": decorated_prompt}\n    ],\n    temperature=0.7,\n    max_tokens=1000\n)\n\n# Print the response\nprint(response.choices[0].message.content)\n</code></pre>"},{"location":"guide/api-integration/#using-the-decoratedrequest-class","title":"Using the DecoratedRequest Class","text":"<pre><code>import openai\nfrom prompt_decorators.core.request import DecoratedRequest\nfrom prompt_decorators.decorators import Reasoning, OutputFormat\n\n# Set up OpenAI API key\nopenai.api_key = \"your-api-key\"\n\n# Create a decorated request\nrequest = DecoratedRequest(\n    prompt=\"Explain quantum mechanics.\",\n    decorators=[\n        Reasoning(style=\"detailed\", show_working=True),\n        OutputFormat(format_type=\"markdown\", pretty_print=True)\n    ],\n    model=\"gpt-4\",\n    api_params={\n        \"temperature\": 0.7,\n        \"max_tokens\": 1000\n    }\n)\n\n# Apply all decorators\ndecorated_prompt = request.apply_decorators()\n\n# Call OpenAI API\nresponse = openai.ChatCompletion.create(\n    model=request.model,\n    messages=[\n        {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n        {\"role\": \"user\", \"content\": decorated_prompt}\n    ],\n    **request.api_params\n)\n\n# Print the response\nprint(response.choices[0].message.content)\n</code></pre>"},{"location":"guide/api-integration/#anthropic-integration","title":"Anthropic Integration","text":""},{"location":"guide/api-integration/#basic-integration_1","title":"Basic Integration","text":"<pre><code>import anthropic\nfrom prompt_decorators.decorators import Reasoning, OutputFormat\n\n# Set up Anthropic API key\nclient = anthropic.Anthropic(api_key=\"your-api-key\")\n\n# Create decorators\nreasoning = Reasoning(style=\"detailed\", show_working=True)\noutput_format = OutputFormat(format_type=\"markdown\", pretty_print=True)\n\n# Apply decorators to a prompt\nprompt = \"Explain quantum entanglement.\"\ndecorated_prompt = output_format.apply(reasoning.apply(prompt))\n\n# Call Anthropic API\nresponse = client.completions.create(\n    model=\"claude-2\",\n    prompt=f\"{anthropic.HUMAN_PROMPT} {decorated_prompt} {anthropic.AI_PROMPT}\",\n    max_tokens_to_sample=1000,\n    temperature=0.7\n)\n\n# Print the response\nprint(response.completion)\n</code></pre>"},{"location":"guide/api-integration/#using-the-decoratedrequest-class_1","title":"Using the DecoratedRequest Class","text":"<pre><code>import anthropic\nfrom prompt_decorators.core.request import DecoratedRequest\nfrom prompt_decorators.decorators import Reasoning, OutputFormat\n\n# Set up Anthropic API key\nclient = anthropic.Anthropic(api_key=\"your-api-key\")\n\n# Create a decorated request\nrequest = DecoratedRequest(\n    prompt=\"Explain quantum mechanics.\",\n    decorators=[\n        Reasoning(style=\"detailed\", show_working=True),\n        OutputFormat(format_type=\"markdown\", pretty_print=True)\n    ],\n    model=\"claude-2\",\n    api_params={\n        \"temperature\": 0.7,\n        \"max_tokens_to_sample\": 1000\n    }\n)\n\n# Apply all decorators\ndecorated_prompt = request.apply_decorators()\n\n# Call Anthropic API\nresponse = client.completions.create(\n    model=request.model,\n    prompt=f\"{anthropic.HUMAN_PROMPT} {decorated_prompt} {anthropic.AI_PROMPT}\",\n    **request.api_params\n)\n\n# Print the response\nprint(response.completion)\n</code></pre>"},{"location":"guide/api-integration/#langchain-integration","title":"LangChain Integration","text":""},{"location":"guide/api-integration/#basic-integration_2","title":"Basic Integration","text":"<pre><code>from langchain.llms import OpenAI\nfrom langchain.prompts import PromptTemplate\nfrom prompt_decorators.decorators import Reasoning, OutputFormat\n\n# Create an LLM\nllm = OpenAI(temperature=0.7)\n\n# Create decorators\nreasoning = Reasoning(style=\"detailed\", show_working=True)\noutput_format = OutputFormat(format_type=\"markdown\", pretty_print=True)\n\n# Create a base prompt template\nbase_template = \"Explain {topic}.\"\nprompt_template = PromptTemplate(\n    input_variables=[\"topic\"],\n    template=base_template\n)\n\n# Format the prompt\ntopic = \"quantum entanglement\"\nprompt = prompt_template.format(topic=topic)\n\n# Apply decorators\ndecorated_prompt = output_format.apply(reasoning.apply(prompt))\n\n# Run the LLM\nresponse = llm(decorated_prompt)\n\n# Print the response\nprint(response)\n</code></pre>"},{"location":"guide/api-integration/#creating-a-custom-langchain-prompt-decorator","title":"Creating a Custom LangChain Prompt Decorator","text":"<pre><code>from langchain.prompts import BasePromptTemplate\nfrom langchain.llms import OpenAI\nfrom typing import List, Dict, Any\nfrom prompt_decorators.decorators import Reasoning, OutputFormat\n\nclass DecoratedPromptTemplate(BasePromptTemplate):\n    \"\"\"A LangChain prompt template that applies prompt decorators.\"\"\"\n\n    prompt_template: BasePromptTemplate\n    decorators: List\n\n    def format(self, **kwargs) -&gt; str:\n        \"\"\"Format the prompt template and apply decorators.\n\n        Args:\n            **kwargs: The variables to format the template with.\n\n        Returns:\n            The formatted and decorated prompt.\n        \"\"\"\n        # Format the base prompt\n        base_prompt = self.prompt_template.format(**kwargs)\n\n        # Apply decorators in sequence\n        decorated_prompt = base_prompt\n        for decorator in self.decorators:\n            decorated_prompt = decorator.apply(decorated_prompt)\n\n        return decorated_prompt\n\n    @property\n    def input_variables(self) -&gt; List[str]:\n        \"\"\"Get the input variables for the prompt template.\n\n        Returns:\n            The list of input variables.\n        \"\"\"\n        return self.prompt_template.input_variables\n\n# Example usage\nfrom langchain.prompts import PromptTemplate\n\n# Create an LLM\nllm = OpenAI(temperature=0.7)\n\n# Create a base prompt template\nbase_template = PromptTemplate(\n    input_variables=[\"topic\"],\n    template=\"Explain {topic}.\"\n)\n\n# Create decorators\nreasoning = Reasoning(style=\"detailed\", show_working=True)\noutput_format = OutputFormat(format_type=\"markdown\", pretty_print=True)\n\n# Create a decorated prompt template\ndecorated_template = DecoratedPromptTemplate(\n    prompt_template=base_template,\n    decorators=[reasoning, output_format]\n)\n\n# Format the prompt\ntopic = \"quantum entanglement\"\ndecorated_prompt = decorated_template.format(topic=topic)\n\n# Run the LLM\nresponse = llm(decorated_prompt)\n\n# Print the response\nprint(response)\n</code></pre>"},{"location":"guide/api-integration/#custom-api-integration","title":"Custom API Integration","text":"<p>You can integrate with any LLM API by applying decorators to your prompts before sending them to the API:</p> <pre><code>import requests\nfrom prompt_decorators.decorators import Reasoning, OutputFormat\n\n# Create decorators\nreasoning = Reasoning(style=\"detailed\", show_working=True)\noutput_format = OutputFormat(format_type=\"markdown\", pretty_print=True)\n\n# Apply decorators to a prompt\nprompt = \"Explain quantum entanglement.\"\ndecorated_prompt = output_format.apply(reasoning.apply(prompt))\n\n# Call a custom API\nresponse = requests.post(\n    \"https://api.example.com/generate\",\n    json={\n        \"prompt\": decorated_prompt,\n        \"temperature\": 0.7,\n        \"max_tokens\": 1000\n    },\n    headers={\n        \"Authorization\": \"Bearer your-api-key\"\n    }\n)\n\n# Print the response\nprint(response.json()[\"text\"])\n</code></pre>"},{"location":"guide/api-integration/#next-steps","title":"Next Steps","text":"<ul> <li>Explore the API Reference</li> <li>Check out Provider Examples</li> <li>Learn about Model-Specific Adaptations</li> </ul>"},{"location":"guide/basic-usage/","title":"Basic Usage","text":"<p>This guide covers the basic usage of the Prompt Decorators framework.</p>"},{"location":"guide/basic-usage/#installing-the-package","title":"Installing the Package","text":"<p>First, install the Prompt Decorators package:</p> <pre><code>pip install prompt-decorators\n</code></pre> <p>For more installation options, see the Installation Guide.</p>"},{"location":"guide/basic-usage/#importing-the-package","title":"Importing the Package","text":"<pre><code>import prompt_decorators\nfrom prompt_decorators.decorators import Reasoning, OutputFormat\n</code></pre>"},{"location":"guide/basic-usage/#using-individual-decorators","title":"Using Individual Decorators","text":""},{"location":"guide/basic-usage/#creating-a-decorator","title":"Creating a Decorator","text":"<p>To create a decorator, import the decorator class and instantiate it with the desired parameters:</p> <pre><code>from prompt_decorators.decorators import Reasoning\nfrom prompt_decorators.decorators.reasoning import ReasoningStyle\n\n# Create a Reasoning decorator\nreasoning = Reasoning(\n    style=ReasoningStyle.DETAILED.value,\n    show_working=True,\n    consider_alternatives=True\n)\n</code></pre>"},{"location":"guide/basic-usage/#applying-a-decorator","title":"Applying a Decorator","text":"<p>To apply a decorator to a prompt, use the <code>apply()</code> method:</p> <pre><code>prompt = \"Explain quantum entanglement.\"\ndecorated_prompt = reasoning.apply(prompt)\n\nprint(decorated_prompt)\n</code></pre>"},{"location":"guide/basic-usage/#combining-multiple-decorators","title":"Combining Multiple Decorators","text":"<p>You can combine multiple decorators by applying them in sequence:</p> <pre><code>from prompt_decorators.decorators import Reasoning, OutputFormat\nfrom prompt_decorators.decorators.reasoning import ReasoningStyle\nfrom prompt_decorators.decorators.format import FormatType\n\n# Create decorators\nreasoning = Reasoning(\n    style=ReasoningStyle.DETAILED.value,\n    show_working=True,\n    consider_alternatives=True\n)\n\noutput_format = OutputFormat(\n    format_type=FormatType.MARKDOWN.value,\n    pretty_print=True\n)\n\n# Apply decorators to a prompt (order matters)\nprompt = \"Explain quantum entanglement.\"\ndecorated_prompt = output_format.apply(reasoning.apply(prompt))\n\nprint(decorated_prompt)\n</code></pre>"},{"location":"guide/basic-usage/#using-the-decorator-registry","title":"Using the Decorator Registry","text":"<p>The registry provides a way to discover and use decorators dynamically:</p> <pre><code>from prompt_decorators.utils.discovery import DecoratorRegistry\n\n# Get the registry instance\nregistry = DecoratorRegistry()\n\n# Get a decorator by name\nconcise = registry.get_decorator(\"Concise\")\n\n# Create an instance with parameters\nconcise_instance = concise(maxWords=100, bulletPoints=True)\n\n# Apply to a prompt\nprompt = \"Explain quantum computing in detail.\"\ndecorated_prompt = concise_instance.apply(prompt)\n\nprint(decorated_prompt)\n</code></pre>"},{"location":"guide/basic-usage/#finding-decorators-by-category","title":"Finding Decorators by Category","text":"<p>You can find decorators by category using the registry:</p> <pre><code># Find all reasoning decorators\nreasoning_decorators = registry.find_decorators_by_category(\"reasoning\")\n\n# Find all format decorators\nformat_decorators = registry.find_decorators_by_category(\"format\")\n\n# Print available decorators in a category\nfor decorator_class in reasoning_decorators:\n    print(f\"- {decorator_class.__name__}\")\n</code></pre>"},{"location":"guide/basic-usage/#using-decorated-requests","title":"Using Decorated Requests","text":"<p>For more complex scenarios, you can use the <code>DecoratedRequest</code> class:</p> <pre><code>from prompt_decorators.core.request import DecoratedRequest\nfrom prompt_decorators.decorators import Reasoning, OutputFormat\n\n# Create decorators\nreasoning = Reasoning(style=\"detailed\", show_working=True)\noutput_format = OutputFormat(format_type=\"markdown\", pretty_print=True)\n\n# Create a decorated request\nrequest = DecoratedRequest(\n    prompt=\"Explain quantum mechanics.\",\n    decorators=[reasoning, output_format],\n    model=\"gpt-4\",\n    api_params={\"temperature\": 0.7}\n)\n\n# Apply all decorators\ndecorated_prompt = request.apply_decorators()\n\nprint(decorated_prompt)\n\n# Serialize for storage or transmission\nrequest_json = request.to_json()\nprint(request_json)\n</code></pre>"},{"location":"guide/basic-usage/#checking-decorator-compatibility","title":"Checking Decorator Compatibility","text":"<p>You can check if decorators are compatible with each other:</p> <pre><code>from prompt_decorators.utils.compatibility import get_compatibility_checker\nfrom prompt_decorators.decorators import Reasoning, OutputFormat\n\n# Create decorators\nreasoning = Reasoning(style=\"detailed\", show_working=True)\noutput_format = OutputFormat(format_type=\"markdown\", pretty_print=True)\n\n# Get the compatibility checker\nchecker = get_compatibility_checker()\n\n# Check compatibility\nissues = checker.check_compatibility(reasoning, output_format)\n\nif issues:\n    for issue in issues:\n        print(f\"Warning: {issue}\")\nelse:\n    print(\"Decorators are compatible!\")\n</code></pre> <p></p>"},{"location":"guide/basic-usage/#common-usage-examples","title":"Common Usage Examples","text":"<p>Here are some common examples of using prompt decorators in different scenarios:</p>"},{"location":"guide/basic-usage/#educational-content-generation","title":"Educational Content Generation","text":"<pre><code>from prompt_decorators.decorators import ELI5, StepByStep, OutputFormat\n\n# Create decorators for educational content\neli5 = ELI5(age=10)\nstep_by_step = StepByStep(numbered=True, detail_level=\"high\")\noutput_format = OutputFormat(format_type=\"markdown\", pretty_print=True)\n\n# Apply decorators to create educational content\nprompt = \"Explain how photosynthesis works.\"\ndecorated_prompt = output_format.apply(step_by_step.apply(eli5.apply(prompt)))\n\nprint(decorated_prompt)\n</code></pre>"},{"location":"guide/basic-usage/#technical-documentation","title":"Technical Documentation","text":"<pre><code>from prompt_decorators.decorators import Detailed, OutputFormat, CiteSources\n\n# Create decorators for technical documentation\ndetailed = Detailed(depth=3, examples=True)\noutput_format = OutputFormat(format_type=\"markdown\", pretty_print=True)\ncite_sources = CiteSources(required=True, format=\"apa\")\n\n# Apply decorators for technical documentation\nprompt = \"Explain RESTful API design principles.\"\ndecorated_prompt = output_format.apply(cite_sources.apply(detailed.apply(prompt)))\n\nprint(decorated_prompt)\n</code></pre>"},{"location":"guide/basic-usage/#creative-writing","title":"Creative Writing","text":"<pre><code>from prompt_decorators.decorators import Creative, Tone, Persona\n\n# Create decorators for creative writing\ncreative = Creative(originality=0.8, metaphors=True)\ntone = Tone(style=\"whimsical\")\npersona = Persona(character=\"storyteller\")\n\n# Apply decorators for creative writing\nprompt = \"Write a short story about a journey through space.\"\ndecorated_prompt = persona.apply(tone.apply(creative.apply(prompt)))\n\nprint(decorated_prompt)\n</code></pre>"},{"location":"guide/basic-usage/#data-analysis","title":"Data Analysis","text":"<pre><code>from prompt_decorators.decorators import Reasoning, OutputFormat, StepByStep\n\n# Create decorators for data analysis\nreasoning = Reasoning(style=\"analytical\", show_working=True)\nstep_by_step = StepByStep(numbered=True, detail_level=\"high\")\noutput_format = OutputFormat(format_type=\"markdown\", code_blocks=True)\n\n# Apply decorators for data analysis\nprompt = \"Analyze this dataset and explain trends: [data description]\"\ndecorated_prompt = output_format.apply(step_by_step.apply(reasoning.apply(prompt)))\n\nprint(decorated_prompt)\n</code></pre>"},{"location":"guide/basic-usage/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Advanced Usage</li> <li>Explore the API Reference</li> <li>Check out more Examples</li> </ul>"},{"location":"guide/cli-usage/","title":"Command Line Interface (CLI)","text":"<p>The Prompt Decorators framework provides a command-line interface (CLI) that allows you to interact with the framework without writing Python code. This guide covers the available commands and how to use them effectively.</p>"},{"location":"guide/cli-usage/#installation","title":"Installation","text":"<p>The CLI is automatically installed when you install the Prompt Decorators package:</p> <pre><code>pip install prompt-decorators\n</code></pre>"},{"location":"guide/cli-usage/#basic-usage","title":"Basic Usage","text":"<p>After installation, you can access the CLI using the <code>prompt-decorators</code> command:</p> <pre><code>prompt-decorators --help\n</code></pre> <p>This will display the available commands and options.</p>"},{"location":"guide/cli-usage/#available-commands","title":"Available Commands","text":""},{"location":"guide/cli-usage/#list-decorators","title":"List Decorators","text":"<p>To list all available decorators in the registry:</p> <pre><code>prompt-decorators list\n</code></pre> <p>To list decorators by category:</p> <pre><code>prompt-decorators list --category reasoning\n</code></pre>"},{"location":"guide/cli-usage/#apply-decorators","title":"Apply Decorators","text":"<p>To apply a decorator to a prompt:</p> <pre><code>prompt-decorators apply --decorator Reasoning --prompt \"Explain quantum mechanics.\"\n</code></pre> <p>To apply multiple decorators:</p> <pre><code>prompt-decorators apply --decorator Reasoning --decorator OutputFormat --prompt \"Explain quantum mechanics.\"\n</code></pre> <p>You can also specify decorator parameters:</p> <pre><code>prompt-decorators apply --decorator \"Reasoning:style=detailed,show_working=true\" --prompt \"Explain quantum mechanics.\"\n</code></pre>"},{"location":"guide/cli-usage/#generate-code","title":"Generate Code","text":"<p>To generate code for a new decorator:</p> <pre><code>prompt-decorators generate --name CustomDecorator --category custom --output ./my_decorators\n</code></pre> <p>This will generate the necessary Python files for a new decorator.</p>"},{"location":"guide/cli-usage/#validate-decorators","title":"Validate Decorators","text":"<p>To validate a decorator JSON definition:</p> <pre><code>prompt-decorators validate --file ./decorators/custom_decorator.json\n</code></pre>"},{"location":"guide/cli-usage/#interactive-mode","title":"Interactive Mode","text":"<p>The CLI also provides an interactive mode where you can apply decorators and see the results in real-time:</p> <pre><code>prompt-decorators interactive\n</code></pre> <p>This will start an interactive session where you can: - Select decorators from a list - Configure decorator parameters - Enter a prompt - See the decorated prompt - Save the decorated prompt to a file</p>"},{"location":"guide/cli-usage/#using-with-pipes","title":"Using with Pipes","text":"<p>You can use the CLI with Unix pipes to integrate with other tools:</p> <pre><code>echo \"Explain quantum mechanics.\" | prompt-decorators apply --decorator Reasoning | openai api completions.create -m gpt-4\n</code></pre>"},{"location":"guide/cli-usage/#environment-variables","title":"Environment Variables","text":"<p>The CLI respects the following environment variables:</p> <ul> <li><code>PROMPT_DECORATORS_REGISTRY_PATH</code>: Path to a custom registry directory</li> <li><code>PROMPT_DECORATORS_CONFIG_PATH</code>: Path to a custom configuration file</li> </ul> <p>Example:</p> <pre><code>export PROMPT_DECORATORS_REGISTRY_PATH=./my_decorators\nprompt-decorators list\n</code></pre>"},{"location":"guide/cli-usage/#configuration-file","title":"Configuration File","text":"<p>You can create a configuration file at <code>~/.prompt-decorators/config.json</code> to set default values for the CLI:</p> <pre><code>{\n  \"default_decorators\": [\"Reasoning\", \"OutputFormat\"],\n  \"default_parameters\": {\n    \"Reasoning\": {\n      \"style\": \"detailed\",\n      \"show_working\": true\n    },\n    \"OutputFormat\": {\n      \"format_type\": \"markdown\",\n      \"pretty_print\": true\n    }\n  },\n  \"registry_path\": \"./my_decorators\"\n}\n</code></pre>"},{"location":"guide/cli-usage/#examples","title":"Examples","text":""},{"location":"guide/cli-usage/#example-1-basic-decorator-application","title":"Example 1: Basic Decorator Application","text":"<pre><code>prompt-decorators apply --decorator Reasoning --prompt \"Explain the theory of relativity.\"\n</code></pre> <p>Output: <pre><code>I need to explain the theory of relativity.\n\nLet me think through this step by step:\n\n1. First, I'll explain what the theory of relativity is\n2. Then, I'll cover the key principles\n3. Finally, I'll discuss its significance and implications\n\nNow, I'll explain the theory of relativity:\n\nThe theory of relativity, developed by Albert Einstein, consists of two related theories: special relativity (1905) and general relativity (1915)...\n</code></pre></p>"},{"location":"guide/cli-usage/#example-2-combining-multiple-decorators","title":"Example 2: Combining Multiple Decorators","text":"<pre><code>prompt-decorators apply --decorator \"Persona:role=physicist,tone=educational\" --decorator \"OutputFormat:format_type=markdown\" --prompt \"Explain quantum entanglement.\"\n</code></pre> <p>Output: <pre><code># Quantum Entanglement Explanation\n\nAs a physicist, I'm pleased to provide an educational explanation of quantum entanglement.\n\nQuantum entanglement is a phenomenon in quantum physics where two or more particles become correlated in such a way that the quantum state of each particle cannot be described independently of the others...\n</code></pre></p>"},{"location":"guide/cli-usage/#example-3-using-the-interactive-mode","title":"Example 3: Using the Interactive Mode","text":"<pre><code>prompt-decorators interactive\n</code></pre> <p>This will start an interactive session with prompts to: 1. Select decorators from a list 2. Configure parameters for each decorator 3. Enter your prompt 4. View the decorated prompt 5. Optionally save the result to a file</p>"},{"location":"guide/cli-usage/#example-4-generating-code-for-a-new-decorator","title":"Example 4: Generating Code for a New Decorator","text":"<pre><code>prompt-decorators generate --name EthicalConsiderations --category ethics --output ./my_decorators\n</code></pre> <p>This will generate: - A Python file for the decorator implementation - A JSON file for the decorator definition - Test files for the decorator</p>"},{"location":"guide/cli-usage/#next-steps","title":"Next Steps","text":"<ul> <li>Explore the API Reference</li> <li>Learn about API Integration</li> <li>Check out Advanced Usage</li> </ul>"},{"location":"guide/troubleshooting/","title":"Troubleshooting","text":"<p>This guide provides solutions to common issues you might encounter when using the Prompt Decorators framework.</p>"},{"location":"guide/troubleshooting/#installation-issues","title":"Installation Issues","text":""},{"location":"guide/troubleshooting/#package-not-found","title":"Package Not Found","text":"<p>Problem: <code>pip install prompt-decorators</code> fails with \"Package not found\" error.</p> <p>Solution: - Verify that you're using the correct package name. - Check your internet connection. - Try using a different PyPI mirror: <code>pip install prompt-decorators --index-url https://pypi.org/simple/</code> - If you're installing from a GitHub repository, ensure the repository URL is correct.</p>"},{"location":"guide/troubleshooting/#dependency-conflicts","title":"Dependency Conflicts","text":"<p>Problem: Installation fails due to dependency conflicts.</p> <p>Solution: - Create a fresh virtual environment: <code>python -m venv venv</code> and activate it. - Try installing with the <code>--no-dependencies</code> flag and then manually install dependencies: <code>pip install prompt-decorators --no-dependencies</code> - Check if any of your existing packages conflict with the requirements of Prompt Decorators.</p>"},{"location":"guide/troubleshooting/#import-errors","title":"Import Errors","text":""},{"location":"guide/troubleshooting/#module-not-found","title":"Module Not Found","text":"<p>Problem: <code>ImportError: No module named 'prompt_decorators'</code></p> <p>Solution: - Verify that the package is installed: <code>pip list | grep prompt-decorators</code> - Check that you're running Python from the correct environment where the package is installed. - If using a Jupyter notebook, restart the kernel after installation.</p>"},{"location":"guide/troubleshooting/#cannot-import-name","title":"Cannot Import Name","text":"<p>Problem: <code>ImportError: cannot import name 'SomeDecorator' from 'prompt_decorators.decorators'</code></p> <p>Solution: - Check that you're using the correct import path. - Verify that the decorator exists in the version you have installed. - Update to the latest version: <code>pip install --upgrade prompt-decorators</code></p>"},{"location":"guide/troubleshooting/#decorator-registry-issues","title":"Decorator Registry Issues","text":""},{"location":"guide/troubleshooting/#decorator-not-found","title":"Decorator Not Found","text":"<p>Problem: <code>ValueError: Decorator 'SomeDecorator' not found in registry</code></p> <p>Solution: - Check that the decorator name is spelled correctly. - List available decorators: <code>from prompt_decorators.registry import DecoratorRegistry; print(DecoratorRegistry().get_all_decorators())</code> - If it's a custom decorator, ensure it's properly registered.</p>"},{"location":"guide/troubleshooting/#custom-decorator-not-discovered","title":"Custom Decorator Not Discovered","text":"<p>Problem: Custom decorators aren't being discovered by the registry.</p> <p>Solution: - Ensure your custom decorators follow the required structure. - Check that the decorator class inherits from <code>BaseDecorator</code>. - Verify that the decorator is in a location that's included in the discovery paths. - Manually register the decorator: <code>registry.register(MyCustomDecorator)</code></p>"},{"location":"guide/troubleshooting/#decorator-application-issues","title":"Decorator Application Issues","text":""},{"location":"guide/troubleshooting/#unexpected-decorator-behavior","title":"Unexpected Decorator Behavior","text":"<p>Problem: A decorator doesn't modify the prompt as expected.</p> <p>Solution: - Check the decorator parameters to ensure they're set correctly. - Print the decorated prompt to see what's happening: <code>print(decorator.apply(prompt))</code> - Verify that decorators are being applied in the correct order. - Check if the decorator has any model-specific behavior that might be affecting its output.</p>"},{"location":"guide/troubleshooting/#decorator-compatibility-issues","title":"Decorator Compatibility Issues","text":"<p>Problem: Error message about incompatible decorators.</p> <p>Solution: - Check the compatibility requirements of each decorator. - Use the compatibility checker: <code>from prompt_decorators.registry.compatibility import check_compatibility; check_compatibility(decorator1, decorator2)</code> - Try changing the order of decorators. - Consider using different decorators that serve similar purposes but are compatible.</p>"},{"location":"guide/troubleshooting/#api-integration-issues","title":"API Integration Issues","text":""},{"location":"guide/troubleshooting/#api-authentication-errors","title":"API Authentication Errors","text":"<p>Problem: API calls fail with authentication errors.</p> <p>Solution: - Verify that your API key is correct and properly set. - Check if the API key has the necessary permissions. - Ensure the API key is being passed correctly in the request.</p>"},{"location":"guide/troubleshooting/#unexpected-api-responses","title":"Unexpected API Responses","text":"<p>Problem: The LLM API returns unexpected or error responses.</p> <p>Solution: - Check that the decorated prompt isn't exceeding the model's maximum token limit. - Verify that the API parameters (temperature, max_tokens, etc.) are set appropriately. - Ensure the prompt format is compatible with the specific LLM API you're using. - Try with a simpler prompt to isolate the issue.</p>"},{"location":"guide/troubleshooting/#cli-issues","title":"CLI Issues","text":""},{"location":"guide/troubleshooting/#command-not-found","title":"Command Not Found","text":"<p>Problem: <code>prompt-decorators</code> command not found.</p> <p>Solution: - Ensure the package is installed with the CLI dependencies: <code>pip install prompt-decorators[cli]</code> - Check that the installation directory is in your PATH. - Try using <code>python -m prompt_decorators.cli</code> instead.</p>"},{"location":"guide/troubleshooting/#cli-parameter-errors","title":"CLI Parameter Errors","text":"<p>Problem: CLI commands fail with parameter errors.</p> <p>Solution: - Check the command syntax: <code>prompt-decorators --help</code> - Ensure parameter values are properly quoted if they contain spaces. - For decorator parameters, use the correct format: <code>--decorator \"Reasoning:style=detailed,show_working=true\"</code></p>"},{"location":"guide/troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"guide/troubleshooting/#slow-decorator-application","title":"Slow Decorator Application","text":"<p>Problem: Applying decorators is taking too long.</p> <p>Solution: - Reduce the number of decorators being applied. - Check if any decorators are performing expensive operations. - Consider using caching for frequently used decorator combinations.</p>"},{"location":"guide/troubleshooting/#high-memory-usage","title":"High Memory Usage","text":"<p>Problem: The application uses too much memory when applying decorators.</p> <p>Solution: - Limit the number of decorators used simultaneously. - Check for memory leaks in custom decorators. - Consider processing prompts in smaller batches.</p>"},{"location":"guide/troubleshooting/#serialization-issues","title":"Serialization Issues","text":""},{"location":"guide/troubleshooting/#json-serialization-errors","title":"JSON Serialization Errors","text":"<p>Problem: Errors when trying to serialize decorators to JSON.</p> <p>Solution: - Ensure all decorator attributes are JSON-serializable. - Check for circular references in custom decorators. - Use the built-in serialization methods: <code>decorator.to_dict()</code> and <code>DecoratedRequest.to_dict()</code></p>"},{"location":"guide/troubleshooting/#deserialization-errors","title":"Deserialization Errors","text":"<p>Problem: Errors when trying to deserialize decorators from JSON.</p> <p>Solution: - Verify that the JSON structure matches what the decorator expects. - Ensure all required fields are present in the JSON. - Use the built-in deserialization methods: <code>Decorator.from_dict(data)</code> and <code>DecoratedRequest.from_dict(data)</code></p>"},{"location":"guide/troubleshooting/#common-error-messages-and-solutions","title":"Common Error Messages and Solutions","text":""},{"location":"guide/troubleshooting/#decorator-parameters-validation-failed","title":"\"Decorator parameters validation failed\"","text":"<p>Problem: The parameters provided to a decorator don't match its schema.</p> <p>Solution: - Check the decorator's documentation for the expected parameters. - Verify the parameter types and values. - Use the validator: <code>from prompt_decorators.registry.validation import validate_decorator_params; validate_decorator_params(decorator_class, params)</code></p>"},{"location":"guide/troubleshooting/#maximum-recursion-depth-exceeded","title":"\"Maximum recursion depth exceeded\"","text":"<p>Problem: Infinite recursion when applying decorators.</p> <p>Solution: - Check for circular references in your decorator chain. - Ensure that custom decorators don't call themselves recursively without a base case. - Limit the depth of decorator nesting.</p>"},{"location":"guide/troubleshooting/#incompatible-decorator-chain","title":"\"Incompatible decorator chain\"","text":"<p>Problem: The chain of decorators contains incompatible decorators.</p> <p>Solution: - Check the compatibility matrix in the documentation. - Use the compatibility checker before creating chains. - Try different combinations or orders of decorators.</p>"},{"location":"guide/troubleshooting/#debugging-tips","title":"Debugging Tips","text":""},{"location":"guide/troubleshooting/#enabling-debug-logging","title":"Enabling Debug Logging","text":"<p>To get more detailed information about what's happening:</p> <pre><code>import logging\nlogging.basicConfig(level=logging.DEBUG)\nlogger = logging.getLogger(\"prompt_decorators\")\n</code></pre>"},{"location":"guide/troubleshooting/#inspecting-decorators","title":"Inspecting Decorators","text":"<p>To inspect a decorator's structure and parameters:</p> <pre><code>from pprint import pprint\ndecorator = Reasoning(style=\"detailed\")\npprint(decorator.to_dict())\n</code></pre>"},{"location":"guide/troubleshooting/#testing-decorator-application","title":"Testing Decorator Application","text":"<p>To test how a decorator modifies a prompt:</p> <pre><code>original_prompt = \"Explain quantum mechanics.\"\ndecorated_prompt = decorator.apply(original_prompt)\nprint(f\"Original: {original_prompt}\")\nprint(f\"Decorated: {decorated_prompt}\")\n</code></pre>"},{"location":"guide/troubleshooting/#getting-help","title":"Getting Help","text":"<p>If you're still experiencing issues:</p> <ol> <li>Check the GitHub Issues to see if others have encountered the same problem.</li> <li>Search the Discussions for related topics.</li> <li>Create a new issue with:</li> <li>A clear description of the problem</li> <li>Steps to reproduce</li> <li>Expected vs. actual behavior</li> <li>Your environment details (Python version, OS, package version)</li> <li>Any relevant error messages or logs</li> </ol>"},{"location":"guide/troubleshooting/#next-steps","title":"Next Steps","text":"<ul> <li>Return to the Basic Usage Guide</li> <li>Explore the API Reference</li> <li>Check out Advanced Examples</li> </ul>"},{"location":"guides/ai_safety/","title":"AI Safety Guide: Using Prompt Decorators for Safer AI Interactions","text":"<p>This guide demonstrates how prompt decorators can be used to enhance the safety of interactions with large language models (LLMs) and other AI systems. By applying specific decorators and decorator chains, researchers and developers can implement guardrails, detect problematic inputs, and ensure more responsible outputs.</p>"},{"location":"guides/ai_safety/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Introduction</li> <li>Safety-Enhancing Decorators</li> <li>Implementing Input Validation</li> <li>Output Filtering</li> <li>Context-Aware Safety</li> <li>Monitoring and Logging</li> <li>Research Applications</li> <li>Best Practices</li> </ul>"},{"location":"guides/ai_safety/#introduction","title":"Introduction","text":"<p>AI safety is a critical consideration when deploying language models in production environments. Prompt decorators provide a systematic approach to enhancing AI safety by:</p> <ol> <li>Standardizing safety measures across applications</li> <li>Providing reusable safety components</li> <li>Enabling modular safety implementations that can be updated as safety research advances</li> <li>Creating transparent, auditable safety protocols</li> </ol>"},{"location":"guides/ai_safety/#safety-enhancing-decorators","title":"Safety-Enhancing Decorators","text":"<p>The Prompt Decorators framework includes several decorators specifically designed for safety:</p>"},{"location":"guides/ai_safety/#contentfilter-decorator","title":"<code>ContentFilter</code> Decorator","text":"<p>This decorator helps filter potentially harmful or inappropriate content:</p> <pre><code>from prompt_decorators import ContentFilter\n\n# Create a content filter that screens for specific categories\nsafety_filter = ContentFilter(\n    categories=[\"profanity\", \"hate_speech\", \"violence\", \"self_harm\"],\n    threshold=0.7,\n    action=\"block\"  # Alternatives: \"warn\", \"flag\"\n)\n\n# Apply to your prompt\nsafe_prompt = safety_filter(\"Tell me about combat techniques\")\n\n# The decorator will assess the prompt and take action based on the configuration\n</code></pre>"},{"location":"guides/ai_safety/#boundary-decorator","title":"<code>Boundary</code> Decorator","text":"<p>Establishes firm boundaries for what topics can be discussed:</p> <pre><code>from prompt_decorators import Boundary\n\n# Create boundaries for conversation\nboundaries = Boundary(\n    disallowed_topics=[\"illegal activities\", \"harmful instructions\"],\n    allowed_domains=[\"education\", \"science\", \"arts\"],\n    enforcement_level=\"strict\"  # Alternatives: \"moderate\", \"advisory\"\n)\n\n# Apply to your prompt\nbounded_prompt = boundaries(\"Let's discuss the chemistry of everyday substances\")\n</code></pre>"},{"location":"guides/ai_safety/#alignment-decorator","title":"<code>Alignment</code> Decorator","text":"<p>Ensures outputs align with specified values:</p> <pre><code>from prompt_decorators import Alignment\n\n# Define values to align with\nalignment_values = Alignment(\n    values=[\"accuracy\", \"fairness\", \"helpfulness\", \"harmlessness\"],\n    emphasis=\"harmlessness\"  # Prioritize this value when trade-offs exist\n)\n\n# Apply to your prompt\naligned_prompt = alignment_values(\"Explain the pros and cons of this technology\")\n</code></pre>"},{"location":"guides/ai_safety/#implementing-input-validation","title":"Implementing Input Validation","text":"<p>Input validation is a crucial safety measure. Here's how to implement it with decorators:</p> <pre><code>from prompt_decorators import Validator, Chain\n\n# Create a validator for user inputs\ninput_validator = Validator(\n    max_length=1000,\n    disallowed_patterns=[r\"hack\\s+into\", r\"bypass\\s+security\"],\n    required_context=[\"question\", \"purpose\"],\n    sensitivity_check=True\n)\n\n# Combine with other decorators\nsafety_chain = Chain([\n    input_validator,\n    ContentFilter(categories=[\"malicious_instructions\"]),\n    Boundary(enforcement_level=\"strict\")\n])\n\n# Apply to user input\nprocessed_input = safety_chain(user_input)\n</code></pre>"},{"location":"guides/ai_safety/#output-filtering","title":"Output Filtering","text":"<p>Ensuring AI outputs are safe is equally important:</p> <pre><code>from prompt_decorators import OutputFilter, Sanitizer\n\n# Create an output filter\noutput_safety = OutputFilter(\n    max_tokens=500,\n    prohibited_content=[\"personal data\", \"exact instructions for harmful acts\"],\n    sensitivity_level=\"high\"\n)\n\n# Apply sanitization\nsanitizer = Sanitizer(\n    remove_urls=True,\n    anonymize_identifiers=True,\n    replace_profanity=True\n)\n\n# Process the AI's response\nfinal_output = sanitizer(output_safety(ai_response))\n</code></pre>"},{"location":"guides/ai_safety/#context-aware-safety","title":"Context-Aware Safety","text":"<p>Safety measures can be context-dependent:</p> <pre><code>from prompt_decorators import ContextAware, ContentFilter\n\n# Create a context-aware safety system\ncontext_safety = ContextAware(\n    domain=\"healthcare\",\n    audience=\"general_public\",\n    purpose=\"educational\",\n    safety_level=\"high\"\n)\n\n# Different filters for different contexts\nif context == \"research\":\n    safety_filter = ContentFilter(categories=[\"pii\"], threshold=0.9)\nelif context == \"public_forum\":\n    safety_filter = ContentFilter(\n        categories=[\"profanity\", \"hate_speech\", \"pii\"],\n        threshold=0.5\n    )\n\n# Apply appropriate safety measures\nsafe_prompt = safety_filter(context_safety(original_prompt))\n</code></pre>"},{"location":"guides/ai_safety/#monitoring-and-logging","title":"Monitoring and Logging","text":"<p>Tracking safety incidents and maintaining audit trails:</p> <pre><code>from prompt_decorators import Logger, Telemetry\n\n# Set up safety logging\nsafety_logger = Logger(\n    log_level=\"warning\",\n    include_metadata=True,\n    store_original_inputs=False  # For privacy\n)\n\n# Add telemetry for safety monitoring\nsafety_telemetry = Telemetry(\n    events=[\"safety_filter_triggered\", \"boundary_violation\", \"input_rejected\"],\n    anonymous=True,\n    compliance_mode=\"gdpr\"\n)\n\n# Apply to your prompt processing pipeline\ndef process_prompt(prompt):\n    decorated_prompt = safety_chain(prompt)\n    safety_logger(decorated_prompt)  # Log the interaction\n    safety_telemetry.record(\"prompt_processed\")  # Record the event\n    return decorated_prompt\n</code></pre>"},{"location":"guides/ai_safety/#research-applications","title":"Research Applications","text":"<p>For AI safety researchers, prompt decorators offer powerful tools:</p>"},{"location":"guides/ai_safety/#red-teaming","title":"Red Teaming","text":"<pre><code>from prompt_decorators import RedTeam, Logger\n\n# Create a red teaming decorator\nred_team = RedTeam(\n    attack_types=[\"prompt_injection\", \"jailbreaking\", \"data_extraction\"],\n    automatic_variants=5,\n    log_responses=True\n)\n\n# Apply to test model robustness\ntest_results = red_team(\"Tell me about yourself\")\n\n# Analyze the results\nfor variant, response in test_results.items():\n    print(f\"Attack variant: {variant}\")\n    print(f\"Model response: {response}\")\n    print(f\"Successful exploit: {test_results.is_successful(variant)}\")\n</code></pre>"},{"location":"guides/ai_safety/#safety-benchmarking","title":"Safety Benchmarking","text":"<pre><code>from prompt_decorators import Benchmark, Suite\n\n# Create a safety benchmark\nsafety_benchmark = Benchmark(\n    name=\"harm_prevention\",\n    categories=[\"refusal\", \"harmless_alternative\", \"warning_generation\"],\n    metrics=[\"success_rate\", \"robustness\", \"consistency\"]\n)\n\n# Create a test suite\ntest_suite = Suite(\n    benchmarks=[safety_benchmark],\n    variants_per_prompt=3,\n    record_full_trace=True\n)\n\n# Run the benchmark\nresults = test_suite.run(model=\"your_model\", prompt_set=\"safety_prompts\")\n</code></pre>"},{"location":"guides/ai_safety/#best-practices","title":"Best Practices","text":"<p>For optimal AI safety when using prompt decorators:</p> <ol> <li>Layer your defenses: Use multiple decorators in chains to provide defense in depth</li> <li>Update regularly: Keep your safety decorators updated as new vulnerabilities are discovered</li> <li>Test thoroughly: Regularly test your safety measures with red-teaming exercises</li> <li>Monitor continuously: Implement logging and telemetry to detect safety failures</li> <li>Balance safety and utility: Too strict safety measures may harm functionality; find the right balance</li> <li>Domain-specific measures: Different applications require different safety approaches</li> <li>Transparent policies: Make your safety measures visible to users where appropriate</li> <li>Feedback loops: Create mechanisms for users to report safety failures</li> <li>Continuous improvement: Regularly review and improve your safety decorators</li> </ol> <p>By following this guide, AI safety researchers and developers can leverage prompt decorators to build more robust, safe, and responsible AI systems.</p>"},{"location":"guides/ai_safety/#additional-resources","title":"Additional Resources","text":"<ul> <li>Prompt Decorators Documentation</li> <li>Extension Development Tutorial</li> <li>Custom Safety Decorators</li> <li>Decorator Registry</li> </ul>"},{"location":"guides/domain_specific_extensions/","title":"Creating Domain-Specific Extensions","text":"<p>This guide provides a comprehensive walkthrough for creating domain-specific extensions for the Prompt Decorators framework. Domain-specific extensions allow you to create specialized decorators tailored to particular fields or industries, making AI interactions more effective for specific use cases.</p>"},{"location":"guides/domain_specific_extensions/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Introduction</li> <li>Why Create Domain-Specific Extensions?</li> <li>Planning Your Domain Extension</li> <li>Step-by-Step Implementation Guide</li> <li>Example: Medical Domain Extension</li> <li>Example: Legal Domain Extension</li> <li>Testing Domain-Specific Extensions</li> <li>Distribution and Sharing</li> <li>Best Practices</li> <li>Troubleshooting</li> </ul>"},{"location":"guides/domain_specific_extensions/#introduction","title":"Introduction","text":"<p>Domain-specific extensions enhance the Prompt Decorators framework by providing specialized behaviors tailored to particular fields or industries. These extensions make AI interactions more effective by incorporating domain knowledge, terminology, and workflows directly into the prompt engineering process.</p>"},{"location":"guides/domain_specific_extensions/#why-create-domain-specific-extensions","title":"Why Create Domain-Specific Extensions?","text":"<p>Domain-specific extensions offer several advantages:</p> <ol> <li>Specialized Behavior: Implement behaviors that address unique requirements of your domain</li> <li>Domain Terminology: Use familiar terminology that domain experts understand</li> <li>Workflow Integration: Fit AI interactions into existing domain workflows</li> <li>Consistency: Ensure consistent AI responses for domain-specific tasks</li> <li>Knowledge Encapsulation: Embed domain knowledge into reusable components</li> <li>Quality Control: Enforce domain-specific standards and best practices</li> </ol>"},{"location":"guides/domain_specific_extensions/#planning-your-domain-extension","title":"Planning Your Domain Extension","text":"<p>Before implementing your domain extension, careful planning is essential:</p>"},{"location":"guides/domain_specific_extensions/#1-domain-analysis","title":"1. Domain Analysis","text":"<ul> <li>Identify Key Tasks: What are the common tasks in your domain that could benefit from AI assistance?</li> <li>Analyze Workflows: How do practitioners in your domain currently work?</li> <li>Identify Pain Points: What aspects of AI interaction are currently challenging for domain experts?</li> <li>Review Terminology: What specialized language is used in your domain?</li> </ul>"},{"location":"guides/domain_specific_extensions/#2-decorator-mapping","title":"2. Decorator Mapping","text":"<p>Create a mapping between domain concepts and potential decorators:</p> Domain Concept Potential Decorator Parameters Description Concept 1 Decorator1 param1, param2 How this decorator helps with the concept Concept 2 Decorator2 param1, param2 How this decorator helps with the concept"},{"location":"guides/domain_specific_extensions/#3-compatibility-analysis","title":"3. Compatibility Analysis","text":"<ul> <li>Core Decorators: Which core decorators would complement your domain-specific decorators?</li> <li>Conflicts: Are there any potential conflicts with existing decorators?</li> <li>Dependencies: Do your decorators depend on other decorators?</li> </ul>"},{"location":"guides/domain_specific_extensions/#4-user-personas","title":"4. User Personas","text":"<p>Define the users who will benefit from your extension:</p> <ul> <li>Primary Users: Who are the main users of your extension?</li> <li>Skill Level: What is their technical expertise with AI and prompt engineering?</li> <li>Use Cases: What specific problems will they solve with your extension?</li> </ul>"},{"location":"guides/domain_specific_extensions/#step-by-step-implementation-guide","title":"Step-by-Step Implementation Guide","text":"<p>Follow these steps to implement your domain-specific extension:</p>"},{"location":"guides/domain_specific_extensions/#step-1-set-up-your-project-structure","title":"Step 1: Set Up Your Project Structure","text":"<p>Create a directory structure for your extension:</p> <pre><code>your-domain-extension/\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 your_domain_extension/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 decorators.py\n\u2502   \u2514\u2500\u2500 registry_extensions/\n\u2502       \u2514\u2500\u2500 your_domain_extension.json\n\u2514\u2500\u2500 tests/\n    \u2514\u2500\u2500 test_your_domain_extension.py\n</code></pre>"},{"location":"guides/domain_specific_extensions/#step-2-define-your-decorator-classes","title":"Step 2: Define Your Decorator Classes","text":"<p>Create your decorator classes in <code>decorators.py</code>:</p> <pre><code>from prompt_decorators.base import BaseDecorator\nfrom typing import List, Optional, Union\n\nclass YourDomainDecorator(BaseDecorator):\n    \"\"\"Decorator that implements domain-specific behavior.\n\n    Args:\n        param1: Description of parameter 1\n        param2: Description of parameter 2\n    \"\"\"\n\n    def __init__(\n        self,\n        param1: str = \"default\",\n        param2: int = 5\n    ) -&gt; None:\n        super().__init__()\n        self.param1 = param1\n        self.param2 = param2\n\n    def __call__(self, text: str) -&gt; str:\n        # Implementation of your domain-specific behavior\n        return f\"{text}\\n\\nApply domain-specific transformation with {self.param1} and {self.param2}.\"\n</code></pre>"},{"location":"guides/domain_specific_extensions/#step-3-create-registry-entries","title":"Step 3: Create Registry Entries","text":"<p>Create a JSON file in the <code>registry_extensions</code> directory:</p> <pre><code>{\n  \"decoratorName\": \"YourDomainDecorator\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Detailed description of your domain-specific decorator\",\n  \"author\": {\n    \"name\": \"Your Name\",\n    \"email\": \"your.email@example.com\",\n    \"url\": \"https://yourwebsite.com\"\n  },\n  \"parameters\": [\n    {\n      \"name\": \"param1\",\n      \"type\": \"string\",\n      \"description\": \"Description of parameter 1\",\n      \"default\": \"default\",\n      \"required\": false\n    },\n    {\n      \"name\": \"param2\",\n      \"type\": \"number\",\n      \"description\": \"Description of parameter 2\",\n      \"default\": 5,\n      \"required\": false\n    }\n  ],\n  \"examples\": [\n    {\n      \"description\": \"Example usage in your domain\",\n      \"usage\": \"+++YourDomainDecorator(param1=value, param2=10)\\nYour domain-specific prompt here.\",\n      \"result\": \"Expected result description\"\n    }\n  ],\n  \"compatibility\": {\n    \"requires\": [],\n    \"conflicts\": [],\n    \"models\": [\"gpt-4\", \"gpt-3.5-turbo\"]\n  }\n}\n</code></pre>"},{"location":"guides/domain_specific_extensions/#step-4-create-an-extension-package","title":"Step 4: Create an Extension Package","text":"<p>Create an extension package JSON file:</p> <pre><code>{\n  \"name\": \"your-domain-extension\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A collection of decorators for your specific domain\",\n  \"author\": {\n    \"name\": \"Your Name\",\n    \"email\": \"your.email@example.com\",\n    \"url\": \"https://yourwebsite.com\"\n  },\n  \"license\": \"MIT\",\n  \"keywords\": [\"your-domain\", \"prompt-decorators\", \"ai\"],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/yourusername/your-domain-extension\"\n  },\n  \"decorators\": [\n    // Include your registry entries here\n  ],\n  \"dependencies\": {\n    \"standard\": {\n      \"version\": \"1.0.0\"\n    },\n    \"extensions\": []\n  }\n}\n</code></pre>"},{"location":"guides/domain_specific_extensions/#step-5-implement-registration","title":"Step 5: Implement Registration","text":"<p>Create registration code in <code>__init__.py</code>:</p> <pre><code>from prompt_decorators.utils.discovery import DecoratorRegistry\nfrom .decorators import YourDomainDecorator\nimport os\nimport json\n\ndef register_extensions(registry: DecoratorRegistry) -&gt; None:\n    \"\"\"Register domain-specific extensions with the decorator registry.\"\"\"\n    # Register decorator classes\n    registry.register_decorator(YourDomainDecorator)\n\n    # Note: The registry doesn't currently support updating metadata directly\n    # The metadata is in registry_extensions/your_domain_extension.json for reference\n\n    print(f\"Registered domain-specific decorators with the registry\")\n</code></pre>"},{"location":"guides/domain_specific_extensions/#step-6-write-tests","title":"Step 6: Write Tests","text":"<p>Create tests in <code>tests/test_your_domain_extension.py</code>:</p> <pre><code>import pytest\nfrom your_domain_extension.decorators import YourDomainDecorator\n\ndef test_your_domain_decorator():\n    \"\"\"Test your domain-specific decorator.\"\"\"\n    decorator = YourDomainDecorator(param1=\"test\", param2=10)\n    result = decorator(\"Test prompt\")\n    assert \"test\" in result\n    assert \"10\" in result\n</code></pre>"},{"location":"guides/domain_specific_extensions/#step-7-package-your-extension","title":"Step 7: Package Your Extension","text":"<p>Create a <code>setup.py</code> file:</p> <pre><code>from setuptools import setup, find_packages\n\nsetup(\n    name=\"your-domain-extension\",\n    version=\"1.0.0\",\n    description=\"Domain-specific extensions for Prompt Decorators\",\n    author=\"Your Name\",\n    author_email=\"your.email@example.com\",\n    packages=find_packages(),\n    install_requires=[\n        \"prompt-decorators&gt;=1.0.0\",\n    ],\n    include_package_data=True,\n    package_data={\n        \"your_domain_extension\": [\"registry_extensions/*.json\"],\n    },\n)\n</code></pre>"},{"location":"guides/domain_specific_extensions/#example-medical-domain-extension","title":"Example: Medical Domain Extension","text":"<p>Let's create a simple extension package for the medical domain:</p>"},{"location":"guides/domain_specific_extensions/#medical-decorator-classes","title":"Medical Decorator Classes","text":"<pre><code># medical_decorators.py\nfrom prompt_decorators.base import BaseDecorator\nfrom typing import List, Optional, Union\n\nclass MedicalEvidence(BaseDecorator):\n    \"\"\"Decorator that ensures responses cite medical evidence according to standards.\n\n    Args:\n        level: The level of evidence required (systematic, rct, cohort, case, expert)\n        recency: Maximum age of cited research in years\n    \"\"\"\n\n    def __init__(\n        self,\n        level: str = \"systematic\",\n        recency: int = 5\n    ) -&gt; None:\n        super().__init__()\n        self.level = level\n        self.recency = recency\n\n    def __call__(self, text: str) -&gt; str:\n        # Implementation would modify the prompt to request evidence-based responses\n        return f\"{text}\\n\\nPlease provide {self.level}-level medical evidence \" \\\n               f\"from the past {self.recency} years to support all claims.\"\n\nclass PatientFriendly(BaseDecorator):\n    \"\"\"Decorator that adapts medical information for patient understanding.\n\n    Args:\n        reading_level: Target reading comprehension level\n        include_glossary: Whether to include a glossary of medical terms\n    \"\"\"\n\n    def __init__(\n        self,\n        reading_level: str = \"middle\",\n        include_glossary: bool = True\n    ) -&gt; None:\n        super().__init__()\n        self.reading_level = reading_level\n        self.include_glossary = include_glossary\n\n    def __call__(self, text: str) -&gt; str:\n        # Implementation would modify the prompt to request patient-friendly responses\n        result = f\"{text}\\n\\nPlease explain this in patient-friendly language \" \\\n                f\"at a {self.reading_level} school reading level.\"\n\n        if self.include_glossary:\n            result += \" Include a brief glossary for any medical terms used.\"\n\n        return result\n</code></pre>"},{"location":"guides/domain_specific_extensions/#medical-extension-package","title":"Medical Extension Package","text":"<pre><code>{\n  \"name\": \"medical-decorators\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Prompt decorators for medical and healthcare applications\",\n  \"author\": {\n    \"name\": \"Healthcare AI Team\",\n    \"email\": \"healthcare@example.com\",\n    \"url\": \"https://healthcare-ai.example.com\"\n  },\n  \"license\": \"MIT\",\n  \"keywords\": [\"medical\", \"healthcare\", \"evidence-based-medicine\", \"patient-education\"],\n  \"decorators\": [\n    {\n      \"decoratorName\": \"MedicalEvidence\",\n      \"version\": \"1.0.0\",\n      \"description\": \"Ensures responses cite medical evidence according to evidence-based medicine standards\",\n      \"parameters\": [\n        {\n          \"name\": \"level\",\n          \"type\": \"enum\",\n          \"description\": \"The level of evidence required\",\n          \"enum\": [\"systematic\", \"rct\", \"cohort\", \"case\", \"expert\"],\n          \"default\": \"systematic\",\n          \"required\": false\n        },\n        {\n          \"name\": \"recency\",\n          \"type\": \"number\",\n          \"description\": \"Maximum age of cited research in years\",\n          \"default\": 5,\n          \"required\": false\n        }\n      ],\n      \"examples\": [\n        {\n          \"description\": \"Request for treatment information with high-quality evidence\",\n          \"usage\": \"+++MedicalEvidence(level=systematic, recency=3)\\nWhat are the current treatments for type 2 diabetes?\",\n          \"result\": \"Provides treatment information citing systematic reviews and meta-analyses from the last 3 years\"\n        }\n      ],\n      \"compatibility\": {\n        \"requires\": [\"CiteSources\"],\n        \"conflicts\": [],\n        \"models\": [\"gpt-4\"]\n      }\n    },\n    {\n      \"decoratorName\": \"PatientFriendly\",\n      \"version\": \"1.0.0\",\n      \"description\": \"Adapts medical information to be understandable by patients without medical background\",\n      \"parameters\": [\n        {\n          \"name\": \"readingLevel\",\n          \"type\": \"enum\",\n          \"description\": \"Target reading comprehension level\",\n          \"enum\": [\"elementary\", \"middle\", \"high\", \"college\"],\n          \"default\": \"middle\",\n          \"required\": false\n        },\n        {\n          \"name\": \"includeGlossary\",\n          \"type\": \"boolean\",\n          \"description\": \"Whether to include a glossary of medical terms\",\n          \"default\": true,\n          \"required\": false\n        }\n      ],\n      \"examples\": [\n        {\n          \"description\": \"Explaining a medical condition to a patient\",\n          \"usage\": \"+++PatientFriendly(readingLevel=middle, includeGlossary=true)\\nExplain what hypertension is and how it affects the body.\",\n          \"result\": \"Provides an explanation of hypertension at a middle school reading level with a glossary of medical terms\"\n        }\n      ],\n      \"compatibility\": {\n        \"requires\": [],\n        \"conflicts\": [\"Technical\"],\n        \"models\": [\"gpt-4\", \"gpt-3.5-turbo\"]\n      }\n    }\n  ],\n  \"dependencies\": {\n    \"standard\": {\n      \"version\": \"1.0.0\"\n    }\n  }\n}\n</code></pre>"},{"location":"guides/domain_specific_extensions/#usage-example","title":"Usage Example","text":"<pre><code>from prompt_decorators.utils.discovery import DecoratorRegistry\nfrom medical_decorators import register_extensions\n\n# Initialize registry and register medical extensions\nregistry = DecoratorRegistry()\nregister_extensions(registry)\n\n# Create a prompt with medical decorators\nprompt = \"\"\"\n+++MedicalEvidence(level=rct, recency=3)\n+++PatientFriendly(readingLevel=elementary, includeGlossary=true)\nWhat are the treatment options for childhood asthma?\n\"\"\"\n\n# Process the prompt\nprocessed_prompt = registry.process_prompt(prompt)\n\n# Send to LLM API\nresponse = llm_api.generate(processed_prompt)\n</code></pre>"},{"location":"guides/domain_specific_extensions/#example-legal-domain-extension","title":"Example: Legal Domain Extension","text":"<p>Here's another example for the legal domain:</p>"},{"location":"guides/domain_specific_extensions/#legal-decorator-classes","title":"Legal Decorator Classes","text":"<pre><code># legal_decorators.py\nfrom prompt_decorators.base import BaseDecorator\n\nclass LegalCitation(BaseDecorator):\n    \"\"\"Decorator that ensures proper legal citations in responses.\n\n    Args:\n        jurisdiction: The legal jurisdiction (us, uk, eu, international)\n        format: Citation format (bluebook, alwd, oscola)\n    \"\"\"\n\n    def __init__(\n        self,\n        jurisdiction: str = \"us\",\n        format: str = \"bluebook\"\n    ) -&gt; None:\n        super().__init__()\n        self.jurisdiction = jurisdiction\n        self.format = format\n\n    def __call__(self, text: str) -&gt; str:\n        return f\"{text}\\n\\nPlease include proper legal citations in {self.format} format \" \\\n               f\"for {self.jurisdiction} jurisdiction.\"\n\nclass LegalAnalysis(BaseDecorator):\n    \"\"\"Decorator that structures responses as legal analysis.\n\n    Args:\n        framework: Analysis framework to use (irac, creac, firac)\n        depth: Depth of analysis (brief, standard, comprehensive)\n    \"\"\"\n\n    def __init__(\n        self,\n        framework: str = \"irac\",\n        depth: str = \"standard\"\n    ) -&gt; None:\n        super().__init__()\n        self.framework = framework\n        self.depth = depth\n\n    def __call__(self, text: str) -&gt; str:\n        return f\"{text}\\n\\nPlease structure your response as a {self.depth} legal analysis \" \\\n               f\"using the {self.framework.upper()} framework.\"\n</code></pre>"},{"location":"guides/domain_specific_extensions/#testing-domain-specific-extensions","title":"Testing Domain-Specific Extensions","text":"<p>Testing is crucial for ensuring your domain-specific extensions work correctly:</p>"},{"location":"guides/domain_specific_extensions/#1-unit-tests","title":"1. Unit Tests","text":"<p>Test each decorator individually:</p> <pre><code>def test_medical_evidence_decorator():\n    \"\"\"Test the MedicalEvidence decorator.\"\"\"\n    decorator = MedicalEvidence(level=\"rct\", recency=3)\n    result = decorator(\"What are the treatments for diabetes?\")\n    assert \"rct-level medical evidence\" in result\n    assert \"past 3 years\" in result\n</code></pre>"},{"location":"guides/domain_specific_extensions/#2-integration-tests","title":"2. Integration Tests","text":"<p>Test how your decorators work with the registry:</p> <pre><code>def test_registry_integration():\n    \"\"\"Test integration with the decorator registry.\"\"\"\n    registry = DecoratorRegistry()\n    register_extensions(registry)\n\n    # Test decorator retrieval\n    decorator_factory = registry.get_decorator_factory(\"MedicalEvidence\")\n    assert decorator_factory is not None\n\n    # Test prompt processing\n    prompt = \"+++MedicalEvidence(level=rct)\\nWhat are the treatments for diabetes?\"\n    processed = registry.process_prompt(prompt)\n    assert \"rct-level medical evidence\" in processed\n</code></pre>"},{"location":"guides/domain_specific_extensions/#3-domain-expert-validation","title":"3. Domain Expert Validation","text":"<p>Have domain experts review your decorators:</p> <ul> <li>Are the parameters intuitive for domain experts?</li> <li>Do the decorators address real domain needs?</li> <li>Is the terminology correct and appropriate?</li> <li>Do the examples reflect realistic use cases?</li> </ul>"},{"location":"guides/domain_specific_extensions/#distribution-and-sharing","title":"Distribution and Sharing","text":"<p>There are several ways to distribute your domain-specific extensions:</p>"},{"location":"guides/domain_specific_extensions/#1-python-package","title":"1. Python Package","text":"<p>Publish your extension as a Python package:</p> <pre><code># Build the package\npython setup.py sdist bdist_wheel\n\n# Upload to PyPI\ntwine upload dist/*\n</code></pre>"},{"location":"guides/domain_specific_extensions/#2-github-repository","title":"2. GitHub Repository","text":"<p>Host your extension on GitHub:</p> <ul> <li>Include comprehensive documentation</li> <li>Provide installation instructions</li> <li>Include examples specific to your domain</li> <li>Add badges for build status, test coverage, etc.</li> </ul>"},{"location":"guides/domain_specific_extensions/#3-contribution-to-main-repository","title":"3. Contribution to Main Repository","text":"<p>Consider contributing to the main Prompt Decorators repository:</p> <ol> <li>Fork the repository</li> <li>Add your extension to the appropriate directories</li> <li>Submit a pull request with your changes</li> </ol>"},{"location":"guides/domain_specific_extensions/#best-practices","title":"Best Practices","text":"<p>Follow these best practices when creating domain-specific extensions:</p>"},{"location":"guides/domain_specific_extensions/#1-domain-specific-considerations","title":"1. Domain-Specific Considerations","text":"<ul> <li>Use Domain Terminology: Name decorators and parameters using familiar domain terminology</li> <li>Consult Domain Experts: Work with experts in the field to identify valuable decorator functionality</li> <li>Document Domain Context: Provide context about why certain decorators are valuable in the domain</li> <li>Consider Workflows: Design decorators that fit into existing domain workflows</li> <li>Test with Domain Users: Validate your extensions with actual practitioners in the field</li> </ul>"},{"location":"guides/domain_specific_extensions/#2-technical-considerations","title":"2. Technical Considerations","text":"<ul> <li>Follow Core Design Principles: Ensure your decorators are composable with other decorators</li> <li>Maintain Immutability: Don't modify the input text directly</li> <li>Validate Parameters: Check parameter values and provide helpful error messages</li> <li>Document Thoroughly: Include comprehensive docstrings and examples</li> <li>Test Edge Cases: Test with various inputs, including edge cases</li> </ul>"},{"location":"guides/domain_specific_extensions/#3-usability-considerations","title":"3. Usability Considerations","text":"<ul> <li>Intuitive Defaults: Provide sensible default values for parameters</li> <li>Clear Examples: Include examples that demonstrate common use cases</li> <li>Comprehensive Documentation: Document how your decorators address domain-specific needs</li> <li>Versioning: Follow semantic versioning for your extensions</li> <li>Backward Compatibility: Maintain backward compatibility when updating your extensions</li> </ul>"},{"location":"guides/domain_specific_extensions/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p>"},{"location":"guides/domain_specific_extensions/#decorator-not-working-with-llm","title":"Decorator Not Working with LLM","text":"<p>Problem: Your domain-specific decorator doesn't affect the LLM's response.</p> <p>Solution: - Ensure your decorator is properly registered with the registry - Check that the decorator's <code>__call__</code> method is modifying the prompt correctly - Verify that the LLM supports the behavior you're trying to achieve</p>"},{"location":"guides/domain_specific_extensions/#compatibility-issues","title":"Compatibility Issues","text":"<p>Problem: Your decorator conflicts with other decorators.</p> <p>Solution: - Update your compatibility information in the registry JSON - Modify your decorator to work better with others - Document known conflicts and provide workarounds</p>"},{"location":"guides/domain_specific_extensions/#domain-experts-find-it-difficult-to-use","title":"Domain Experts Find It Difficult to Use","text":"<p>Problem: Domain experts struggle to use your decorators effectively.</p> <p>Solution: - Simplify parameter names and values - Provide more examples of common use cases - Create templates for common workflows - Develop a simple UI for applying decorators</p>"},{"location":"guides/domain_specific_extensions/#conclusion","title":"Conclusion","text":"<p>Creating domain-specific extensions for Prompt Decorators allows you to tailor AI interactions to the unique needs of your field. By following the guidelines in this document, you can create powerful, reusable decorators that make AI more accessible and effective for domain experts.</p> <p>Remember that the most valuable domain-specific extensions are those that truly understand and address the specific challenges of the domain. Work closely with domain experts throughout the development process to ensure your extensions meet their needs.</p>"},{"location":"guides/healthcare/","title":"Healthcare Guide: Using Prompt Decorators in Medical Applications","text":"<p>This guide demonstrates how prompt decorators can enhance healthcare applications by ensuring compliance with regulations, improving the quality of medical information, and maintaining patient privacy. Healthcare professionals and developers can use these techniques to create more effective and responsible AI-assisted healthcare solutions.</p>"},{"location":"guides/healthcare/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Introduction</li> <li>Regulatory Compliance</li> <li>Privacy Protection</li> <li>Medical Accuracy</li> <li>Patient Communication</li> <li>Medical Research</li> <li>Clinical Decision Support</li> <li>Best Practices</li> <li>Case Studies</li> </ul>"},{"location":"guides/healthcare/#introduction","title":"Introduction","text":"<p>Healthcare applications of AI require special consideration due to regulatory requirements, the sensitive nature of medical data, and the potential impact on patient outcomes. Prompt decorators offer a systematic approach to addressing these challenges by:</p> <ol> <li>Enforcing regulatory compliance</li> <li>Protecting patient privacy</li> <li>Ensuring medical accuracy</li> <li>Adapting communication to patient needs</li> <li>Supporting ethical research practices</li> <li>Enhancing clinical decision support</li> </ol>"},{"location":"guides/healthcare/#regulatory-compliance","title":"Regulatory Compliance","text":"<p>Healthcare applications must comply with various regulations such as HIPAA (US), GDPR (EU), and other regional healthcare data protection laws. Decorators can help enforce compliance:</p>"},{"location":"guides/healthcare/#compliancecheck-decorator","title":"<code>ComplianceCheck</code> Decorator","text":"<pre><code>from prompt_decorators import ComplianceCheck\n\n# Create a HIPAA compliance decorator\nhipaa_compliant = ComplianceCheck(\n    regulation=\"HIPAA\",\n    required_elements=[\"phi_protection\", \"minimum_necessary\", \"authorization\"],\n    audit_trail=True,\n    enforcement_level=\"strict\"\n)\n\n# Apply to your prompt\ncompliant_prompt = hipaa_compliant(\"Please summarize the patient information\")\n\n# The decorator will transform the prompt to ensure compliance\n</code></pre>"},{"location":"guides/healthcare/#consentverification-decorator","title":"<code>ConsentVerification</code> Decorator","text":"<pre><code>from prompt_decorators import ConsentVerification\n\n# Create a consent verification decorator\nconsent_check = ConsentVerification(\n    consent_types=[\"data_processing\", \"ai_assistance\", \"data_sharing\"],\n    verification_method=\"explicit\",\n    record_consent=True\n)\n\n# Apply to your interaction\nverified_prompt = consent_check(\"Analyze the following patient data\")\n</code></pre>"},{"location":"guides/healthcare/#privacy-protection","title":"Privacy Protection","text":"<p>Protecting patient privacy is paramount in healthcare applications:</p>"},{"location":"guides/healthcare/#anonymizer-decorator","title":"<code>Anonymizer</code> Decorator","text":"<pre><code>from prompt_decorators import Anonymizer\n\n# Create an anonymizer for medical data\nmedical_anonymizer = Anonymizer(\n    entities=[\"name\", \"address\", \"phone\", \"email\", \"mrn\", \"ssn\", \"dob\"],\n    method=\"replacement\",  # Alternatives: \"redaction\", \"generalization\"\n    preserve_medical_context=True\n)\n\n# Apply to a prompt containing sensitive information\nanonymized_prompt = medical_anonymizer(\"Patient John Doe (DOB: 01/15/1980) has been diagnosed with hypertension\")\n\n# Results in: \"Patient [NAME] (DOB: [DATE]) has been diagnosed with hypertension\"\n</code></pre>"},{"location":"guides/healthcare/#minimumnecessary-decorator","title":"<code>MinimumNecessary</code> Decorator","text":"<pre><code>from prompt_decorators import MinimumNecessary\n\n# Create a minimum necessary decorator\nmin_necessary = MinimumNecessary(\n    purpose=\"treatment\",  # Alternatives: \"payment\", \"operations\", \"research\"\n    role=\"physician\",  # User role determines access level\n    data_categories=[\"diagnosis\", \"medications\", \"vitals\"]\n)\n\n# Apply to reduce information to only what's necessary\nfiltered_prompt = min_necessary(\"Patient has hypertension, diabetes, financial issues, and family problems\")\n\n# Results in only sharing medically relevant information for treatment\n</code></pre>"},{"location":"guides/healthcare/#medical-accuracy","title":"Medical Accuracy","text":"<p>Ensuring medical information is accurate and evidence-based:</p>"},{"location":"guides/healthcare/#evidencebased-decorator","title":"<code>EvidenceBased</code> Decorator","text":"<pre><code>from prompt_decorators import EvidenceBased\n\n# Create an evidence-based medicine decorator\nevidence_based = EvidenceBased(\n    evidence_level=\"high\",  # Requires high-quality evidence\n    citation_required=True,\n    recency_threshold=2,  # Max 2 years old\n    medical_guidelines=[\"AMA\", \"WHO\"]\n)\n\n# Apply to medical information\nvalidated_prompt = evidence_based(\"Recommend treatment for acute myocardial infarction\")\n</code></pre>"},{"location":"guides/healthcare/#medicaldisclaimers-decorator","title":"<code>MedicalDisclaimers</code> Decorator","text":"<pre><code>from prompt_decorators import MedicalDisclaimers\n\n# Create appropriate medical disclaimers\ndisclaimers = MedicalDisclaimers(\n    include=[\"not_medical_advice\", \"consult_physician\", \"emergency_warning\"],\n    placement=\"prefix\",  # Alternatives: \"suffix\", \"both\"\n    emphasis_level=\"high\"\n)\n\n# Apply to outputs\ndisclaimed_output = disclaimers(\"Based on the symptoms described, this could be symptoms of several conditions\")\n</code></pre>"},{"location":"guides/healthcare/#patient-communication","title":"Patient Communication","text":"<p>Adapting communication for different patient needs:</p>"},{"location":"guides/healthcare/#healthliteracy-decorator","title":"<code>HealthLiteracy</code> Decorator","text":"<pre><code>from prompt_decorators import HealthLiteracy, Chain\n\n# Create a health literacy level adapter\nliteracy_adapter = HealthLiteracy(\n    level=\"low\",  # Alternatives: \"medium\", \"high\"\n    simplify_terms=True,\n    include_explanations=True,\n    visual_aids=True\n)\n\n# Combine with other decorators\npatient_communication = Chain([\n    literacy_adapter,\n    EvidenceBased(evidence_level=\"high\"),\n    MedicalDisclaimers()\n])\n\n# Apply to patient information\npatient_friendly = patient_communication(\"The patient has been diagnosed with hypertension\")\n</code></pre>"},{"location":"guides/healthcare/#culturallysensitive-decorator","title":"<code>CulturallySensitive</code> Decorator","text":"<pre><code>from prompt_decorators import CulturallySensitive\n\n# Create culturally sensitive communication\ncultural_adapter = CulturallySensitive(\n    language=\"spanish\",\n    cultural_context=\"hispanic\",\n    health_beliefs=True,\n    localize_examples=True\n)\n\n# Apply to health information\nculturally_adapted = cultural_adapter(\"Here's information about managing diabetes through diet\")\n</code></pre>"},{"location":"guides/healthcare/#medical-research","title":"Medical Research","text":"<p>Supporting ethical and effective medical research:</p>"},{"location":"guides/healthcare/#researchprotocol-decorator","title":"<code>ResearchProtocol</code> Decorator","text":"<pre><code>from prompt_decorators import ResearchProtocol\n\n# Create a research protocol decorator\nprotocol = ResearchProtocol(\n    irb_approved=True,\n    protocol_id=\"MED-2023-456\",\n    study_phase=\"clinical_trial_3\",\n    inclusion_criteria=[\"age&gt;=18\", \"diagnosed_hypertension\"],\n    exclusion_criteria=[\"pregnant\", \"severe_comorbidities\"]\n)\n\n# Apply to research queries\nresearch_prompt = protocol(\"Analyze the relationship between medication adherence and blood pressure control\")\n</code></pre>"},{"location":"guides/healthcare/#blindedanalysis-decorator","title":"<code>BlindedAnalysis</code> Decorator","text":"<pre><code>from prompt_decorators import BlindedAnalysis\n\n# Create a blinded analysis decorator\nblinded = BlindedAnalysis(\n    blind_level=\"double\",  # Double-blind study\n    group_anonymization=True,\n    prevent_unblinding=True\n)\n\n# Apply to analysis prompts\nblinded_analysis = blinded(\"Compare outcomes between treatment and control groups\")\n</code></pre>"},{"location":"guides/healthcare/#clinical-decision-support","title":"Clinical Decision Support","text":"<p>Enhancing clinical decision-making:</p>"},{"location":"guides/healthcare/#clinicalguidelines-decorator","title":"<code>ClinicalGuidelines</code> Decorator","text":"<pre><code>from prompt_decorators import ClinicalGuidelines\n\n# Create a clinical guidelines decorator\nguidelines = ClinicalGuidelines(\n    source=\"ACC/AHA\",  # American College of Cardiology/American Heart Association\n    condition=\"hypertension\",\n    year=2023,\n    recommendation_strength=\"strong\"\n)\n\n# Apply to treatment recommendations\nguideline_based = guidelines(\"Recommend treatment for a 65-year-old with stage 2 hypertension\")\n</code></pre>"},{"location":"guides/healthcare/#diagnosticaccuracy-decorator","title":"<code>DiagnosticAccuracy</code> Decorator","text":"<pre><code>from prompt_decorators import DiagnosticAccuracy\n\n# Create a diagnostic accuracy enhancer\ndiagnostic = DiagnosticAccuracy(\n    sensitivity_specificity=True,\n    differential_diagnosis=True,\n    confidence_levels=True,\n    test_recommendations=True\n)\n\n# Apply to diagnostic assistance\naccurate_diagnosis = diagnostic(\"Patient presents with chest pain, shortness of breath, and diaphoresis\")\n</code></pre>"},{"location":"guides/healthcare/#best-practices","title":"Best Practices","text":"<p>For optimal use of prompt decorators in healthcare:</p> <ol> <li>Prioritize patient safety: Always include appropriate disclaimers and ensure medical accuracy</li> <li>Layer compliance measures: Use multiple compliance and privacy decorators together</li> <li>Adapt to the audience: Use different decorators for patients vs. healthcare professionals</li> <li>Document everything: Maintain records of prompts, decorators used, and responses for audit purposes</li> <li>Regular updates: Keep medical information and guidelines current</li> <li>Test with clinicians: Validate decorator effectiveness with healthcare professionals</li> <li>Transparency: Make it clear to users when AI is being used and how information is processed</li> <li>Feedback loop: Create mechanisms for reporting inaccuracies or compliance issues</li> <li>Local regulations: Adapt decorators to comply with local healthcare regulations</li> <li>Emergency protocols: Include clear warnings for emergency situations requiring immediate care</li> </ol>"},{"location":"guides/healthcare/#case-studies","title":"Case Studies","text":""},{"location":"guides/healthcare/#telehealth-triage-system","title":"Telehealth Triage System","text":"<pre><code>from prompt_decorators import Chain, SymptomAnalysis, Urgency, HealthLiteracy, MedicalDisclaimers\n\n# Create a telehealth triage system\ntriage_system = Chain([\n    HealthLiteracy(level=\"medium\"),\n    SymptomAnalysis(comprehensive=True),\n    Urgency(levels=[\"emergency\", \"urgent\", \"routine\", \"self-care\"]),\n    MedicalDisclaimers(include=[\"emergency_warning\", \"not_diagnosis\"])\n])\n\n# Apply to patient-reported symptoms\ntriage_response = triage_system(\"I've been having severe chest pain radiating to my left arm for the last hour\")\n</code></pre>"},{"location":"guides/healthcare/#clinical-documentation-assistant","title":"Clinical Documentation Assistant","text":"<pre><code>from prompt_decorators import Chain, MedicalCoding, StructuredNote, ComplianceCheck\n\n# Create a clinical documentation assistant\ndocumentation_assistant = Chain([\n    StructuredNote(format=\"SOAP\"),\n    MedicalCoding(systems=[\"ICD-10\", \"CPT\"]),\n    ComplianceCheck(regulation=\"HIPAA\")\n])\n\n# Apply to clinical notes\nstructured_note = documentation_assistant(\"Patient presented with fever and cough. Diagnosed with acute bronchitis. Prescribed amoxicillin.\")\n</code></pre> <p>By following this guide, healthcare professionals and developers can leverage prompt decorators to build more effective, compliant, and patient-centered healthcare applications.</p>"},{"location":"guides/healthcare/#additional-resources","title":"Additional Resources","text":"<ul> <li>Prompt Decorators Documentation</li> <li>Compliance Guide</li> <li>Medical Decorators</li> <li>Patient Communication</li> </ul>"},{"location":"guides/transformation_patterns/","title":"Common Transformation Patterns","text":"<p>This guide provides common patterns for implementing transformation templates in prompt decorators. Use these patterns as a starting point for your own decorators.</p>"},{"location":"guides/transformation_patterns/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Introduction</li> <li>Basic Patterns</li> <li>Simple Instruction</li> <li>Parameter-Based Variations</li> <li>Format Strings</li> <li>Advanced Patterns</li> <li>Placement Strategies</li> <li>Composition Behaviors</li> <li>Model-Specific Adaptations</li> <li>Domain-Specific Patterns</li> <li>Reasoning Process Patterns</li> <li>Output Format Patterns</li> <li>Tone and Style Patterns</li> <li>Verification Patterns</li> <li>Best Practices</li> </ul>"},{"location":"guides/transformation_patterns/#introduction","title":"Introduction","text":"<p>Transformation templates define how decorators modify prompts by adding instructions, changing formats, or altering tone. These templates create consistency across implementations and make decorators more predictable.</p>"},{"location":"guides/transformation_patterns/#basic-patterns","title":"Basic Patterns","text":""},{"location":"guides/transformation_patterns/#simple-instruction","title":"Simple Instruction","text":"<p>The simplest pattern adds a fixed instruction to a prompt:</p> <pre><code>{\n  \"transformationTemplate\": {\n    \"instruction\": \"Please format your response as a numbered list.\",\n    \"placement\": \"prepend\"\n  }\n}\n</code></pre> <p>This pattern is ideal for decorators that don't require parameter customization.</p>"},{"location":"guides/transformation_patterns/#parameter-based-variations","title":"Parameter-Based Variations","text":"<p>For decorators with parameters, use <code>valueMap</code> to select different instructions based on parameter values:</p> <pre><code>{\n  \"transformationTemplate\": {\n    \"instruction\": \"Please explain the following concept.\",\n    \"parameterMapping\": {\n      \"level\": {\n        \"valueMap\": {\n          \"beginner\": \"Use simple language and basic analogies a 10-year-old would understand.\",\n          \"intermediate\": \"Use moderately technical language and some field-specific terminology.\",\n          \"expert\": \"Use technical language and detailed field-specific terminology.\"\n        }\n      }\n    }\n  }\n}\n</code></pre> <p>This pattern allows the decorator to adapt its behavior based on parameter values.</p>"},{"location":"guides/transformation_patterns/#format-strings","title":"Format Strings","text":"<p>When a parameter value should be directly inserted into an instruction, use the <code>format</code> approach:</p> <pre><code>{\n  \"transformationTemplate\": {\n    \"instruction\": \"Please format your response according to the instructions below.\",\n    \"parameterMapping\": {\n      \"wordCount\": {\n        \"format\": \"Limit your response to approximately {value} words.\"\n      }\n    }\n  }\n}\n</code></pre> <p>This pattern works well for numeric parameters or when the exact parameter value should appear in the instruction.</p>"},{"location":"guides/transformation_patterns/#advanced-patterns","title":"Advanced Patterns","text":""},{"location":"guides/transformation_patterns/#placement-strategies","title":"Placement Strategies","text":"<p>Different decorators may require different placement strategies:</p> <ol> <li> <p>Append (default) - Places instructions after the prompt:    <pre><code>\"placement\": \"append\"\n</code></pre>    Good for post-processing instructions like \"Now review your answer and check for errors.\"</p> </li> <li> <p>Prepend - Places instructions before the prompt:    <pre><code>\"placement\": \"prepend\"\n</code></pre>    Useful when instructions need to set context before the model processes the prompt.</p> </li> <li> <p>Wrap - Places instructions before and after the prompt:    <pre><code>\"placement\": \"wrap\"\n</code></pre>    Useful for framing the context before and after the prompt.</p> </li> </ol>"},{"location":"guides/transformation_patterns/#composition-behaviors","title":"Composition Behaviors","text":"<p>Control how your decorator interacts with others:</p> <ol> <li> <p>Accumulate (default) - Instructions combine with other decorators:    <pre><code>\"compositionBehavior\": \"accumulate\"\n</code></pre></p> </li> <li> <p>Override - Later decorators replace earlier ones:    <pre><code>\"compositionBehavior\": \"override\"\n</code></pre>    Use sparingly, as it can disrupt expected behavior.</p> </li> <li> <p>Selective-Override - Override only specific aspects:    <pre><code>\"compositionBehavior\": \"selective-override\"\n</code></pre>    For decorators that replace specific functionality but retain others.</p> </li> </ol>"},{"location":"guides/transformation_patterns/#model-specific-adaptations","title":"Model-Specific Adaptations","text":"<p>Some models require different phrasing. Provide alternatives in the implementation guidance:</p> <pre><code>\"implementationGuidance\": {\n  \"modelSpecificImplementations\": {\n    \"gpt-3.5-turbo\": {\n      \"instruction\": \"Think step-by-step to solve this problem. Show all your reasoning.\",\n      \"notes\": \"This model requires more explicit instructions for reasoning tasks.\"\n    }\n  }\n}\n</code></pre>"},{"location":"guides/transformation_patterns/#domain-specific-patterns","title":"Domain-Specific Patterns","text":""},{"location":"guides/transformation_patterns/#reasoning-process-patterns","title":"Reasoning Process Patterns","text":"<p>For decorators that modify reasoning processes:</p> <pre><code>{\n  \"transformationTemplate\": {\n    \"instruction\": \"Please break down your reasoning into clear steps.\",\n    \"parameterMapping\": {\n      \"approach\": {\n        \"valueMap\": {\n          \"deductive\": \"Start with general principles and work towards specific conclusions.\",\n          \"inductive\": \"Start with specific observations and identify patterns to form general principles.\",\n          \"abductive\": \"Consider the most likely explanation based on the available evidence.\"\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"guides/transformation_patterns/#output-format-patterns","title":"Output Format Patterns","text":"<p>For decorators that specify output format:</p> <pre><code>{\n  \"transformationTemplate\": {\n    \"instruction\": \"Format your output as specified below.\",\n    \"parameterMapping\": {\n      \"format\": {\n        \"valueMap\": {\n          \"json\": \"Provide your answer as a valid JSON object with proper escaping and formatting.\",\n          \"markdown\": \"Format your response using Markdown with appropriate headings, lists, and code blocks.\",\n          \"table\": \"Present your data in a table format with clear row and column headings.\"\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"guides/transformation_patterns/#tone-and-style-patterns","title":"Tone and Style Patterns","text":"<p>For decorators that modify tone:</p> <pre><code>{\n  \"transformationTemplate\": {\n    \"instruction\": \"Adjust your communication style as follows.\",\n    \"parameterMapping\": {\n      \"tone\": {\n        \"valueMap\": {\n          \"formal\": \"Use professional, academic language with proper terminology and minimal contractions.\",\n          \"casual\": \"Use conversational language as if speaking to a friend, with contractions and simpler vocabulary.\",\n          \"humorous\": \"Incorporate appropriate humor and a light-hearted tone in your response.\"\n        }\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"guides/transformation_patterns/#verification-patterns","title":"Verification Patterns","text":"<p>For decorators that add verification steps:</p> <pre><code>{\n  \"transformationTemplate\": {\n    \"instruction\": \"After providing your answer, perform the following verification.\",\n    \"parameterMapping\": {\n      \"verifyType\": {\n        \"valueMap\": {\n          \"factChecking\": \"Explicitly verify key factual claims in your response and rate your confidence.\",\n          \"selfReview\": \"Review your own response for potential logical errors or missing information.\",\n          \"counterarguments\": \"Consider potential objections or alternative viewpoints to your answer.\"\n        }\n      }\n    },\n    \"placement\": \"append\"\n  }\n}\n</code></pre>"},{"location":"guides/transformation_patterns/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Be Specific: Write clear, actionable instructions that models can follow precisely.</p> </li> <li> <p>Consider Context: Design instructions that work well regardless of the original prompt's content.</p> </li> <li> <p>Test Combinations: Ensure your decorator composes well with others, especially those in the same category.</p> </li> <li> <p>Use Natural Language: Write instructions in natural language that's easy for models to understand.</p> </li> <li> <p>Provide Examples: Include comprehensive examples in your <code>implementationGuidance</code> section.</p> </li> <li> <p>Isolation vs. Combination: Consider whether your decorator should maintain its behavior when combined with others or adapt based on context.</p> </li> <li> <p>Documentation: Document any unexpected interactions or edge cases in the <code>compatibility</code> section.</p> </li> </ol> <p>By following these patterns and best practices, you'll create decorators that behave consistently across implementations and compose well with other decorators in the ecosystem.</p>"},{"location":"integrations/","title":"Integrations","text":"<p>Prompt Decorators can be integrated with various frameworks, protocols, and platforms to enhance their capabilities and extend their reach. This section provides documentation for the available integrations.</p>"},{"location":"integrations/#available-integrations","title":"Available Integrations","text":""},{"location":"integrations/#model-context-protocol-mcp","title":"Model Context Protocol (MCP)","text":"<p>The Model Context Protocol (MCP) integration allows you to use prompt decorators through MCP tools and predefined templates. This integration enables you to:</p> <ul> <li>Apply decorators to prompts using the MCP API</li> <li>Use predefined decorator templates</li> <li>Create custom templates for specific use cases</li> <li>Integrate with existing MCP servers</li> </ul>"},{"location":"integrations/#roadmap","title":"Roadmap","text":"<p>Here are some additional improvements we are considering: - Dynamic Template Generation: You could extend the dynamic loading approach to automatically generate templates based on decorator categories or common use cases. This would allow users to discover and use templates that showcase the capabilities of different decorators. - Template Customization: Add a way for users to customize templates or create their own templates through the MCP API. This would allow users to save and reuse their favorite decorator combinations. - Decorator Composition: Add a tool that helps users compose decorators by suggesting compatible combinations. This would make it easier for users to create effective decorator chains. - Documentation Integration: Add a tool that generates documentation for decorators and templates. This would help users understand how to use the decorators effectively.</p>"},{"location":"integrations/#contributing-new-integrations","title":"Contributing New Integrations","text":"<p>If you'd like to contribute a new integration, please follow these steps:</p> <ol> <li>Check the roadmap to see if the integration is already planned</li> <li>Open an issue on GitHub to discuss the integration</li> <li>Follow the development guide to implement the integration</li> <li>Submit a pull request with your implementation</li> <li>Add documentation for the integration in the <code>docs/integrations/</code> directory</li> </ol> <p>For more information on contributing to Prompt Decorators, see the contributing guidelines.</p>"},{"location":"integrations/mcp/","title":"Model Context Protocol (MCP) Integration","text":"<p>The Prompt Decorators library provides integration with the Model Context Protocol (MCP), allowing you to use prompt decorators through MCP tools and predefined templates.</p>"},{"location":"integrations/mcp/#installation","title":"Installation","text":"<p>The MCP integration is an optional feature that requires the MCP package. You can install it in one of two ways:</p> <ol> <li>Install prompt-decorators with the MCP extras:</li> </ol> <pre><code>pip install \"prompt-decorators[mcp]\"\n</code></pre> <ol> <li>Or install the MCP package separately:</li> </ol> <pre><code>pip install \"mcp[cli]\"\n</code></pre> <p>If you try to use the MCP integration without the MCP package installed, you'll get an informative error message that guides you to install the required package.</p>"},{"location":"integrations/mcp/#usage","title":"Usage","text":""},{"location":"integrations/mcp/#running-as-a-standalone-server","title":"Running as a Standalone Server","text":"<p>You can run the MCP integration as a standalone server:</p> <pre><code>python -m prompt_decorators.integrations.mcp\n</code></pre> <p>This will start an MCP server with the default configuration, exposing tools for applying decorators and using predefined templates.</p>"},{"location":"integrations/mcp/#integrating-with-your-own-mcp-server","title":"Integrating with Your Own MCP Server","text":"<p>You can also integrate the Prompt Decorators with your own MCP server:</p> <pre><code>from prompt_decorators.integrations.mcp import create_mcp_server\n\n# Create an MCP server with prompt decorator integration\nmcp_server = create_mcp_server(\"my-decorator-server\")\n\n# Run the server\nmcp_server.run()\n</code></pre>"},{"location":"integrations/mcp/#available-tools","title":"Available Tools","text":"<p>The MCP integration provides the following tools:</p>"},{"location":"integrations/mcp/#apply_decorators","title":"<code>apply_decorators</code>","text":"<p>Apply prompt decorators to transform a prompt using the <code>+++</code> syntax.</p> <p>Parameters: - <code>prompt</code> (string): The prompt text containing decorator annotations (+++Decorator syntax)</p> <p>Example: <pre><code>result = await mcp_client.tools.apply_decorators(\n    prompt=\"+++Reasoning(depth='comprehensive')\\n+++StepByStep()\\nExplain quantum computing.\"\n)\n</code></pre></p> <p>Response: <pre><code>{\n  \"transformed_prompt\": \"Please provide detailed reasoning...\\nPlease break down your response...\\nExplain quantum computing.\",\n  \"decorators_applied\": [\"Reasoning\", \"StepByStep\"],\n  \"original_prompt\": \"+++Reasoning(depth='comprehensive')\\n+++StepByStep()\\nExplain quantum computing.\"\n}\n</code></pre></p>"},{"location":"integrations/mcp/#list_decorators","title":"<code>list_decorators</code>","text":"<p>Get a list of all available prompt decorators with their descriptions.</p> <p>Example: <pre><code>decorators = await mcp_client.tools.list_decorators()\n</code></pre></p>"},{"location":"integrations/mcp/#get_decorator_details","title":"<code>get_decorator_details</code>","text":"<p>Get detailed information about a specific decorator.</p> <p>Parameters: - <code>decorator_name</code> (string): The name of the decorator to retrieve details for</p> <p>Example: <pre><code>details = await mcp_client.tools.get_decorator_details(decorator_name=\"Reasoning\")\n</code></pre></p>"},{"location":"integrations/mcp/#create_decorated_prompt","title":"<code>create_decorated_prompt</code>","text":"<p>Apply a predefined decorator template to a prompt.</p> <p>Parameters: - <code>template_name</code> (string): The name of the template to apply - <code>prompt</code> (string): The prompt text to decorate - <code>additional_params</code> (object, optional): Optional additional parameters for the template</p> <p>Example: <pre><code>result = await mcp_client.tools.create_decorated_prompt(\n    template_name=\"detailed-reasoning\",\n    prompt=\"Explain how quantum computing works.\"\n)\n</code></pre></p>"},{"location":"integrations/mcp/#predefined-templates","title":"Predefined Templates","text":"<p>The MCP integration comes with several predefined templates:</p> Template Name Description Decorators <code>detailed-reasoning</code> Transform prompt for detailed reasoning and step-by-step analysis <code>Reasoning(depth=\"comprehensive\")</code>, <code>StepByStep(numbered=True)</code> <code>academic-analysis</code> Transform prompt for scholarly academic analysis with citations <code>Reasoning(depth=\"comprehensive\")</code>, <code>CiteSources(style=\"APA\")</code>, <code>OutputFormat(format_type=\"markdown\")</code> <code>explain-simply</code> Explain a complex topic in simple, accessible terms <code>ELI5()</code>, <code>StepByStep(numbered=True)</code> <code>creative-storytelling</code> Generate creative narrative content <code>Creative(level=\"high\")</code>, <code>OutputFormat(format_type=\"markdown\")</code> <code>problem-solving</code> Structured approach to solving complex problems <code>StepByStep(numbered=True)</code>, <code>TreeOfThought(branches=3)</code>, <code>Limitations(position=\"end\")</code> <code>balanced-viewpoint</code> Present multiple perspectives on a contentious topic <code>Balanced()</code>, <code>PeerReview(criteria=\"all\")</code>, <code>Steelman()</code> <code>technical-documentation</code> Generate clear technical documentation with code examples <code>OutputFormat(format_type=\"markdown\")</code>, <code>Audience(level=\"technical\")</code>, <code>StepByStep(numbered=True)</code> <code>data-analysis</code> Analyze data with structured insights and visualizations <code>TableFormat()</code>, <code>Reasoning(depth=\"comprehensive\")</code>, <code>Prioritize(criteria=\"impact\")</code>"},{"location":"integrations/mcp/#using-templates-with-mcp-prompts-api","title":"Using Templates with MCP Prompts API","text":"<p>The MCP integration also supports the MCP Prompts API, allowing you to use predefined templates through the <code>prompts/get</code> and <code>prompts/list</code> methods.</p> <p>Example: <pre><code># List available prompt templates\ntemplates = await mcp_client.prompts.list()\n\n# Use a template\nresponse = await mcp_client.prompts.get(\n    name=\"detailed-reasoning\",\n    arguments={\"prompt\": \"Explain how quantum computing works.\"}\n)\n</code></pre></p>"},{"location":"integrations/mcp/#creating-custom-templates","title":"Creating Custom Templates","text":"<p>You can create custom templates by passing them to the <code>create_mcp_server</code> function:</p> <pre><code>from prompt_decorators.integrations.mcp import create_mcp_server, DecoratorTemplate\nimport prompt_decorators.decorators as pd\n\ncustom_templates = {\n    \"my-custom-template\": DecoratorTemplate(\n        description=\"My custom template\",\n        decorators=[\n            pd.Reasoning(depth=\"comprehensive\"),\n            pd.StepByStep(numbered=True)\n        ],\n        example=\"Example prompt for my custom template.\"\n    )\n}\n\nmcp_server = create_mcp_server(templates=custom_templates)\nmcp_server.run()\n</code></pre>"},{"location":"integrations/mcp/#decorator-syntax","title":"Decorator Syntax","text":"<p>The MCP integration supports the <code>+++</code> syntax for applying decorators to prompts. For example:</p> <pre><code>+++StepByStep\n+++Concise\nExplain how to make a sandwich\n</code></pre> <p>This will apply both the <code>StepByStep</code> and <code>Concise</code> decorators to the prompt \"Explain how to make a sandwich\".</p> <p>You can also include parameters:</p> <pre><code>+++Reasoning(depth='comprehensive')\n+++OutputFormat(format_type='markdown')\nExplain quantum computing\n</code></pre>"},{"location":"integrations/mcp/#error-handling","title":"Error Handling","text":"<p>All MCP tools include robust error handling. If an error occurs during decorator application, the original prompt is returned along with an error message.</p>"},{"location":"integrations/mcp/#logging","title":"Logging","text":"<p>The MCP integration includes detailed logging to help diagnose issues. By default, logs are written to the console with the INFO level. You can adjust the logging level by configuring the Python logging system:</p> <pre><code>import logging\nlogging.getLogger(\"prompt-decorators-mcp\").setLevel(logging.DEBUG)\n</code></pre>"},{"location":"project_summaries/","title":"Project Modernization and Standardization Summaries","text":"<p>This directory contains historical documentation about the various modernization and standardization efforts undertaken for the Prompt Decorators project. These documents provide context on how the project evolved but may not reflect current practices.</p>"},{"location":"project_summaries/#current-documentation","title":"Current Documentation","text":"<p>For the most up-to-date development information, please refer to:</p> <ul> <li>Development Guide - Comprehensive development documentation</li> <li>Architecture - Project architecture and code structure</li> <li>Contributing Guide - How to contribute to the project</li> <li>Docstring Standards - Coding standards and docstring guidelines</li> </ul>"},{"location":"project_summaries/#historical-summary-documents","title":"Historical Summary Documents","text":"<ul> <li>Project Modernization Summary - Comprehensive overview of all modernization efforts</li> </ul>"},{"location":"project_summaries/#purpose","title":"Purpose","text":"<p>These historical documents serve several purposes:</p> <ol> <li>Historical Record - Documenting the process and decisions made during modernization</li> <li>Knowledge Transfer - Helping new contributors understand the project's evolution</li> <li>Best Practices - Capturing lessons learned and best practices for future reference</li> <li>Project Status - Providing a clear picture of how the project evolved</li> </ol>"},{"location":"project_summaries/#next-steps","title":"Next Steps","text":"<p>For current development plans and future goals, please refer to the main roadmap document.</p>"},{"location":"project_summaries/project_modernization_summary/","title":"Project Modernization Summary","text":"<p>Note: This document is historical and provides a record of the modernization efforts undertaken. For the most up-to-date development information, please refer to the Development Guide and Architecture documents.</p>"},{"location":"project_summaries/project_modernization_summary/#overview","title":"Overview","text":"<p>This document summarizes the work completed to modernize the prompt-decorators project, focusing on four key areas: 1. Import standardization 2. Poetry dependency management 3. Test compatibility fixes 4. Docstring standardization</p>"},{"location":"project_summaries/project_modernization_summary/#1-import-standardization","title":"1. Import Standardization","text":""},{"location":"project_summaries/project_modernization_summary/#completed-work","title":"Completed Work","text":"<ul> <li>Configuration Verification: Confirmed that the <code>isort</code> configuration in <code>pyproject.toml</code> aligns with <code>black</code>'s formatting style.</li> <li>Tooling Creation: Developed a Python script (<code>standardize_imports.py</code>) to automate import standardization.</li> <li>Standardization Process: Fixed numerous import ordering and formatting issues across 83 files in the codebase.</li> <li>Verification: Confirmed all files now pass <code>isort</code> checks.</li> </ul>"},{"location":"project_summaries/project_modernization_summary/#benefits","title":"Benefits","text":"<ul> <li>Consistency: Uniform import style across the codebase</li> <li>Readability: Logical grouping and ordering of imports</li> <li>Maintainability: Easier to understand dependencies within files</li> <li>Reduced Conflicts: Fewer merge conflicts from import ordering differences</li> <li>IDE Integration: Better compatibility with IDE auto-import features</li> </ul>"},{"location":"project_summaries/project_modernization_summary/#2-poetry-migration","title":"2. Poetry Migration","text":""},{"location":"project_summaries/project_modernization_summary/#completed-work_1","title":"Completed Work","text":"<ul> <li>Poetry Installation Check: Verified Poetry 2.0.1 is installed on the system.</li> <li>Configuration Conversion: Transformed the existing <code>pyproject.toml</code> from a generic PEP 621 format to Poetry's format:</li> <li>Updated <code>[build-system]</code> to use <code>poetry-core&gt;=1.0.0</code></li> <li>Converted <code>[project]</code> to <code>[tool.poetry]</code></li> <li>Reorganized dependencies under <code>[tool.poetry.dependencies]</code></li> <li>Grouped development dependencies under <code>[tool.poetry.group.dev.dependencies]</code></li> <li>Created additional groups for documentation and integrations</li> <li>Preserved tool configurations for <code>black</code>, <code>isort</code>, <code>mypy</code>, <code>pytest</code>, and <code>ruff</code></li> <li>Dependency Resolution:</li> <li>Fixed Python version requirement from \"&gt;=3.8\" to \"&gt;=3.8.1,&lt;4.0\" to resolve compatibility with <code>langchain</code></li> <li>Updated <code>ruff</code> version from placeholder \"^0.0.0\" to \"^0.1.0\"</li> <li>Lock File Generation: Successfully created <code>poetry.lock</code> file with resolved dependencies</li> <li>Dependency Installation: Installed all project dependencies using Poetry</li> </ul>"},{"location":"project_summaries/project_modernization_summary/#benefits_1","title":"Benefits","text":"<ul> <li>Reproducible Builds: Lock file ensures consistent dependency versions across environments</li> <li>Dependency Groups: Logical separation of core, development, and optional dependencies</li> <li>Virtual Environment Management: Poetry automatically manages isolated environments</li> <li>Simplified Commands: Single tool for dependency management, building, and publishing</li> <li>Modern Workflow: Aligns with current Python best practices</li> <li>Dependency Resolution: Automatic handling of complex dependency constraints</li> <li>Version Constraints: Precise control over acceptable version ranges</li> </ul>"},{"location":"project_summaries/project_modernization_summary/#3-test-compatibility-fixes","title":"3. Test Compatibility Fixes","text":""},{"location":"project_summaries/project_modernization_summary/#completed-work_2","title":"Completed Work","text":"<ul> <li>Issue Identification: Discovered that tests were failing due to missing dependencies and class structure mismatches.</li> <li>Dependency Resolution: Added missing <code>markdown</code> dependency required by tests.</li> <li>Class Structure Alignment: Updated the <code>Detailed</code> decorator class to match the expected structure:</li> <li>Added a class-level <code>parameters</code> attribute with <code>Parameter</code> objects</li> <li>Created a <code>Parameter</code> class to match the expected test interface</li> <li>Modified the <code>__init__</code> method to handle both direct parameter initialization and BaseDecorator-style initialization</li> <li>Test Verification: Successfully ran all tests, confirming that the fixes resolved the issues.</li> </ul>"},{"location":"project_summaries/project_modernization_summary/#benefits_2","title":"Benefits","text":"<ul> <li>Test Reliability: All tests now pass consistently</li> <li>Compatibility: Decorator implementation aligns with the expected interface</li> <li>Maintainability: Clear separation between class-level parameter definitions and instance parameters</li> <li>Flexibility: Support for both direct parameter initialization and dictionary-based initialization</li> </ul>"},{"location":"project_summaries/project_modernization_summary/#4-docstring-standardization","title":"4. Docstring Standardization","text":""},{"location":"project_summaries/project_modernization_summary/#completed-work_3","title":"Completed Work","text":"<ul> <li>Analysis Tool Creation: Developed a Python script (<code>standardize_docstrings.py</code>) to analyze and report on docstring issues.</li> <li>Standards Documentation: Created comprehensive documentation (<code>DOCSTRING_STANDARDS.md</code>) outlining Google-style docstring requirements.</li> <li>Issue Identification: Identified 93 docstring issues across 18 files, including:</li> <li>Missing Args/Returns sections in function docstrings</li> <li>Malformed Args sections</li> <li>Missing docstrings</li> <li>Generated Decorator Fixes: Successfully fixed all docstring issues in the generated decorators:</li> <li>Fixed formatting of the Args section in <code>__init__</code> method docstrings</li> <li>Added Args sections for the <code>self</code> parameter in property getter methods</li> <li>Improved handling of multi-line parameter descriptions</li> <li>Ensured proper indentation and formatting of parameter descriptions</li> <li>Implemented special character handling for parameter descriptions with parentheses</li> <li>Automated Fixing Tool: Created a Python script (<code>fix_core_docstrings.py</code>) to automatically add missing Args and Returns sections to function docstrings based on type annotations.</li> <li>Core Codebase Fixes: Fixed docstring issues in several core files:</li> <li>Added missing Args sections to methods in <code>base.py</code></li> <li>Added missing Args sections to methods in <code>test_gen.py</code></li> <li>Added missing Args section to the <code>apply</code> function in <code>factory.py</code></li> <li>Standardization Process: Established a process for systematically addressing docstring issues.</li> </ul>"},{"location":"project_summaries/project_modernization_summary/#benefits_3","title":"Benefits","text":"<ul> <li>Documentation Quality: Improved quality and consistency of code documentation</li> <li>Automated Checking: Ability to automatically identify docstring issues</li> <li>Automated Fixing: Tool to automatically fix common docstring issues</li> <li>Clear Standards: Well-defined standards for all contributors to follow</li> <li>Documentation Generation: Better support for automated documentation generation</li> <li>Code Readability: Enhanced code readability and maintainability</li> <li>Onboarding: Easier onboarding for new contributors</li> <li>Maintainable Code Generation: Enhanced code generator to produce properly formatted docstrings</li> </ul>"},{"location":"project_summaries/project_modernization_summary/#next-steps","title":"Next Steps","text":""},{"location":"project_summaries/project_modernization_summary/#1-development-workflow-improvements","title":"1. Development Workflow Improvements","text":"<ul> <li>\u2705 CI/CD Integration: Added comprehensive GitHub Actions workflows:</li> <li>Enhanced code quality workflow with matrix testing across multiple Python versions</li> <li>Added automated docstring validation</li> <li>Added type checking with mypy</li> <li>Created workflow for publishing to PyPI</li> <li>Created workflow for building and deploying documentation</li> <li>\u2705 Pre-commit Hooks: Set up pre-commit hooks for:</li> <li>Code formatting with Black and import sorting with isort</li> <li>Linting with Ruff</li> <li>Type checking with mypy</li> <li>Poetry configuration validation</li> <li>Docstring validation</li> <li>Running tests</li> <li>Added a setup script to make it easy for developers to install hooks</li> <li>Documentation: Update development documentation with Poetry usage instructions</li> <li>Contribution Guidelines: Updated guidelines to include Poetry workflow and pre-commit standards</li> </ul>"},{"location":"project_summaries/project_modernization_summary/#2-code-quality-enhancements","title":"2. Code Quality Enhancements","text":"<ul> <li>Docstring Standardization:</li> <li>Implemented a script to check and fix docstring formatting issues.</li> <li>Successfully resolved all docstring issues across the entire codebase:<ul> <li>Fixed 8 issues in <code>prompt_decorators/utils/doc_gen.py</code></li> <li>Fixed 3 issues in <code>prompt_decorators/generator/code_gen.py</code></li> <li>Fixed 4 issues in <code>prompt_decorators/generator/test_gen.py</code></li> <li>Fixed 2 issues in <code>prompt_decorators/generator/registry.py</code></li> <li>Fixed 3 issues in <code>prompt_decorators/generator/cli.py</code></li> <li>Fixed all remaining issues in other files</li> </ul> </li> <li>All docstrings now follow the Google style format with proper Args and Returns sections.</li> <li>Type Checking: Run <code>mypy</code> on the codebase to ensure type annotations are correct</li> <li>Test Coverage: Verify and improve test coverage using <code>pytest-cov</code></li> <li>Ruff Integration: Leverage Ruff for comprehensive linting beyond import sorting</li> </ul>"},{"location":"project_summaries/project_modernization_summary/#3-decorator-implementation-standardization","title":"3. Decorator Implementation Standardization","text":"<ul> <li>Template Creation: Create a standardized template for decorator implementations</li> <li>Parameter Handling: Standardize parameter handling across all decorators</li> <li>Documentation Generation: Automate documentation generation from decorator definitions</li> <li>Test Generation: Improve test generation to cover all decorator functionality</li> </ul>"},{"location":"project_summaries/project_modernization_summary/#usage-instructions","title":"Usage Instructions","text":""},{"location":"project_summaries/project_modernization_summary/#import-standardization","title":"Import Standardization","text":"<pre><code># Check import formatting\n./standardize_imports.py --check\n\n# Fix import formatting\n./standardize_imports.py\n</code></pre>"},{"location":"project_summaries/project_modernization_summary/#poetry-commands","title":"Poetry Commands","text":"<pre><code># Install dependencies\npoetry install\n\n# Add a new dependency\npoetry add package-name\n\n# Add a development dependency\npoetry add --group dev package-name\n\n# Run a command within the virtual environment\npoetry run python script.py\n\n# Activate the virtual environment\npoetry shell\n\n# Update dependencies\npoetry update\n\n# Build the package\npoetry build\n</code></pre>"},{"location":"project_summaries/project_modernization_summary/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\npoetry run pytest\n\n# Run specific tests\npoetry run pytest tests/auto/sample/test_detailed.py\n\n# Run tests with coverage\npoetry run pytest --cov=prompt_decorators\n</code></pre>"},{"location":"project_summaries/project_modernization_summary/#docstring-checking-and-fixing","title":"Docstring Checking and Fixing","text":"<pre><code># Check docstrings in a specific file\n./standardize_docstrings.py path/to/file.py --report\n\n# Check docstrings in the entire codebase\n./standardize_docstrings.py prompt_decorators --report\n\n# Check mode (exits with error code if issues are found)\n./standardize_docstrings.py prompt_decorators --check\n\n# Fix missing Args and Returns sections in a specific file\n./fix_core_docstrings.py path/to/file.py\n\n# Fix missing Args and Returns sections in a directory\n./fix_core_docstrings.py prompt_decorators/core/\n\n# Dry run mode (don't modify files, just report issues)\n./fix_core_docstrings.py path/to/file.py --dry-run\n</code></pre>"},{"location":"tutorials/combining_decorators/","title":"Combining Decorators Effectively","text":"<p>This tutorial provides guidance on how to combine multiple decorators in the Prompt Decorators framework to achieve sophisticated prompt enhancements while avoiding conflicts.</p>"},{"location":"tutorials/combining_decorators/#understanding-decorator-composition","title":"Understanding Decorator Composition","text":"<p>When you apply multiple decorators to a prompt, they are composed in sequence. This means the order of application matters significantly.</p> <p>Consider this example:</p> <pre><code>from prompt_decorators.decorators.generated.decorators.concise import Concise\nfrom prompt_decorators.decorators.generated.decorators.technical import Technical\n\nconcise = Concise(max_words=100)\ntechnical = Technical(domain=\"computer_science\")\n\nprompt = \"Explain neural networks.\"\n\n# These two approaches yield different results:\nresult1 = concise.apply(technical.apply(prompt))  # Technical first, then Concise\nresult2 = technical.apply(concise.apply(prompt))  # Concise first, then Technical\n</code></pre> <p>In <code>result1</code>, the model is first instructed to provide a technical explanation, and then that instruction is modified to be concise. In <code>result2</code>, the model is first instructed to be concise, and then that instruction is modified to be technical.</p>"},{"location":"tutorials/combining_decorators/#the-decorator-stack-concept","title":"The Decorator Stack Concept","text":"<p>Think of decorator combination as building a stack of instructions. Each new decorator adds another layer of instructions on top of the existing ones. The last decorator applied will be the \"outermost\" instruction the model sees first.</p>"},{"location":"tutorials/combining_decorators/#general-rules-for-decorator-order","title":"General Rules for Decorator Order","text":"<ol> <li>Format/Structure decorators should be applied last - These control the final output format</li> <li>Reasoning decorators should be applied first - These set the thinking process</li> <li>Style/Tone decorators should be in the middle - These control how the content is communicated</li> </ol> <pre><code>[Original Prompt] \u2192 [Reasoning] \u2192 [Style/Tone] \u2192 [Format/Structure] \u2192 [Final Prompt]\n</code></pre>"},{"location":"tutorials/combining_decorators/#common-decorator-combinations","title":"Common Decorator Combinations","text":"<p>Here are some effective decorator combinations for common scenarios:</p>"},{"location":"tutorials/combining_decorators/#for-technical-explanations","title":"For Technical Explanations","text":"<pre><code>from prompt_decorators.decorators.generated.decorators.reasoning import Reasoning\nfrom prompt_decorators.decorators.generated.decorators.technical import Technical\nfrom prompt_decorators.decorators.generated.decorators.bullet import Bullet\n\n# Create decorators\nreasoning = Reasoning(depth=\"comprehensive\")\ntechnical = Technical(domain=\"physics\", expertise_level=\"expert\")\nbullet = Bullet(style=\"numbered\")\n\n# Apply in effective order\nprompt = \"Explain quantum entanglement.\"\ndecorated_prompt = bullet.apply(technical.apply(reasoning.apply(prompt)))\n</code></pre> <p>This combination: 1. First asks the model to use comprehensive reasoning 2. Then specifies to use technical language at an expert level in physics 3. Finally formats the output as a numbered bullet list</p>"},{"location":"tutorials/combining_decorators/#for-educational-content","title":"For Educational Content","text":"<pre><code>from prompt_decorators.decorators.generated.decorators.eli5 import ELI5\nfrom prompt_decorators.decorators.generated.decorators.analogical import Analogical\nfrom prompt_decorators.decorators.generated.decorators.summary import Summary\n\n# Create decorators\nanalogical = Analogical(domains=[\"everyday_life\", \"nature\"])\neli5 = ELI5(age=12)\nsummary = Summary(include_key_points=True, max_length=3)\n\n# Apply in effective order\nprompt = \"Explain how the internet works.\"\ndecorated_prompt = summary.apply(eli5.apply(analogical.apply(prompt)))\n</code></pre> <p>This combination: 1. First asks the model to use analogical reasoning with everyday life examples 2. Then specifies to explain at a 12-year-old's level 3. Finally asks for a summary with key points at the end</p>"},{"location":"tutorials/combining_decorators/#for-decision-making","title":"For Decision Making","text":"<pre><code>from prompt_decorators.decorators.generated.decorators.step_by_step import StepByStep\nfrom prompt_decorators.decorators.generated.decorators.alternatives import Alternatives\nfrom prompt_decorators.decorators.generated.decorators.decision_matrix import DecisionMatrix\n\n# Create decorators\nstep_by_step = StepByStep(show_reasoning=True)\nalternatives = Alternatives(min_alternatives=3, max_alternatives=5)\ndecision_matrix = DecisionMatrix(criteria=[\"cost\", \"time\", \"quality\"])\n\n# Apply in effective order\nprompt = \"What's the best approach for implementing a recommendation system?\"\ndecorated_prompt = decision_matrix.apply(\n    alternatives.apply(step_by_step.apply(prompt))\n)\n</code></pre> <p>This combination creates a structured decision-making prompt that: 1. First walks through the problem step by step 2. Then generates multiple alternative approaches 3. Finally evaluates those alternatives using a decision matrix</p>"},{"location":"tutorials/combining_decorators/#using-the-compatibility-checker","title":"Using the Compatibility Checker","text":"<p>To avoid conflicts between decorators, use the built-in compatibility checker:</p> <pre><code>from prompt_decorators.utils import get_compatibility_checker\nfrom prompt_decorators.decorators.generated.decorators.concise import Concise\nfrom prompt_decorators.decorators.generated.decorators.detailed import Detailed\n\nchecker = get_compatibility_checker()\n\nconcise = Concise(max_words=100)\ndetailed = Detailed(min_detail_level=3)\n\n# Check compatibility\nissues = checker.check_compatibility(concise, detailed)\n\nif issues:\n    print(\"These decorators may conflict:\")\n    for issue in issues:\n        print(f\"- {issue}\")\nelse:\n    # Apply decorators if compatible\n    prompt = \"Explain neural networks.\"\n    decorated_prompt = detailed.apply(concise.apply(prompt))\n</code></pre>"},{"location":"tutorials/combining_decorators/#advanced-decorator-patterns","title":"Advanced Decorator Patterns","text":"<p>Here are some advanced patterns for combining decorators:</p>"},{"location":"tutorials/combining_decorators/#the-chain-pattern","title":"The Chain Pattern","text":"<p>Use the <code>Chain</code> meta-decorator to apply multiple decorators in sequence:</p> <pre><code>from prompt_decorators.decorators.generated.decorators.meta.chain import Chain\nfrom prompt_decorators.decorators.generated.decorators.reasoning import Reasoning\nfrom prompt_decorators.decorators.generated.decorators.technical import Technical\nfrom prompt_decorators.decorators.generated.decorators.bullet import Bullet\n\n# Create decorators\nreasoning = Reasoning(depth=\"comprehensive\")\ntechnical = Technical(domain=\"physics\")\nbullet = Bullet()\n\n# Chain them together\nchain = Chain(decorators=[reasoning, technical, bullet])\n\n# Apply the chain\nprompt = \"Explain quantum entanglement.\"\ndecorated_prompt = chain.apply(prompt)\n</code></pre>"},{"location":"tutorials/combining_decorators/#the-conditional-pattern","title":"The Conditional Pattern","text":"<p>Use the <code>Conditional</code> meta-decorator to apply decorators based on conditions:</p> <pre><code>from prompt_decorators.decorators.generated.decorators.meta.conditional import Conditional\nfrom prompt_decorators.decorators.generated.decorators.eli5 import ELI5\nfrom prompt_decorators.decorators.generated.decorators.technical import Technical\n\n# Create condition function\ndef is_technical_topic(prompt: str) -&gt; bool:\n    technical_keywords = [\"algorithm\", \"quantum\", \"neural network\", \"compiler\"]\n    return any(keyword in prompt.lower() for keyword in technical_keywords)\n\n# Create decorators\neli5 = ELI5(age=10)\ntechnical = Technical()\n\n# Create conditional decorator\nconditional = Conditional(\n    condition_func=is_technical_topic,\n    true_decorator=technical,\n    false_decorator=eli5\n)\n\n# Apply conditionally\nprompt1 = \"Explain how quantum computers work.\"  # Will apply Technical\nprompt2 = \"Explain how rainbows form.\"  # Will apply ELI5\n\ndecorated_prompt1 = conditional.apply(prompt1)\ndecorated_prompt2 = conditional.apply(prompt2)\n</code></pre>"},{"location":"tutorials/combining_decorators/#the-priority-pattern","title":"The Priority Pattern","text":"<p>Use the <code>Priority</code> meta-decorator to resolve conflicts between decorators:</p> <pre><code>from prompt_decorators.decorators.generated.decorators.meta.priority import Priority\nfrom prompt_decorators.decorators.generated.decorators.concise import Concise\nfrom prompt_decorators.decorators.generated.decorators.detailed import Detailed\n\n# Create potentially conflicting decorators\nconcise = Concise(max_words=150)\ndetailed = Detailed(min_detail_level=2)\n\n# Create priority decorator (concise takes precedence)\npriority = Priority(\n    decorators=[detailed, concise],\n    priority_order=[1, 0]  # Lower index = higher priority\n)\n\n# Apply with priority resolution\nprompt = \"Explain how GPT models work.\"\ndecorated_prompt = priority.apply(prompt)\n</code></pre>"},{"location":"tutorials/combining_decorators/#domain-specific-decorator-combinations","title":"Domain-Specific Decorator Combinations","text":"<p>Different domains may benefit from specific decorator combinations:</p>"},{"location":"tutorials/combining_decorators/#healthcare-domain","title":"Healthcare Domain","text":"<pre><code>from prompt_decorators.decorators.generated.decorators.professional import Professional\nfrom prompt_decorators.decorators.generated.decorators.fact_check import FactCheck\nfrom prompt_decorators.decorators.generated.decorators.limitations import Limitations\n\n# Create healthcare-focused decorators\nprofessional = Professional(industry=\"healthcare\")\nfact_check = FactCheck(verification_level=3)\nlimitations = Limitations(highlight_uncertainties=True)\n\n# Apply in effective order\nprompt = \"Explain the benefits and risks of immunotherapy.\"\ndecorated_prompt = limitations.apply(\n    fact_check.apply(professional.apply(prompt))\n)\n</code></pre>"},{"location":"tutorials/combining_decorators/#financial-analysis","title":"Financial Analysis","text":"<pre><code>from prompt_decorators.decorators.generated.decorators.balanced import Balanced\nfrom prompt_decorators.decorators.generated.decorators.professional import Professional\nfrom prompt_decorators.decorators.generated.decorators.schema import Schema\n\n# Create finance-focused decorators\nbalanced = Balanced()\nprofessional = Professional(industry=\"finance\")\nschema = Schema(schema={\n    \"analysis\": \"string\",\n    \"risks\": [\"string\"],\n    \"opportunities\": [\"string\"],\n    \"recommendation\": \"string\"\n})\n\n# Apply in effective order\nprompt = \"Analyze the current market trends for renewable energy investments.\"\ndecorated_prompt = schema.apply(\n    professional.apply(balanced.apply(prompt))\n)\n</code></pre>"},{"location":"tutorials/combining_decorators/#common-pitfalls-to-avoid","title":"Common Pitfalls to Avoid","text":"<ol> <li> <p>Decorator Overload: Using too many decorators can create conflicting or confusing instructions. Limit to 3-4 for best results.</p> </li> <li> <p>Conflicting Instructions: Be careful with opposing decorators (e.g., Concise + Detailed). Use the compatibility checker or Priority meta-decorator.</p> </li> <li> <p>Wrong Order: Applying decorators in a suboptimal order can diminish their effectiveness. Follow the general ordering principles.</p> </li> <li> <p>Parameter Conflicts: Parameters across decorators may conflict (e.g., max_words in one, min_words in another). Be mindful of parameter coherence.</p> </li> <li> <p>Ignoring Model Limitations: Some models may not handle complex instruction combinations well. Consider using ModelSpecificDecorator for adaptation.</p> </li> </ol>"},{"location":"tutorials/combining_decorators/#best-practices","title":"Best Practices","text":"<ol> <li> <p>Start Simple: Begin with 1-2 decorators and add more as needed.</p> </li> <li> <p>Test Combinations: Always test your decorator combinations with different prompts.</p> </li> <li> <p>Use Meta-Decorators: Chain, Conditional, and Priority meta-decorators can help manage complex combinations.</p> </li> <li> <p>Check Compatibility: Use the compatibility checker to identify potential conflicts.</p> </li> <li> <p>Be Consistent: Maintain consistent parameter values across decorators (e.g., domain terminology).</p> </li> <li> <p>Monitor Results: Different models may respond differently to decorator combinations. Monitor and adjust as needed.</p> </li> </ol>"},{"location":"tutorials/combining_decorators/#conclusion","title":"Conclusion","text":"<p>Effective decorator combinations can significantly enhance the quality and consistency of LLM responses. By understanding the interaction between decorators and following best practices, you can create sophisticated prompt engineering solutions tailored to your specific needs.</p> <p>Next steps: - Try the examples in this tutorial with your own prompts - Explore the Compatibility Matrix for more information - Check out the Decorators API Reference for all available decorators</p>"},{"location":"tutorials/comprehensive_tutorial/","title":"Comprehensive Prompt Decorators Tutorial","text":"<p>This guide provides a comprehensive overview of the Prompt Decorators framework for enhancing your LLM interactions.</p>"},{"location":"tutorials/comprehensive_tutorial/#installation","title":"Installation","text":"<p>First, install the Prompt Decorators framework using pip:</p> <pre><code>pip install prompt-decorators\n</code></pre> <p>Or directly from the source:</p> <pre><code>git clone https://github.com/prompt-decorators/prompt-decorators.git\ncd prompt-decorators\npip install -e .\n</code></pre>"},{"location":"tutorials/comprehensive_tutorial/#basic-usage","title":"Basic Usage","text":""},{"location":"tutorials/comprehensive_tutorial/#using-built-in-decorators","title":"Using Built-in Decorators","text":"<p>The simplest way to use the framework is with built-in decorators:</p> <pre><code>from prompt_decorators.decorators.generated.decorators.concise import Concise\nfrom prompt_decorators.decorators.generated.decorators.professional import Professional\n\n# Create the decorators with desired parameters\nconcise = Concise(max_words=150, bullet_points=True)\nprofessional = Professional(industry=\"technology\")\n\n# Original prompt\nprompt = \"Explain the benefits of machine learning in healthcare.\"\n\n# Apply decorators - order matters!\ndecorated_prompt = concise.apply(professional.apply(prompt))\n\n# Use the decorated prompt with your LLM API\nprint(decorated_prompt)\n</code></pre> <p>This will output something like:</p> <pre><code>Please maintain a professional tone appropriate for the technology industry. Use industry-standard\nterminology, clear explanations, and well-structured arguments.\n\nPlease provide a concise response. Limit your response to 150 words or fewer. Format your response\nas bullet points.\n\nExplain the benefits of machine learning in healthcare.\n</code></pre>"},{"location":"tutorials/comprehensive_tutorial/#using-the-decorator-registry","title":"Using the Decorator Registry","text":"<p>For more flexibility, you can use the decorator registry:</p> <pre><code>from prompt_decorators.utils import get_registry\n\n# Get the registry\nregistry = get_registry()\n\n# Create decorators through the registry\nconcise = registry.create_decorator(\"Concise\", max_words=150, bullet_points=True)\neli5 = registry.create_decorator(\"ELI5\", age=10)\n\n# Apply decorators to a prompt\nprompt = \"Explain how neural networks work.\"\ndecorated_prompt = concise.apply(eli5.apply(prompt))\n\n# Use the decorated prompt with your LLM API\nprint(decorated_prompt)\n</code></pre>"},{"location":"tutorials/comprehensive_tutorial/#finding-available-decorators","title":"Finding Available Decorators","text":"<p>To explore the available decorators:</p> <pre><code>from prompt_decorators.utils import get_registry\n\nregistry = get_registry()\n\n# Get all categories\ncategories = registry.get_categories()\nprint(f\"Available categories: {', '.join(categories)}\")\n\n# Find decorators by category\nreasoning_decorators = registry.find_decorators_by_category(\"reasoning\")\nfor name in reasoning_decorators:\n    print(f\"- {name}\")\n</code></pre>"},{"location":"tutorials/comprehensive_tutorial/#creating-your-own-decorator","title":"Creating Your Own Decorator","text":"<p>You can easily create your own custom decorators:</p> <pre><code>from prompt_decorators.core import BaseDecorator\n\nclass CustomDecorator(BaseDecorator):\n    \"\"\"A custom decorator for specialized instructions.\"\"\"\n\n    name = \"Custom\"\n    version = \"1.0.0\"\n    category = \"custom\"\n\n    def __init__(self, instruction: str, emphasis: int = 1):\n        super().__init__()\n        self.instruction = instruction\n        self.emphasis = max(1, min(3, emphasis))\n\n    def apply(self, prompt: str) -&gt; str:\n        \"\"\"Apply the custom instruction to the prompt.\"\"\"\n        emphasis_marks = \"!\" * self.emphasis\n        return f\"{self.instruction}{emphasis_marks}\\n\\n{prompt}\"\n\n# Create and use the custom decorator\ncustom = CustomDecorator(\"Remember to include real-world examples\", emphasis=2)\nprompt = \"Explain how blockchain works.\"\ndecorated_prompt = custom.apply(prompt)\n</code></pre>"},{"location":"tutorials/comprehensive_tutorial/#working-with-model-specific-adaptations","title":"Working with Model-Specific Adaptations","text":"<p>For adapting decorators to specific models:</p> <pre><code>from prompt_decorators.utils import get_model_detector\nfrom prompt_decorators.core import ModelSpecificDecorator\n\n# Create a model-specific decorator\nclass CustomModelSpecificDecorator(ModelSpecificDecorator):\n    name = \"CustomModelSpecific\"\n    version = \"1.0.0\"\n\n    def apply_for_model(self, prompt: str) -&gt; str:\n        \"\"\"Adapt based on model capabilities.\"\"\"\n        if self.model_capabilities.supports_feature(\"reasoning\"):\n            return f\"Use your reasoning capabilities to answer: {prompt}\"\n        else:\n            return self.apply_fallback(prompt)\n\n    def apply_fallback(self, prompt: str) -&gt; str:\n        \"\"\"Fallback for models without specific capabilities.\"\"\"\n        return f\"Answer this question step by step: {prompt}\"\n\n# Use with a specific model\ndecorator = CustomModelSpecificDecorator(model_id=\"gpt-4\")\nprompt = \"Explain quantum computing.\"\ndecorated_prompt = decorator.apply(prompt)\n</code></pre>"},{"location":"tutorials/comprehensive_tutorial/#next-steps","title":"Next Steps","text":"<p>Check out these resources to learn more:</p> <ul> <li>Complete API documentation</li> <li>Decorator catalog</li> <li>Advanced usage tutorials</li> <li>Example scripts</li> </ul> <p>For detailed information on specific decorators, see the generated documentation in the API reference section.</p>"},{"location":"tutorials/creating_custom_decorator/","title":"Creating Your First Custom Decorator","text":"<p>This tutorial walks you through the process of creating a custom decorator for the Prompt Decorators framework, from concept to implementation and testing.</p>"},{"location":"tutorials/creating_custom_decorator/#prerequisites","title":"Prerequisites","text":"<p>Before starting, make sure you have: - The Prompt Decorators framework installed - Basic understanding of Python classes and inheritance - Familiarity with the basic concepts of the framework</p>"},{"location":"tutorials/creating_custom_decorator/#step-1-plan-your-decorator","title":"Step 1: Plan Your Decorator","text":"<p>Every good decorator begins with a clear purpose. Let's design a <code>PoliteDecorator</code> that makes LLM responses more polite and courteous.</p> <p>Our decorator will have the following parameters: - <code>politeness_level</code>: An integer from 1-3 determining how polite the response should be - <code>use_honorifics</code>: A boolean indicating whether to use formal honorifics - <code>culture</code>: An optional string specifying cultural norms to follow (e.g., \"Japanese\", \"British\")</p>"},{"location":"tutorials/creating_custom_decorator/#step-2-create-the-decorator-class","title":"Step 2: Create the Decorator Class","text":"<p>Create a new file named <code>polite_decorator.py</code> in your project:</p> <pre><code>from prompt_decorators.core import BaseDecorator\nfrom typing import Optional, Dict, Any, List\nfrom enum import Enum\n\n\nclass PolitenessLevel(Enum):\n    COURTEOUS = 1\n    VERY_POLITE = 2\n    EXTREMELY_FORMAL = 3\n\n\nclass PoliteDecorator(BaseDecorator):\n    \"\"\"\n    A decorator that makes responses more polite and courteous.\n\n    This decorator adds instructions to generate responses with appropriate\n    levels of politeness, optionally using honorifics and following\n    specific cultural norms of courtesy.\n    \"\"\"\n\n    name = \"Polite\"\n    version = \"1.0.0\"\n    category = \"tone\"\n\n    def __init__(\n        self,\n        politeness_level: int = 1,\n        use_honorifics: bool = False,\n        culture: Optional[str] = None\n    ):\n        \"\"\"\n        Initialize the polite decorator.\n\n        Args:\n            politeness_level: Level of politeness (1-3), higher means more formal\n            use_honorifics: Whether to use formal honorifics in the response\n            culture: Optional cultural context for politeness norms\n        \"\"\"\n        super().__init__()\n        # Validate and assign parameters\n        self.politeness_level = max(1, min(3, politeness_level))  # Clamp between 1-3\n        self.use_honorifics = use_honorifics\n        self.culture = culture\n\n    def apply(self, prompt: str) -&gt; str:\n        \"\"\"\n        Apply the decorator to a prompt.\n\n        This method adds instructions for politeness to the prompt.\n\n        Args:\n            prompt: The prompt to decorate\n\n        Returns:\n            The decorated prompt with politeness instructions\n        \"\"\"\n        # Create the politeness instruction based on level\n        if self.politeness_level == 1:\n            instruction = \"Please respond in a courteous and polite manner.\"\n        elif self.politeness_level == 2:\n            instruction = \"Please respond in a very polite and respectful manner.\"\n        else:  # level == 3\n            instruction = \"Please respond with extreme formality and the utmost courtesy.\"\n\n        # Add honorific instruction if requested\n        if self.use_honorifics:\n            instruction += \" Use appropriate honorifics and formal address.\"\n\n        # Add cultural context if specified\n        if self.culture:\n            instruction += f\" Follow the politeness norms typical in {self.culture} culture.\"\n\n        # Return the decorated prompt\n        return f\"{instruction}\\n\\n{prompt}\"\n</code></pre>"},{"location":"tutorials/creating_custom_decorator/#step-3-register-your-decorator","title":"Step 3: Register Your Decorator","text":"<p>To make your decorator available through the registry system, you need to register it:</p> <pre><code>from prompt_decorators.utils import get_registry\n\n# Get the registry instance\nregistry = get_registry()\n\n# Register your decorator\nregistry.register_decorator(PoliteDecorator)\n</code></pre> <p>You can add this code to your application's initialization, or create a separate script to handle registration.</p>"},{"location":"tutorials/creating_custom_decorator/#step-4-create-json-definition-optional","title":"Step 4: Create JSON Definition (Optional)","text":"<p>For better integration with the framework, you can create a JSON definition for your decorator:</p> <pre><code>{\n  \"name\": \"Polite\",\n  \"description\": \"A decorator that makes responses more polite and courteous\",\n  \"version\": \"1.0.0\",\n  \"category\": \"tone\",\n  \"parameters\": [\n    {\n      \"name\": \"politeness_level\",\n      \"type\": \"integer\",\n      \"description\": \"Level of politeness (1-3), higher means more formal\",\n      \"required\": false,\n      \"default\": 1,\n      \"constraints\": {\n        \"minimum\": 1,\n        \"maximum\": 3\n      }\n    },\n    {\n      \"name\": \"use_honorifics\",\n      \"type\": \"boolean\",\n      \"description\": \"Whether to use formal honorifics in the response\",\n      \"required\": false,\n      \"default\": false\n    },\n    {\n      \"name\": \"culture\",\n      \"type\": \"string\",\n      \"description\": \"Optional cultural context for politeness norms\",\n      \"required\": false,\n      \"default\": null\n    }\n  ],\n  \"examples\": [\n    {\n      \"name\": \"Basic politeness\",\n      \"parameters\": {\n        \"politeness_level\": 1\n      },\n      \"input\": \"Tell me about climate change.\",\n      \"output\": \"Please respond in a courteous and polite manner.\\n\\nTell me about climate change.\"\n    },\n    {\n      \"name\": \"Formal Japanese style\",\n      \"parameters\": {\n        \"politeness_level\": 3,\n        \"use_honorifics\": true,\n        \"culture\": \"Japanese\"\n      },\n      \"input\": \"Explain the concept of artificial intelligence.\",\n      \"output\": \"Please respond with extreme formality and the utmost courtesy. Use appropriate honorifics and formal address. Follow the politeness norms typical in Japanese culture.\\n\\nExplain the concept of artificial intelligence.\"\n    }\n  ],\n  \"compatibility\": {\n    \"incompatible_with\": [\"Informal\", \"Sarcastic\"],\n    \"caution_with\": [\"Technical\", \"Academic\"]\n  },\n  \"author\": \"Your Name\",\n  \"contact\": \"your.email@example.com\"\n}\n</code></pre> <p>Save this as <code>polite.json</code> in your registry directory.</p>"},{"location":"tutorials/creating_custom_decorator/#step-5-add-model-specific-behavior-advanced","title":"Step 5: Add Model-Specific Behavior (Advanced)","text":"<p>For more advanced usage, you can create a model-specific version of your decorator:</p> <pre><code>from prompt_decorators.core import ModelSpecificDecorator\n\nclass ModelSpecificPoliteDecorator(ModelSpecificDecorator):\n    \"\"\"\n    A model-specific version of the polite decorator.\n\n    This decorator adapts the politeness instructions based on the model's\n    capabilities and characteristics.\n    \"\"\"\n\n    name = \"PoliteModelSpecific\"\n    version = \"1.0.0\"\n\n    def __init__(\n        self,\n        model_id: str,\n        politeness_level: int = 1,\n        use_honorifics: bool = False,\n        culture: Optional[str] = None\n    ):\n        \"\"\"Initialize with model ID and parameters.\"\"\"\n        super().__init__(model_id)\n        self.politeness_level = max(1, min(3, politeness_level))\n        self.use_honorifics = use_honorifics\n        self.culture = culture\n\n    def apply_for_model(self, prompt: str) -&gt; str:\n        \"\"\"Apply model-specific politeness instructions.\"\"\"\n        # Adapt based on model capabilities\n        if self.model_capabilities.supports_feature(\"tone_control\"):\n            # Advanced models can handle nuanced tone instructions\n            if self.politeness_level == 1:\n                instruction = \"Please respond in a courteous and polite manner.\"\n            elif self.politeness_level == 2:\n                instruction = \"Please respond in a very polite and respectful manner.\"\n            else:  # level == 3\n                instruction = \"Please respond with extreme formality and the utmost courtesy.\"\n\n            if self.use_honorifics:\n                instruction += \" Use appropriate honorifics and formal address.\"\n\n            if self.culture:\n                instruction += f\" Follow the politeness norms typical in {self.culture} culture.\"\n        else:\n            # For simpler models, use a more basic instruction\n            instruction = \"Please be polite and respectful in your response.\"\n\n        return f\"{instruction}\\n\\n{prompt}\"\n\n    def apply_fallback(self, prompt: str) -&gt; str:\n        \"\"\"Fallback for unknown models.\"\"\"\n        return f\"Please be polite in your response.\\n\\n{prompt}\"\n</code></pre>"},{"location":"tutorials/creating_custom_decorator/#step-6-test-your-decorator","title":"Step 6: Test Your Decorator","text":"<p>Create a simple test script to verify your decorator works as expected:</p> <pre><code>#!/usr/bin/env python\n\"\"\"\nTest script for the PoliteDecorator.\n\"\"\"\n\nimport sys\nfrom pathlib import Path\n\n# Add the project root to the Python path\nproject_root = Path(__file__).resolve().parent.parent\nsys.path.insert(0, str(project_root))\n\nfrom polite_decorator import PoliteDecorator\n\ndef main():\n    \"\"\"Test the PoliteDecorator with different parameters.\"\"\"\n    # Create a sample prompt\n    prompt = \"Explain the concept of quantum computing.\"\n    print(f\"Original prompt: \\\"{prompt}\\\"\\n\")\n\n    # Test with basic politeness\n    basic = PoliteDecorator()\n    decorated_prompt = basic.apply(prompt)\n    print(\"Basic politeness:\")\n    print(f\"\\\"{decorated_prompt}\\\"\\n\")\n\n    # Test with higher politeness level\n    formal = PoliteDecorator(politeness_level=3, use_honorifics=True)\n    decorated_prompt = formal.apply(prompt)\n    print(\"Formal with honorifics:\")\n    print(f\"\\\"{decorated_prompt}\\\"\\n\")\n\n    # Test with cultural context\n    cultural = PoliteDecorator(politeness_level=2, culture=\"British\")\n    decorated_prompt = cultural.apply(prompt)\n    print(\"British politeness:\")\n    print(f\"\\\"{decorated_prompt}\\\"\\n\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Save this as <code>test_polite_decorator.py</code> and run it to see your decorator in action.</p>"},{"location":"tutorials/creating_custom_decorator/#step-7-document-your-decorator","title":"Step 7: Document Your Decorator","text":"<p>Good documentation is crucial for others (and your future self) to understand your decorator. Create a documentation file <code>docs/api/decorators/Polite.md</code>:</p> <pre><code># Polite Decorator\n\nA decorator that makes responses more polite and courteous.\n\n## Description\n\nThe `Polite` decorator adds instructions to generate responses with appropriate levels of politeness, optionally using honorifics and following specific cultural norms of courtesy.\n\n## Parameters\n\n| Parameter | Type | Required | Default | Description |\n|-----------|------|----------|---------|-------------|\n| politeness_level | int | No | 1 | Level of politeness (1-3), higher means more formal |\n| use_honorifics | bool | No | False | Whether to use formal honorifics in the response |\n| culture | str | No | None | Optional cultural context for politeness norms |\n\n## Examples\n\n### Basic Politeness\n\n```python\nfrom prompt_decorators.decorators import Polite\n\ndecorator = Polite(politeness_level=1)\nprompt = \"Tell me about climate change.\"\ndecorated_prompt = decorator.apply(prompt)\n</code></pre> <p>Result: <pre><code>Please respond in a courteous and polite manner.\n\nTell me about climate change.\n</code></pre></p>"},{"location":"tutorials/creating_custom_decorator/#formal-japanese-style","title":"Formal Japanese Style","text":"<pre><code>from prompt_decorators.decorators import Polite\n\ndecorator = Polite(\n    politeness_level=3,\n    use_honorifics=True,\n    culture=\"Japanese\"\n)\nprompt = \"Explain the concept of artificial intelligence.\"\ndecorated_prompt = decorator.apply(prompt)\n</code></pre> <p>Result: <pre><code>Please respond with extreme formality and the utmost courtesy. Use appropriate honorifics and formal address. Follow the politeness norms typical in Japanese culture.\n\nExplain the concept of artificial intelligence.\n</code></pre></p>"},{"location":"tutorials/creating_custom_decorator/#compatibility","title":"Compatibility","text":"<ul> <li>Incompatible with: Informal, Sarcastic</li> <li>Use with caution: Technical, Academic</li> </ul>"},{"location":"tutorials/creating_custom_decorator/#see-also","title":"See Also","text":"<ul> <li>Professional Decorator</li> <li>Tone Decorator</li> <li>Audience Decorator ```</li> </ul>"},{"location":"tutorials/creating_custom_decorator/#conclusion","title":"Conclusion","text":"<p>Congratulations! You've created a custom decorator for the Prompt Decorators framework. Your decorator can now be used standalone, registered with the decorator registry, or defined in JSON for dynamic loading.</p> <p>To further enhance your decorator:</p> <ol> <li>Add more parameters for finer control</li> <li>Create unit tests for comprehensive testing</li> <li>Add type hints and thorough docstrings</li> <li>Consider edge cases and parameter validation</li> <li>Define compatibility with other decorators</li> </ol> <p>The Prompt Decorators framework makes it easy to create and share custom decorators that enhance LLM interactions in specific ways, allowing for more controlled and consistent prompting across applications.</p>"},{"location":"tutorials/creating_custom_decorator/#next-steps","title":"Next Steps","text":"<p>Now that you've created your first custom decorator, you can:</p> <ul> <li>Learn how to combine decorators</li> <li>Explore the decorator registry</li> <li>Contribute your decorator to the framework</li> </ul>"},{"location":"tutorials/extension_development/","title":"Tutorial: Developing Extensions for Prompt Decorators","text":"<p>This tutorial will guide you through the process of developing extensions for the Prompt Decorators framework. By the end, you'll understand how to create custom decorators, extend the registry, and contribute your extensions to the community.</p>"},{"location":"tutorials/extension_development/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Prerequisites</li> <li>Types of Extensions</li> <li>Creating a Custom Decorator</li> <li>Registry Integration</li> <li>Testing Your Extension</li> <li>Extension Distribution</li> <li>Advanced Extension Techniques</li> <li>Creating Domain-Specific Extensions</li> <li>Best Practices</li> <li>Troubleshooting</li> </ul>"},{"location":"tutorials/extension_development/#prerequisites","title":"Prerequisites","text":"<p>Before starting this tutorial, ensure you have:</p> <ol> <li> <p>Installed the Prompt Decorators framework:    <pre><code>pip install prompt-decorators\n</code></pre></p> </li> <li> <p>Basic understanding of:</p> </li> <li>Python decorators</li> <li>The Prompt Decorators core concepts</li> <li> <p>JSON schema validation (for registry extensions)</p> </li> <li> <p>Development environment:</p> </li> <li>Python 3.10+</li> <li>A code editor (VS Code, PyCharm, etc.)</li> <li>pytest for testing</li> </ol>"},{"location":"tutorials/extension_development/#types-of-extensions","title":"Types of Extensions","text":"<p>The Prompt Decorators framework supports several types of extensions:</p> <ol> <li>Custom Decorators: New prompt decorators with unique functionality</li> <li>Registry Extensions: Adding new decorators to the registry system</li> <li>Integration Extensions: Adapters for specific LLM APIs or frameworks</li> <li>Utility Extensions: Tools and helpers that enhance the framework</li> </ol> <p>This tutorial will primarily focus on creating custom decorators and integrating them with the registry.</p>"},{"location":"tutorials/extension_development/#creating-a-custom-decorator","title":"Creating a Custom Decorator","text":"<p>Let's create a custom decorator that formats text with specific colors for highlighting important information.</p>"},{"location":"tutorials/extension_development/#step-1-basic-decorator-structure","title":"Step 1: Basic Decorator Structure","text":"<p>Start by creating a new Python file named <code>color_highlight.py</code>:</p> <pre><code>from typing import Callable, Optional, Union, List, Dict, Any\nfrom prompt_decorators.base import BaseDecorator\n\nclass ColorHighlight(BaseDecorator):\n    \"\"\"Decorator that highlights text with specific colors.\n\n    This decorator adds HTML-like color tags to highlight specific words or\n    phrases in the prompt text.\n\n    Args:\n        highlight_words: Words or phrases to highlight\n        color: Color to use for highlighting (default: \"yellow\")\n        case_sensitive: Whether matching should be case-sensitive (default: False)\n    \"\"\"\n\n    def __init__(\n        self,\n        highlight_words: Union[str, List[str]],\n        color: str = \"yellow\",\n        case_sensitive: bool = False\n    ) -&gt; None:\n        \"\"\"Initialize the ColorHighlight decorator.\"\"\"\n        super().__init__()\n        self.highlight_words = [highlight_words] if isinstance(highlight_words, str) else highlight_words\n        self.color = color\n        self.case_sensitive = case_sensitive\n\n    def __call__(self, text: str) -&gt; str:\n        \"\"\"Apply the color highlighting to the text.\n\n        Args:\n            text: The input text to be highlighted\n\n        Returns:\n            The text with color highlighting applied\n        \"\"\"\n        if not self.highlight_words:\n            return text\n\n        result = text\n        for word in self.highlight_words:\n            if self.case_sensitive:\n                result = result.replace(\n                    word,\n                    f\"&lt;span style='background-color: {self.color}'&gt;{word}&lt;/span&gt;\"\n                )\n            else:\n                # Case-insensitive replacement requires more complex logic\n                import re\n                pattern = re.compile(re.escape(word), re.IGNORECASE)\n                result = pattern.sub(\n                    lambda m: f\"&lt;span style='background-color: {self.color}'&gt;{m.group(0)}&lt;/span&gt;\",\n                    result\n                )\n\n        return result\n\n    @property\n    def metadata(self) -&gt; Dict[str, Any]:\n        \"\"\"Return metadata about this decorator instance.\"\"\"\n        return {\n            \"name\": \"ColorHighlight\",\n            \"highlight_words\": self.highlight_words,\n            \"color\": self.color,\n            \"case_sensitive\": self.case_sensitive\n        }\n</code></pre>"},{"location":"tutorials/extension_development/#step-2-add-additional-functionality","title":"Step 2: Add Additional Functionality","text":"<p>Let's enhance our decorator with more functionality:</p> <pre><code>class ColorHighlight(BaseDecorator):\n    # ... existing code ...\n\n    def add_highlight_word(self, word: str) -&gt; 'ColorHighlight':\n        \"\"\"Add a new word to highlight.\n\n        Args:\n            word: The new word to highlight\n\n        Returns:\n            Self for method chaining\n        \"\"\"\n        if word not in self.highlight_words:\n            self.highlight_words.append(word)\n        return self\n\n    def change_color(self, new_color: str) -&gt; 'ColorHighlight':\n        \"\"\"Change the highlight color.\n\n        Args:\n            new_color: The new color to use\n\n        Returns:\n            Self for method chaining\n        \"\"\"\n        self.color = new_color\n        return self\n\n    def toggle_case_sensitivity(self) -&gt; 'ColorHighlight':\n        \"\"\"Toggle case sensitivity.\n\n        Returns:\n            Self for method chaining\n        \"\"\"\n        self.case_sensitive = not self.case_sensitive\n        return self\n</code></pre>"},{"location":"tutorials/extension_development/#step-3-create-factory-methods","title":"Step 3: Create Factory Methods","text":"<p>Factory methods make it easier to create common variants of your decorator:</p> <pre><code>@classmethod\ndef important(cls, highlight_words: Union[str, List[str]]) -&gt; 'ColorHighlight':\n    \"\"\"Factory method for highlighting important information in red.\n\n    Args:\n        highlight_words: Words to highlight as important\n\n    Returns:\n        ColorHighlight instance configured for important highlighting\n    \"\"\"\n    return cls(highlight_words=highlight_words, color=\"red\", case_sensitive=True)\n\n@classmethod\ndef casual(cls, highlight_words: Union[str, List[str]]) -&gt; 'ColorHighlight':\n    \"\"\"Factory method for casual highlighting in light yellow.\n\n    Args:\n        highlight_words: Words to highlight casually\n\n    Returns:\n        ColorHighlight instance configured for casual highlighting\n    \"\"\"\n    return cls(highlight_words=highlight_words, color=\"lightyellow\", case_sensitive=False)\n</code></pre>"},{"location":"tutorials/extension_development/#registry-integration","title":"Registry Integration","text":"<p>Next, let's integrate our custom decorator with the Prompt Decorators registry.</p>"},{"location":"tutorials/extension_development/#step-1-create-a-registry-json-definition","title":"Step 1: Create a Registry JSON Definition","text":"<p>Create a file named <code>color_highlight.json</code> in a directory called <code>registry_extensions</code>:</p> <pre><code>{\n  \"name\": \"ColorHighlight\",\n  \"category\": \"formatting\",\n  \"description\": \"Highlights specific words or phrases with color formatting\",\n  \"version\": \"1.0.0\",\n  \"author\": \"Your Name\",\n  \"parameters\": [\n    {\n      \"name\": \"highlight_words\",\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\"\n      },\n      \"description\": \"Words or phrases to highlight\",\n      \"required\": true\n    },\n    {\n      \"name\": \"color\",\n      \"type\": \"string\",\n      \"description\": \"Color to use for highlighting\",\n      \"default\": \"yellow\",\n      \"required\": false\n    },\n    {\n      \"name\": \"case_sensitive\",\n      \"type\": \"boolean\",\n      \"description\": \"Whether matching should be case-sensitive\",\n      \"default\": false,\n      \"required\": false\n    }\n  ],\n  \"examples\": [\n    {\n      \"input\": \"This is an important message about security.\",\n      \"parameters\": {\n        \"highlight_words\": [\"important\", \"security\"],\n        \"color\": \"yellow\"\n      },\n      \"output\": \"This is an &lt;span style='background-color: yellow'&gt;important&lt;/span&gt; message about &lt;span style='background-color: yellow'&gt;security&lt;/span&gt;.\"\n    }\n  ],\n  \"factory_methods\": [\n    {\n      \"name\": \"important\",\n      \"description\": \"Highlights important information in red\",\n      \"parameters\": [\n        {\n          \"name\": \"highlight_words\",\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"description\": \"Words to highlight as important\",\n          \"required\": true\n        }\n      ]\n    },\n    {\n      \"name\": \"casual\",\n      \"description\": \"Casual highlighting in light yellow\",\n      \"parameters\": [\n        {\n          \"name\": \"highlight_words\",\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          },\n          \"description\": \"Words to highlight casually\",\n          \"required\": true\n        }\n      ]\n    }\n  ],\n  \"compatibility\": {\n    \"models\": [\"all\"],\n    \"decorators\": {\n      \"compatible\": [\"all\"],\n      \"incompatible\": []\n    }\n  }\n}\n</code></pre>"},{"location":"tutorials/extension_development/#step-2-register-your-decorator","title":"Step 2: Register Your Decorator","text":"<p>Now, let's create a module to register our decorator with the registry system:</p> <pre><code># extensions_loader.py\nfrom prompt_decorators.registry import DecoratorRegistry\nfrom color_highlight import ColorHighlight\nimport os\nimport json\n\ndef register_extensions(registry: DecoratorRegistry) -&gt; None:\n    \"\"\"Register extensions with the decorator registry.\n\n    Args:\n        registry: The decorator registry instance\n    \"\"\"\n    # Register the ColorHighlight decorator\n    registry.register_decorator_class(ColorHighlight)\n\n    # Load registry metadata from JSON\n    current_dir = os.path.dirname(os.path.abspath(__file__))\n    json_path = os.path.join(current_dir, \"registry_extensions\", \"color_highlight.json\")\n\n    with open(json_path, 'r') as f:\n        metadata = json.load(f)\n\n    # Update registry with metadata\n    registry.update_decorator_metadata(\"ColorHighlight\", metadata)\n\n    print(f\"Registered ColorHighlight decorator with the registry\")\n</code></pre>"},{"location":"tutorials/extension_development/#step-3-use-your-decorator","title":"Step 3: Use Your Decorator","text":"<p>You can now use your custom decorator:</p> <pre><code>from prompt_decorators.registry import DecoratorRegistry\nfrom extensions_loader import register_extensions\n\n# Initialize the registry and register extensions\nregistry = DecoratorRegistry()\nregister_extensions(registry)\n\n# Create a decorator instance directly\nhighlight = ColorHighlight([\"important\", \"critical\"], color=\"orange\")\nresult = highlight(\"This is an important message with critical information.\")\nprint(result)\n\n# Or create it through the registry\nhighlight_factory = registry.get_decorator_factory(\"ColorHighlight\")\nhighlight_instance = highlight_factory(highlight_words=[\"warning\", \"alert\"], color=\"red\")\nresult = highlight_instance(\"This is a warning message with an alert.\")\nprint(result)\n\n# Or use a factory method\nimportant_highlight = ColorHighlight.important([\"urgent\", \"immediate attention\"])\nresult = important_highlight(\"This requires urgent action and immediate attention.\")\nprint(result)\n</code></pre>"},{"location":"tutorials/extension_development/#testing-your-extension","title":"Testing Your Extension","text":"<p>Testing is crucial for ensuring your decorator works correctly. Let's create a basic test file:</p> <pre><code># test_color_highlight.py\nimport pytest\nfrom color_highlight import ColorHighlight\n\ndef test_basic_highlighting():\n    \"\"\"Test basic word highlighting functionality.\"\"\"\n    highlighter = ColorHighlight([\"important\", \"critical\"], color=\"yellow\")\n    result = highlighter(\"This is an important message with critical information.\")\n    expected = \"This is an &lt;span style='background-color: yellow'&gt;important&lt;/span&gt; message with &lt;span style='background-color: yellow'&gt;critical&lt;/span&gt; information.\"\n    assert result == expected\n\ndef test_case_sensitivity():\n    \"\"\"Test case sensitivity settings.\"\"\"\n    # Case sensitive\n    highlighter = ColorHighlight([\"Important\"], color=\"yellow\", case_sensitive=True)\n    result = highlighter(\"This is an Important message, not important.\")\n    expected = \"This is an &lt;span style='background-color: yellow'&gt;Important&lt;/span&gt; message, not important.\"\n    assert result == expected\n\n    # Case insensitive\n    highlighter = ColorHighlight([\"Important\"], color=\"yellow\", case_sensitive=False)\n    result = highlighter(\"This is an Important message, also important.\")\n    expected = \"This is an &lt;span style='background-color: yellow'&gt;Important&lt;/span&gt; message, also &lt;span style='background-color: yellow'&gt;important&lt;/span&gt;.\"\n    assert result == expected\n\ndef test_factory_methods():\n    \"\"\"Test factory methods.\"\"\"\n    # Important factory\n    highlighter = ColorHighlight.important([\"warning\"])\n    result = highlighter(\"This is a warning message.\")\n    expected = \"This is a &lt;span style='background-color: red'&gt;warning&lt;/span&gt; message.\"\n    assert result == expected\n\n    # Casual factory\n    highlighter = ColorHighlight.casual([\"note\"])\n    result = highlighter(\"Please note this information.\")\n    expected = \"Please &lt;span style='background-color: lightyellow'&gt;note&lt;/span&gt; this information.\"\n    assert result == expected\n\ndef test_method_chaining():\n    \"\"\"Test method chaining API.\"\"\"\n    highlighter = ColorHighlight([\"initial\"])\n    result = (highlighter\n               .add_highlight_word(\"added\")\n               .change_color(\"green\")\n               .toggle_case_sensitivity()\n               (\"This has an initial word and an ADDED emphasis.\"))\n\n    # With case sensitivity toggled to True\n    expected = \"This has an &lt;span style='background-color: green'&gt;initial&lt;/span&gt; word and an &lt;span style='background-color: green'&gt;added&lt;/span&gt; emphasis.\"\n    assert result == expected\n</code></pre> <p>Run the tests with pytest:</p> <pre><code>pytest test_color_highlight.py -v\n</code></pre>"},{"location":"tutorials/extension_development/#extension-distribution","title":"Extension Distribution","text":"<p>You can distribute your extension in several ways:</p>"},{"location":"tutorials/extension_development/#option-1-stand-alone-package","title":"Option 1: Stand-alone Package","text":"<p>Create a separate Python package:</p> <pre><code>color-highlight-extension/\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 setup.py\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 color_highlight/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 extension.py\n\u2502   \u2514\u2500\u2500 registry_extensions/\n\u2502       \u2514\u2500\u2500 color_highlight.json\n\u2514\u2500\u2500 tests/\n    \u2514\u2500\u2500 test_color_highlight.py\n</code></pre>"},{"location":"tutorials/extension_development/#option-2-contribution-to-main-repository","title":"Option 2: Contribution to Main Repository","text":"<ol> <li>Fork the Prompt Decorators repository</li> <li>Add your extension to the appropriate directories</li> <li>Submit a pull request with your changes</li> </ol>"},{"location":"tutorials/extension_development/#option-3-local-extension","title":"Option 3: Local Extension","text":"<p>For personal use, simply use your extension code directly in your project.</p>"},{"location":"tutorials/extension_development/#advanced-extension-techniques","title":"Advanced Extension Techniques","text":""},{"location":"tutorials/extension_development/#extending-core-functionality","title":"Extending Core Functionality","text":"<p>You can extend core classes for more complex integrations:</p> <pre><code>from prompt_decorators.base import BaseDecorator\nfrom prompt_decorators.registry import DecoratorRegistry\nfrom typing import Any, Dict, Optional, Type\n\nclass ExtendedRegistry(DecoratorRegistry):\n    \"\"\"Extended registry with additional features.\"\"\"\n\n    def register_with_dependencies(\n        self,\n        decorator_class: Type[BaseDecorator],\n        dependencies: Dict[str, Any]\n    ) -&gt; None:\n        \"\"\"Register a decorator with its dependencies.\n\n        Args:\n            decorator_class: The decorator class to register\n            dependencies: Dependencies required by the decorator\n        \"\"\"\n        self.register_decorator_class(decorator_class)\n        # Store dependencies for later use\n        self._dependencies[decorator_class.__name__] = dependencies\n\n    def get_decorator_with_dependencies(\n        self,\n        decorator_name: str\n    ) -&gt; Optional[BaseDecorator]:\n        \"\"\"Get a decorator instance with its dependencies injected.\n\n        Args:\n            decorator_name: Name of the decorator to get\n\n        Returns:\n            Decorator instance with dependencies or None if not found\n        \"\"\"\n        factory = self.get_decorator_factory(decorator_name)\n        if not factory:\n            return None\n\n        dependencies = self._dependencies.get(decorator_name, {})\n        return factory(**dependencies)\n</code></pre>"},{"location":"tutorials/extension_development/#creating-component-decorators","title":"Creating Component Decorators","text":"<p>For complex extensions, break functionality into smaller components:</p> <pre><code>class MarkerComponent:\n    \"\"\"Component for marking text.\"\"\"\n\n    def mark_text(self, text, marker, pattern):\n        # Implementation\n        pass\n\nclass HighlightComponent:\n    \"\"\"Component for highlighting text.\"\"\"\n\n    def highlight_text(self, text, color):\n        # Implementation\n        pass\n\nclass AdvancedHighlighter(BaseDecorator, MarkerComponent, HighlightComponent):\n    \"\"\"Advanced highlighter using composition of components.\"\"\"\n\n    def __call__(self, text):\n        # Use components to implement functionality\n        marked_text = self.mark_text(text, marker=\"*\", pattern=self.pattern)\n        highlighted_text = self.highlight_text(marked_text, color=self.color)\n        return highlighted_text\n</code></pre>"},{"location":"tutorials/extension_development/#creating-domain-specific-extensions","title":"Creating Domain-Specific Extensions","text":"<p>For detailed information on creating domain-specific extensions, please refer to our Domain-Specific Extensions Guide.</p>"},{"location":"tutorials/extension_development/#best-practices","title":"Best Practices","text":"<p>When developing extensions, follow these best practices:</p> <ol> <li>Follow the Core Design Principles</li> <li>Your extension should be composable with other decorators</li> <li>Maintain immutability of input text</li> <li> <p>Provide clear documentation</p> </li> <li> <p>Parameter Handling</p> </li> <li>Validate parameters in <code>__init__</code></li> <li>Provide sensible defaults</li> <li> <p>Use type annotations</p> </li> <li> <p>Testing</p> </li> <li>Test edge cases (empty strings, long text, etc.)</li> <li>Test composition with other decorators</li> <li> <p>Test factory methods</p> </li> <li> <p>Registry Integration</p> </li> <li>Provide complete and accurate JSON metadata</li> <li>Include examples in the registry JSON</li> <li> <p>Specify compatibility with other decorators</p> </li> <li> <p>Code Quality</p> </li> <li>Follow PEP 8 standards</li> <li>Document your code with docstrings</li> <li>Handle errors gracefully</li> </ol>"},{"location":"tutorials/extension_development/#troubleshooting","title":"Troubleshooting","text":"<p>Common issues and solutions:</p>"},{"location":"tutorials/extension_development/#decorator-not-found-in-registry","title":"Decorator Not Found in Registry","text":"<p>Problem: Your decorator isn't available in the registry after registration.</p> <p>Solution: - Ensure you've called <code>register_decorator_class</code> with the correct class - Check that the class name matches the name in your JSON metadata - Verify that your registration code is being executed</p>"},{"location":"tutorials/extension_development/#unexpected-behavior-when-composing-decorators","title":"Unexpected Behavior When Composing Decorators","text":"<p>Problem: Your decorator doesn't work well when combined with others.</p> <p>Solution: - Ensure your decorator preserves the structure expected by other decorators - Test with common decorators to identify compatibility issues - Update your compatibility matrix in the registry JSON</p>"},{"location":"tutorials/extension_development/#extension-not-working-with-specific-llms","title":"Extension Not Working with Specific LLMs","text":"<p>Problem: Your extension works with some LLMs but not others.</p> <p>Solution: - Check if the LLM has specific formatting requirements - Add LLM-specific logic to handle different API formats - Document compatibility limitations in your metadata</p>"},{"location":"tutorials/extension_development/#additional-resources","title":"Additional Resources","text":"<ul> <li>Creating Custom Decorators</li> <li>API Reference</li> <li>Contributing Guidelines</li> </ul>"},{"location":"tutorials/extension_development/#conclusion","title":"Conclusion","text":"<p>You've now learned how to create custom extensions for the Prompt Decorators framework. By following this tutorial, you can develop decorators that meet your specific needs, integrate them with the registry system, and distribute them to the community.</p> <p>Remember that the power of the Prompt Decorators framework comes from its extensibility and composability. Your contributions can help expand the ecosystem and provide valuable tools for other developers.</p>"},{"location":"tutorials/extension_development/#next-steps","title":"Next Steps","text":"<p>Now that you've learned how to create and distribute extensions for Prompt Decorators, you might want to explore:</p> <ul> <li>Creating more complex decorators</li> <li>Developing domain-specific extensions</li> <li>Integrating with specific LLM APIs</li> <li>Contributing to the Prompt Decorators project</li> </ul> <p>Happy decorating!</p>"}]}