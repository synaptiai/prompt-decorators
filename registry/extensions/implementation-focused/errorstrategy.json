{
  "decoratorName": "ErrorStrategy",
  "version": "1.0.0",
  "description": "Guides how errors and exceptions should be handled in the implementation.",
  "author": {
    "name": "Prompt Decorators Working Group",
    "email": "promptdecoratorspec@synapti.ai",
    "url": "https://synapti.ai"
  },
  "parameters": [
    {
      "name": "approach",
      "type": "enum",
      "description": "Error handling philosophy",
      "enum": [
        "defensive",
        "fail-fast",
        "return-result",
        "exceptions",
        "monadic"
      ],
      "default": "language-standard",
      "required": false
    },
    {
      "name": "detail",
      "type": "enum",
      "description": "Error detail level",
      "enum": [
        "minimal",
        "standard",
        "detailed",
        "debug"
      ],
      "default": "standard",
      "required": false
    },
    {
      "name": "recovery",
      "type": "enum",
      "description": "Error recovery approach",
      "enum": [
        "none",
        "retry",
        "fallback",
        "circuit-breaker"
      ],
      "default": "none",
      "required": false
    }
  ],
  "transformationTemplate": {
    "instruction": "Implement error handling with the following strategy:",
    "parameterMapping": {
      "approach": {
        "valueMap": {
          "defensive": "Use defensive programming techniques to prevent errors from occurring.",
          "fail-fast": "Fail immediately when errors are detected to prevent cascading failures.",
          "return-result": "Use a Result/Either pattern to explicitly handle success and error cases.",
          "exceptions": "Use exception handling mechanisms for error management.",
          "monadic": "Apply monadic error handling patterns for functional composition."
        }
      },
      "detail": {
        "valueMap": {
          "minimal": "Provide minimal error information, focusing on essential details only.",
          "standard": "Include standard error information with type, message, and basic context.",
          "detailed": "Provide detailed error information including context, cause, and potential solutions.",
          "debug": "Include comprehensive debug information with stack traces and internal state."
        }
      },
      "recovery": {
        "valueMap": {
          "none": "Do not implement automatic recovery mechanisms.",
          "retry": "Implement retry logic for transient failures.",
          "fallback": "Provide fallback mechanisms when primary operations fail.",
          "circuit-breaker": "Implement circuit breaker pattern to prevent cascading failures."
        }
      }
    },
    "placement": "prepend",
    "compositionBehavior": "override"
  },
  "implementationGuidance": {
    "examples": [
      {
        "context": "Java backend service",
        "originalPrompt": "Implement a file processing service.",
        "transformedPrompt": "Implement error handling with the following strategy:\nUse a Result/Either pattern to explicitly handle success and error cases.\nProvide detailed error information including context, cause, and potential solutions.\nImplement retry logic for transient failures.\n\nImplement a file processing service.",
        "notes": "For Java, consider using libraries like Vavr for Result types or Spring Retry for retry mechanisms."
      },
      {
        "context": "JavaScript frontend",
        "originalPrompt": "Create a data fetching component.",
        "transformedPrompt": "Implement error handling with the following strategy:\nUse exception handling mechanisms for error management.\nInclude standard error information with type, message, and basic context.\nDo not implement automatic recovery mechanisms.\n\nCreate a data fetching component.",
        "notes": "In JavaScript, consider using try/catch with async/await or Promise.catch() for handling asynchronous errors."
      }
    ],
    "compatibilityNotes": [
      {
        "decorator": "Performance",
        "relationship": "enhances",
        "notes": "ErrorStrategy can enhance Performance by specifying efficient error handling approaches."
      },
      {
        "decorator": "Logging",
        "relationship": "enhances",
        "notes": "ErrorStrategy works well with Logging to ensure errors are properly recorded."
      }
    ],
    "modelSpecificImplementations": {
      "gpt-4-turbo": {
        "instruction": "Implement error handling using the following approach:",
        "notes": "May need more explicit guidance on specific error handling patterns."
      },
      "gpt-4o": {
        "instruction": "Implement error handling with the following strategy:",
        "notes": "Can handle more nuanced error handling approaches like monadic patterns."
      }
    }
  },
  "examples": [
    {
      "description": "File processing service with result pattern and retry logic",
      "usage": "+++ErrorStrategy(approach=return-result, detail=detailed, recovery=retry)\nImplement a file processing service that uses the Result pattern for error handling and includes retry logic for transient errors.",
      "result": "A file processing service implementation that uses a Result/Either pattern to handle errors, provides detailed error information, and implements retry logic for transient failures like network issues."
    },
    {
      "description": "Web API with fail-fast approach",
      "usage": "+++ErrorStrategy(approach=fail-fast, detail=standard)\nCreate a REST API endpoint for user registration.",
      "result": "A REST API implementation that validates inputs early and fails immediately with standard error messages when invalid data is detected."
    },
    {
      "description": "Database service with circuit breaker pattern",
      "usage": "+++ErrorStrategy(approach=exceptions, recovery=circuit-breaker)\nImplement a database access service.",
      "result": "A database service that uses exceptions for error handling and implements a circuit breaker pattern to prevent cascading failures during database outages."
    }
  ],
  "compatibility": {
    "requires": [],
    "conflicts": [],
    "minStandardVersion": "1.0.0",
    "maxStandardVersion": "2.0.0",
    "models": [
      "gpt-4-turbo",
      "gpt-4o",
      "claude-3-7-sonnet-latest",
      "llama-3.2"
    ]
  }
}
