{
  "decoratorName": "TypeDefinition",
  "version": "1.0.0",
  "description": "Generates type definitions for improved code safety and documentation.",
  "author": {
    "name": "Prompt Decorators Working Group",
    "email": "promptdecoratorspec@synapti.ai",
    "url": "https://synapti.ai"
  },
  "parameters": [
    {
      "name": "system",
      "type": "enum",
      "description": "Type system or annotation format",
      "enum": [
        "typescript",
        "flow",
        "jsdoc",
        "python-typing",
        "java-generics"
      ],
      "default": "language-appropriate",
      "required": false
    },
    {
      "name": "strictness",
      "type": "enum",
      "description": "Level of type enforcement",
      "enum": [
        "loose",
        "moderate",
        "strict"
      ],
      "default": "moderate",
      "required": false
    },
    {
      "name": "style",
      "type": "enum",
      "description": "Type definition pattern",
      "enum": [
        "inline",
        "declaration-file",
        "interface-based",
        "type-alias",
        "generics"
      ],
      "default": "language-convention",
      "required": false
    }
  ],
  "transformationTemplate": {
    "instruction": "Generate type definitions for the code according to the specified parameters. Focus on creating clear, well-structured types that enhance code safety and documentation.",
    "parameterMapping": {
      "system": {
        "valueMap": {
          "typescript": "Use TypeScript's static type system with interfaces, type aliases, and generics as appropriate.",
          "flow": "Apply Flow type annotations with appropriate syntax and features.",
          "jsdoc": "Create JSDoc comments with type annotations for JavaScript code.",
          "python-typing": "Implement Python's typing module annotations for type hints.",
          "java-generics": "Use Java's generic type system with appropriate class and interface definitions."
        }
      },
      "strictness": {
        "valueMap": {
          "loose": "Allow some type flexibility and implicit conversions where reasonable.",
          "moderate": "Balance type safety with pragmatic flexibility, using union types where appropriate.",
          "strict": "Enforce rigorous type checking with no implicit conversions and exhaustive type coverage."
        }
      },
      "style": {
        "valueMap": {
          "inline": "Define types directly within the code as inline annotations.",
          "declaration-file": "Create separate declaration files for type definitions.",
          "interface-based": "Prefer interfaces over other type constructs when possible.",
          "type-alias": "Use type aliases as the primary means of type definition.",
          "generics": "Leverage generic types extensively for maximum reusability."
        }
      }
    },
    "placement": "prepend",
    "compositionBehavior": "accumulate"
  },
  "implementationGuidance": {
    "examples": [
      {
        "context": "TypeScript e-commerce application",
        "originalPrompt": "Define types for an e-commerce application's product catalog and shopping cart.",
        "transformedPrompt": "Generate type definitions for the code according to the specified parameters. Focus on creating clear, well-structured types that enhance code safety and documentation. Use TypeScript's static type system with interfaces, type aliases, and generics as appropriate. Enforce rigorous type checking with no implicit conversions and exhaustive type coverage. Prefer interfaces over other type constructs when possible.\n\nDefine types for an e-commerce application's product catalog and shopping cart.",
        "notes": "The decorator adds specific instructions for TypeScript with strict type checking and interface-based style."
      }
    ],
    "compatibilityNotes": [
      {
        "decorator": "CodeGeneration",
        "relationship": "enhances",
        "notes": "TypeDefinition enhances CodeGeneration by adding strong typing to generated code."
      },
      {
        "decorator": "Documentation",
        "relationship": "enhances",
        "notes": "Type definitions serve as implicit documentation for code structure."
      }
    ],
    "modelSpecificImplementations": {
      "gpt-4o": {
        "instruction": "Generate comprehensive type definitions for the code according to the specified parameters. Focus on creating clear, well-structured types that enhance code safety and documentation. Consider edge cases and ensure type definitions are complete and accurate.",
        "notes": "gpt-4o has stronger capabilities for understanding complex type systems and can handle more nuanced type definitions."
      }
    }
  },
  "examples": [
    {
      "description": "TypeScript interface-based type definitions for an e-commerce application",
      "usage": "+++TypeDefinition(system=typescript, strictness=strict, style=interface-based)\nDefine types for an e-commerce application's product catalog and shopping cart.",
      "result": "The model will generate TypeScript interfaces with strict type checking for product catalog and shopping cart functionality."
    },
    {
      "description": "Python type annotations for a data processing pipeline",
      "usage": "+++TypeDefinition(system=python-typing, strictness=moderate)\nCreate a data processing pipeline that handles CSV files and outputs JSON.",
      "result": "The model will generate Python code with appropriate type annotations from the typing module, with a moderate level of strictness."
    }
  ],
  "compatibility": {
    "requires": [],
    "conflicts": [],
    "minStandardVersion": "1.0.0",
    "maxStandardVersion": "2.0.0",
    "models": [
      "gpt-4-turbo",
      "gpt-4o",
      "claude-3-7-sonnet-latest",
      "gemini-pro"
    ]
  }
}
