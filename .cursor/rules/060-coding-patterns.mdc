---
description: FOLLOW coding patterns WHEN writing code TO maintain codebase quality
globs: **/*.py
---

# Coding Pattern Preferences

<version>1.0.0</version>

## Context
- When writing new code or modifying existing code
- When implementing features or fixing bugs
- When refactoring or optimizing code

## Requirements
- Prefer simple solutions over complex ones
- Avoid code duplication by checking for similar functionality elsewhere in the codebase
- Ensure code complies with pre-commit requirements
- Only make changes that are explicitly requested or well understood
- Exhaust all options within existing implementation before introducing new patterns
- Remove old implementations when introducing new ones to avoid duplicate logic
- Keep codebase clean and organized
- Avoid writing scripts in files, especially for one-time operations
- Refactor files exceeding 200-300 lines of code
- Use mocking data only for tests, never for dev or prod environments
- Never add stubbing or fake data patterns affecting dev or prod environments
- Never overwrite env files without explicit confirmation

## Examples

<example>
# Good: Simple solution with no duplication
def calculate_total(items):
    """Calculate total price of items using existing utility function."""
    from utils.pricing import apply_discount

    base_total = sum(item.price for item in items)
    return apply_discount(base_total)  # Reusing existing functionality
</example>

<example type="invalid">
# Bad: Duplicating existing functionality
def calculate_total(items):
    """Calculate total with duplicated discount logic."""
    base_total = sum(item.price for item in items)

    # Reimplementing discount logic that already exists in utils.pricing
    if base_total > 100:
        return base_total * 0.9
    else:
        return base_total
</example>
