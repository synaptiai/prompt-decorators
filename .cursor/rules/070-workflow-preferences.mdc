---
description: MAINTAIN development discipline WHEN implementing changes TO preserve codebase integrity
globs: **/*.py
---

# Coding Workflow Preferences

<version>1.0.0</version>

## Context
- When implementing new features
- When fixing bugs or addressing issues
- When refactoring or improving existing code
- When reviewing code changes

## Requirements
- Focus exclusively on code areas relevant to the current task
- Do not modify code unrelated to the assigned task
- Write thorough tests for all major functionality
- Preserve existing architectural patterns unless explicitly instructed otherwise
- Analyze potential impacts of changes on other methods and code areas
- Consider side effects before implementing changes
- Maintain backward compatibility when possible
- Document significant architectural decisions

## Examples

<example>
# Good: Focused change with proper testing
# Task: Fix validation in user registration

# 1. Only modify the relevant validation function
def validate_user_input(user_data):
    """Validate user registration data with fixed email validation."""
    if not is_valid_email(user_data.get('email')):
        raise ValidationError("Invalid email format")
    # Other existing validation logic...

# 2. Add thorough tests for the fix
def test_validate_user_input_with_invalid_email():
    """Test that invalid emails are properly rejected."""
    with pytest.raises(ValidationError):
        validate_user_input({'email': 'invalid-email'})

def test_validate_user_input_with_valid_email():
    """Test that valid emails pass validation."""
    result = validate_user_input({'email': 'user@example.com'})
    assert result is True
</example>

<example type="invalid">
# Bad: Unfocused changes beyond task scope
# Task: Fix validation in user registration

# 1. Modifying unrelated authentication system
def authenticate_user(username, password):
    """Authenticate user with new token-based system."""
    # Completely rewriting authentication when task was only about validation
    token = generate_jwt_token(username, password)
    return {'authenticated': True, 'token': token}

# 2. Changing database schema without tests
def update_user_schema():
    """Update user table with new fields."""
    # Adding schema changes unrelated to the validation fix
    db.execute("ALTER TABLE users ADD COLUMN last_login TIMESTAMP")
</example>
