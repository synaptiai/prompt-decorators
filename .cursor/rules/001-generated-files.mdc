---
description: MODIFY generator code when issues occur in generated files to ENSURE standards compliance
globs: prompt_decorators/**/*.py, tests/**/*.py
---

# Generated Files Management

<version>1.1.0</version>

## Context
- When working with files that are generated automatically by the codebase
- When encountering issues in generated Python modules or tests
- When making changes to the prompt decorator system
- When updating code generation templates

## Requirements
- NEVER edit generated Python files or tests directly, even to fix bugs
- ALWAYS modify the code generators instead of the generated files
- ENSURE all generated files pass docstring and linting requirements
- VERIFY generated Python files and tests produce a fully working module
- MAINTAIN type safety throughout the generated codebase
- TEST generator changes by running the generation process and validating output
- VALIDATE generated code against all pre-commit hooks before committing
- FOLLOW Google-style docstring format in all templates and generators

## Docstring Requirements
- Args sections must describe parameters with proper indentation
- Never use "None" as an argument description
- Each parameter must have a descriptive explanation
- Returns sections must describe return values
- Raises sections must document exceptions that may be raised
- Maintain consistent indentation in docstring blocks

## Examples

<example>
# Good practice
# Issue: Generated docstrings have malformed Args sections
# Solution: Fix the template's docstring format

# In prompt_decorators/generator/templates/method.py.jinja2
def method_name(self, param1: str, param2: Optional[int] = None) -> bool:
    """Method description.

    Args:
        param1: Description of param1
        param2: Description of param2, if not provided defaults to None

    Returns:
        True if successful, False otherwise

    Raises:
        ValueError: If param1 is empty
    """
    # Implementation
</example>


<example type="invalid">
# Bad practice
# Issue: Generated docstrings have malformed Args sections
# Solution: Directly editing the generated files

# Directly modifying prompt_decorators/decorators/generated/my_decorator.py
def method_name(self, param1: str, param2: Optional[int] = None) -> bool:
    """Method description.

    Args:
        param1: Description of param1
        param2: None  # This is incorrect!

    Returns:
        True if successful, False otherwise
    """
    # Implementation
</example>

## Additional Guidelines
- Use proper type annotations in generator templates
- Follow standard docstring format in templates
- Ensure generator code validates output against MyPy
- Include appropriate tests for the generator code itself
- Document the generation process clearly for other developers
- Run pre-commit checks on generated code during the generation process
- Add validation steps in the generation scripts to catch common issues
